var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x2) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x2, {
  get: (a2, b2) => (typeof require !== "undefined" ? require : a2)[b2]
}) : x2)(function(x2) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x2 + '" is not supported');
});
var __commonJS = (cb2, mod) => function __require2() {
  return mod || (0, cb2[__getOwnPropNames(cb2)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key2 of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key2) && key2 !== except)
        __defProp(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/.pnpm/concat-map@0.0.1/node_modules/concat-map/index.js
var require_concat_map = __commonJS({
  "node_modules/.pnpm/concat-map@0.0.1/node_modules/concat-map/index.js"(exports2, module2) {
    module2.exports = function(xs, fn2) {
      var res = [];
      for (var i3 = 0; i3 < xs.length; i3++) {
        var x2 = fn2(xs[i3], i3);
        if (isArray(x2))
          res.push.apply(res, x2);
        else
          res.push(x2);
      }
      return res;
    };
    var isArray = Array.isArray || function(xs) {
      return Object.prototype.toString.call(xs) === "[object Array]";
    };
  }
});

// node_modules/.pnpm/balanced-match@1.0.2/node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({
  "node_modules/.pnpm/balanced-match@1.0.2/node_modules/balanced-match/index.js"(exports2, module2) {
    "use strict";
    module2.exports = balanced;
    function balanced(a2, b2, str) {
      if (a2 instanceof RegExp)
        a2 = maybeMatch(a2, str);
      if (b2 instanceof RegExp)
        b2 = maybeMatch(b2, str);
      var r2 = range(a2, b2, str);
      return r2 && {
        start: r2[0],
        end: r2[1],
        pre: str.slice(0, r2[0]),
        body: str.slice(r2[0] + a2.length, r2[1]),
        post: str.slice(r2[1] + b2.length)
      };
    }
    function maybeMatch(reg, str) {
      var m2 = str.match(reg);
      return m2 ? m2[0] : null;
    }
    balanced.range = range;
    function range(a2, b2, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a2);
      var bi = str.indexOf(b2, ai + 1);
      var i3 = ai;
      if (ai >= 0 && bi > 0) {
        if (a2 === b2) {
          return [ai, bi];
        }
        begs = [];
        left = str.length;
        while (i3 >= 0 && !result) {
          if (i3 == ai) {
            begs.push(i3);
            ai = str.indexOf(a2, i3 + 1);
          } else if (begs.length == 1) {
            result = [begs.pop(), bi];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi;
            }
            bi = str.indexOf(b2, i3 + 1);
          }
          i3 = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) {
          result = [left, right];
        }
      }
      return result;
    }
  }
});

// node_modules/.pnpm/brace-expansion@1.1.11/node_modules/brace-expansion/index.js
var require_brace_expansion = __commonJS({
  "node_modules/.pnpm/brace-expansion@1.1.11/node_modules/brace-expansion/index.js"(exports2, module2) {
    var concatMap = require_concat_map();
    var balanced = require_balanced_match();
    module2.exports = expandTop;
    var escSlash = "\0SLASH" + Math.random() + "\0";
    var escOpen = "\0OPEN" + Math.random() + "\0";
    var escClose = "\0CLOSE" + Math.random() + "\0";
    var escComma = "\0COMMA" + Math.random() + "\0";
    var escPeriod = "\0PERIOD" + Math.random() + "\0";
    function numeric(str) {
      return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
    }
    function escapeBraces(str) {
      return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
    }
    function unescapeBraces(str) {
      return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
    }
    function parseCommaParts(str) {
      if (!str)
        return [""];
      var parts = [];
      var m2 = balanced("{", "}", str);
      if (!m2)
        return str.split(",");
      var pre = m2.pre;
      var body = m2.body;
      var post = m2.post;
      var p2 = pre.split(",");
      p2[p2.length - 1] += "{" + body + "}";
      var postParts = parseCommaParts(post);
      if (post.length) {
        p2[p2.length - 1] += postParts.shift();
        p2.push.apply(p2, postParts);
      }
      parts.push.apply(parts, p2);
      return parts;
    }
    function expandTop(str) {
      if (!str)
        return [];
      if (str.substr(0, 2) === "{}") {
        str = "\\{\\}" + str.substr(2);
      }
      return expand(escapeBraces(str), true).map(unescapeBraces);
    }
    function embrace(str) {
      return "{" + str + "}";
    }
    function isPadded(el) {
      return /^-?0\d/.test(el);
    }
    function lte(i3, y2) {
      return i3 <= y2;
    }
    function gte(i3, y2) {
      return i3 >= y2;
    }
    function expand(str, isTop) {
      var expansions = [];
      var m2 = balanced("{", "}", str);
      if (!m2 || /\$$/.test(m2.pre))
        return [str];
      var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m2.body);
      var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m2.body);
      var isSequence = isNumericSequence || isAlphaSequence;
      var isOptions = m2.body.indexOf(",") >= 0;
      if (!isSequence && !isOptions) {
        if (m2.post.match(/,.*\}/)) {
          str = m2.pre + "{" + m2.body + escClose + m2.post;
          return expand(str);
        }
        return [str];
      }
      var n2;
      if (isSequence) {
        n2 = m2.body.split(/\.\./);
      } else {
        n2 = parseCommaParts(m2.body);
        if (n2.length === 1) {
          n2 = expand(n2[0], false).map(embrace);
          if (n2.length === 1) {
            var post = m2.post.length ? expand(m2.post, false) : [""];
            return post.map(function(p2) {
              return m2.pre + n2[0] + p2;
            });
          }
        }
      }
      var pre = m2.pre;
      var post = m2.post.length ? expand(m2.post, false) : [""];
      var N;
      if (isSequence) {
        var x2 = numeric(n2[0]);
        var y2 = numeric(n2[1]);
        var width = Math.max(n2[0].length, n2[1].length);
        var incr = n2.length == 3 ? Math.abs(numeric(n2[2])) : 1;
        var test = lte;
        var reverse = y2 < x2;
        if (reverse) {
          incr *= -1;
          test = gte;
        }
        var pad = n2.some(isPadded);
        N = [];
        for (var i3 = x2; test(i3, y2); i3 += incr) {
          var c2;
          if (isAlphaSequence) {
            c2 = String.fromCharCode(i3);
            if (c2 === "\\")
              c2 = "";
          } else {
            c2 = String(i3);
            if (pad) {
              var need = width - c2.length;
              if (need > 0) {
                var z2 = new Array(need + 1).join("0");
                if (i3 < 0)
                  c2 = "-" + z2 + c2.slice(1);
                else
                  c2 = z2 + c2;
              }
            }
          }
          N.push(c2);
        }
      } else {
        N = concatMap(n2, function(el) {
          return expand(el, false);
        });
      }
      for (var j2 = 0; j2 < N.length; j2++) {
        for (var k2 = 0; k2 < post.length; k2++) {
          var expansion = pre + N[j2] + post[k2];
          if (!isTop || isSequence || expansion)
            expansions.push(expansion);
        }
      }
      return expansions;
    }
  }
});

// node_modules/.pnpm/minimatch@3.1.2/node_modules/minimatch/minimatch.js
var require_minimatch = __commonJS({
  "node_modules/.pnpm/minimatch@3.1.2/node_modules/minimatch/minimatch.js"(exports2, module2) {
    module2.exports = minimatch2;
    minimatch2.Minimatch = Minimatch;
    var path = function() {
      try {
        return __require("path");
      } catch (e) {
      }
    }() || {
      sep: "/"
    };
    minimatch2.sep = path.sep;
    var GLOBSTAR = minimatch2.GLOBSTAR = Minimatch.GLOBSTAR = {};
    var expand = require_brace_expansion();
    var plTypes = {
      "!": { open: "(?:(?!(?:", close: "))[^/]*?)" },
      "?": { open: "(?:", close: ")?" },
      "+": { open: "(?:", close: ")+" },
      "*": { open: "(?:", close: ")*" },
      "@": { open: "(?:", close: ")" }
    };
    var qmark = "[^/]";
    var star = qmark + "*?";
    var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
    var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
    var reSpecials = charSet("().*{}+?[]^$\\!");
    function charSet(s2) {
      return s2.split("").reduce(function(set, c2) {
        set[c2] = true;
        return set;
      }, {});
    }
    var slashSplit = /\/+/;
    minimatch2.filter = filter;
    function filter(pattern, options) {
      options = options || {};
      return function(p2, i3, list) {
        return minimatch2(p2, pattern, options);
      };
    }
    function ext(a2, b2) {
      b2 = b2 || {};
      var t2 = {};
      Object.keys(a2).forEach(function(k2) {
        t2[k2] = a2[k2];
      });
      Object.keys(b2).forEach(function(k2) {
        t2[k2] = b2[k2];
      });
      return t2;
    }
    minimatch2.defaults = function(def) {
      if (!def || typeof def !== "object" || !Object.keys(def).length) {
        return minimatch2;
      }
      var orig = minimatch2;
      var m2 = function minimatch3(p2, pattern, options) {
        return orig(p2, pattern, ext(def, options));
      };
      m2.Minimatch = function Minimatch2(pattern, options) {
        return new orig.Minimatch(pattern, ext(def, options));
      };
      m2.Minimatch.defaults = function defaults(options) {
        return orig.defaults(ext(def, options)).Minimatch;
      };
      m2.filter = function filter2(pattern, options) {
        return orig.filter(pattern, ext(def, options));
      };
      m2.defaults = function defaults(options) {
        return orig.defaults(ext(def, options));
      };
      m2.makeRe = function makeRe2(pattern, options) {
        return orig.makeRe(pattern, ext(def, options));
      };
      m2.braceExpand = function braceExpand2(pattern, options) {
        return orig.braceExpand(pattern, ext(def, options));
      };
      m2.match = function(list, pattern, options) {
        return orig.match(list, pattern, ext(def, options));
      };
      return m2;
    };
    Minimatch.defaults = function(def) {
      return minimatch2.defaults(def).Minimatch;
    };
    function minimatch2(p2, pattern, options) {
      assertValidPattern(pattern);
      if (!options)
        options = {};
      if (!options.nocomment && pattern.charAt(0) === "#") {
        return false;
      }
      return new Minimatch(pattern, options).match(p2);
    }
    function Minimatch(pattern, options) {
      if (!(this instanceof Minimatch)) {
        return new Minimatch(pattern, options);
      }
      assertValidPattern(pattern);
      if (!options)
        options = {};
      pattern = pattern.trim();
      if (!options.allowWindowsEscape && path.sep !== "/") {
        pattern = pattern.split(path.sep).join("/");
      }
      this.options = options;
      this.set = [];
      this.pattern = pattern;
      this.regexp = null;
      this.negate = false;
      this.comment = false;
      this.empty = false;
      this.partial = !!options.partial;
      this.make();
    }
    Minimatch.prototype.debug = function() {
    };
    Minimatch.prototype.make = make;
    function make() {
      var pattern = this.pattern;
      var options = this.options;
      if (!options.nocomment && pattern.charAt(0) === "#") {
        this.comment = true;
        return;
      }
      if (!pattern) {
        this.empty = true;
        return;
      }
      this.parseNegate();
      var set = this.globSet = this.braceExpand();
      if (options.debug)
        this.debug = function debug() {
          console.error.apply(console, arguments);
        };
      this.debug(this.pattern, set);
      set = this.globParts = set.map(function(s2) {
        return s2.split(slashSplit);
      });
      this.debug(this.pattern, set);
      set = set.map(function(s2, si, set2) {
        return s2.map(this.parse, this);
      }, this);
      this.debug(this.pattern, set);
      set = set.filter(function(s2) {
        return s2.indexOf(false) === -1;
      });
      this.debug(this.pattern, set);
      this.set = set;
    }
    Minimatch.prototype.parseNegate = parseNegate;
    function parseNegate() {
      var pattern = this.pattern;
      var negate = false;
      var options = this.options;
      var negateOffset = 0;
      if (options.nonegate)
        return;
      for (var i3 = 0, l2 = pattern.length; i3 < l2 && pattern.charAt(i3) === "!"; i3++) {
        negate = !negate;
        negateOffset++;
      }
      if (negateOffset)
        this.pattern = pattern.substr(negateOffset);
      this.negate = negate;
    }
    minimatch2.braceExpand = function(pattern, options) {
      return braceExpand(pattern, options);
    };
    Minimatch.prototype.braceExpand = braceExpand;
    function braceExpand(pattern, options) {
      if (!options) {
        if (this instanceof Minimatch) {
          options = this.options;
        } else {
          options = {};
        }
      }
      pattern = typeof pattern === "undefined" ? this.pattern : pattern;
      assertValidPattern(pattern);
      if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
        return [pattern];
      }
      return expand(pattern);
    }
    var MAX_PATTERN_LENGTH = 1024 * 64;
    var assertValidPattern = function(pattern) {
      if (typeof pattern !== "string") {
        throw new TypeError("invalid pattern");
      }
      if (pattern.length > MAX_PATTERN_LENGTH) {
        throw new TypeError("pattern is too long");
      }
    };
    Minimatch.prototype.parse = parse;
    var SUBPARSE = {};
    function parse(pattern, isSub) {
      assertValidPattern(pattern);
      var options = this.options;
      if (pattern === "**") {
        if (!options.noglobstar)
          return GLOBSTAR;
        else
          pattern = "*";
      }
      if (pattern === "")
        return "";
      var re = "";
      var hasMagic = !!options.nocase;
      var escaping = false;
      var patternListStack = [];
      var negativeLists = [];
      var stateChar;
      var inClass = false;
      var reClassStart = -1;
      var classStart = -1;
      var patternStart = pattern.charAt(0) === "." ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
      var self2 = this;
      function clearStateChar() {
        if (stateChar) {
          switch (stateChar) {
            case "*":
              re += star;
              hasMagic = true;
              break;
            case "?":
              re += qmark;
              hasMagic = true;
              break;
            default:
              re += "\\" + stateChar;
              break;
          }
          self2.debug("clearStateChar %j %j", stateChar, re);
          stateChar = false;
        }
      }
      for (var i3 = 0, len = pattern.length, c2; i3 < len && (c2 = pattern.charAt(i3)); i3++) {
        this.debug("%s	%s %s %j", pattern, i3, re, c2);
        if (escaping && reSpecials[c2]) {
          re += "\\" + c2;
          escaping = false;
          continue;
        }
        switch (c2) {
          case "/": {
            return false;
          }
          case "\\":
            clearStateChar();
            escaping = true;
            continue;
          case "?":
          case "*":
          case "+":
          case "@":
          case "!":
            this.debug("%s	%s %s %j <-- stateChar", pattern, i3, re, c2);
            if (inClass) {
              this.debug("  in class");
              if (c2 === "!" && i3 === classStart + 1)
                c2 = "^";
              re += c2;
              continue;
            }
            self2.debug("call clearStateChar %j", stateChar);
            clearStateChar();
            stateChar = c2;
            if (options.noext)
              clearStateChar();
            continue;
          case "(":
            if (inClass) {
              re += "(";
              continue;
            }
            if (!stateChar) {
              re += "\\(";
              continue;
            }
            patternListStack.push({
              type: stateChar,
              start: i3 - 1,
              reStart: re.length,
              open: plTypes[stateChar].open,
              close: plTypes[stateChar].close
            });
            re += stateChar === "!" ? "(?:(?!(?:" : "(?:";
            this.debug("plType %j %j", stateChar, re);
            stateChar = false;
            continue;
          case ")":
            if (inClass || !patternListStack.length) {
              re += "\\)";
              continue;
            }
            clearStateChar();
            hasMagic = true;
            var pl = patternListStack.pop();
            re += pl.close;
            if (pl.type === "!") {
              negativeLists.push(pl);
            }
            pl.reEnd = re.length;
            continue;
          case "|":
            if (inClass || !patternListStack.length || escaping) {
              re += "\\|";
              escaping = false;
              continue;
            }
            clearStateChar();
            re += "|";
            continue;
          case "[":
            clearStateChar();
            if (inClass) {
              re += "\\" + c2;
              continue;
            }
            inClass = true;
            classStart = i3;
            reClassStart = re.length;
            re += c2;
            continue;
          case "]":
            if (i3 === classStart + 1 || !inClass) {
              re += "\\" + c2;
              escaping = false;
              continue;
            }
            var cs = pattern.substring(classStart + 1, i3);
            try {
              RegExp("[" + cs + "]");
            } catch (er) {
              var sp = this.parse(cs, SUBPARSE);
              re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
              hasMagic = hasMagic || sp[1];
              inClass = false;
              continue;
            }
            hasMagic = true;
            inClass = false;
            re += c2;
            continue;
          default:
            clearStateChar();
            if (escaping) {
              escaping = false;
            } else if (reSpecials[c2] && !(c2 === "^" && inClass)) {
              re += "\\";
            }
            re += c2;
        }
      }
      if (inClass) {
        cs = pattern.substr(classStart + 1);
        sp = this.parse(cs, SUBPARSE);
        re = re.substr(0, reClassStart) + "\\[" + sp[0];
        hasMagic = hasMagic || sp[1];
      }
      for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
        var tail = re.slice(pl.reStart + pl.open.length);
        this.debug("setting tail", re, pl);
        tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_2, $1, $2) {
          if (!$2) {
            $2 = "\\";
          }
          return $1 + $1 + $2 + "|";
        });
        this.debug("tail=%j\n   %s", tail, tail, pl, re);
        var t2 = pl.type === "*" ? star : pl.type === "?" ? qmark : "\\" + pl.type;
        hasMagic = true;
        re = re.slice(0, pl.reStart) + t2 + "\\(" + tail;
      }
      clearStateChar();
      if (escaping) {
        re += "\\\\";
      }
      var addPatternStart = false;
      switch (re.charAt(0)) {
        case "[":
        case ".":
        case "(":
          addPatternStart = true;
      }
      for (var n2 = negativeLists.length - 1; n2 > -1; n2--) {
        var nl = negativeLists[n2];
        var nlBefore = re.slice(0, nl.reStart);
        var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
        var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
        var nlAfter = re.slice(nl.reEnd);
        nlLast += nlAfter;
        var openParensBefore = nlBefore.split("(").length - 1;
        var cleanAfter = nlAfter;
        for (i3 = 0; i3 < openParensBefore; i3++) {
          cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
        }
        nlAfter = cleanAfter;
        var dollar = "";
        if (nlAfter === "" && isSub !== SUBPARSE) {
          dollar = "$";
        }
        var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
        re = newRe;
      }
      if (re !== "" && hasMagic) {
        re = "(?=.)" + re;
      }
      if (addPatternStart) {
        re = patternStart + re;
      }
      if (isSub === SUBPARSE) {
        return [re, hasMagic];
      }
      if (!hasMagic) {
        return globUnescape(pattern);
      }
      var flags = options.nocase ? "i" : "";
      try {
        var regExp = new RegExp("^" + re + "$", flags);
      } catch (er) {
        return new RegExp("$.");
      }
      regExp._glob = pattern;
      regExp._src = re;
      return regExp;
    }
    minimatch2.makeRe = function(pattern, options) {
      return new Minimatch(pattern, options || {}).makeRe();
    };
    Minimatch.prototype.makeRe = makeRe;
    function makeRe() {
      if (this.regexp || this.regexp === false)
        return this.regexp;
      var set = this.set;
      if (!set.length) {
        this.regexp = false;
        return this.regexp;
      }
      var options = this.options;
      var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
      var flags = options.nocase ? "i" : "";
      var re = set.map(function(pattern) {
        return pattern.map(function(p2) {
          return p2 === GLOBSTAR ? twoStar : typeof p2 === "string" ? regExpEscape(p2) : p2._src;
        }).join("\\/");
      }).join("|");
      re = "^(?:" + re + ")$";
      if (this.negate)
        re = "^(?!" + re + ").*$";
      try {
        this.regexp = new RegExp(re, flags);
      } catch (ex) {
        this.regexp = false;
      }
      return this.regexp;
    }
    minimatch2.match = function(list, pattern, options) {
      options = options || {};
      var mm = new Minimatch(pattern, options);
      list = list.filter(function(f2) {
        return mm.match(f2);
      });
      if (mm.options.nonull && !list.length) {
        list.push(pattern);
      }
      return list;
    };
    Minimatch.prototype.match = function match(f2, partial) {
      if (typeof partial === "undefined")
        partial = this.partial;
      this.debug("match", f2, this.pattern);
      if (this.comment)
        return false;
      if (this.empty)
        return f2 === "";
      if (f2 === "/" && partial)
        return true;
      var options = this.options;
      if (path.sep !== "/") {
        f2 = f2.split(path.sep).join("/");
      }
      f2 = f2.split(slashSplit);
      this.debug(this.pattern, "split", f2);
      var set = this.set;
      this.debug(this.pattern, "set", set);
      var filename;
      var i3;
      for (i3 = f2.length - 1; i3 >= 0; i3--) {
        filename = f2[i3];
        if (filename)
          break;
      }
      for (i3 = 0; i3 < set.length; i3++) {
        var pattern = set[i3];
        var file = f2;
        if (options.matchBase && pattern.length === 1) {
          file = [filename];
        }
        var hit = this.matchOne(file, pattern, partial);
        if (hit) {
          if (options.flipNegate)
            return true;
          return !this.negate;
        }
      }
      if (options.flipNegate)
        return false;
      return this.negate;
    };
    Minimatch.prototype.matchOne = function(file, pattern, partial) {
      var options = this.options;
      this.debug(
        "matchOne",
        { "this": this, file, pattern }
      );
      this.debug("matchOne", file.length, pattern.length);
      for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
        this.debug("matchOne loop");
        var p2 = pattern[pi];
        var f2 = file[fi];
        this.debug(pattern, p2, f2);
        if (p2 === false)
          return false;
        if (p2 === GLOBSTAR) {
          this.debug("GLOBSTAR", [pattern, p2, f2]);
          var fr = fi;
          var pr = pi + 1;
          if (pr === pl) {
            this.debug("** at the end");
            for (; fi < fl; fi++) {
              if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".")
                return false;
            }
            return true;
          }
          while (fr < fl) {
            var swallowee = file[fr];
            this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
            if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
              this.debug("globstar found match!", fr, fl, swallowee);
              return true;
            } else {
              if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
                this.debug("dot detected!", file, fr, pattern, pr);
                break;
              }
              this.debug("globstar swallow a segment, and continue");
              fr++;
            }
          }
          if (partial) {
            this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
            if (fr === fl)
              return true;
          }
          return false;
        }
        var hit;
        if (typeof p2 === "string") {
          hit = f2 === p2;
          this.debug("string match", p2, f2, hit);
        } else {
          hit = f2.match(p2);
          this.debug("pattern match", p2, f2, hit);
        }
        if (!hit)
          return false;
      }
      if (fi === fl && pi === pl) {
        return true;
      } else if (fi === fl) {
        return partial;
      } else if (pi === pl) {
        return fi === fl - 1 && file[fi] === "";
      }
      throw new Error("wtf?");
    };
    function globUnescape(s2) {
      return s2.replace(/\\(.)/g, "$1");
    }
    function regExpEscape(s2) {
      return s2.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    }
  }
});

// node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js"(exports2, module2) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i3 = 0; i3 < 10; i3++) {
          test2["_" + String.fromCharCode(i3)] = i3;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err2) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s2 = 1; s2 < arguments.length; s2++) {
        from = Object(arguments[s2]);
        for (var key2 in from) {
          if (hasOwnProperty2.call(from, key2)) {
            to[key2] = from[key2];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i3 = 0; i3 < symbols.length; i3++) {
            if (propIsEnumerable.call(from, symbols[i3])) {
              to[symbols[i3]] = from[symbols[i3]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/.pnpm/react@17.0.2/node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS({
  "node_modules/.pnpm/react@17.0.2/node_modules/react/cjs/react.production.min.js"(exports2) {
    "use strict";
    var l2 = require_object_assign();
    var n2 = 60103;
    var p2 = 60106;
    exports2.Fragment = 60107;
    exports2.StrictMode = 60108;
    exports2.Profiler = 60114;
    var q2 = 60109;
    var r2 = 60110;
    var t2 = 60112;
    exports2.Suspense = 60113;
    var u2 = 60115;
    var v2 = 60116;
    if ("function" === typeof Symbol && Symbol.for) {
      w2 = Symbol.for;
      n2 = w2("react.element");
      p2 = w2("react.portal");
      exports2.Fragment = w2("react.fragment");
      exports2.StrictMode = w2("react.strict_mode");
      exports2.Profiler = w2("react.profiler");
      q2 = w2("react.provider");
      r2 = w2("react.context");
      t2 = w2("react.forward_ref");
      exports2.Suspense = w2("react.suspense");
      u2 = w2("react.memo");
      v2 = w2("react.lazy");
    }
    var w2;
    var x2 = "function" === typeof Symbol && Symbol.iterator;
    function y2(a2) {
      if (null === a2 || "object" !== typeof a2)
        return null;
      a2 = x2 && a2[x2] || a2["@@iterator"];
      return "function" === typeof a2 ? a2 : null;
    }
    function z2(a2) {
      for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 1; c2 < arguments.length; c2++)
        b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
      return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var A2 = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } };
    var B2 = {};
    function C2(a2, b2, c2) {
      this.props = a2;
      this.context = b2;
      this.refs = B2;
      this.updater = c2 || A2;
    }
    C2.prototype.isReactComponent = {};
    C2.prototype.setState = function(a2, b2) {
      if ("object" !== typeof a2 && "function" !== typeof a2 && null != a2)
        throw Error(z2(85));
      this.updater.enqueueSetState(this, a2, b2, "setState");
    };
    C2.prototype.forceUpdate = function(a2) {
      this.updater.enqueueForceUpdate(this, a2, "forceUpdate");
    };
    function D2() {
    }
    D2.prototype = C2.prototype;
    function E2(a2, b2, c2) {
      this.props = a2;
      this.context = b2;
      this.refs = B2;
      this.updater = c2 || A2;
    }
    var F2 = E2.prototype = new D2();
    F2.constructor = E2;
    l2(F2, C2.prototype);
    F2.isPureReactComponent = true;
    var G2 = { current: null };
    var H2 = Object.prototype.hasOwnProperty;
    var I2 = { key: true, ref: true, __self: true, __source: true };
    function J(a2, b2, c2) {
      var e, d2 = {}, k2 = null, h2 = null;
      if (null != b2)
        for (e in void 0 !== b2.ref && (h2 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2)
          H2.call(b2, e) && !I2.hasOwnProperty(e) && (d2[e] = b2[e]);
      var g2 = arguments.length - 2;
      if (1 === g2)
        d2.children = c2;
      else if (1 < g2) {
        for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
          f2[m2] = arguments[m2 + 2];
        d2.children = f2;
      }
      if (a2 && a2.defaultProps)
        for (e in g2 = a2.defaultProps, g2)
          void 0 === d2[e] && (d2[e] = g2[e]);
      return { $$typeof: n2, type: a2, key: k2, ref: h2, props: d2, _owner: G2.current };
    }
    function K(a2, b2) {
      return { $$typeof: n2, type: a2.type, key: b2, ref: a2.ref, props: a2.props, _owner: a2._owner };
    }
    function L2(a2) {
      return "object" === typeof a2 && null !== a2 && a2.$$typeof === n2;
    }
    function escape(a2) {
      var b2 = { "=": "=0", ":": "=2" };
      return "$" + a2.replace(/[=:]/g, function(a3) {
        return b2[a3];
      });
    }
    var M2 = /\/+/g;
    function N(a2, b2) {
      return "object" === typeof a2 && null !== a2 && null != a2.key ? escape("" + a2.key) : b2.toString(36);
    }
    function O2(a2, b2, c2, e, d2) {
      var k2 = typeof a2;
      if ("undefined" === k2 || "boolean" === k2)
        a2 = null;
      var h2 = false;
      if (null === a2)
        h2 = true;
      else
        switch (k2) {
          case "string":
          case "number":
            h2 = true;
            break;
          case "object":
            switch (a2.$$typeof) {
              case n2:
              case p2:
                h2 = true;
            }
        }
      if (h2)
        return h2 = a2, d2 = d2(h2), a2 = "" === e ? "." + N(h2, 0) : e, Array.isArray(d2) ? (c2 = "", null != a2 && (c2 = a2.replace(M2, "$&/") + "/"), O2(d2, b2, c2, "", function(a3) {
          return a3;
        })) : null != d2 && (L2(d2) && (d2 = K(d2, c2 + (!d2.key || h2 && h2.key === d2.key ? "" : ("" + d2.key).replace(M2, "$&/") + "/") + a2)), b2.push(d2)), 1;
      h2 = 0;
      e = "" === e ? "." : e + ":";
      if (Array.isArray(a2))
        for (var g2 = 0; g2 < a2.length; g2++) {
          k2 = a2[g2];
          var f2 = e + N(k2, g2);
          h2 += O2(k2, b2, c2, f2, d2);
        }
      else if (f2 = y2(a2), "function" === typeof f2)
        for (a2 = f2.call(a2), g2 = 0; !(k2 = a2.next()).done; )
          k2 = k2.value, f2 = e + N(k2, g2++), h2 += O2(k2, b2, c2, f2, d2);
      else if ("object" === k2)
        throw b2 = "" + a2, Error(z2(31, "[object Object]" === b2 ? "object with keys {" + Object.keys(a2).join(", ") + "}" : b2));
      return h2;
    }
    function P2(a2, b2, c2) {
      if (null == a2)
        return a2;
      var e = [], d2 = 0;
      O2(a2, e, "", "", function(a3) {
        return b2.call(c2, a3, d2++);
      });
      return e;
    }
    function Q2(a2) {
      if (-1 === a2._status) {
        var b2 = a2._result;
        b2 = b2();
        a2._status = 0;
        a2._result = b2;
        b2.then(function(b3) {
          0 === a2._status && (b3 = b3.default, a2._status = 1, a2._result = b3);
        }, function(b3) {
          0 === a2._status && (a2._status = 2, a2._result = b3);
        });
      }
      if (1 === a2._status)
        return a2._result;
      throw a2._result;
    }
    var R2 = { current: null };
    function S2() {
      var a2 = R2.current;
      if (null === a2)
        throw Error(z2(321));
      return a2;
    }
    var T2 = { ReactCurrentDispatcher: R2, ReactCurrentBatchConfig: { transition: 0 }, ReactCurrentOwner: G2, IsSomeRendererActing: { current: false }, assign: l2 };
    exports2.Children = { map: P2, forEach: function(a2, b2, c2) {
      P2(a2, function() {
        b2.apply(this, arguments);
      }, c2);
    }, count: function(a2) {
      var b2 = 0;
      P2(a2, function() {
        b2++;
      });
      return b2;
    }, toArray: function(a2) {
      return P2(a2, function(a3) {
        return a3;
      }) || [];
    }, only: function(a2) {
      if (!L2(a2))
        throw Error(z2(143));
      return a2;
    } };
    exports2.Component = C2;
    exports2.PureComponent = E2;
    exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T2;
    exports2.cloneElement = function(a2, b2, c2) {
      if (null === a2 || void 0 === a2)
        throw Error(z2(267, a2));
      var e = l2({}, a2.props), d2 = a2.key, k2 = a2.ref, h2 = a2._owner;
      if (null != b2) {
        void 0 !== b2.ref && (k2 = b2.ref, h2 = G2.current);
        void 0 !== b2.key && (d2 = "" + b2.key);
        if (a2.type && a2.type.defaultProps)
          var g2 = a2.type.defaultProps;
        for (f2 in b2)
          H2.call(b2, f2) && !I2.hasOwnProperty(f2) && (e[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
      }
      var f2 = arguments.length - 2;
      if (1 === f2)
        e.children = c2;
      else if (1 < f2) {
        g2 = Array(f2);
        for (var m2 = 0; m2 < f2; m2++)
          g2[m2] = arguments[m2 + 2];
        e.children = g2;
      }
      return {
        $$typeof: n2,
        type: a2.type,
        key: d2,
        ref: k2,
        props: e,
        _owner: h2
      };
    };
    exports2.createContext = function(a2, b2) {
      void 0 === b2 && (b2 = null);
      a2 = { $$typeof: r2, _calculateChangedBits: b2, _currentValue: a2, _currentValue2: a2, _threadCount: 0, Provider: null, Consumer: null };
      a2.Provider = { $$typeof: q2, _context: a2 };
      return a2.Consumer = a2;
    };
    exports2.createElement = J;
    exports2.createFactory = function(a2) {
      var b2 = J.bind(null, a2);
      b2.type = a2;
      return b2;
    };
    exports2.createRef = function() {
      return { current: null };
    };
    exports2.forwardRef = function(a2) {
      return { $$typeof: t2, render: a2 };
    };
    exports2.isValidElement = L2;
    exports2.lazy = function(a2) {
      return { $$typeof: v2, _payload: { _status: -1, _result: a2 }, _init: Q2 };
    };
    exports2.memo = function(a2, b2) {
      return { $$typeof: u2, type: a2, compare: void 0 === b2 ? null : b2 };
    };
    exports2.useCallback = function(a2, b2) {
      return S2().useCallback(a2, b2);
    };
    exports2.useContext = function(a2, b2) {
      return S2().useContext(a2, b2);
    };
    exports2.useDebugValue = function() {
    };
    exports2.useEffect = function(a2, b2) {
      return S2().useEffect(a2, b2);
    };
    exports2.useImperativeHandle = function(a2, b2, c2) {
      return S2().useImperativeHandle(a2, b2, c2);
    };
    exports2.useLayoutEffect = function(a2, b2) {
      return S2().useLayoutEffect(a2, b2);
    };
    exports2.useMemo = function(a2, b2) {
      return S2().useMemo(a2, b2);
    };
    exports2.useReducer = function(a2, b2, c2) {
      return S2().useReducer(a2, b2, c2);
    };
    exports2.useRef = function(a2) {
      return S2().useRef(a2);
    };
    exports2.useState = function(a2) {
      return S2().useState(a2);
    };
    exports2.version = "17.0.2";
  }
});

// node_modules/.pnpm/react@17.0.2/node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/.pnpm/react@17.0.2/node_modules/react/cjs/react.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var _assign = require_object_assign();
        var ReactVersion = "17.0.2";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        exports2.Fragment = 60107;
        exports2.StrictMode = 60108;
        exports2.Profiler = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        exports2.Suspense = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          exports2.Fragment = symbolFor("react.fragment");
          exports2.StrictMode = symbolFor("react.strict_mode");
          exports2.Profiler = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          exports2.Suspense = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: 0
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        }
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        _assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type2) {
          return type2.displayName || "Context";
        }
        function getComponentName(type2) {
          if (type2 == null) {
            return null;
          }
          {
            if (typeof type2.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type2 === "function") {
            return type2.displayName || type2.name || null;
          }
          if (typeof type2 === "string") {
            return type2;
          }
          switch (type2) {
            case exports2.Fragment:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case exports2.Profiler:
              return "Profiler";
            case exports2.StrictMode:
              return "StrictMode";
            case exports2.Suspense:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type2;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type2;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type2, type2.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type2.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type2._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentName(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty2.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty2.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type2, key2, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type2,
            key: key2,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type2, config, children) {
          var propName;
          var props = {};
          var key2 = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              key2 = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i3 = 0; i3 < childrenLength; i3++) {
              childArray[i3] = arguments[i3 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type2 && type2.defaultProps) {
            var defaultProps = type2.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key2 || ref) {
              var displayName = typeof type2 === "function" ? type2.displayName || type2.name || "Unknown" : type2;
              if (key2) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type2, key2, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (!!(element === null || element === void 0)) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }
          var propName;
          var props = _assign({}, element.props);
          var key2 = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              key2 = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i3 = 0; i3 < childrenLength; i3++) {
              childArray[i3] = arguments[i3 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key2, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key2) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key2.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type2 = typeof children;
          if (type2 === "undefined" || type2 === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type2) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                return c2;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children)) {
            for (var i3 = 0; i3 < children.length; i3++) {
              child = children[i3];
              nextName = nextNamePrefix + getElementKey(child, i3);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type2 === "object") {
              var childrenString = "" + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func2, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func2.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n2 = 0;
          mapChildren(children, function() {
            n2++;
          });
          return n2;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }
          return children;
        }
        function createContext2(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === void 0) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
              }
            }
          }
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
              if (payload._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = defaultExport;
              }
            }, function(error2) {
              if (payload._status === Pending) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
          }
          if (payload._status === Resolved) {
            return payload._result;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: -1,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render2) {
          {
            if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render2 !== "function") {
              error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
            } else {
              if (render2.length !== 0 && render2.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render2 != null) {
              if (render2.defaultProps != null || render2.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render2
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (render2.displayName == null) {
                  render2.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var enableScopeAPI = false;
        function isValidElementType(type2) {
          if (typeof type2 === "string" || typeof type2 === "function") {
            return true;
          }
          if (type2 === exports2.Fragment || type2 === exports2.Profiler || type2 === REACT_DEBUG_TRACING_MODE_TYPE || type2 === exports2.StrictMode || type2 === exports2.Suspense || type2 === REACT_SUSPENSE_LIST_TYPE || type2 === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type2 === "object" && type2 !== null) {
            if (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_FUNDAMENTAL_TYPE || type2.$$typeof === REACT_BLOCK_TYPE || type2[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function memo(type2, compare) {
          {
            if (!isValidElementType(type2)) {
              error("memo: The first argument must be a component. Instead received: %s", type2 === null ? "null" : typeof type2);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type2,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (type2.displayName == null) {
                  type2.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext2(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== void 0) {
              error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
            }
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        function useState3(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef2(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect3(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo2(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn2, construct) {
          if (!fn2 || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn2);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn2, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn2.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn2();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        {
                          if (typeof fn2 === "function") {
                            componentFrameCache.set(fn2, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn2 ? fn2.displayName || fn2.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn2 === "function") {
              componentFrameCache.set(fn2, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn2, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn2, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
          if (type2 == null) {
            return "";
          }
          if (typeof type2 === "function") {
            {
              return describeNativeComponentFrame(type2, shouldConstruct(type2));
            }
          }
          if (typeof type2 === "string") {
            return describeBuiltInComponentFrame(type2);
          }
          switch (type2) {
            case exports2.Suspense:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type2.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type2._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err2 = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err2.name = "Invariant Violation";
                    throw err2;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (Array.isArray(node)) {
            for (var i3 = 0; i3 < node.length; i3++) {
              var child = node[i3];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type2 = element.type;
            if (type2 === null || type2 === void 0 || typeof type2 === "string") {
              return;
            }
            var propTypes;
            if (typeof type2 === "function") {
              propTypes = type2.propTypes;
            } else if (typeof type2 === "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type2.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentName(type2);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentName(type2);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type2.getDefaultProps === "function" && !type2.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i3 = 0; i3 < keys.length; i3++) {
              var key2 = keys[i3];
              if (key2 !== "children" && key2 !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key2);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type2, props, children) {
          var validType = isValidElementType(type2);
          if (!validType) {
            var info = "";
            if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type2 === null) {
              typeString = "null";
            } else if (Array.isArray(type2)) {
              typeString = "array";
            } else if (type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type2.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type2;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i3 = 2; i3 < arguments.length; i3++) {
              validateChildKeys(arguments[i3], type2);
            }
          }
          if (type2 === exports2.Fragment) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type2) {
          var validatedFactory = createElementWithValidation.bind(null, type2);
          validatedFactory.type = type2;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type2
                });
                return type2;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i3 = 2; i3 < arguments.length; i3++) {
            validateChildKeys(arguments[i3], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        {
          try {
            var frozenObject = Object.freeze({});
            /* @__PURE__ */ new Map([[frozenObject, null]]);
            /* @__PURE__ */ new Set([frozenObject]);
          } catch (e) {
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports2.Children = Children;
        exports2.Component = Component;
        exports2.PureComponent = PureComponent;
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports2.cloneElement = cloneElement$1;
        exports2.createContext = createContext2;
        exports2.createElement = createElement$1;
        exports2.createFactory = createFactory;
        exports2.createRef = createRef;
        exports2.forwardRef = forwardRef;
        exports2.isValidElement = isValidElement;
        exports2.lazy = lazy;
        exports2.memo = memo;
        exports2.useCallback = useCallback;
        exports2.useContext = useContext2;
        exports2.useDebugValue = useDebugValue;
        exports2.useEffect = useEffect3;
        exports2.useImperativeHandle = useImperativeHandle;
        exports2.useLayoutEffect = useLayoutEffect;
        exports2.useMemo = useMemo2;
        exports2.useReducer = useReducer;
        exports2.useRef = useRef2;
        exports2.useState = useState3;
        exports2.version = ReactVersion;
      })();
    }
  }
});

// node_modules/.pnpm/react@17.0.2/node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/.pnpm/react@17.0.2/node_modules/react/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_production_min();
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/lodash.js"(exports2, module2) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func2, thisArg, args) {
        switch (args.length) {
          case 0:
            return func2.call(thisArg);
          case 1:
            return func2.call(thisArg, args[0]);
          case 2:
            return func2.call(thisArg, args[0], args[1]);
          case 3:
            return func2.call(thisArg, args[0], args[1], args[2]);
        }
        return func2.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key2, collection2) {
          if (predicate(value, key2, collection2)) {
            result = key2;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key2) {
        return function(object) {
          return object == null ? undefined2 : object[key2];
        };
      }
      function basePropertyOf(object) {
        return function(key2) {
          return object == null ? undefined2 : object[key2];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n2, iteratee) {
        var index = -1, result = Array(n2);
        while (++index < n2) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key2) {
          return [key2, object[key2]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func2) {
        return function(value) {
          return func2(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key2) {
          return object[key2];
        });
      }
      function cacheHas(cache, key2) {
        return cache.has(key2);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue2(object, key2) {
        return object == null ? undefined2 : object[key2];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key2) {
          result[++index] = [key2, value];
        });
        return result;
      }
      function overArg(func2, transform) {
        return function(arg2) {
          return func2(transform(arg2));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _2.defaults(root.Object(), context, _2.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty2 = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func2 = getNative(Object2, "defineProperty");
            func2({}, "", {});
            return func2;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty2.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          "escape": reEscape,
          "evaluate": reEvaluate,
          "interpolate": reInterpolate,
          "variable": "",
          "imports": {
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type2 = data.type, computed = iteratee2(value);
                if (type2 == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type2 == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key2) {
          var result2 = this.has(key2) && delete this.__data__[key2];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key2) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key2];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty2.call(data, key2) ? data[key2] : undefined2;
        }
        function hashHas(key2) {
          var data = this.__data__;
          return nativeCreate ? data[key2] !== undefined2 : hasOwnProperty2.call(data, key2);
        }
        function hashSet(key2, value) {
          var data = this.__data__;
          this.size += this.has(key2) ? 0 : 1;
          data[key2] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key2) {
          var data = this.__data__, index = assocIndexOf(data, key2);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key2) {
          var data = this.__data__, index = assocIndexOf(data, key2);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key2) {
          return assocIndexOf(this.__data__, key2) > -1;
        }
        function listCacheSet(key2, value) {
          var data = this.__data__, index = assocIndexOf(data, key2);
          if (index < 0) {
            ++this.size;
            data.push([key2, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key2) {
          var result2 = getMapData(this, key2)["delete"](key2);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key2) {
          return getMapData(this, key2).get(key2);
        }
        function mapCacheHas(key2) {
          return getMapData(this, key2).has(key2);
        }
        function mapCacheSet(key2, value) {
          var data = getMapData(this, key2), size2 = data.size;
          data.set(key2, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key2) {
          var data = this.__data__, result2 = data["delete"](key2);
          this.size = data.size;
          return result2;
        }
        function stackGet(key2) {
          return this.__data__.get(key2);
        }
        function stackHas(key2) {
          return this.__data__.has(key2);
        }
        function stackSet(key2, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key2, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key2, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key2 in value) {
            if ((inherited || hasOwnProperty2.call(value, key2)) && !(skipIndexes && (key2 == "length" || isBuff && (key2 == "offset" || key2 == "parent") || isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || isIndex(key2, length)))) {
              result2.push(key2);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n2) {
          return shuffleSelf(copyArray(array), baseClamp(n2, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key2, value) {
          if (value !== undefined2 && !eq(object[key2], value) || value === undefined2 && !(key2 in object)) {
            baseAssignValue(object, key2, value);
          }
        }
        function assignValue(object, key2, value) {
          var objValue = object[key2];
          if (!(hasOwnProperty2.call(object, key2) && eq(objValue, value)) || value === undefined2 && !(key2 in object)) {
            baseAssignValue(object, key2, value);
          }
        }
        function assocIndexOf(array, key2) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key2)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key2, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key2, value) {
          if (key2 == "__proto__" && defineProperty) {
            defineProperty(object, key2, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key2] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key2, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key2, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key3) {
              result2.set(key3, baseClone(subValue, bitmask, customizer, key3, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key3) {
            if (props) {
              key3 = subValue;
              subValue = value[key3];
            }
            assignValue(result2, key3, baseClone(subValue, bitmask, customizer, key3, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key2 = props[length], predicate = source[key2], value = object[key2];
            if (value === undefined2 && !(key2 in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func2, wait, args) {
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func2.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key2) {
            return isFunction(object[key2]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key2) {
          return object != null && hasOwnProperty2.call(object, key2);
        }
        function baseHasIn(object, key2) {
          return object != null && key2 in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key2, object2) {
            setter(accumulator, iteratee2(value), key2, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func2 = object == null ? object : object[toKey(last(path))];
          return func2 == null ? undefined2 : apply(func2, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key2 = data[0], objValue = object[key2], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key2 in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key2, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key2 in Object2(object)) {
            if (hasOwnProperty2.call(object, key2) && key2 != "constructor") {
              result2.push(key2);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key2 in object) {
            if (!(key2 == "constructor" && (isProto || !hasOwnProperty2.call(object, key2)))) {
              result2.push(key2);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key2, collection2) {
            result2[++index] = iteratee2(value, key2, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key2) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key2, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key2), srcValue, key2 + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key2, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key2, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key2), srcValue = safeGet(source, key2), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key2, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key2 + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key2, newValue);
        }
        function baseNth(array, n2) {
          var length = array.length;
          if (!length) {
            return;
          }
          n2 += n2 < 0 ? length : 0;
          return isIndex(n2, length) ? array[n2] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key2, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n2) {
          var result2 = "";
          if (!string || n2 < 1 || n2 > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n2 % 2) {
              result2 += string;
            }
            n2 = nativeFloor(n2 / 2);
            if (n2) {
              string += string;
            }
          } while (n2);
          return result2;
        }
        function baseRest(func2, start) {
          return setToString(overRest(func2, start, identity), func2 + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n2) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n2, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key2 = toKey(path[index]), newValue = value;
            if (key2 === "__proto__" || key2 === "constructor" || key2 === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key2];
              newValue = customizer ? customizer(objValue, key2, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key2, newValue);
            nested = nested[key2];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func2, data) {
          metaMap.set(func2, data);
          return func2;
        };
        var baseSetToString = !defineProperty ? identity : function(func2, string) {
          return defineProperty(func2, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer2, isDeep) {
          if (isDeep) {
            return buffer2.slice();
          }
          var length = buffer2.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer2.constructor(length);
          buffer2.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer2 = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer2, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer2 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key2 = props[index];
            var newValue = customizer ? customizer(object[key2], source[key2], key2, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key2];
            }
            if (isNew) {
              baseAssignValue(object, key2, newValue);
            } else {
              assignValue(object, key2, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func2 = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func2(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key2 = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key2], key2, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func2, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func2);
          function wrapper() {
            var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func2;
            return fn2.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func2, bitmask, arity) {
          var Ctor = createCtor(func2);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func2,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func2;
            return apply(fn2, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key2) {
                return iteratee2(iterable[key2], key2, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func2 = funcs[index];
              if (typeof func2 != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func2) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func2 = funcs[index];
              var funcName = getFuncName(func2), data = funcName == "wrapper" ? getData(func2) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func2.length == 1 && isLaziable(func2) ? wrapper[funcName]() : wrapper.thru(func2);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func2, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func2);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func2,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn2 = isBindKey ? thisBinding[func2] : func2;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn2 = Ctor || createCtor(fn2);
            }
            return fn2.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func2, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func2);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn2 = this && this !== root && this instanceof wrapper ? Ctor : func2;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn2, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func2, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func2,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func2)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func2, bitmask);
        }
        function createRound(methodName) {
          var func2 = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func2(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func2(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func2, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func2);
          var newData = [
            func2,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func2 = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func2.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func2, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func2, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func2, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func2, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key2, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key2]) && !hasOwnProperty2.call(object, key2)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key2, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key2 = objProps[index];
            if (!(isPartial ? key2 in other : hasOwnProperty2.call(other, key2))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key2 = objProps[index];
            var objValue = object[key2], othValue = other[key2];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key2, other, object, stack) : customizer(objValue, othValue, key2, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key2 == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func2) {
          return setToString(overRest(func2, undefined2, flatten), func2 + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func2) {
          return metaMap.get(func2);
        };
        function getFuncName(func2) {
          var result2 = func2.name + "", array = realNames[result2], length = hasOwnProperty2.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func2) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func2) {
          var object = hasOwnProperty2.call(lodash, "placeholder") ? lodash : func2;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key2) {
          var data = map2.__data__;
          return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key2 = result2[length], value = object[key2];
            result2[length] = [key2, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key2) {
          var value = getValue2(object, key2);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key2 = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key2))) {
              break;
            }
            object = object[key2];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key2, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type2 = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type2 = typeof index;
          if (type2 == "number" ? isArrayLike(object) && isIndex(index, object.length) : type2 == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type2 = typeof value;
          if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type2 = typeof value;
          return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func2) {
          var funcName = getFuncName(func2), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func2 === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func2 === data[0];
        }
        function isMasked(func2) {
          return !!maskSrcKey && maskSrcKey in func2;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key2, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key2] === srcValue && (srcValue !== undefined2 || key2 in Object2(object));
          };
        }
        function memoizeCapped(func2) {
          var result2 = memoize(func2, function(key2) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key2;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key2 in Object2(object)) {
              result2.push(key2);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func2, start, transform2) {
          start = nativeMax(start === undefined2 ? func2.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func2, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key2) {
          if (key2 === "constructor" && typeof object[key2] === "function") {
            return;
          }
          if (key2 == "__proto__") {
            return;
          }
          return object[key2];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func2, wait) {
          return root.setTimeout(func2, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func2) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func2.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func2) {
          if (func2 != null) {
            try {
              return funcToString.call(func2);
            } catch (e) {
            }
            try {
              return func2 + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n2, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          return baseSlice(array, n2 < 0 ? 0 : n2, length);
        }
        function dropRight(array, n2, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          n2 = length - n2;
          return baseSlice(array, 0, n2 < 0 ? 0 : n2);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n2) {
          return array && array.length ? baseNth(array, toInteger(n2)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n2, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          return baseSlice(array, 0, n2 < 0 ? 0 : n2);
        }
        function takeRight(array, n2, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          n2 = length - n2;
          return baseSlice(array, n2 < 0 ? 0 : n2, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key2) {
          if (hasOwnProperty2.call(result2, key2)) {
            ++result2[key2];
          } else {
            baseAssignValue(result2, key2, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func2 = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func2(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func2 = isArray(collection) ? arrayFilter : baseFilter;
          return func2(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func2 = isArray(collection) ? arrayEach : baseEach;
          return func2(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func2 = isArray(collection) ? arrayEachRight : baseEachRight;
          return func2(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key2) {
          if (hasOwnProperty2.call(result2, key2)) {
            result2[key2].push(value);
          } else {
            baseAssignValue(result2, key2, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key2) {
          baseAssignValue(result2, key2, value);
        });
        function map(collection, iteratee2) {
          var func2 = isArray(collection) ? arrayMap : baseMap;
          return func2(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key2) {
          result2[key2 ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func2 = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func2(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func2 = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func2(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func2 = isArray(collection) ? arrayFilter : baseFilter;
          return func2(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func2 = isArray(collection) ? arraySample : baseSample;
          return func2(collection);
        }
        function sampleSize(collection, n2, guard) {
          if (guard ? isIterateeCall(collection, n2, guard) : n2 === undefined2) {
            n2 = 1;
          } else {
            n2 = toInteger(n2);
          }
          var func2 = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func2(collection, n2);
        }
        function shuffle(collection) {
          var func2 = isArray(collection) ? arrayShuffle : baseShuffle;
          return func2(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func2 = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func2(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n2, func2) {
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n2 = toInteger(n2);
          return function() {
            if (--n2 < 1) {
              return func2.apply(this, arguments);
            }
          };
        }
        function ary(func2, n2, guard) {
          n2 = guard ? undefined2 : n2;
          n2 = func2 && n2 == null ? func2.length : n2;
          return createWrap(func2, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n2);
        }
        function before(n2, func2) {
          var result2;
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n2 = toInteger(n2);
          return function() {
            if (--n2 > 0) {
              result2 = func2.apply(this, arguments);
            }
            if (n2 <= 1) {
              func2 = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func2, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func2, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key2, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key2, bitmask, object, partials, holders);
        });
        function curry(func2, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func2, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func2, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func2, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func2, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func2.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func2, args) {
          return baseDelay(func2, 1, args);
        });
        var delay = baseRest(function(func2, wait, args) {
          return baseDelay(func2, toNumber(wait) || 0, args);
        });
        function flip(func2) {
          return createWrap(func2, WRAP_FLIP_FLAG);
        }
        function memoize(func2, resolver) {
          if (typeof func2 != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key2 = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key2)) {
              return cache.get(key2);
            }
            var result2 = func2.apply(this, args);
            memoized.cache = cache.set(key2, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func2) {
          return before(2, func2);
        }
        var overArgs = castRest(function(func2, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func2, this, args);
          });
        });
        var partial = baseRest(function(func2, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func2, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func2, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func2, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func2, indexes) {
          return createWrap(func2, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func2, start) {
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func2, start);
        }
        function spread(func2, start) {
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func2, this, otherArgs);
          });
        }
        function throttle2(func2, wait, options) {
          var leading = true, trailing = true;
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func2, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func2) {
          return ary(func2, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key2 in value) {
            if (hasOwnProperty2.call(value, key2)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type2 = typeof value;
          return value != null && (type2 == "object" || type2 == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func2 = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func2(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key2 in source) {
            if (hasOwnProperty2.call(source, key2)) {
              assignValue(object, key2, source[key2]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key2 = props[propsIndex];
              var value = object[key2];
              if (value === undefined2 || eq(value, objectProto[key2]) && !hasOwnProperty2.call(object, key2)) {
                object[key2] = source[key2];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key2) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key2;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key2) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty2.call(result2, value)) {
            result2[value].push(key2);
          } else {
            result2[value] = [key2];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key2, object2) {
            baseAssignValue(result2, iteratee2(value, key2, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key2, object2) {
            baseAssignValue(result2, key2, iteratee2(value, key2, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n2, guard) {
          if (guard ? isIterateeCall(string, n2, guard) : n2 === undefined2) {
            n2 = 1;
          } else {
            n2 = toInteger(n2);
          }
          return baseRepeat(toString(string), n2);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty2.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func2, args) {
          try {
            return apply(func2, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key2) {
            key2 = toKey(key2);
            baseAssignValue(object, key2, bind(object[key2], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func2) {
          return baseIteratee(typeof func2 == "function" ? func2 : baseClone(func2, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func2 = source[methodName];
            object[methodName] = func2;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func2, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func2.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n2) {
          n2 = toInteger(n2);
          return baseRest(function(args) {
            return baseNth(args, n2);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n2, iteratee2) {
          n2 = toInteger(n2);
          if (n2 < 1 || n2 > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n2, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n2 -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n2) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix2) {
          var id = ++idCounter;
          return toString(prefix2) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle2;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func2, methodName) {
            if (!hasOwnProperty2.call(lodash.prototype, methodName)) {
              source[methodName] = func2;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n2) {
            n2 = n2 === undefined2 ? 1 : nativeMax(toInteger(n2), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n2, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n2, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n2) {
            return this.reverse()[methodName](n2).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type2 = index + 1, isFilter = type2 == LAZY_FILTER_FLAG || type2 == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type2
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func2, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func2.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func2.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func2 = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func2.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func2.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func2, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key2 = lodashFunc.name + "";
            if (!hasOwnProperty2.call(realNames, key2)) {
              realNames[key2] = [];
            }
            realNames[key2].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _2 = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _2;
        define(function() {
          return _2;
        });
      } else if (freeModule) {
        (freeModule.exports = _2)._ = _2;
        freeExports._ = _2;
      } else {
        root._ = _2;
      }
    }).call(exports2);
  }
});

// node_modules/.pnpm/ansi-escapes@4.3.2/node_modules/ansi-escapes/index.js
var require_ansi_escapes = __commonJS({
  "node_modules/.pnpm/ansi-escapes@4.3.2/node_modules/ansi-escapes/index.js"(exports2, module2) {
    "use strict";
    var ansiEscapes = module2.exports;
    module2.exports.default = ansiEscapes;
    var ESC = "\x1B[";
    var OSC = "\x1B]";
    var BEL = "\x07";
    var SEP = ";";
    var isTerminalApp = process.env.TERM_PROGRAM === "Apple_Terminal";
    ansiEscapes.cursorTo = (x2, y2) => {
      if (typeof x2 !== "number") {
        throw new TypeError("The `x` argument is required");
      }
      if (typeof y2 !== "number") {
        return ESC + (x2 + 1) + "G";
      }
      return ESC + (y2 + 1) + ";" + (x2 + 1) + "H";
    };
    ansiEscapes.cursorMove = (x2, y2) => {
      if (typeof x2 !== "number") {
        throw new TypeError("The `x` argument is required");
      }
      let ret = "";
      if (x2 < 0) {
        ret += ESC + -x2 + "D";
      } else if (x2 > 0) {
        ret += ESC + x2 + "C";
      }
      if (y2 < 0) {
        ret += ESC + -y2 + "A";
      } else if (y2 > 0) {
        ret += ESC + y2 + "B";
      }
      return ret;
    };
    ansiEscapes.cursorUp = (count = 1) => ESC + count + "A";
    ansiEscapes.cursorDown = (count = 1) => ESC + count + "B";
    ansiEscapes.cursorForward = (count = 1) => ESC + count + "C";
    ansiEscapes.cursorBackward = (count = 1) => ESC + count + "D";
    ansiEscapes.cursorLeft = ESC + "G";
    ansiEscapes.cursorSavePosition = isTerminalApp ? "\x1B7" : ESC + "s";
    ansiEscapes.cursorRestorePosition = isTerminalApp ? "\x1B8" : ESC + "u";
    ansiEscapes.cursorGetPosition = ESC + "6n";
    ansiEscapes.cursorNextLine = ESC + "E";
    ansiEscapes.cursorPrevLine = ESC + "F";
    ansiEscapes.cursorHide = ESC + "?25l";
    ansiEscapes.cursorShow = ESC + "?25h";
    ansiEscapes.eraseLines = (count) => {
      let clear = "";
      for (let i3 = 0; i3 < count; i3++) {
        clear += ansiEscapes.eraseLine + (i3 < count - 1 ? ansiEscapes.cursorUp() : "");
      }
      if (count) {
        clear += ansiEscapes.cursorLeft;
      }
      return clear;
    };
    ansiEscapes.eraseEndLine = ESC + "K";
    ansiEscapes.eraseStartLine = ESC + "1K";
    ansiEscapes.eraseLine = ESC + "2K";
    ansiEscapes.eraseDown = ESC + "J";
    ansiEscapes.eraseUp = ESC + "1J";
    ansiEscapes.eraseScreen = ESC + "2J";
    ansiEscapes.scrollUp = ESC + "S";
    ansiEscapes.scrollDown = ESC + "T";
    ansiEscapes.clearScreen = "\x1Bc";
    ansiEscapes.clearTerminal = process.platform === "win32" ? `${ansiEscapes.eraseScreen}${ESC}0f` : `${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;
    ansiEscapes.beep = BEL;
    ansiEscapes.link = (text, url) => {
      return [
        OSC,
        "8",
        SEP,
        SEP,
        url,
        BEL,
        text,
        OSC,
        "8",
        SEP,
        SEP,
        BEL
      ].join("");
    };
    ansiEscapes.image = (buffer2, options = {}) => {
      let ret = `${OSC}1337;File=inline=1`;
      if (options.width) {
        ret += `;width=${options.width}`;
      }
      if (options.height) {
        ret += `;height=${options.height}`;
      }
      if (options.preserveAspectRatio === false) {
        ret += ";preserveAspectRatio=0";
      }
      return ret + ":" + buffer2.toString("base64") + BEL;
    };
    ansiEscapes.iTerm = {
      setCwd: (cwd = process.cwd()) => `${OSC}50;CurrentDir=${cwd}${BEL}`,
      annotation: (message, options = {}) => {
        let ret = `${OSC}1337;`;
        const hasX = typeof options.x !== "undefined";
        const hasY = typeof options.y !== "undefined";
        if ((hasX || hasY) && !(hasX && hasY && typeof options.length !== "undefined")) {
          throw new Error("`x`, `y` and `length` must be defined when `x` or `y` is defined");
        }
        message = message.replace(/\|/g, "");
        ret += options.isHidden ? "AddHiddenAnnotation=" : "AddAnnotation=";
        if (options.length > 0) {
          ret += (hasX ? [message, options.length, options.x, options.y] : [options.length, message]).join("|");
        } else {
          ret += message;
        }
        return ret + BEL;
      }
    };
  }
});

// node_modules/.pnpm/mimic-fn@2.1.0/node_modules/mimic-fn/index.js
var require_mimic_fn = __commonJS({
  "node_modules/.pnpm/mimic-fn@2.1.0/node_modules/mimic-fn/index.js"(exports2, module2) {
    "use strict";
    var mimicFn = (to, from) => {
      for (const prop of Reflect.ownKeys(from)) {
        Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
      }
      return to;
    };
    module2.exports = mimicFn;
    module2.exports.default = mimicFn;
  }
});

// node_modules/.pnpm/onetime@5.1.2/node_modules/onetime/index.js
var require_onetime = __commonJS({
  "node_modules/.pnpm/onetime@5.1.2/node_modules/onetime/index.js"(exports2, module2) {
    "use strict";
    var mimicFn = require_mimic_fn();
    var calledFunctions = /* @__PURE__ */ new WeakMap();
    var onetime = (function_, options = {}) => {
      if (typeof function_ !== "function") {
        throw new TypeError("Expected a function");
      }
      let returnValue;
      let callCount = 0;
      const functionName = function_.displayName || function_.name || "<anonymous>";
      const onetime2 = function(...arguments_) {
        calledFunctions.set(onetime2, ++callCount);
        if (callCount === 1) {
          returnValue = function_.apply(this, arguments_);
          function_ = null;
        } else if (options.throw === true) {
          throw new Error(`Function \`${functionName}\` can only be called once`);
        }
        return returnValue;
      };
      mimicFn(onetime2, function_);
      calledFunctions.set(onetime2, callCount);
      return onetime2;
    };
    module2.exports = onetime;
    module2.exports.default = onetime;
    module2.exports.callCount = (function_) => {
      if (!calledFunctions.has(function_)) {
        throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
      }
      return calledFunctions.get(function_);
    };
  }
});

// node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/signals.js
var require_signals = __commonJS({
  "node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/signals.js"(exports2, module2) {
    module2.exports = [
      "SIGABRT",
      "SIGALRM",
      "SIGHUP",
      "SIGINT",
      "SIGTERM"
    ];
    if (process.platform !== "win32") {
      module2.exports.push(
        "SIGVTALRM",
        "SIGXCPU",
        "SIGXFSZ",
        "SIGUSR2",
        "SIGTRAP",
        "SIGSYS",
        "SIGQUIT",
        "SIGIOT"
      );
    }
    if (process.platform === "linux") {
      module2.exports.push(
        "SIGIO",
        "SIGPOLL",
        "SIGPWR",
        "SIGSTKFLT",
        "SIGUNUSED"
      );
    }
  }
});

// node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/index.js
var require_signal_exit = __commonJS({
  "node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/index.js"(exports2, module2) {
    var process2 = global.process;
    var processOk = function(process3) {
      return process3 && typeof process3 === "object" && typeof process3.removeListener === "function" && typeof process3.emit === "function" && typeof process3.reallyExit === "function" && typeof process3.listeners === "function" && typeof process3.kill === "function" && typeof process3.pid === "number" && typeof process3.on === "function";
    };
    if (!processOk(process2)) {
      module2.exports = function() {
        return function() {
        };
      };
    } else {
      assert2 = __require("assert");
      signals = require_signals();
      isWin = /^win/i.test(process2.platform);
      EE = __require("events");
      if (typeof EE !== "function") {
        EE = EE.EventEmitter;
      }
      if (process2.__signal_exit_emitter__) {
        emitter = process2.__signal_exit_emitter__;
      } else {
        emitter = process2.__signal_exit_emitter__ = new EE();
        emitter.count = 0;
        emitter.emitted = {};
      }
      if (!emitter.infinite) {
        emitter.setMaxListeners(Infinity);
        emitter.infinite = true;
      }
      module2.exports = function(cb2, opts) {
        if (!processOk(global.process)) {
          return function() {
          };
        }
        assert2.equal(typeof cb2, "function", "a callback must be provided for exit handler");
        if (loaded === false) {
          load();
        }
        var ev = "exit";
        if (opts && opts.alwaysLast) {
          ev = "afterexit";
        }
        var remove = function() {
          emitter.removeListener(ev, cb2);
          if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
            unload();
          }
        };
        emitter.on(ev, cb2);
        return remove;
      };
      unload = function unload2() {
        if (!loaded || !processOk(global.process)) {
          return;
        }
        loaded = false;
        signals.forEach(function(sig) {
          try {
            process2.removeListener(sig, sigListeners[sig]);
          } catch (er) {
          }
        });
        process2.emit = originalProcessEmit;
        process2.reallyExit = originalProcessReallyExit;
        emitter.count -= 1;
      };
      module2.exports.unload = unload;
      emit = function emit2(event, code, signal) {
        if (emitter.emitted[event]) {
          return;
        }
        emitter.emitted[event] = true;
        emitter.emit(event, code, signal);
      };
      sigListeners = {};
      signals.forEach(function(sig) {
        sigListeners[sig] = function listener() {
          if (!processOk(global.process)) {
            return;
          }
          var listeners = process2.listeners(sig);
          if (listeners.length === emitter.count) {
            unload();
            emit("exit", null, sig);
            emit("afterexit", null, sig);
            if (isWin && sig === "SIGHUP") {
              sig = "SIGINT";
            }
            process2.kill(process2.pid, sig);
          }
        };
      });
      module2.exports.signals = function() {
        return signals;
      };
      loaded = false;
      load = function load2() {
        if (loaded || !processOk(global.process)) {
          return;
        }
        loaded = true;
        emitter.count += 1;
        signals = signals.filter(function(sig) {
          try {
            process2.on(sig, sigListeners[sig]);
            return true;
          } catch (er) {
            return false;
          }
        });
        process2.emit = processEmit;
        process2.reallyExit = processReallyExit;
      };
      module2.exports.load = load;
      originalProcessReallyExit = process2.reallyExit;
      processReallyExit = function processReallyExit2(code) {
        if (!processOk(global.process)) {
          return;
        }
        process2.exitCode = code || 0;
        emit("exit", process2.exitCode, null);
        emit("afterexit", process2.exitCode, null);
        originalProcessReallyExit.call(process2, process2.exitCode);
      };
      originalProcessEmit = process2.emit;
      processEmit = function processEmit2(ev, arg2) {
        if (ev === "exit" && processOk(global.process)) {
          if (arg2 !== void 0) {
            process2.exitCode = arg2;
          }
          var ret = originalProcessEmit.apply(this, arguments);
          emit("exit", process2.exitCode, null);
          emit("afterexit", process2.exitCode, null);
          return ret;
        } else {
          return originalProcessEmit.apply(this, arguments);
        }
      };
    }
    var assert2;
    var signals;
    var isWin;
    var EE;
    var emitter;
    var unload;
    var emit;
    var sigListeners;
    var loaded;
    var load;
    var originalProcessReallyExit;
    var processReallyExit;
    var originalProcessEmit;
    var processEmit;
  }
});

// node_modules/.pnpm/restore-cursor@3.1.0/node_modules/restore-cursor/index.js
var require_restore_cursor = __commonJS({
  "node_modules/.pnpm/restore-cursor@3.1.0/node_modules/restore-cursor/index.js"(exports2, module2) {
    "use strict";
    var onetime = require_onetime();
    var signalExit = require_signal_exit();
    module2.exports = onetime(() => {
      signalExit(() => {
        process.stderr.write("\x1B[?25h");
      }, { alwaysLast: true });
    });
  }
});

// node_modules/.pnpm/cli-cursor@3.1.0/node_modules/cli-cursor/index.js
var require_cli_cursor = __commonJS({
  "node_modules/.pnpm/cli-cursor@3.1.0/node_modules/cli-cursor/index.js"(exports2) {
    "use strict";
    var restoreCursor = require_restore_cursor();
    var isHidden = false;
    exports2.show = (writableStream = process.stderr) => {
      if (!writableStream.isTTY) {
        return;
      }
      isHidden = false;
      writableStream.write("\x1B[?25h");
    };
    exports2.hide = (writableStream = process.stderr) => {
      if (!writableStream.isTTY) {
        return;
      }
      restoreCursor();
      isHidden = true;
      writableStream.write("\x1B[?25l");
    };
    exports2.toggle = (force, writableStream) => {
      if (force !== void 0) {
        isHidden = force;
      }
      if (isHidden) {
        exports2.show(writableStream);
      } else {
        exports2.hide(writableStream);
      }
    };
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/log-update.js
var require_log_update = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/log-update.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ansi_escapes_1 = __importDefault(require_ansi_escapes());
    var cli_cursor_1 = __importDefault(require_cli_cursor());
    var create = (stream, { showCursor = false } = {}) => {
      let previousLineCount = 0;
      let previousOutput = "";
      let hasHiddenCursor = false;
      const render2 = (str) => {
        if (!showCursor && !hasHiddenCursor) {
          cli_cursor_1.default.hide();
          hasHiddenCursor = true;
        }
        const output = str + "\n";
        if (output === previousOutput) {
          return;
        }
        previousOutput = output;
        stream.write(ansi_escapes_1.default.eraseLines(previousLineCount) + output);
        previousLineCount = output.split("\n").length;
      };
      render2.clear = () => {
        stream.write(ansi_escapes_1.default.eraseLines(previousLineCount));
        previousOutput = "";
        previousLineCount = 0;
      };
      render2.done = () => {
        previousOutput = "";
        previousLineCount = 0;
        if (!showCursor) {
          cli_cursor_1.default.show();
          hasHiddenCursor = false;
        }
      };
      return render2;
    };
    exports2.default = { create };
  }
});

// node_modules/.pnpm/ci-info@2.0.0/node_modules/ci-info/vendors.json
var require_vendors = __commonJS({
  "node_modules/.pnpm/ci-info@2.0.0/node_modules/ci-info/vendors.json"(exports2, module2) {
    module2.exports = [
      {
        name: "AppVeyor",
        constant: "APPVEYOR",
        env: "APPVEYOR",
        pr: "APPVEYOR_PULL_REQUEST_NUMBER"
      },
      {
        name: "Azure Pipelines",
        constant: "AZURE_PIPELINES",
        env: "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI",
        pr: "SYSTEM_PULLREQUEST_PULLREQUESTID"
      },
      {
        name: "Bamboo",
        constant: "BAMBOO",
        env: "bamboo_planKey"
      },
      {
        name: "Bitbucket Pipelines",
        constant: "BITBUCKET",
        env: "BITBUCKET_COMMIT",
        pr: "BITBUCKET_PR_ID"
      },
      {
        name: "Bitrise",
        constant: "BITRISE",
        env: "BITRISE_IO",
        pr: "BITRISE_PULL_REQUEST"
      },
      {
        name: "Buddy",
        constant: "BUDDY",
        env: "BUDDY_WORKSPACE_ID",
        pr: "BUDDY_EXECUTION_PULL_REQUEST_ID"
      },
      {
        name: "Buildkite",
        constant: "BUILDKITE",
        env: "BUILDKITE",
        pr: { env: "BUILDKITE_PULL_REQUEST", ne: "false" }
      },
      {
        name: "CircleCI",
        constant: "CIRCLE",
        env: "CIRCLECI",
        pr: "CIRCLE_PULL_REQUEST"
      },
      {
        name: "Cirrus CI",
        constant: "CIRRUS",
        env: "CIRRUS_CI",
        pr: "CIRRUS_PR"
      },
      {
        name: "AWS CodeBuild",
        constant: "CODEBUILD",
        env: "CODEBUILD_BUILD_ARN"
      },
      {
        name: "Codeship",
        constant: "CODESHIP",
        env: { CI_NAME: "codeship" }
      },
      {
        name: "Drone",
        constant: "DRONE",
        env: "DRONE",
        pr: { DRONE_BUILD_EVENT: "pull_request" }
      },
      {
        name: "dsari",
        constant: "DSARI",
        env: "DSARI"
      },
      {
        name: "GitLab CI",
        constant: "GITLAB",
        env: "GITLAB_CI"
      },
      {
        name: "GoCD",
        constant: "GOCD",
        env: "GO_PIPELINE_LABEL"
      },
      {
        name: "Hudson",
        constant: "HUDSON",
        env: "HUDSON_URL"
      },
      {
        name: "Jenkins",
        constant: "JENKINS",
        env: ["JENKINS_URL", "BUILD_ID"],
        pr: { any: ["ghprbPullId", "CHANGE_ID"] }
      },
      {
        name: "Magnum CI",
        constant: "MAGNUM",
        env: "MAGNUM"
      },
      {
        name: "Netlify CI",
        constant: "NETLIFY",
        env: "NETLIFY_BUILD_BASE",
        pr: { env: "PULL_REQUEST", ne: "false" }
      },
      {
        name: "Sail CI",
        constant: "SAIL",
        env: "SAILCI",
        pr: "SAIL_PULL_REQUEST_NUMBER"
      },
      {
        name: "Semaphore",
        constant: "SEMAPHORE",
        env: "SEMAPHORE",
        pr: "PULL_REQUEST_NUMBER"
      },
      {
        name: "Shippable",
        constant: "SHIPPABLE",
        env: "SHIPPABLE",
        pr: { IS_PULL_REQUEST: "true" }
      },
      {
        name: "Solano CI",
        constant: "SOLANO",
        env: "TDDIUM",
        pr: "TDDIUM_PR_ID"
      },
      {
        name: "Strider CD",
        constant: "STRIDER",
        env: "STRIDER"
      },
      {
        name: "TaskCluster",
        constant: "TASKCLUSTER",
        env: ["TASK_ID", "RUN_ID"]
      },
      {
        name: "TeamCity",
        constant: "TEAMCITY",
        env: "TEAMCITY_VERSION"
      },
      {
        name: "Travis CI",
        constant: "TRAVIS",
        env: "TRAVIS",
        pr: { env: "TRAVIS_PULL_REQUEST", ne: "false" }
      }
    ];
  }
});

// node_modules/.pnpm/ci-info@2.0.0/node_modules/ci-info/index.js
var require_ci_info = __commonJS({
  "node_modules/.pnpm/ci-info@2.0.0/node_modules/ci-info/index.js"(exports2) {
    "use strict";
    var vendors = require_vendors();
    var env = process.env;
    Object.defineProperty(exports2, "_vendors", {
      value: vendors.map(function(v2) {
        return v2.constant;
      })
    });
    exports2.name = null;
    exports2.isPR = null;
    vendors.forEach(function(vendor) {
      var envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
      var isCI = envs.every(function(obj) {
        return checkEnv(obj);
      });
      exports2[vendor.constant] = isCI;
      if (isCI) {
        exports2.name = vendor.name;
        switch (typeof vendor.pr) {
          case "string":
            exports2.isPR = !!env[vendor.pr];
            break;
          case "object":
            if ("env" in vendor.pr) {
              exports2.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;
            } else if ("any" in vendor.pr) {
              exports2.isPR = vendor.pr.any.some(function(key2) {
                return !!env[key2];
              });
            } else {
              exports2.isPR = checkEnv(vendor.pr);
            }
            break;
          default:
            exports2.isPR = null;
        }
      }
    });
    exports2.isCI = !!(env.CI || env.CONTINUOUS_INTEGRATION || env.BUILD_NUMBER || env.RUN_ID || exports2.name || false);
    function checkEnv(obj) {
      if (typeof obj === "string")
        return !!env[obj];
      return Object.keys(obj).every(function(k2) {
        return env[k2] === obj[k2];
      });
    }
  }
});

// node_modules/.pnpm/is-ci@2.0.0/node_modules/is-ci/index.js
var require_is_ci = __commonJS({
  "node_modules/.pnpm/is-ci@2.0.0/node_modules/is-ci/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_ci_info().isCI;
  }
});

// node_modules/.pnpm/auto-bind@4.0.0/node_modules/auto-bind/index.js
var require_auto_bind = __commonJS({
  "node_modules/.pnpm/auto-bind@4.0.0/node_modules/auto-bind/index.js"(exports2, module2) {
    "use strict";
    var getAllProperties = (object) => {
      const properties = /* @__PURE__ */ new Set();
      do {
        for (const key2 of Reflect.ownKeys(object)) {
          properties.add([object, key2]);
        }
      } while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);
      return properties;
    };
    module2.exports = (self2, { include, exclude } = {}) => {
      const filter = (key2) => {
        const match = (pattern) => typeof pattern === "string" ? key2 === pattern : pattern.test(key2);
        if (include) {
          return include.some(match);
        }
        if (exclude) {
          return !exclude.some(match);
        }
        return true;
      };
      for (const [object, key2] of getAllProperties(self2.constructor.prototype)) {
        if (key2 === "constructor" || !filter(key2)) {
          continue;
        }
        const descriptor = Reflect.getOwnPropertyDescriptor(object, key2);
        if (descriptor && typeof descriptor.value === "function") {
          self2[key2] = self2[key2].bind(self2);
        }
      }
      return self2;
    };
  }
});

// node_modules/.pnpm/scheduler@0.20.2/node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS({
  "node_modules/.pnpm/scheduler@0.20.2/node_modules/scheduler/cjs/scheduler.production.min.js"(exports2) {
    "use strict";
    var f2;
    var g2;
    var h2;
    var k2;
    if ("object" === typeof performance && "function" === typeof performance.now) {
      l2 = performance;
      exports2.unstable_now = function() {
        return l2.now();
      };
    } else {
      p2 = Date, q2 = p2.now();
      exports2.unstable_now = function() {
        return p2.now() - q2;
      };
    }
    var l2;
    var p2;
    var q2;
    if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
      t2 = null, u2 = null, w2 = function() {
        if (null !== t2)
          try {
            var a2 = exports2.unstable_now();
            t2(true, a2);
            t2 = null;
          } catch (b2) {
            throw setTimeout(w2, 0), b2;
          }
      };
      f2 = function(a2) {
        null !== t2 ? setTimeout(f2, 0, a2) : (t2 = a2, setTimeout(w2, 0));
      };
      g2 = function(a2, b2) {
        u2 = setTimeout(a2, b2);
      };
      h2 = function() {
        clearTimeout(u2);
      };
      exports2.unstable_shouldYield = function() {
        return false;
      };
      k2 = exports2.unstable_forceFrameRate = function() {
      };
    } else {
      x2 = window.setTimeout, y2 = window.clearTimeout;
      if ("undefined" !== typeof console) {
        z2 = window.cancelAnimationFrame;
        "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        "function" !== typeof z2 && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
      }
      A2 = false, B2 = null, C2 = -1, D2 = 5, E2 = 0;
      exports2.unstable_shouldYield = function() {
        return exports2.unstable_now() >= E2;
      };
      k2 = function() {
      };
      exports2.unstable_forceFrameRate = function(a2) {
        0 > a2 || 125 < a2 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D2 = 0 < a2 ? Math.floor(1e3 / a2) : 5;
      };
      F2 = new MessageChannel(), G2 = F2.port2;
      F2.port1.onmessage = function() {
        if (null !== B2) {
          var a2 = exports2.unstable_now();
          E2 = a2 + D2;
          try {
            B2(true, a2) ? G2.postMessage(null) : (A2 = false, B2 = null);
          } catch (b2) {
            throw G2.postMessage(null), b2;
          }
        } else
          A2 = false;
      };
      f2 = function(a2) {
        B2 = a2;
        A2 || (A2 = true, G2.postMessage(null));
      };
      g2 = function(a2, b2) {
        C2 = x2(function() {
          a2(exports2.unstable_now());
        }, b2);
      };
      h2 = function() {
        y2(C2);
        C2 = -1;
      };
    }
    var t2;
    var u2;
    var w2;
    var x2;
    var y2;
    var z2;
    var A2;
    var B2;
    var C2;
    var D2;
    var E2;
    var F2;
    var G2;
    function H2(a2, b2) {
      var c2 = a2.length;
      a2.push(b2);
      a:
        for (; ; ) {
          var d2 = c2 - 1 >>> 1, e = a2[d2];
          if (void 0 !== e && 0 < I2(e, b2))
            a2[d2] = b2, a2[c2] = e, c2 = d2;
          else
            break a;
        }
    }
    function J(a2) {
      a2 = a2[0];
      return void 0 === a2 ? null : a2;
    }
    function K(a2) {
      var b2 = a2[0];
      if (void 0 !== b2) {
        var c2 = a2.pop();
        if (c2 !== b2) {
          a2[0] = c2;
          a:
            for (var d2 = 0, e = a2.length; d2 < e; ) {
              var m2 = 2 * (d2 + 1) - 1, n2 = a2[m2], v2 = m2 + 1, r2 = a2[v2];
              if (void 0 !== n2 && 0 > I2(n2, c2))
                void 0 !== r2 && 0 > I2(r2, n2) ? (a2[d2] = r2, a2[v2] = c2, d2 = v2) : (a2[d2] = n2, a2[m2] = c2, d2 = m2);
              else if (void 0 !== r2 && 0 > I2(r2, c2))
                a2[d2] = r2, a2[v2] = c2, d2 = v2;
              else
                break a;
            }
        }
        return b2;
      }
      return null;
    }
    function I2(a2, b2) {
      var c2 = a2.sortIndex - b2.sortIndex;
      return 0 !== c2 ? c2 : a2.id - b2.id;
    }
    var L2 = [];
    var M2 = [];
    var N = 1;
    var O2 = null;
    var P2 = 3;
    var Q2 = false;
    var R2 = false;
    var S2 = false;
    function T2(a2) {
      for (var b2 = J(M2); null !== b2; ) {
        if (null === b2.callback)
          K(M2);
        else if (b2.startTime <= a2)
          K(M2), b2.sortIndex = b2.expirationTime, H2(L2, b2);
        else
          break;
        b2 = J(M2);
      }
    }
    function U2(a2) {
      S2 = false;
      T2(a2);
      if (!R2)
        if (null !== J(L2))
          R2 = true, f2(V2);
        else {
          var b2 = J(M2);
          null !== b2 && g2(U2, b2.startTime - a2);
        }
    }
    function V2(a2, b2) {
      R2 = false;
      S2 && (S2 = false, h2());
      Q2 = true;
      var c2 = P2;
      try {
        T2(b2);
        for (O2 = J(L2); null !== O2 && (!(O2.expirationTime > b2) || a2 && !exports2.unstable_shouldYield()); ) {
          var d2 = O2.callback;
          if ("function" === typeof d2) {
            O2.callback = null;
            P2 = O2.priorityLevel;
            var e = d2(O2.expirationTime <= b2);
            b2 = exports2.unstable_now();
            "function" === typeof e ? O2.callback = e : O2 === J(L2) && K(L2);
            T2(b2);
          } else
            K(L2);
          O2 = J(L2);
        }
        if (null !== O2)
          var m2 = true;
        else {
          var n2 = J(M2);
          null !== n2 && g2(U2, n2.startTime - b2);
          m2 = false;
        }
        return m2;
      } finally {
        O2 = null, P2 = c2, Q2 = false;
      }
    }
    var W2 = k2;
    exports2.unstable_IdlePriority = 5;
    exports2.unstable_ImmediatePriority = 1;
    exports2.unstable_LowPriority = 4;
    exports2.unstable_NormalPriority = 3;
    exports2.unstable_Profiling = null;
    exports2.unstable_UserBlockingPriority = 2;
    exports2.unstable_cancelCallback = function(a2) {
      a2.callback = null;
    };
    exports2.unstable_continueExecution = function() {
      R2 || Q2 || (R2 = true, f2(V2));
    };
    exports2.unstable_getCurrentPriorityLevel = function() {
      return P2;
    };
    exports2.unstable_getFirstCallbackNode = function() {
      return J(L2);
    };
    exports2.unstable_next = function(a2) {
      switch (P2) {
        case 1:
        case 2:
        case 3:
          var b2 = 3;
          break;
        default:
          b2 = P2;
      }
      var c2 = P2;
      P2 = b2;
      try {
        return a2();
      } finally {
        P2 = c2;
      }
    };
    exports2.unstable_pauseExecution = function() {
    };
    exports2.unstable_requestPaint = W2;
    exports2.unstable_runWithPriority = function(a2, b2) {
      switch (a2) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a2 = 3;
      }
      var c2 = P2;
      P2 = a2;
      try {
        return b2();
      } finally {
        P2 = c2;
      }
    };
    exports2.unstable_scheduleCallback = function(a2, b2, c2) {
      var d2 = exports2.unstable_now();
      "object" === typeof c2 && null !== c2 ? (c2 = c2.delay, c2 = "number" === typeof c2 && 0 < c2 ? d2 + c2 : d2) : c2 = d2;
      switch (a2) {
        case 1:
          var e = -1;
          break;
        case 2:
          e = 250;
          break;
        case 5:
          e = 1073741823;
          break;
        case 4:
          e = 1e4;
          break;
        default:
          e = 5e3;
      }
      e = c2 + e;
      a2 = { id: N++, callback: b2, priorityLevel: a2, startTime: c2, expirationTime: e, sortIndex: -1 };
      c2 > d2 ? (a2.sortIndex = c2, H2(M2, a2), null === J(L2) && a2 === J(M2) && (S2 ? h2() : S2 = true, g2(U2, c2 - d2))) : (a2.sortIndex = e, H2(L2, a2), R2 || Q2 || (R2 = true, f2(V2)));
      return a2;
    };
    exports2.unstable_wrapCallback = function(a2) {
      var b2 = P2;
      return function() {
        var c2 = P2;
        P2 = b2;
        try {
          return a2.apply(this, arguments);
        } finally {
          P2 = c2;
        }
      };
    };
  }
});

// node_modules/.pnpm/scheduler@0.20.2/node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/.pnpm/scheduler@0.20.2/node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var requestHostCallback;
        var requestHostTimeout;
        var cancelHostTimeout;
        var requestPaint;
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports2.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports2.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        if (typeof window === "undefined" || typeof MessageChannel !== "function") {
          var _callback = null;
          var _timeoutID = null;
          var _flushCallback = function() {
            if (_callback !== null) {
              try {
                var currentTime = exports2.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
              } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
              }
            }
          };
          requestHostCallback = function(cb2) {
            if (_callback !== null) {
              setTimeout(requestHostCallback, 0, cb2);
            } else {
              _callback = cb2;
              setTimeout(_flushCallback, 0);
            }
          };
          requestHostTimeout = function(cb2, ms) {
            _timeoutID = setTimeout(cb2, ms);
          };
          cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
          };
          exports2.unstable_shouldYield = function() {
            return false;
          };
          requestPaint = exports2.unstable_forceFrameRate = function() {
          };
        } else {
          var _setTimeout = window.setTimeout;
          var _clearTimeout = window.clearTimeout;
          if (typeof console !== "undefined") {
            var requestAnimationFrame2 = window.requestAnimationFrame;
            var cancelAnimationFrame2 = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame2 !== "function") {
              console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
            if (typeof cancelAnimationFrame2 !== "function") {
              console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var yieldInterval = 5;
          var deadline = 0;
          {
            exports2.unstable_shouldYield = function() {
              return exports2.unstable_now() >= deadline;
            };
            requestPaint = function() {
            };
          }
          exports2.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              yieldInterval = Math.floor(1e3 / fps);
            } else {
              yieldInterval = 5;
            }
          };
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports2.unstable_now();
              deadline = currentTime + yieldInterval;
              var hasTimeRemaining = true;
              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  port.postMessage(null);
                }
              } catch (error) {
                port.postMessage(null);
                throw error;
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port.postMessage(null);
            }
          };
          requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
              callback(exports2.unstable_now());
            }, ms);
          };
          cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          };
        }
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          var first = heap[0];
          return first === void 0 ? null : first;
        }
        function pop(heap) {
          var first = heap[0];
          if (first !== void 0) {
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          } else {
            return null;
          }
        }
        function siftUp(heap, node, i3) {
          var index = i3;
          while (true) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== void 0 && compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i3) {
          var index = i3;
          var length = heap.length;
          while (index < length) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (left !== void 0 && compare(left, node) < 0) {
              if (right !== void 0 && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (right !== void 0 && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a2, b2) {
          var diff = a2.sortIndex - b2.sortIndex;
          return diff !== 0 ? diff : a2.id - b2.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task2, ms) {
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports2.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports2.unstable_shouldYield())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports2.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports2.unstable_now();
          var startTime;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime = currentTime + delay;
            } else {
              startTime = currentTime;
            }
          } else {
            startTime = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime,
            expirationTime,
            sortIndex: -1
          };
          if (startTime > currentTime) {
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task2) {
          task2.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports2.unstable_IdlePriority = IdlePriority;
        exports2.unstable_ImmediatePriority = ImmediatePriority;
        exports2.unstable_LowPriority = LowPriority;
        exports2.unstable_NormalPriority = NormalPriority;
        exports2.unstable_Profiling = unstable_Profiling;
        exports2.unstable_UserBlockingPriority = UserBlockingPriority;
        exports2.unstable_cancelCallback = unstable_cancelCallback;
        exports2.unstable_continueExecution = unstable_continueExecution;
        exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports2.unstable_next = unstable_next;
        exports2.unstable_pauseExecution = unstable_pauseExecution;
        exports2.unstable_requestPaint = unstable_requestPaint;
        exports2.unstable_runWithPriority = unstable_runWithPriority;
        exports2.unstable_scheduleCallback = unstable_scheduleCallback;
        exports2.unstable_wrapCallback = unstable_wrapCallback;
      })();
    }
  }
});

// node_modules/.pnpm/scheduler@0.20.2/node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/.pnpm/scheduler@0.20.2/node_modules/scheduler/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_scheduler_production_min();
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// node_modules/.pnpm/react-reconciler@0.26.2_react@17.0.2/node_modules/react-reconciler/cjs/react-reconciler.production.min.js
var require_react_reconciler_production_min = __commonJS({
  "node_modules/.pnpm/react-reconciler@0.26.2_react@17.0.2/node_modules/react-reconciler/cjs/react-reconciler.production.min.js"(exports2, module2) {
    module2.exports = function $$$reconciler($$$hostConfig) {
      var exports3 = {};
      "use strict";
      var aa = require_object_assign(), ba = require_react(), m2 = require_scheduler();
      function q2(a2) {
        for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 1; c2 < arguments.length; c2++)
          b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
        return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var ca = ba.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, da = 60103, ea = 60106, fa = 60107, ha = 60108, ia = 60114, ja = 60109, ka = 60110, la = 60112, ma = 60113, na = 60120, oa = 60115, pa = 60116, qa = 60121, ra = 60129, sa = 60130, ta = 60131;
      if ("function" === typeof Symbol && Symbol.for) {
        var r2 = Symbol.for;
        da = r2("react.element");
        ea = r2("react.portal");
        fa = r2("react.fragment");
        ha = r2("react.strict_mode");
        ia = r2("react.profiler");
        ja = r2("react.provider");
        ka = r2("react.context");
        la = r2("react.forward_ref");
        ma = r2("react.suspense");
        na = r2("react.suspense_list");
        oa = r2("react.memo");
        pa = r2("react.lazy");
        qa = r2("react.block");
        r2("react.scope");
        ra = r2("react.debug_trace_mode");
        sa = r2("react.offscreen");
        ta = r2("react.legacy_hidden");
      }
      var ua = "function" === typeof Symbol && Symbol.iterator;
      function va(a2) {
        if (null === a2 || "object" !== typeof a2)
          return null;
        a2 = ua && a2[ua] || a2["@@iterator"];
        return "function" === typeof a2 ? a2 : null;
      }
      function wa(a2) {
        if (null == a2)
          return null;
        if ("function" === typeof a2)
          return a2.displayName || a2.name || null;
        if ("string" === typeof a2)
          return a2;
        switch (a2) {
          case fa:
            return "Fragment";
          case ea:
            return "Portal";
          case ia:
            return "Profiler";
          case ha:
            return "StrictMode";
          case ma:
            return "Suspense";
          case na:
            return "SuspenseList";
        }
        if ("object" === typeof a2)
          switch (a2.$$typeof) {
            case ka:
              return (a2.displayName || "Context") + ".Consumer";
            case ja:
              return (a2._context.displayName || "Context") + ".Provider";
            case la:
              var b2 = a2.render;
              b2 = b2.displayName || b2.name || "";
              return a2.displayName || ("" !== b2 ? "ForwardRef(" + b2 + ")" : "ForwardRef");
            case oa:
              return wa(a2.type);
            case qa:
              return wa(a2._render);
            case pa:
              b2 = a2._payload;
              a2 = a2._init;
              try {
                return wa(a2(b2));
              } catch (c2) {
              }
          }
        return null;
      }
      function xa(a2) {
        var b2 = a2, c2 = a2;
        if (a2.alternate)
          for (; b2.return; )
            b2 = b2.return;
        else {
          a2 = b2;
          do
            b2 = a2, 0 !== (b2.flags & 1026) && (c2 = b2.return), a2 = b2.return;
          while (a2);
        }
        return 3 === b2.tag ? c2 : null;
      }
      function ya(a2) {
        if (xa(a2) !== a2)
          throw Error(q2(188));
      }
      function za(a2) {
        var b2 = a2.alternate;
        if (!b2) {
          b2 = xa(a2);
          if (null === b2)
            throw Error(q2(188));
          return b2 !== a2 ? null : a2;
        }
        for (var c2 = a2, d2 = b2; ; ) {
          var e = c2.return;
          if (null === e)
            break;
          var f2 = e.alternate;
          if (null === f2) {
            d2 = e.return;
            if (null !== d2) {
              c2 = d2;
              continue;
            }
            break;
          }
          if (e.child === f2.child) {
            for (f2 = e.child; f2; ) {
              if (f2 === c2)
                return ya(e), a2;
              if (f2 === d2)
                return ya(e), b2;
              f2 = f2.sibling;
            }
            throw Error(q2(188));
          }
          if (c2.return !== d2.return)
            c2 = e, d2 = f2;
          else {
            for (var g2 = false, h2 = e.child; h2; ) {
              if (h2 === c2) {
                g2 = true;
                c2 = e;
                d2 = f2;
                break;
              }
              if (h2 === d2) {
                g2 = true;
                d2 = e;
                c2 = f2;
                break;
              }
              h2 = h2.sibling;
            }
            if (!g2) {
              for (h2 = f2.child; h2; ) {
                if (h2 === c2) {
                  g2 = true;
                  c2 = f2;
                  d2 = e;
                  break;
                }
                if (h2 === d2) {
                  g2 = true;
                  d2 = f2;
                  c2 = e;
                  break;
                }
                h2 = h2.sibling;
              }
              if (!g2)
                throw Error(q2(189));
            }
          }
          if (c2.alternate !== d2)
            throw Error(q2(190));
        }
        if (3 !== c2.tag)
          throw Error(q2(188));
        return c2.stateNode.current === c2 ? a2 : b2;
      }
      function Aa(a2) {
        a2 = za(a2);
        if (!a2)
          return null;
        for (var b2 = a2; ; ) {
          if (5 === b2.tag || 6 === b2.tag)
            return b2;
          if (b2.child)
            b2.child.return = b2, b2 = b2.child;
          else {
            if (b2 === a2)
              break;
            for (; !b2.sibling; ) {
              if (!b2.return || b2.return === a2)
                return null;
              b2 = b2.return;
            }
            b2.sibling.return = b2.return;
            b2 = b2.sibling;
          }
        }
        return null;
      }
      function Ba(a2) {
        a2 = za(a2);
        if (!a2)
          return null;
        for (var b2 = a2; ; ) {
          if (5 === b2.tag || 6 === b2.tag)
            return b2;
          if (b2.child && 4 !== b2.tag)
            b2.child.return = b2, b2 = b2.child;
          else {
            if (b2 === a2)
              break;
            for (; !b2.sibling; ) {
              if (!b2.return || b2.return === a2)
                return null;
              b2 = b2.return;
            }
            b2.sibling.return = b2.return;
            b2 = b2.sibling;
          }
        }
        return null;
      }
      function Ca(a2, b2) {
        for (var c2 = a2.alternate; null !== b2; ) {
          if (b2 === a2 || b2 === c2)
            return true;
          b2 = b2.return;
        }
        return false;
      }
      var Da = $$$hostConfig.getPublicInstance, Ea = $$$hostConfig.getRootHostContext, Fa = $$$hostConfig.getChildHostContext, Ga = $$$hostConfig.prepareForCommit, Ha = $$$hostConfig.resetAfterCommit, Ia = $$$hostConfig.createInstance, Ja = $$$hostConfig.appendInitialChild, Ka = $$$hostConfig.finalizeInitialChildren, La = $$$hostConfig.prepareUpdate, Ma = $$$hostConfig.shouldSetTextContent, Na = $$$hostConfig.createTextInstance, Pa = $$$hostConfig.scheduleTimeout, Qa = $$$hostConfig.cancelTimeout, Ra = $$$hostConfig.noTimeout, Sa = $$$hostConfig.isPrimaryRenderer, Ta = $$$hostConfig.supportsMutation, Ua = $$$hostConfig.supportsPersistence, Va = $$$hostConfig.supportsHydration, Wa = $$$hostConfig.getInstanceFromNode, Xa = $$$hostConfig.makeOpaqueHydratingObject, Ya = $$$hostConfig.makeClientId, Za = $$$hostConfig.beforeActiveInstanceBlur, $a = $$$hostConfig.afterActiveInstanceBlur, ab = $$$hostConfig.preparePortalMount, bb = $$$hostConfig.supportsTestSelectors, cb2 = $$$hostConfig.findFiberRoot, db = $$$hostConfig.getBoundingRect, eb = $$$hostConfig.getTextContent, fb = $$$hostConfig.isHiddenSubtree, gb = $$$hostConfig.matchAccessibilityRole, hb = $$$hostConfig.setFocusIfFocusable, ib = $$$hostConfig.setupIntersectionObserver, jb = $$$hostConfig.appendChild, kb = $$$hostConfig.appendChildToContainer, lb = $$$hostConfig.commitTextUpdate, mb = $$$hostConfig.commitMount, nb = $$$hostConfig.commitUpdate, ob = $$$hostConfig.insertBefore, pb = $$$hostConfig.insertInContainerBefore, qb = $$$hostConfig.removeChild, rb = $$$hostConfig.removeChildFromContainer, sb = $$$hostConfig.resetTextContent, tb = $$$hostConfig.hideInstance, ub = $$$hostConfig.hideTextInstance, vb = $$$hostConfig.unhideInstance, wb = $$$hostConfig.unhideTextInstance, xb = $$$hostConfig.clearContainer, yb = $$$hostConfig.cloneInstance, zb = $$$hostConfig.createContainerChildSet, Ab = $$$hostConfig.appendChildToContainerChildSet, Bb = $$$hostConfig.finalizeContainerChildren, Cb = $$$hostConfig.replaceContainerChildren, Db = $$$hostConfig.cloneHiddenInstance, Eb = $$$hostConfig.cloneHiddenTextInstance, Fb = $$$hostConfig.canHydrateInstance, Gb = $$$hostConfig.canHydrateTextInstance, Hb = $$$hostConfig.isSuspenseInstancePending, Ib = $$$hostConfig.isSuspenseInstanceFallback, Jb = $$$hostConfig.getNextHydratableSibling, Kb = $$$hostConfig.getFirstHydratableChild, Lb = $$$hostConfig.hydrateInstance, Mb = $$$hostConfig.hydrateTextInstance, Nb = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance, Ob = $$$hostConfig.commitHydratedContainer, Pb = $$$hostConfig.commitHydratedSuspenseInstance, Qb;
      function Rb(a2) {
        if (void 0 === Qb)
          try {
            throw Error();
          } catch (c2) {
            var b2 = c2.stack.trim().match(/\n( *(at )?)/);
            Qb = b2 && b2[1] || "";
          }
        return "\n" + Qb + a2;
      }
      var Sb = false;
      function Tb(a2, b2) {
        if (!a2 || Sb)
          return "";
        Sb = true;
        var c2 = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          if (b2)
            if (b2 = function() {
              throw Error();
            }, Object.defineProperty(b2.prototype, "props", { set: function() {
              throw Error();
            } }), "object" === typeof Reflect && Reflect.construct) {
              try {
                Reflect.construct(b2, []);
              } catch (k2) {
                var d2 = k2;
              }
              Reflect.construct(a2, [], b2);
            } else {
              try {
                b2.call();
              } catch (k2) {
                d2 = k2;
              }
              a2.call(b2.prototype);
            }
          else {
            try {
              throw Error();
            } catch (k2) {
              d2 = k2;
            }
            a2();
          }
        } catch (k2) {
          if (k2 && d2 && "string" === typeof k2.stack) {
            for (var e = k2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e.length - 1, h2 = f2.length - 1; 1 <= g2 && 0 <= h2 && e[g2] !== f2[h2]; )
              h2--;
            for (; 1 <= g2 && 0 <= h2; g2--, h2--)
              if (e[g2] !== f2[h2]) {
                if (1 !== g2 || 1 !== h2) {
                  do
                    if (g2--, h2--, 0 > h2 || e[g2] !== f2[h2])
                      return "\n" + e[g2].replace(" at new ", " at ");
                  while (1 <= g2 && 0 <= h2);
                }
                break;
              }
          }
        } finally {
          Sb = false, Error.prepareStackTrace = c2;
        }
        return (a2 = a2 ? a2.displayName || a2.name : "") ? Rb(a2) : "";
      }
      var Ub = [], Vb = -1;
      function Wb(a2) {
        return { current: a2 };
      }
      function z2(a2) {
        0 > Vb || (a2.current = Ub[Vb], Ub[Vb] = null, Vb--);
      }
      function A2(a2, b2) {
        Vb++;
        Ub[Vb] = a2.current;
        a2.current = b2;
      }
      var Xb = {}, B2 = Wb(Xb), D2 = Wb(false), Yb = Xb;
      function Zb(a2, b2) {
        var c2 = a2.type.contextTypes;
        if (!c2)
          return Xb;
        var d2 = a2.stateNode;
        if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2)
          return d2.__reactInternalMemoizedMaskedChildContext;
        var e = {}, f2;
        for (f2 in c2)
          e[f2] = b2[f2];
        d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = b2, a2.__reactInternalMemoizedMaskedChildContext = e);
        return e;
      }
      function E2(a2) {
        a2 = a2.childContextTypes;
        return null !== a2 && void 0 !== a2;
      }
      function $b() {
        z2(D2);
        z2(B2);
      }
      function ac(a2, b2, c2) {
        if (B2.current !== Xb)
          throw Error(q2(168));
        A2(B2, b2);
        A2(D2, c2);
      }
      function bc(a2, b2, c2) {
        var d2 = a2.stateNode;
        a2 = b2.childContextTypes;
        if ("function" !== typeof d2.getChildContext)
          return c2;
        d2 = d2.getChildContext();
        for (var e in d2)
          if (!(e in a2))
            throw Error(q2(108, wa(b2) || "Unknown", e));
        return aa({}, c2, d2);
      }
      function cc(a2) {
        a2 = (a2 = a2.stateNode) && a2.__reactInternalMemoizedMergedChildContext || Xb;
        Yb = B2.current;
        A2(B2, a2);
        A2(D2, D2.current);
        return true;
      }
      function dc(a2, b2, c2) {
        var d2 = a2.stateNode;
        if (!d2)
          throw Error(q2(169));
        c2 ? (a2 = bc(a2, b2, Yb), d2.__reactInternalMemoizedMergedChildContext = a2, z2(D2), z2(B2), A2(B2, a2)) : z2(D2);
        A2(D2, c2);
      }
      var ec = null, fc = null, gc = m2.unstable_now;
      gc();
      var hc = 0, F2 = 8;
      function ic(a2) {
        if (0 !== (1 & a2))
          return F2 = 15, 1;
        if (0 !== (2 & a2))
          return F2 = 14, 2;
        if (0 !== (4 & a2))
          return F2 = 13, 4;
        var b2 = 24 & a2;
        if (0 !== b2)
          return F2 = 12, b2;
        if (0 !== (a2 & 32))
          return F2 = 11, 32;
        b2 = 192 & a2;
        if (0 !== b2)
          return F2 = 10, b2;
        if (0 !== (a2 & 256))
          return F2 = 9, 256;
        b2 = 3584 & a2;
        if (0 !== b2)
          return F2 = 8, b2;
        if (0 !== (a2 & 4096))
          return F2 = 7, 4096;
        b2 = 4186112 & a2;
        if (0 !== b2)
          return F2 = 6, b2;
        b2 = 62914560 & a2;
        if (0 !== b2)
          return F2 = 5, b2;
        if (a2 & 67108864)
          return F2 = 4, 67108864;
        if (0 !== (a2 & 134217728))
          return F2 = 3, 134217728;
        b2 = 805306368 & a2;
        if (0 !== b2)
          return F2 = 2, b2;
        if (0 !== (1073741824 & a2))
          return F2 = 1, 1073741824;
        F2 = 8;
        return a2;
      }
      function jc(a2) {
        switch (a2) {
          case 99:
            return 15;
          case 98:
            return 10;
          case 97:
          case 96:
            return 8;
          case 95:
            return 2;
          default:
            return 0;
        }
      }
      function kc(a2) {
        switch (a2) {
          case 15:
          case 14:
            return 99;
          case 13:
          case 12:
          case 11:
          case 10:
            return 98;
          case 9:
          case 8:
          case 7:
          case 6:
          case 4:
          case 5:
            return 97;
          case 3:
          case 2:
          case 1:
            return 95;
          case 0:
            return 90;
          default:
            throw Error(q2(358, a2));
        }
      }
      function lc(a2, b2) {
        var c2 = a2.pendingLanes;
        if (0 === c2)
          return F2 = 0;
        var d2 = 0, e = 0, f2 = a2.expiredLanes, g2 = a2.suspendedLanes, h2 = a2.pingedLanes;
        if (0 !== f2)
          d2 = f2, e = F2 = 15;
        else if (f2 = c2 & 134217727, 0 !== f2) {
          var k2 = f2 & ~g2;
          0 !== k2 ? (d2 = ic(k2), e = F2) : (h2 &= f2, 0 !== h2 && (d2 = ic(h2), e = F2));
        } else
          f2 = c2 & ~g2, 0 !== f2 ? (d2 = ic(f2), e = F2) : 0 !== h2 && (d2 = ic(h2), e = F2);
        if (0 === d2)
          return 0;
        d2 = 31 - mc(d2);
        d2 = c2 & ((0 > d2 ? 0 : 1 << d2) << 1) - 1;
        if (0 !== b2 && b2 !== d2 && 0 === (b2 & g2)) {
          ic(b2);
          if (e <= F2)
            return b2;
          F2 = e;
        }
        b2 = a2.entangledLanes;
        if (0 !== b2)
          for (a2 = a2.entanglements, b2 &= d2; 0 < b2; )
            c2 = 31 - mc(b2), e = 1 << c2, d2 |= a2[c2], b2 &= ~e;
        return d2;
      }
      function nc(a2) {
        a2 = a2.pendingLanes & -1073741825;
        return 0 !== a2 ? a2 : a2 & 1073741824 ? 1073741824 : 0;
      }
      function oc(a2, b2) {
        switch (a2) {
          case 15:
            return 1;
          case 14:
            return 2;
          case 12:
            return a2 = pc(24 & ~b2), 0 === a2 ? oc(10, b2) : a2;
          case 10:
            return a2 = pc(192 & ~b2), 0 === a2 ? oc(8, b2) : a2;
          case 8:
            return a2 = pc(3584 & ~b2), 0 === a2 && (a2 = pc(4186112 & ~b2), 0 === a2 && (a2 = 512)), a2;
          case 2:
            return b2 = pc(805306368 & ~b2), 0 === b2 && (b2 = 268435456), b2;
        }
        throw Error(q2(358, a2));
      }
      function pc(a2) {
        return a2 & -a2;
      }
      function qc(a2) {
        for (var b2 = [], c2 = 0; 31 > c2; c2++)
          b2.push(a2);
        return b2;
      }
      function rc(a2, b2, c2) {
        a2.pendingLanes |= b2;
        var d2 = b2 - 1;
        a2.suspendedLanes &= d2;
        a2.pingedLanes &= d2;
        a2 = a2.eventTimes;
        b2 = 31 - mc(b2);
        a2[b2] = c2;
      }
      var mc = Math.clz32 ? Math.clz32 : sc, tc = Math.log, uc = Math.LN2;
      function sc(a2) {
        return 0 === a2 ? 32 : 31 - (tc(a2) / uc | 0) | 0;
      }
      var vc = m2.unstable_runWithPriority, wc = m2.unstable_scheduleCallback, xc = m2.unstable_cancelCallback, yc = m2.unstable_shouldYield, zc = m2.unstable_requestPaint, Ac = m2.unstable_now, Bc = m2.unstable_getCurrentPriorityLevel, Cc = m2.unstable_ImmediatePriority, Dc = m2.unstable_UserBlockingPriority, Ec = m2.unstable_NormalPriority, Fc = m2.unstable_LowPriority, Gc = m2.unstable_IdlePriority, Hc = {}, Ic = void 0 !== zc ? zc : function() {
      }, Jc = null, Kc = null, Lc = false, Mc = Ac(), G2 = 1e4 > Mc ? Ac : function() {
        return Ac() - Mc;
      };
      function Nc() {
        switch (Bc()) {
          case Cc:
            return 99;
          case Dc:
            return 98;
          case Ec:
            return 97;
          case Fc:
            return 96;
          case Gc:
            return 95;
          default:
            throw Error(q2(332));
        }
      }
      function Oc(a2) {
        switch (a2) {
          case 99:
            return Cc;
          case 98:
            return Dc;
          case 97:
            return Ec;
          case 96:
            return Fc;
          case 95:
            return Gc;
          default:
            throw Error(q2(332));
        }
      }
      function Pc(a2, b2) {
        a2 = Oc(a2);
        return vc(a2, b2);
      }
      function Qc(a2, b2, c2) {
        a2 = Oc(a2);
        return wc(a2, b2, c2);
      }
      function H2() {
        if (null !== Kc) {
          var a2 = Kc;
          Kc = null;
          xc(a2);
        }
        Rc();
      }
      function Rc() {
        if (!Lc && null !== Jc) {
          Lc = true;
          var a2 = 0;
          try {
            var b2 = Jc;
            Pc(99, function() {
              for (; a2 < b2.length; a2++) {
                var c2 = b2[a2];
                do
                  c2 = c2(true);
                while (null !== c2);
              }
            });
            Jc = null;
          } catch (c2) {
            throw null !== Jc && (Jc = Jc.slice(a2 + 1)), wc(Cc, H2), c2;
          } finally {
            Lc = false;
          }
        }
      }
      var Sc = ca.ReactCurrentBatchConfig;
      function Tc(a2, b2) {
        return a2 === b2 && (0 !== a2 || 1 / a2 === 1 / b2) || a2 !== a2 && b2 !== b2;
      }
      var I2 = "function" === typeof Object.is ? Object.is : Tc, Uc = Object.prototype.hasOwnProperty;
      function Vc(a2, b2) {
        if (I2(a2, b2))
          return true;
        if ("object" !== typeof a2 || null === a2 || "object" !== typeof b2 || null === b2)
          return false;
        var c2 = Object.keys(a2), d2 = Object.keys(b2);
        if (c2.length !== d2.length)
          return false;
        for (d2 = 0; d2 < c2.length; d2++)
          if (!Uc.call(b2, c2[d2]) || !I2(a2[c2[d2]], b2[c2[d2]]))
            return false;
        return true;
      }
      function Wc(a2) {
        switch (a2.tag) {
          case 5:
            return Rb(a2.type);
          case 16:
            return Rb("Lazy");
          case 13:
            return Rb("Suspense");
          case 19:
            return Rb("SuspenseList");
          case 0:
          case 2:
          case 15:
            return a2 = Tb(a2.type, false), a2;
          case 11:
            return a2 = Tb(a2.type.render, false), a2;
          case 22:
            return a2 = Tb(a2.type._render, false), a2;
          case 1:
            return a2 = Tb(a2.type, true), a2;
          default:
            return "";
        }
      }
      function Xc(a2, b2) {
        if (a2 && a2.defaultProps) {
          b2 = aa({}, b2);
          a2 = a2.defaultProps;
          for (var c2 in a2)
            void 0 === b2[c2] && (b2[c2] = a2[c2]);
          return b2;
        }
        return b2;
      }
      var Yc = Wb(null), Zc = null, $c = null, ad = null;
      function bd() {
        ad = $c = Zc = null;
      }
      function cd(a2, b2) {
        a2 = a2.type._context;
        Sa ? (A2(Yc, a2._currentValue), a2._currentValue = b2) : (A2(Yc, a2._currentValue2), a2._currentValue2 = b2);
      }
      function dd(a2) {
        var b2 = Yc.current;
        z2(Yc);
        a2 = a2.type._context;
        Sa ? a2._currentValue = b2 : a2._currentValue2 = b2;
      }
      function ed(a2, b2) {
        for (; null !== a2; ) {
          var c2 = a2.alternate;
          if ((a2.childLanes & b2) === b2)
            if (null === c2 || (c2.childLanes & b2) === b2)
              break;
            else
              c2.childLanes |= b2;
          else
            a2.childLanes |= b2, null !== c2 && (c2.childLanes |= b2);
          a2 = a2.return;
        }
      }
      function fd(a2, b2) {
        Zc = a2;
        ad = $c = null;
        a2 = a2.dependencies;
        null !== a2 && null !== a2.firstContext && (0 !== (a2.lanes & b2) && (gd = true), a2.firstContext = null);
      }
      function J(a2, b2) {
        if (ad !== a2 && false !== b2 && 0 !== b2) {
          if ("number" !== typeof b2 || 1073741823 === b2)
            ad = a2, b2 = 1073741823;
          b2 = { context: a2, observedBits: b2, next: null };
          if (null === $c) {
            if (null === Zc)
              throw Error(q2(308));
            $c = b2;
            Zc.dependencies = { lanes: 0, firstContext: b2, responders: null };
          } else
            $c = $c.next = b2;
        }
        return Sa ? a2._currentValue : a2._currentValue2;
      }
      var hd = false;
      function id(a2) {
        a2.updateQueue = { baseState: a2.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null }, effects: null };
      }
      function jd(a2, b2) {
        a2 = a2.updateQueue;
        b2.updateQueue === a2 && (b2.updateQueue = { baseState: a2.baseState, firstBaseUpdate: a2.firstBaseUpdate, lastBaseUpdate: a2.lastBaseUpdate, shared: a2.shared, effects: a2.effects });
      }
      function kd(a2, b2) {
        return { eventTime: a2, lane: b2, tag: 0, payload: null, callback: null, next: null };
      }
      function md(a2, b2) {
        a2 = a2.updateQueue;
        if (null !== a2) {
          a2 = a2.shared;
          var c2 = a2.pending;
          null === c2 ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
          a2.pending = b2;
        }
      }
      function nd(a2, b2) {
        var c2 = a2.updateQueue, d2 = a2.alternate;
        if (null !== d2 && (d2 = d2.updateQueue, c2 === d2)) {
          var e = null, f2 = null;
          c2 = c2.firstBaseUpdate;
          if (null !== c2) {
            do {
              var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
              null === f2 ? e = f2 = g2 : f2 = f2.next = g2;
              c2 = c2.next;
            } while (null !== c2);
            null === f2 ? e = f2 = b2 : f2 = f2.next = b2;
          } else
            e = f2 = b2;
          c2 = { baseState: d2.baseState, firstBaseUpdate: e, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
          a2.updateQueue = c2;
          return;
        }
        a2 = c2.lastBaseUpdate;
        null === a2 ? c2.firstBaseUpdate = b2 : a2.next = b2;
        c2.lastBaseUpdate = b2;
      }
      function od(a2, b2, c2, d2) {
        var e = a2.updateQueue;
        hd = false;
        var f2 = e.firstBaseUpdate, g2 = e.lastBaseUpdate, h2 = e.shared.pending;
        if (null !== h2) {
          e.shared.pending = null;
          var k2 = h2, l2 = k2.next;
          k2.next = null;
          null === g2 ? f2 = l2 : g2.next = l2;
          g2 = k2;
          var n2 = a2.alternate;
          if (null !== n2) {
            n2 = n2.updateQueue;
            var t2 = n2.lastBaseUpdate;
            t2 !== g2 && (null === t2 ? n2.firstBaseUpdate = l2 : t2.next = l2, n2.lastBaseUpdate = k2);
          }
        }
        if (null !== f2) {
          t2 = e.baseState;
          g2 = 0;
          n2 = l2 = k2 = null;
          do {
            h2 = f2.lane;
            var p2 = f2.eventTime;
            if ((d2 & h2) === h2) {
              null !== n2 && (n2 = n2.next = {
                eventTime: p2,
                lane: 0,
                tag: f2.tag,
                payload: f2.payload,
                callback: f2.callback,
                next: null
              });
              a: {
                var y2 = a2, x2 = f2;
                h2 = b2;
                p2 = c2;
                switch (x2.tag) {
                  case 1:
                    y2 = x2.payload;
                    if ("function" === typeof y2) {
                      t2 = y2.call(p2, t2, h2);
                      break a;
                    }
                    t2 = y2;
                    break a;
                  case 3:
                    y2.flags = y2.flags & -4097 | 64;
                  case 0:
                    y2 = x2.payload;
                    h2 = "function" === typeof y2 ? y2.call(p2, t2, h2) : y2;
                    if (null === h2 || void 0 === h2)
                      break a;
                    t2 = aa({}, t2, h2);
                    break a;
                  case 2:
                    hd = true;
                }
              }
              null !== f2.callback && (a2.flags |= 32, h2 = e.effects, null === h2 ? e.effects = [f2] : h2.push(f2));
            } else
              p2 = { eventTime: p2, lane: h2, tag: f2.tag, payload: f2.payload, callback: f2.callback, next: null }, null === n2 ? (l2 = n2 = p2, k2 = t2) : n2 = n2.next = p2, g2 |= h2;
            f2 = f2.next;
            if (null === f2)
              if (h2 = e.shared.pending, null === h2)
                break;
              else
                f2 = h2.next, h2.next = null, e.lastBaseUpdate = h2, e.shared.pending = null;
          } while (1);
          null === n2 && (k2 = t2);
          e.baseState = k2;
          e.firstBaseUpdate = l2;
          e.lastBaseUpdate = n2;
          pd |= g2;
          a2.lanes = g2;
          a2.memoizedState = t2;
        }
      }
      function qd(a2, b2, c2) {
        a2 = b2.effects;
        b2.effects = null;
        if (null !== a2)
          for (b2 = 0; b2 < a2.length; b2++) {
            var d2 = a2[b2], e = d2.callback;
            if (null !== e) {
              d2.callback = null;
              d2 = c2;
              if ("function" !== typeof e)
                throw Error(q2(191, e));
              e.call(d2);
            }
          }
      }
      var rd = new ba.Component().refs;
      function sd(a2, b2, c2, d2) {
        b2 = a2.memoizedState;
        c2 = c2(d2, b2);
        c2 = null === c2 || void 0 === c2 ? b2 : aa({}, b2, c2);
        a2.memoizedState = c2;
        0 === a2.lanes && (a2.updateQueue.baseState = c2);
      }
      var vd = { isMounted: function(a2) {
        return (a2 = a2._reactInternals) ? xa(a2) === a2 : false;
      }, enqueueSetState: function(a2, b2, c2) {
        a2 = a2._reactInternals;
        var d2 = K(), e = td(a2), f2 = kd(d2, e);
        f2.payload = b2;
        void 0 !== c2 && null !== c2 && (f2.callback = c2);
        md(a2, f2);
        ud(a2, e, d2);
      }, enqueueReplaceState: function(a2, b2, c2) {
        a2 = a2._reactInternals;
        var d2 = K(), e = td(a2), f2 = kd(d2, e);
        f2.tag = 1;
        f2.payload = b2;
        void 0 !== c2 && null !== c2 && (f2.callback = c2);
        md(a2, f2);
        ud(a2, e, d2);
      }, enqueueForceUpdate: function(a2, b2) {
        a2 = a2._reactInternals;
        var c2 = K(), d2 = td(a2), e = kd(c2, d2);
        e.tag = 2;
        void 0 !== b2 && null !== b2 && (e.callback = b2);
        md(a2, e);
        ud(a2, d2, c2);
      } };
      function wd(a2, b2, c2, d2, e, f2, g2) {
        a2 = a2.stateNode;
        return "function" === typeof a2.shouldComponentUpdate ? a2.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Vc(c2, d2) || !Vc(e, f2) : true;
      }
      function xd(a2, b2, c2) {
        var d2 = false, e = Xb;
        var f2 = b2.contextType;
        "object" === typeof f2 && null !== f2 ? f2 = J(f2) : (e = E2(b2) ? Yb : B2.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Zb(a2, e) : Xb);
        b2 = new b2(c2, f2);
        a2.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
        b2.updater = vd;
        a2.stateNode = b2;
        b2._reactInternals = a2;
        d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = e, a2.__reactInternalMemoizedMaskedChildContext = f2);
        return b2;
      }
      function yd(a2, b2, c2, d2) {
        a2 = b2.state;
        "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c2, d2);
        "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c2, d2);
        b2.state !== a2 && vd.enqueueReplaceState(b2, b2.state, null);
      }
      function zd(a2, b2, c2, d2) {
        var e = a2.stateNode;
        e.props = c2;
        e.state = a2.memoizedState;
        e.refs = rd;
        id(a2);
        var f2 = b2.contextType;
        "object" === typeof f2 && null !== f2 ? e.context = J(f2) : (f2 = E2(b2) ? Yb : B2.current, e.context = Zb(a2, f2));
        od(a2, c2, e, d2);
        e.state = a2.memoizedState;
        f2 = b2.getDerivedStateFromProps;
        "function" === typeof f2 && (sd(a2, b2, f2, c2), e.state = a2.memoizedState);
        "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b2 = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b2 !== e.state && vd.enqueueReplaceState(e, e.state, null), od(a2, c2, e, d2), e.state = a2.memoizedState);
        "function" === typeof e.componentDidMount && (a2.flags |= 4);
      }
      var Ad = Array.isArray;
      function Bd(a2, b2, c2) {
        a2 = c2.ref;
        if (null !== a2 && "function" !== typeof a2 && "object" !== typeof a2) {
          if (c2._owner) {
            c2 = c2._owner;
            if (c2) {
              if (1 !== c2.tag)
                throw Error(q2(309));
              var d2 = c2.stateNode;
            }
            if (!d2)
              throw Error(q2(147, a2));
            var e = "" + a2;
            if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === e)
              return b2.ref;
            b2 = function(a3) {
              var b3 = d2.refs;
              b3 === rd && (b3 = d2.refs = {});
              null === a3 ? delete b3[e] : b3[e] = a3;
            };
            b2._stringRef = e;
            return b2;
          }
          if ("string" !== typeof a2)
            throw Error(q2(284));
          if (!c2._owner)
            throw Error(q2(290, a2));
        }
        return a2;
      }
      function Cd(a2, b2) {
        if ("textarea" !== a2.type)
          throw Error(q2(31, "[object Object]" === Object.prototype.toString.call(b2) ? "object with keys {" + Object.keys(b2).join(", ") + "}" : b2));
      }
      function Dd(a2) {
        function b2(b3, c3) {
          if (a2) {
            var d3 = b3.lastEffect;
            null !== d3 ? (d3.nextEffect = c3, b3.lastEffect = c3) : b3.firstEffect = b3.lastEffect = c3;
            c3.nextEffect = null;
            c3.flags = 8;
          }
        }
        function c2(c3, d3) {
          if (!a2)
            return null;
          for (; null !== d3; )
            b2(c3, d3), d3 = d3.sibling;
          return null;
        }
        function d2(a3, b3) {
          for (a3 = /* @__PURE__ */ new Map(); null !== b3; )
            null !== b3.key ? a3.set(b3.key, b3) : a3.set(b3.index, b3), b3 = b3.sibling;
          return a3;
        }
        function e(a3, b3) {
          a3 = Ed(a3, b3);
          a3.index = 0;
          a3.sibling = null;
          return a3;
        }
        function f2(b3, c3, d3) {
          b3.index = d3;
          if (!a2)
            return c3;
          d3 = b3.alternate;
          if (null !== d3)
            return d3 = d3.index, d3 < c3 ? (b3.flags = 2, c3) : d3;
          b3.flags = 2;
          return c3;
        }
        function g2(b3) {
          a2 && null === b3.alternate && (b3.flags = 2);
          return b3;
        }
        function h2(a3, b3, c3, d3) {
          if (null === b3 || 6 !== b3.tag)
            return b3 = Fd(c3, a3.mode, d3), b3.return = a3, b3;
          b3 = e(b3, c3);
          b3.return = a3;
          return b3;
        }
        function k2(a3, b3, c3, d3) {
          if (null !== b3 && b3.elementType === c3.type)
            return d3 = e(b3, c3.props), d3.ref = Bd(a3, b3, c3), d3.return = a3, d3;
          d3 = Gd(c3.type, c3.key, c3.props, null, a3.mode, d3);
          d3.ref = Bd(a3, b3, c3);
          d3.return = a3;
          return d3;
        }
        function l2(a3, b3, c3, d3) {
          if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation)
            return b3 = Hd(c3, a3.mode, d3), b3.return = a3, b3;
          b3 = e(b3, c3.children || []);
          b3.return = a3;
          return b3;
        }
        function n2(a3, b3, c3, d3, f3) {
          if (null === b3 || 7 !== b3.tag)
            return b3 = Id(c3, a3.mode, d3, f3), b3.return = a3, b3;
          b3 = e(b3, c3);
          b3.return = a3;
          return b3;
        }
        function t2(a3, b3, c3) {
          if ("string" === typeof b3 || "number" === typeof b3)
            return b3 = Fd("" + b3, a3.mode, c3), b3.return = a3, b3;
          if ("object" === typeof b3 && null !== b3) {
            switch (b3.$$typeof) {
              case da:
                return c3 = Gd(b3.type, b3.key, b3.props, null, a3.mode, c3), c3.ref = Bd(a3, null, b3), c3.return = a3, c3;
              case ea:
                return b3 = Hd(b3, a3.mode, c3), b3.return = a3, b3;
            }
            if (Ad(b3) || va(b3))
              return b3 = Id(
                b3,
                a3.mode,
                c3,
                null
              ), b3.return = a3, b3;
            Cd(a3, b3);
          }
          return null;
        }
        function p2(a3, b3, c3, d3) {
          var e2 = null !== b3 ? b3.key : null;
          if ("string" === typeof c3 || "number" === typeof c3)
            return null !== e2 ? null : h2(a3, b3, "" + c3, d3);
          if ("object" === typeof c3 && null !== c3) {
            switch (c3.$$typeof) {
              case da:
                return c3.key === e2 ? c3.type === fa ? n2(a3, b3, c3.props.children, d3, e2) : k2(a3, b3, c3, d3) : null;
              case ea:
                return c3.key === e2 ? l2(a3, b3, c3, d3) : null;
            }
            if (Ad(c3) || va(c3))
              return null !== e2 ? null : n2(a3, b3, c3, d3, null);
            Cd(a3, c3);
          }
          return null;
        }
        function y2(a3, b3, c3, d3, e2) {
          if ("string" === typeof d3 || "number" === typeof d3)
            return a3 = a3.get(c3) || null, h2(b3, a3, "" + d3, e2);
          if ("object" === typeof d3 && null !== d3) {
            switch (d3.$$typeof) {
              case da:
                return a3 = a3.get(null === d3.key ? c3 : d3.key) || null, d3.type === fa ? n2(b3, a3, d3.props.children, e2, d3.key) : k2(b3, a3, d3, e2);
              case ea:
                return a3 = a3.get(null === d3.key ? c3 : d3.key) || null, l2(b3, a3, d3, e2);
            }
            if (Ad(d3) || va(d3))
              return a3 = a3.get(c3) || null, n2(b3, a3, d3, e2, null);
            Cd(b3, d3);
          }
          return null;
        }
        function x2(e2, g3, h3, k3) {
          for (var l3 = null, v2 = null, u2 = g3, C2 = g3 = 0, n3 = null; null !== u2 && C2 < h3.length; C2++) {
            u2.index > C2 ? (n3 = u2, u2 = null) : n3 = u2.sibling;
            var w2 = p2(e2, u2, h3[C2], k3);
            if (null === w2) {
              null === u2 && (u2 = n3);
              break;
            }
            a2 && u2 && null === w2.alternate && b2(e2, u2);
            g3 = f2(w2, g3, C2);
            null === v2 ? l3 = w2 : v2.sibling = w2;
            v2 = w2;
            u2 = n3;
          }
          if (C2 === h3.length)
            return c2(e2, u2), l3;
          if (null === u2) {
            for (; C2 < h3.length; C2++)
              u2 = t2(e2, h3[C2], k3), null !== u2 && (g3 = f2(u2, g3, C2), null === v2 ? l3 = u2 : v2.sibling = u2, v2 = u2);
            return l3;
          }
          for (u2 = d2(e2, u2); C2 < h3.length; C2++)
            n3 = y2(u2, e2, C2, h3[C2], k3), null !== n3 && (a2 && null !== n3.alternate && u2.delete(null === n3.key ? C2 : n3.key), g3 = f2(n3, g3, C2), null === v2 ? l3 = n3 : v2.sibling = n3, v2 = n3);
          a2 && u2.forEach(function(a3) {
            return b2(e2, a3);
          });
          return l3;
        }
        function Y2(e2, g3, h3, k3) {
          var l3 = va(h3);
          if ("function" !== typeof l3)
            throw Error(q2(150));
          h3 = l3.call(h3);
          if (null == h3)
            throw Error(q2(151));
          for (var u2 = l3 = null, v2 = g3, n3 = g3 = 0, C2 = null, w2 = h3.next(); null !== v2 && !w2.done; n3++, w2 = h3.next()) {
            v2.index > n3 ? (C2 = v2, v2 = null) : C2 = v2.sibling;
            var x3 = p2(e2, v2, w2.value, k3);
            if (null === x3) {
              null === v2 && (v2 = C2);
              break;
            }
            a2 && v2 && null === x3.alternate && b2(e2, v2);
            g3 = f2(x3, g3, n3);
            null === u2 ? l3 = x3 : u2.sibling = x3;
            u2 = x3;
            v2 = C2;
          }
          if (w2.done)
            return c2(e2, v2), l3;
          if (null === v2) {
            for (; !w2.done; n3++, w2 = h3.next())
              w2 = t2(e2, w2.value, k3), null !== w2 && (g3 = f2(w2, g3, n3), null === u2 ? l3 = w2 : u2.sibling = w2, u2 = w2);
            return l3;
          }
          for (v2 = d2(e2, v2); !w2.done; n3++, w2 = h3.next())
            w2 = y2(v2, e2, n3, w2.value, k3), null !== w2 && (a2 && null !== w2.alternate && v2.delete(null === w2.key ? n3 : w2.key), g3 = f2(w2, g3, n3), null === u2 ? l3 = w2 : u2.sibling = w2, u2 = w2);
          a2 && v2.forEach(function(a3) {
            return b2(e2, a3);
          });
          return l3;
        }
        return function(a3, d3, f3, h3) {
          var k3 = "object" === typeof f3 && null !== f3 && f3.type === fa && null === f3.key;
          k3 && (f3 = f3.props.children);
          var l3 = "object" === typeof f3 && null !== f3;
          if (l3)
            switch (f3.$$typeof) {
              case da:
                a: {
                  l3 = f3.key;
                  for (k3 = d3; null !== k3; ) {
                    if (k3.key === l3) {
                      switch (k3.tag) {
                        case 7:
                          if (f3.type === fa) {
                            c2(a3, k3.sibling);
                            d3 = e(k3, f3.props.children);
                            d3.return = a3;
                            a3 = d3;
                            break a;
                          }
                          break;
                        default:
                          if (k3.elementType === f3.type) {
                            c2(a3, k3.sibling);
                            d3 = e(k3, f3.props);
                            d3.ref = Bd(a3, k3, f3);
                            d3.return = a3;
                            a3 = d3;
                            break a;
                          }
                      }
                      c2(a3, k3);
                      break;
                    } else
                      b2(a3, k3);
                    k3 = k3.sibling;
                  }
                  f3.type === fa ? (d3 = Id(f3.props.children, a3.mode, h3, f3.key), d3.return = a3, a3 = d3) : (h3 = Gd(f3.type, f3.key, f3.props, null, a3.mode, h3), h3.ref = Bd(a3, d3, f3), h3.return = a3, a3 = h3);
                }
                return g2(a3);
              case ea:
                a: {
                  for (k3 = f3.key; null !== d3; ) {
                    if (d3.key === k3)
                      if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                        c2(a3, d3.sibling);
                        d3 = e(d3, f3.children || []);
                        d3.return = a3;
                        a3 = d3;
                        break a;
                      } else {
                        c2(a3, d3);
                        break;
                      }
                    else
                      b2(a3, d3);
                    d3 = d3.sibling;
                  }
                  d3 = Hd(f3, a3.mode, h3);
                  d3.return = a3;
                  a3 = d3;
                }
                return g2(a3);
            }
          if ("string" === typeof f3 || "number" === typeof f3)
            return f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c2(a3, d3.sibling), d3 = e(d3, f3), d3.return = a3, a3 = d3) : (c2(a3, d3), d3 = Fd(f3, a3.mode, h3), d3.return = a3, a3 = d3), g2(a3);
          if (Ad(f3))
            return x2(a3, d3, f3, h3);
          if (va(f3))
            return Y2(a3, d3, f3, h3);
          l3 && Cd(a3, f3);
          if ("undefined" === typeof f3 && !k3)
            switch (a3.tag) {
              case 1:
              case 22:
              case 0:
              case 11:
              case 15:
                throw Error(q2(152, wa(a3.type) || "Component"));
            }
          return c2(a3, d3);
        };
      }
      var Jd = Dd(true), Kd = Dd(false), Ld = {}, L2 = Wb(Ld), Md = Wb(Ld), Nd = Wb(Ld);
      function Od(a2) {
        if (a2 === Ld)
          throw Error(q2(174));
        return a2;
      }
      function Pd(a2, b2) {
        A2(Nd, b2);
        A2(Md, a2);
        A2(L2, Ld);
        a2 = Ea(b2);
        z2(L2);
        A2(L2, a2);
      }
      function Qd() {
        z2(L2);
        z2(Md);
        z2(Nd);
      }
      function Rd(a2) {
        var b2 = Od(Nd.current), c2 = Od(L2.current);
        b2 = Fa(c2, a2.type, b2);
        c2 !== b2 && (A2(Md, a2), A2(L2, b2));
      }
      function Sd(a2) {
        Md.current === a2 && (z2(L2), z2(Md));
      }
      var M2 = Wb(0);
      function Td(a2) {
        for (var b2 = a2; null !== b2; ) {
          if (13 === b2.tag) {
            var c2 = b2.memoizedState;
            if (null !== c2 && (c2 = c2.dehydrated, null === c2 || Hb(c2) || Ib(c2)))
              return b2;
          } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
            if (0 !== (b2.flags & 64))
              return b2;
          } else if (null !== b2.child) {
            b2.child.return = b2;
            b2 = b2.child;
            continue;
          }
          if (b2 === a2)
            break;
          for (; null === b2.sibling; ) {
            if (null === b2.return || b2.return === a2)
              return null;
            b2 = b2.return;
          }
          b2.sibling.return = b2.return;
          b2 = b2.sibling;
        }
        return null;
      }
      var Ud = null, Vd = null, Wd = false;
      function Xd(a2, b2) {
        var c2 = Yd(5, null, null, 0);
        c2.elementType = "DELETED";
        c2.type = "DELETED";
        c2.stateNode = b2;
        c2.return = a2;
        c2.flags = 8;
        null !== a2.lastEffect ? (a2.lastEffect.nextEffect = c2, a2.lastEffect = c2) : a2.firstEffect = a2.lastEffect = c2;
      }
      function Zd(a2, b2) {
        switch (a2.tag) {
          case 5:
            return b2 = Fb(b2, a2.type, a2.pendingProps), null !== b2 ? (a2.stateNode = b2, true) : false;
          case 6:
            return b2 = Gb(b2, a2.pendingProps), null !== b2 ? (a2.stateNode = b2, true) : false;
          case 13:
            return false;
          default:
            return false;
        }
      }
      function $d(a2) {
        if (Wd) {
          var b2 = Vd;
          if (b2) {
            var c2 = b2;
            if (!Zd(a2, b2)) {
              b2 = Jb(c2);
              if (!b2 || !Zd(a2, b2)) {
                a2.flags = a2.flags & -1025 | 2;
                Wd = false;
                Ud = a2;
                return;
              }
              Xd(Ud, c2);
            }
            Ud = a2;
            Vd = Kb(b2);
          } else
            a2.flags = a2.flags & -1025 | 2, Wd = false, Ud = a2;
        }
      }
      function ae(a2) {
        for (a2 = a2.return; null !== a2 && 5 !== a2.tag && 3 !== a2.tag && 13 !== a2.tag; )
          a2 = a2.return;
        Ud = a2;
      }
      function be(a2) {
        if (!Va || a2 !== Ud)
          return false;
        if (!Wd)
          return ae(a2), Wd = true, false;
        var b2 = a2.type;
        if (5 !== a2.tag || "head" !== b2 && "body" !== b2 && !Ma(b2, a2.memoizedProps))
          for (b2 = Vd; b2; )
            Xd(a2, b2), b2 = Jb(b2);
        ae(a2);
        if (13 === a2.tag) {
          if (!Va)
            throw Error(q2(316));
          a2 = a2.memoizedState;
          a2 = null !== a2 ? a2.dehydrated : null;
          if (!a2)
            throw Error(q2(317));
          Vd = Nb(a2);
        } else
          Vd = Ud ? Jb(a2.stateNode) : null;
        return true;
      }
      function ce() {
        Va && (Vd = Ud = null, Wd = false);
      }
      var de = [];
      function ee() {
        for (var a2 = 0; a2 < de.length; a2++) {
          var b2 = de[a2];
          Sa ? b2._workInProgressVersionPrimary = null : b2._workInProgressVersionSecondary = null;
        }
        de.length = 0;
      }
      var fe = ca.ReactCurrentDispatcher, ge = ca.ReactCurrentBatchConfig, he = 0, N = null, O2 = null, P2 = null, ie = false, je = false;
      function Q2() {
        throw Error(q2(321));
      }
      function ke(a2, b2) {
        if (null === b2)
          return false;
        for (var c2 = 0; c2 < b2.length && c2 < a2.length; c2++)
          if (!I2(a2[c2], b2[c2]))
            return false;
        return true;
      }
      function le(a2, b2, c2, d2, e, f2) {
        he = f2;
        N = b2;
        b2.memoizedState = null;
        b2.updateQueue = null;
        b2.lanes = 0;
        fe.current = null === a2 || null === a2.memoizedState ? me : ne;
        a2 = c2(d2, e);
        if (je) {
          f2 = 0;
          do {
            je = false;
            if (!(25 > f2))
              throw Error(q2(301));
            f2 += 1;
            P2 = O2 = null;
            b2.updateQueue = null;
            fe.current = oe;
            a2 = c2(d2, e);
          } while (je);
        }
        fe.current = pe;
        b2 = null !== O2 && null !== O2.next;
        he = 0;
        P2 = O2 = N = null;
        ie = false;
        if (b2)
          throw Error(q2(300));
        return a2;
      }
      function qe() {
        var a2 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
        null === P2 ? N.memoizedState = P2 = a2 : P2 = P2.next = a2;
        return P2;
      }
      function re() {
        if (null === O2) {
          var a2 = N.alternate;
          a2 = null !== a2 ? a2.memoizedState : null;
        } else
          a2 = O2.next;
        var b2 = null === P2 ? N.memoizedState : P2.next;
        if (null !== b2)
          P2 = b2, O2 = a2;
        else {
          if (null === a2)
            throw Error(q2(310));
          O2 = a2;
          a2 = { memoizedState: O2.memoizedState, baseState: O2.baseState, baseQueue: O2.baseQueue, queue: O2.queue, next: null };
          null === P2 ? N.memoizedState = P2 = a2 : P2 = P2.next = a2;
        }
        return P2;
      }
      function se(a2, b2) {
        return "function" === typeof b2 ? b2(a2) : b2;
      }
      function te(a2) {
        var b2 = re(), c2 = b2.queue;
        if (null === c2)
          throw Error(q2(311));
        c2.lastRenderedReducer = a2;
        var d2 = O2, e = d2.baseQueue, f2 = c2.pending;
        if (null !== f2) {
          if (null !== e) {
            var g2 = e.next;
            e.next = f2.next;
            f2.next = g2;
          }
          d2.baseQueue = e = f2;
          c2.pending = null;
        }
        if (null !== e) {
          e = e.next;
          d2 = d2.baseState;
          var h2 = g2 = f2 = null, k2 = e;
          do {
            var l2 = k2.lane;
            if ((he & l2) === l2)
              null !== h2 && (h2 = h2.next = { lane: 0, action: k2.action, eagerReducer: k2.eagerReducer, eagerState: k2.eagerState, next: null }), d2 = k2.eagerReducer === a2 ? k2.eagerState : a2(d2, k2.action);
            else {
              var n2 = {
                lane: l2,
                action: k2.action,
                eagerReducer: k2.eagerReducer,
                eagerState: k2.eagerState,
                next: null
              };
              null === h2 ? (g2 = h2 = n2, f2 = d2) : h2 = h2.next = n2;
              N.lanes |= l2;
              pd |= l2;
            }
            k2 = k2.next;
          } while (null !== k2 && k2 !== e);
          null === h2 ? f2 = d2 : h2.next = g2;
          I2(d2, b2.memoizedState) || (gd = true);
          b2.memoizedState = d2;
          b2.baseState = f2;
          b2.baseQueue = h2;
          c2.lastRenderedState = d2;
        }
        return [b2.memoizedState, c2.dispatch];
      }
      function ue(a2) {
        var b2 = re(), c2 = b2.queue;
        if (null === c2)
          throw Error(q2(311));
        c2.lastRenderedReducer = a2;
        var d2 = c2.dispatch, e = c2.pending, f2 = b2.memoizedState;
        if (null !== e) {
          c2.pending = null;
          var g2 = e = e.next;
          do
            f2 = a2(f2, g2.action), g2 = g2.next;
          while (g2 !== e);
          I2(f2, b2.memoizedState) || (gd = true);
          b2.memoizedState = f2;
          null === b2.baseQueue && (b2.baseState = f2);
          c2.lastRenderedState = f2;
        }
        return [f2, d2];
      }
      function ve(a2, b2, c2) {
        var d2 = b2._getVersion;
        d2 = d2(b2._source);
        var e = Sa ? b2._workInProgressVersionPrimary : b2._workInProgressVersionSecondary;
        if (null !== e)
          a2 = e === d2;
        else if (a2 = a2.mutableReadLanes, a2 = (he & a2) === a2)
          Sa ? b2._workInProgressVersionPrimary = d2 : b2._workInProgressVersionSecondary = d2, de.push(b2);
        if (a2)
          return c2(b2._source);
        de.push(b2);
        throw Error(q2(350));
      }
      function we(a2, b2, c2, d2) {
        var e = R2;
        if (null === e)
          throw Error(q2(349));
        var f2 = b2._getVersion, g2 = f2(b2._source), h2 = fe.current, k2 = h2.useState(function() {
          return ve(e, b2, c2);
        }), l2 = k2[1], n2 = k2[0];
        k2 = P2;
        var t2 = a2.memoizedState, p2 = t2.refs, y2 = p2.getSnapshot, x2 = t2.source;
        t2 = t2.subscribe;
        var Y2 = N;
        a2.memoizedState = { refs: p2, source: b2, subscribe: d2 };
        h2.useEffect(function() {
          p2.getSnapshot = c2;
          p2.setSnapshot = l2;
          var a3 = f2(b2._source);
          if (!I2(g2, a3)) {
            a3 = c2(b2._source);
            I2(n2, a3) || (l2(a3), a3 = td(Y2), e.mutableReadLanes |= a3 & e.pendingLanes);
            a3 = e.mutableReadLanes;
            e.entangledLanes |= a3;
            for (var d3 = e.entanglements, h3 = a3; 0 < h3; ) {
              var k3 = 31 - mc(h3), t3 = 1 << k3;
              d3[k3] |= a3;
              h3 &= ~t3;
            }
          }
        }, [c2, b2, d2]);
        h2.useEffect(function() {
          return d2(b2._source, function() {
            var a3 = p2.getSnapshot, c3 = p2.setSnapshot;
            try {
              c3(a3(b2._source));
              var d3 = td(Y2);
              e.mutableReadLanes |= d3 & e.pendingLanes;
            } catch (Oa) {
              c3(function() {
                throw Oa;
              });
            }
          });
        }, [b2, d2]);
        I2(y2, c2) && I2(x2, b2) && I2(t2, d2) || (a2 = { pending: null, dispatch: null, lastRenderedReducer: se, lastRenderedState: n2 }, a2.dispatch = l2 = xe.bind(null, N, a2), k2.queue = a2, k2.baseQueue = null, n2 = ve(e, b2, c2), k2.memoizedState = k2.baseState = n2);
        return n2;
      }
      function ye(a2, b2, c2) {
        var d2 = re();
        return we(d2, a2, b2, c2);
      }
      function ze(a2) {
        var b2 = qe();
        "function" === typeof a2 && (a2 = a2());
        b2.memoizedState = b2.baseState = a2;
        a2 = b2.queue = { pending: null, dispatch: null, lastRenderedReducer: se, lastRenderedState: a2 };
        a2 = a2.dispatch = xe.bind(null, N, a2);
        return [b2.memoizedState, a2];
      }
      function Ae(a2, b2, c2, d2) {
        a2 = { tag: a2, create: b2, destroy: c2, deps: d2, next: null };
        b2 = N.updateQueue;
        null === b2 ? (b2 = { lastEffect: null }, N.updateQueue = b2, b2.lastEffect = a2.next = a2) : (c2 = b2.lastEffect, null === c2 ? b2.lastEffect = a2.next = a2 : (d2 = c2.next, c2.next = a2, a2.next = d2, b2.lastEffect = a2));
        return a2;
      }
      function Be(a2) {
        var b2 = qe();
        a2 = { current: a2 };
        return b2.memoizedState = a2;
      }
      function Ce() {
        return re().memoizedState;
      }
      function De(a2, b2, c2, d2) {
        var e = qe();
        N.flags |= a2;
        e.memoizedState = Ae(1 | b2, c2, void 0, void 0 === d2 ? null : d2);
      }
      function Ee(a2, b2, c2, d2) {
        var e = re();
        d2 = void 0 === d2 ? null : d2;
        var f2 = void 0;
        if (null !== O2) {
          var g2 = O2.memoizedState;
          f2 = g2.destroy;
          if (null !== d2 && ke(d2, g2.deps)) {
            Ae(b2, c2, f2, d2);
            return;
          }
        }
        N.flags |= a2;
        e.memoizedState = Ae(1 | b2, c2, f2, d2);
      }
      function Fe(a2, b2) {
        return De(516, 4, a2, b2);
      }
      function Ge(a2, b2) {
        return Ee(516, 4, a2, b2);
      }
      function He(a2, b2) {
        return Ee(4, 2, a2, b2);
      }
      function Ie(a2, b2) {
        if ("function" === typeof b2)
          return a2 = a2(), b2(a2), function() {
            b2(null);
          };
        if (null !== b2 && void 0 !== b2)
          return a2 = a2(), b2.current = a2, function() {
            b2.current = null;
          };
      }
      function Je(a2, b2, c2) {
        c2 = null !== c2 && void 0 !== c2 ? c2.concat([a2]) : null;
        return Ee(4, 2, Ie.bind(null, b2, a2), c2);
      }
      function Ke() {
      }
      function Le(a2, b2) {
        var c2 = re();
        b2 = void 0 === b2 ? null : b2;
        var d2 = c2.memoizedState;
        if (null !== d2 && null !== b2 && ke(b2, d2[1]))
          return d2[0];
        c2.memoizedState = [a2, b2];
        return a2;
      }
      function Me(a2, b2) {
        var c2 = re();
        b2 = void 0 === b2 ? null : b2;
        var d2 = c2.memoizedState;
        if (null !== d2 && null !== b2 && ke(b2, d2[1]))
          return d2[0];
        a2 = a2();
        c2.memoizedState = [a2, b2];
        return a2;
      }
      function Ne(a2, b2) {
        var c2 = Nc();
        Pc(98 > c2 ? 98 : c2, function() {
          a2(true);
        });
        Pc(97 < c2 ? 97 : c2, function() {
          var c3 = ge.transition;
          ge.transition = 1;
          try {
            a2(false), b2();
          } finally {
            ge.transition = c3;
          }
        });
      }
      function xe(a2, b2, c2) {
        var d2 = K(), e = td(a2), f2 = { lane: e, action: c2, eagerReducer: null, eagerState: null, next: null }, g2 = b2.pending;
        null === g2 ? f2.next = f2 : (f2.next = g2.next, g2.next = f2);
        b2.pending = f2;
        g2 = a2.alternate;
        if (a2 === N || null !== g2 && g2 === N)
          je = ie = true;
        else {
          if (0 === a2.lanes && (null === g2 || 0 === g2.lanes) && (g2 = b2.lastRenderedReducer, null !== g2))
            try {
              var h2 = b2.lastRenderedState, k2 = g2(h2, c2);
              f2.eagerReducer = g2;
              f2.eagerState = k2;
              if (I2(k2, h2))
                return;
            } catch (l2) {
            } finally {
            }
          ud(a2, e, d2);
        }
      }
      var pe = { readContext: J, useCallback: Q2, useContext: Q2, useEffect: Q2, useImperativeHandle: Q2, useLayoutEffect: Q2, useMemo: Q2, useReducer: Q2, useRef: Q2, useState: Q2, useDebugValue: Q2, useDeferredValue: Q2, useTransition: Q2, useMutableSource: Q2, useOpaqueIdentifier: Q2, unstable_isNewReconciler: false }, me = { readContext: J, useCallback: function(a2, b2) {
        qe().memoizedState = [a2, void 0 === b2 ? null : b2];
        return a2;
      }, useContext: J, useEffect: Fe, useImperativeHandle: function(a2, b2, c2) {
        c2 = null !== c2 && void 0 !== c2 ? c2.concat([a2]) : null;
        return De(4, 2, Ie.bind(null, b2, a2), c2);
      }, useLayoutEffect: function(a2, b2) {
        return De(4, 2, a2, b2);
      }, useMemo: function(a2, b2) {
        var c2 = qe();
        b2 = void 0 === b2 ? null : b2;
        a2 = a2();
        c2.memoizedState = [a2, b2];
        return a2;
      }, useReducer: function(a2, b2, c2) {
        var d2 = qe();
        b2 = void 0 !== c2 ? c2(b2) : b2;
        d2.memoizedState = d2.baseState = b2;
        a2 = d2.queue = { pending: null, dispatch: null, lastRenderedReducer: a2, lastRenderedState: b2 };
        a2 = a2.dispatch = xe.bind(null, N, a2);
        return [d2.memoizedState, a2];
      }, useRef: Be, useState: ze, useDebugValue: Ke, useDeferredValue: function(a2) {
        var b2 = ze(a2), c2 = b2[0], d2 = b2[1];
        Fe(function() {
          var b3 = ge.transition;
          ge.transition = 1;
          try {
            d2(a2);
          } finally {
            ge.transition = b3;
          }
        }, [a2]);
        return c2;
      }, useTransition: function() {
        var a2 = ze(false), b2 = a2[0];
        a2 = Ne.bind(null, a2[1]);
        Be(a2);
        return [a2, b2];
      }, useMutableSource: function(a2, b2, c2) {
        var d2 = qe();
        d2.memoizedState = { refs: { getSnapshot: b2, setSnapshot: null }, source: a2, subscribe: c2 };
        return we(d2, a2, b2, c2);
      }, useOpaqueIdentifier: function() {
        if (Wd) {
          var a2 = false, b2 = Xa(function() {
            a2 || (a2 = true, c2(Ya()));
            throw Error(q2(355));
          }), c2 = ze(b2)[1];
          0 === (N.mode & 2) && (N.flags |= 516, Ae(5, function() {
            c2(Ya());
          }, void 0, null));
          return b2;
        }
        b2 = Ya();
        ze(b2);
        return b2;
      }, unstable_isNewReconciler: false }, ne = {
        readContext: J,
        useCallback: Le,
        useContext: J,
        useEffect: Ge,
        useImperativeHandle: Je,
        useLayoutEffect: He,
        useMemo: Me,
        useReducer: te,
        useRef: Ce,
        useState: function() {
          return te(se);
        },
        useDebugValue: Ke,
        useDeferredValue: function(a2) {
          var b2 = te(se), c2 = b2[0], d2 = b2[1];
          Ge(function() {
            var b3 = ge.transition;
            ge.transition = 1;
            try {
              d2(a2);
            } finally {
              ge.transition = b3;
            }
          }, [a2]);
          return c2;
        },
        useTransition: function() {
          var a2 = te(se)[0];
          return [Ce().current, a2];
        },
        useMutableSource: ye,
        useOpaqueIdentifier: function() {
          return te(se)[0];
        },
        unstable_isNewReconciler: false
      }, oe = {
        readContext: J,
        useCallback: Le,
        useContext: J,
        useEffect: Ge,
        useImperativeHandle: Je,
        useLayoutEffect: He,
        useMemo: Me,
        useReducer: ue,
        useRef: Ce,
        useState: function() {
          return ue(se);
        },
        useDebugValue: Ke,
        useDeferredValue: function(a2) {
          var b2 = ue(se), c2 = b2[0], d2 = b2[1];
          Ge(function() {
            var b3 = ge.transition;
            ge.transition = 1;
            try {
              d2(a2);
            } finally {
              ge.transition = b3;
            }
          }, [a2]);
          return c2;
        },
        useTransition: function() {
          var a2 = ue(se)[0];
          return [Ce().current, a2];
        },
        useMutableSource: ye,
        useOpaqueIdentifier: function() {
          return ue(se)[0];
        },
        unstable_isNewReconciler: false
      }, Oe = ca.ReactCurrentOwner, gd = false;
      function S2(a2, b2, c2, d2) {
        b2.child = null === a2 ? Kd(b2, null, c2, d2) : Jd(b2, a2.child, c2, d2);
      }
      function Pe(a2, b2, c2, d2, e) {
        c2 = c2.render;
        var f2 = b2.ref;
        fd(b2, e);
        d2 = le(a2, b2, c2, d2, f2, e);
        if (null !== a2 && !gd)
          return b2.updateQueue = a2.updateQueue, b2.flags &= -517, a2.lanes &= ~e, Re(a2, b2, e);
        b2.flags |= 1;
        S2(a2, b2, d2, e);
        return b2.child;
      }
      function Se(a2, b2, c2, d2, e, f2) {
        if (null === a2) {
          var g2 = c2.type;
          if ("function" === typeof g2 && !Te(g2) && void 0 === g2.defaultProps && null === c2.compare && void 0 === c2.defaultProps)
            return b2.tag = 15, b2.type = g2, Ue(a2, b2, g2, d2, e, f2);
          a2 = Gd(c2.type, null, d2, b2, b2.mode, f2);
          a2.ref = b2.ref;
          a2.return = b2;
          return b2.child = a2;
        }
        g2 = a2.child;
        if (0 === (e & f2) && (e = g2.memoizedProps, c2 = c2.compare, c2 = null !== c2 ? c2 : Vc, c2(e, d2) && a2.ref === b2.ref))
          return Re(a2, b2, f2);
        b2.flags |= 1;
        a2 = Ed(g2, d2);
        a2.ref = b2.ref;
        a2.return = b2;
        return b2.child = a2;
      }
      function Ue(a2, b2, c2, d2, e, f2) {
        if (null !== a2 && Vc(a2.memoizedProps, d2) && a2.ref === b2.ref)
          if (gd = false, 0 !== (f2 & e))
            0 !== (a2.flags & 16384) && (gd = true);
          else
            return b2.lanes = a2.lanes, Re(a2, b2, f2);
        return Ve(a2, b2, c2, d2, f2);
      }
      function We(a2, b2, c2) {
        var d2 = b2.pendingProps, e = d2.children, f2 = null !== a2 ? a2.memoizedState : null;
        if ("hidden" === d2.mode || "unstable-defer-without-hiding" === d2.mode)
          if (0 === (b2.mode & 4))
            b2.memoizedState = { baseLanes: 0 }, Xe(b2, c2);
          else if (0 !== (c2 & 1073741824))
            b2.memoizedState = { baseLanes: 0 }, Xe(b2, null !== f2 ? f2.baseLanes : c2);
          else
            return a2 = null !== f2 ? f2.baseLanes | c2 : c2, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a2 }, Xe(b2, a2), null;
        else
          null !== f2 ? (d2 = f2.baseLanes | c2, b2.memoizedState = null) : d2 = c2, Xe(b2, d2);
        S2(a2, b2, e, c2);
        return b2.child;
      }
      function Ye(a2, b2) {
        var c2 = b2.ref;
        if (null === a2 && null !== c2 || null !== a2 && a2.ref !== c2)
          b2.flags |= 128;
      }
      function Ve(a2, b2, c2, d2, e) {
        var f2 = E2(c2) ? Yb : B2.current;
        f2 = Zb(b2, f2);
        fd(b2, e);
        c2 = le(a2, b2, c2, d2, f2, e);
        if (null !== a2 && !gd)
          return b2.updateQueue = a2.updateQueue, b2.flags &= -517, a2.lanes &= ~e, Re(a2, b2, e);
        b2.flags |= 1;
        S2(a2, b2, c2, e);
        return b2.child;
      }
      function Ze(a2, b2, c2, d2, e) {
        if (E2(c2)) {
          var f2 = true;
          cc(b2);
        } else
          f2 = false;
        fd(b2, e);
        if (null === b2.stateNode)
          null !== a2 && (a2.alternate = null, b2.alternate = null, b2.flags |= 2), xd(b2, c2, d2), zd(b2, c2, d2, e), d2 = true;
        else if (null === a2) {
          var g2 = b2.stateNode, h2 = b2.memoizedProps;
          g2.props = h2;
          var k2 = g2.context, l2 = c2.contextType;
          "object" === typeof l2 && null !== l2 ? l2 = J(l2) : (l2 = E2(c2) ? Yb : B2.current, l2 = Zb(b2, l2));
          var n2 = c2.getDerivedStateFromProps, t2 = "function" === typeof n2 || "function" === typeof g2.getSnapshotBeforeUpdate;
          t2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d2 || k2 !== l2) && yd(b2, g2, d2, l2);
          hd = false;
          var p2 = b2.memoizedState;
          g2.state = p2;
          od(b2, d2, g2, e);
          k2 = b2.memoizedState;
          h2 !== d2 || p2 !== k2 || D2.current || hd ? ("function" === typeof n2 && (sd(b2, c2, n2, d2), k2 = b2.memoizedState), (h2 = hd || wd(b2, c2, h2, d2, p2, k2, l2)) ? (t2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h2) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4), d2 = false);
        } else {
          g2 = b2.stateNode;
          jd(a2, b2);
          h2 = b2.memoizedProps;
          l2 = b2.type === b2.elementType ? h2 : Xc(b2.type, h2);
          g2.props = l2;
          t2 = b2.pendingProps;
          p2 = g2.context;
          k2 = c2.contextType;
          "object" === typeof k2 && null !== k2 ? k2 = J(k2) : (k2 = E2(c2) ? Yb : B2.current, k2 = Zb(b2, k2));
          var y2 = c2.getDerivedStateFromProps;
          (n2 = "function" === typeof y2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== t2 || p2 !== k2) && yd(b2, g2, d2, k2);
          hd = false;
          p2 = b2.memoizedState;
          g2.state = p2;
          od(b2, d2, g2, e);
          var x2 = b2.memoizedState;
          h2 !== t2 || p2 !== x2 || D2.current || hd ? ("function" === typeof y2 && (sd(b2, c2, y2, d2), x2 = b2.memoizedState), (l2 = hd || wd(b2, c2, l2, d2, p2, x2, k2)) ? (n2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d2, x2, k2), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, x2, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 256)) : ("function" !== typeof g2.componentDidUpdate || h2 === a2.memoizedProps && p2 === a2.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a2.memoizedProps && p2 === a2.memoizedState || (b2.flags |= 256), b2.memoizedProps = d2, b2.memoizedState = x2), g2.props = d2, g2.state = x2, g2.context = k2, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h2 === a2.memoizedProps && p2 === a2.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a2.memoizedProps && p2 === a2.memoizedState || (b2.flags |= 256), d2 = false);
        }
        return $e(a2, b2, c2, d2, f2, e);
      }
      function $e(a2, b2, c2, d2, e, f2) {
        Ye(a2, b2);
        var g2 = 0 !== (b2.flags & 64);
        if (!d2 && !g2)
          return e && dc(b2, c2, false), Re(a2, b2, f2);
        d2 = b2.stateNode;
        Oe.current = b2;
        var h2 = g2 && "function" !== typeof c2.getDerivedStateFromError ? null : d2.render();
        b2.flags |= 1;
        null !== a2 && g2 ? (b2.child = Jd(b2, a2.child, null, f2), b2.child = Jd(b2, null, h2, f2)) : S2(a2, b2, h2, f2);
        b2.memoizedState = d2.state;
        e && dc(b2, c2, true);
        return b2.child;
      }
      function af(a2) {
        var b2 = a2.stateNode;
        b2.pendingContext ? ac(a2, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ac(a2, b2.context, false);
        Pd(a2, b2.containerInfo);
      }
      var bf = { dehydrated: null, retryLane: 0 };
      function cf(a2, b2, c2) {
        var d2 = b2.pendingProps, e = M2.current, f2 = false, g2;
        (g2 = 0 !== (b2.flags & 64)) || (g2 = null !== a2 && null === a2.memoizedState ? false : 0 !== (e & 2));
        g2 ? (f2 = true, b2.flags &= -65) : null !== a2 && null === a2.memoizedState || void 0 === d2.fallback || true === d2.unstable_avoidThisFallback || (e |= 1);
        A2(M2, e & 1);
        if (null === a2) {
          void 0 !== d2.fallback && $d(b2);
          a2 = d2.children;
          e = d2.fallback;
          if (f2)
            return a2 = df(b2, a2, e, c2), b2.child.memoizedState = { baseLanes: c2 }, b2.memoizedState = bf, a2;
          if ("number" === typeof d2.unstable_expectedLoadTime)
            return a2 = df(b2, a2, e, c2), b2.child.memoizedState = { baseLanes: c2 }, b2.memoizedState = bf, b2.lanes = 33554432, a2;
          c2 = ef({ mode: "visible", children: a2 }, b2.mode, c2, null);
          c2.return = b2;
          return b2.child = c2;
        }
        if (null !== a2.memoizedState) {
          if (f2)
            return d2 = ff(a2, b2, d2.children, d2.fallback, c2), f2 = b2.child, e = a2.child.memoizedState, f2.memoizedState = null === e ? { baseLanes: c2 } : { baseLanes: e.baseLanes | c2 }, f2.childLanes = a2.childLanes & ~c2, b2.memoizedState = bf, d2;
          c2 = gf(a2, b2, d2.children, c2);
          b2.memoizedState = null;
          return c2;
        }
        if (f2)
          return d2 = ff(a2, b2, d2.children, d2.fallback, c2), f2 = b2.child, e = a2.child.memoizedState, f2.memoizedState = null === e ? { baseLanes: c2 } : { baseLanes: e.baseLanes | c2 }, f2.childLanes = a2.childLanes & ~c2, b2.memoizedState = bf, d2;
        c2 = gf(a2, b2, d2.children, c2);
        b2.memoizedState = null;
        return c2;
      }
      function df(a2, b2, c2, d2) {
        var e = a2.mode, f2 = a2.child;
        b2 = { mode: "hidden", children: b2 };
        0 === (e & 2) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = b2) : f2 = ef(b2, e, 0, null);
        c2 = Id(c2, e, d2, null);
        f2.return = a2;
        c2.return = a2;
        f2.sibling = c2;
        a2.child = f2;
        return c2;
      }
      function gf(a2, b2, c2, d2) {
        var e = a2.child;
        a2 = e.sibling;
        c2 = Ed(e, { mode: "visible", children: c2 });
        0 === (b2.mode & 2) && (c2.lanes = d2);
        c2.return = b2;
        c2.sibling = null;
        null !== a2 && (a2.nextEffect = null, a2.flags = 8, b2.firstEffect = b2.lastEffect = a2);
        return b2.child = c2;
      }
      function ff(a2, b2, c2, d2, e) {
        var f2 = b2.mode, g2 = a2.child;
        a2 = g2.sibling;
        var h2 = { mode: "hidden", children: c2 };
        0 === (f2 & 2) && b2.child !== g2 ? (c2 = b2.child, c2.childLanes = 0, c2.pendingProps = h2, g2 = c2.lastEffect, null !== g2 ? (b2.firstEffect = c2.firstEffect, b2.lastEffect = g2, g2.nextEffect = null) : b2.firstEffect = b2.lastEffect = null) : c2 = Ed(g2, h2);
        null !== a2 ? d2 = Ed(a2, d2) : (d2 = Id(d2, f2, e, null), d2.flags |= 2);
        d2.return = b2;
        c2.return = b2;
        c2.sibling = d2;
        b2.child = c2;
        return d2;
      }
      function hf(a2, b2) {
        a2.lanes |= b2;
        var c2 = a2.alternate;
        null !== c2 && (c2.lanes |= b2);
        ed(a2.return, b2);
      }
      function jf(a2, b2, c2, d2, e, f2) {
        var g2 = a2.memoizedState;
        null === g2 ? a2.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailMode: e, lastEffect: f2 } : (g2.isBackwards = b2, g2.rendering = null, g2.renderingStartTime = 0, g2.last = d2, g2.tail = c2, g2.tailMode = e, g2.lastEffect = f2);
      }
      function kf(a2, b2, c2) {
        var d2 = b2.pendingProps, e = d2.revealOrder, f2 = d2.tail;
        S2(a2, b2, d2.children, c2);
        d2 = M2.current;
        if (0 !== (d2 & 2))
          d2 = d2 & 1 | 2, b2.flags |= 64;
        else {
          if (null !== a2 && 0 !== (a2.flags & 64))
            a:
              for (a2 = b2.child; null !== a2; ) {
                if (13 === a2.tag)
                  null !== a2.memoizedState && hf(a2, c2);
                else if (19 === a2.tag)
                  hf(a2, c2);
                else if (null !== a2.child) {
                  a2.child.return = a2;
                  a2 = a2.child;
                  continue;
                }
                if (a2 === b2)
                  break a;
                for (; null === a2.sibling; ) {
                  if (null === a2.return || a2.return === b2)
                    break a;
                  a2 = a2.return;
                }
                a2.sibling.return = a2.return;
                a2 = a2.sibling;
              }
          d2 &= 1;
        }
        A2(M2, d2);
        if (0 === (b2.mode & 2))
          b2.memoizedState = null;
        else
          switch (e) {
            case "forwards":
              c2 = b2.child;
              for (e = null; null !== c2; )
                a2 = c2.alternate, null !== a2 && null === Td(a2) && (e = c2), c2 = c2.sibling;
              c2 = e;
              null === c2 ? (e = b2.child, b2.child = null) : (e = c2.sibling, c2.sibling = null);
              jf(b2, false, e, c2, f2, b2.lastEffect);
              break;
            case "backwards":
              c2 = null;
              e = b2.child;
              for (b2.child = null; null !== e; ) {
                a2 = e.alternate;
                if (null !== a2 && null === Td(a2)) {
                  b2.child = e;
                  break;
                }
                a2 = e.sibling;
                e.sibling = c2;
                c2 = e;
                e = a2;
              }
              jf(b2, true, c2, null, f2, b2.lastEffect);
              break;
            case "together":
              jf(b2, false, null, null, void 0, b2.lastEffect);
              break;
            default:
              b2.memoizedState = null;
          }
        return b2.child;
      }
      function Re(a2, b2, c2) {
        null !== a2 && (b2.dependencies = a2.dependencies);
        pd |= b2.lanes;
        if (0 !== (c2 & b2.childLanes)) {
          if (null !== a2 && b2.child !== a2.child)
            throw Error(q2(153));
          if (null !== b2.child) {
            a2 = b2.child;
            c2 = Ed(a2, a2.pendingProps);
            b2.child = c2;
            for (c2.return = b2; null !== a2.sibling; )
              a2 = a2.sibling, c2 = c2.sibling = Ed(a2, a2.pendingProps), c2.return = b2;
            c2.sibling = null;
          }
          return b2.child;
        }
        return null;
      }
      function lf(a2) {
        a2.flags |= 4;
      }
      var mf, nf, of, pf;
      if (Ta)
        mf = function(a2, b2) {
          for (var c2 = b2.child; null !== c2; ) {
            if (5 === c2.tag || 6 === c2.tag)
              Ja(a2, c2.stateNode);
            else if (4 !== c2.tag && null !== c2.child) {
              c2.child.return = c2;
              c2 = c2.child;
              continue;
            }
            if (c2 === b2)
              break;
            for (; null === c2.sibling; ) {
              if (null === c2.return || c2.return === b2)
                return;
              c2 = c2.return;
            }
            c2.sibling.return = c2.return;
            c2 = c2.sibling;
          }
        }, nf = function() {
        }, of = function(a2, b2, c2, d2, e) {
          a2 = a2.memoizedProps;
          if (a2 !== d2) {
            var f2 = b2.stateNode, g2 = Od(L2.current);
            c2 = La(f2, c2, a2, d2, e, g2);
            (b2.updateQueue = c2) && lf(b2);
          }
        }, pf = function(a2, b2, c2, d2) {
          c2 !== d2 && lf(b2);
        };
      else if (Ua) {
        mf = function(a2, b2, c2, d2) {
          for (var e = b2.child; null !== e; ) {
            if (5 === e.tag) {
              var f2 = e.stateNode;
              c2 && d2 && (f2 = Db(f2, e.type, e.memoizedProps, e));
              Ja(a2, f2);
            } else if (6 === e.tag)
              f2 = e.stateNode, c2 && d2 && (f2 = Eb(f2, e.memoizedProps, e)), Ja(a2, f2);
            else if (4 !== e.tag) {
              if (13 === e.tag && 0 !== (e.flags & 4) && (f2 = null !== e.memoizedState)) {
                var g2 = e.child;
                if (null !== g2 && (null !== g2.child && (g2.child.return = g2, mf(a2, g2, true, f2)), f2 = g2.sibling, null !== f2)) {
                  f2.return = e;
                  e = f2;
                  continue;
                }
              }
              if (null !== e.child) {
                e.child.return = e;
                e = e.child;
                continue;
              }
            }
            if (e === b2)
              break;
            for (; null === e.sibling; ) {
              if (null === e.return || e.return === b2)
                return;
              e = e.return;
            }
            e.sibling.return = e.return;
            e = e.sibling;
          }
        };
        var qf = function(a2, b2, c2, d2) {
          for (var e = b2.child; null !== e; ) {
            if (5 === e.tag) {
              var f2 = e.stateNode;
              c2 && d2 && (f2 = Db(f2, e.type, e.memoizedProps, e));
              Ab(a2, f2);
            } else if (6 === e.tag)
              f2 = e.stateNode, c2 && d2 && (f2 = Eb(f2, e.memoizedProps, e)), Ab(a2, f2);
            else if (4 !== e.tag) {
              if (13 === e.tag && 0 !== (e.flags & 4) && (f2 = null !== e.memoizedState)) {
                var g2 = e.child;
                if (null !== g2 && (null !== g2.child && (g2.child.return = g2, qf(a2, g2, true, f2)), f2 = g2.sibling, null !== f2)) {
                  f2.return = e;
                  e = f2;
                  continue;
                }
              }
              if (null !== e.child) {
                e.child.return = e;
                e = e.child;
                continue;
              }
            }
            if (e === b2)
              break;
            for (; null === e.sibling; ) {
              if (null === e.return || e.return === b2)
                return;
              e = e.return;
            }
            e.sibling.return = e.return;
            e = e.sibling;
          }
        };
        nf = function(a2) {
          var b2 = a2.stateNode;
          if (null !== a2.firstEffect) {
            var c2 = b2.containerInfo, d2 = zb(c2);
            qf(d2, a2, false, false);
            b2.pendingChildren = d2;
            lf(a2);
            Bb(c2, d2);
          }
        };
        of = function(a2, b2, c2, d2, e) {
          var f2 = a2.stateNode, g2 = a2.memoizedProps;
          if ((a2 = null === b2.firstEffect) && g2 === d2)
            b2.stateNode = f2;
          else {
            var h2 = b2.stateNode, k2 = Od(L2.current), l2 = null;
            g2 !== d2 && (l2 = La(h2, c2, g2, d2, e, k2));
            a2 && null === l2 ? b2.stateNode = f2 : (f2 = yb(
              f2,
              l2,
              c2,
              g2,
              d2,
              b2,
              a2,
              h2
            ), Ka(f2, c2, d2, e, k2) && lf(b2), b2.stateNode = f2, a2 ? lf(b2) : mf(f2, b2, false, false));
          }
        };
        pf = function(a2, b2, c2, d2) {
          c2 !== d2 ? (a2 = Od(Nd.current), c2 = Od(L2.current), b2.stateNode = Na(d2, a2, c2, b2), lf(b2)) : b2.stateNode = a2.stateNode;
        };
      } else
        nf = function() {
        }, of = function() {
        }, pf = function() {
        };
      function rf(a2, b2) {
        if (!Wd)
          switch (a2.tailMode) {
            case "hidden":
              b2 = a2.tail;
              for (var c2 = null; null !== b2; )
                null !== b2.alternate && (c2 = b2), b2 = b2.sibling;
              null === c2 ? a2.tail = null : c2.sibling = null;
              break;
            case "collapsed":
              c2 = a2.tail;
              for (var d2 = null; null !== c2; )
                null !== c2.alternate && (d2 = c2), c2 = c2.sibling;
              null === d2 ? b2 || null === a2.tail ? a2.tail = null : a2.tail.sibling = null : d2.sibling = null;
          }
      }
      function sf(a2, b2, c2) {
        var d2 = b2.pendingProps;
        switch (b2.tag) {
          case 2:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return null;
          case 1:
            return E2(b2.type) && $b(), null;
          case 3:
            Qd();
            z2(D2);
            z2(B2);
            ee();
            d2 = b2.stateNode;
            d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
            if (null === a2 || null === a2.child)
              be(b2) ? lf(b2) : d2.hydrate || (b2.flags |= 256);
            nf(b2);
            return null;
          case 5:
            Sd(b2);
            var e = Od(Nd.current);
            c2 = b2.type;
            if (null !== a2 && null != b2.stateNode)
              of(a2, b2, c2, d2, e), a2.ref !== b2.ref && (b2.flags |= 128);
            else {
              if (!d2) {
                if (null === b2.stateNode)
                  throw Error(q2(166));
                return null;
              }
              a2 = Od(L2.current);
              if (be(b2)) {
                if (!Va)
                  throw Error(q2(175));
                a2 = Lb(b2.stateNode, b2.type, b2.memoizedProps, e, a2, b2);
                b2.updateQueue = a2;
                null !== a2 && lf(b2);
              } else {
                var f2 = Ia(c2, d2, e, a2, b2);
                mf(f2, b2, false, false);
                b2.stateNode = f2;
                Ka(f2, c2, d2, e, a2) && lf(b2);
              }
              null !== b2.ref && (b2.flags |= 128);
            }
            return null;
          case 6:
            if (a2 && null != b2.stateNode)
              pf(a2, b2, a2.memoizedProps, d2);
            else {
              if ("string" !== typeof d2 && null === b2.stateNode)
                throw Error(q2(166));
              a2 = Od(Nd.current);
              e = Od(L2.current);
              if (be(b2)) {
                if (!Va)
                  throw Error(q2(176));
                Mb(
                  b2.stateNode,
                  b2.memoizedProps,
                  b2
                ) && lf(b2);
              } else
                b2.stateNode = Na(d2, a2, e, b2);
            }
            return null;
          case 13:
            z2(M2);
            d2 = b2.memoizedState;
            if (0 !== (b2.flags & 64))
              return b2.lanes = c2, b2;
            d2 = null !== d2;
            e = false;
            null === a2 ? void 0 !== b2.memoizedProps.fallback && be(b2) : e = null !== a2.memoizedState;
            if (d2 && !e && 0 !== (b2.mode & 2))
              if (null === a2 && true !== b2.memoizedProps.unstable_avoidThisFallback || 0 !== (M2.current & 1))
                0 === T2 && (T2 = 3);
              else {
                if (0 === T2 || 3 === T2)
                  T2 = 4;
                null === R2 || 0 === (pd & 134217727) && 0 === (tf & 134217727) || uf(R2, U2);
              }
            Ua && d2 && (b2.flags |= 4);
            Ta && (d2 || e) && (b2.flags |= 4);
            return null;
          case 4:
            return Qd(), nf(b2), null === a2 && ab(b2.stateNode.containerInfo), null;
          case 10:
            return dd(b2), null;
          case 17:
            return E2(b2.type) && $b(), null;
          case 19:
            z2(M2);
            d2 = b2.memoizedState;
            if (null === d2)
              return null;
            e = 0 !== (b2.flags & 64);
            f2 = d2.rendering;
            if (null === f2)
              if (e)
                rf(d2, false);
              else {
                if (0 !== T2 || null !== a2 && 0 !== (a2.flags & 64))
                  for (a2 = b2.child; null !== a2; ) {
                    f2 = Td(a2);
                    if (null !== f2) {
                      b2.flags |= 64;
                      rf(d2, false);
                      a2 = f2.updateQueue;
                      null !== a2 && (b2.updateQueue = a2, b2.flags |= 4);
                      null === d2.lastEffect && (b2.firstEffect = null);
                      b2.lastEffect = d2.lastEffect;
                      a2 = c2;
                      for (d2 = b2.child; null !== d2; )
                        e = d2, c2 = a2, e.flags &= 2, e.nextEffect = null, e.firstEffect = null, e.lastEffect = null, f2 = e.alternate, null === f2 ? (e.childLanes = 0, e.lanes = c2, e.child = null, e.memoizedProps = null, e.memoizedState = null, e.updateQueue = null, e.dependencies = null, e.stateNode = null) : (e.childLanes = f2.childLanes, e.lanes = f2.lanes, e.child = f2.child, e.memoizedProps = f2.memoizedProps, e.memoizedState = f2.memoizedState, e.updateQueue = f2.updateQueue, e.type = f2.type, c2 = f2.dependencies, e.dependencies = null === c2 ? null : { lanes: c2.lanes, firstContext: c2.firstContext }), d2 = d2.sibling;
                      A2(M2, M2.current & 1 | 2);
                      return b2.child;
                    }
                    a2 = a2.sibling;
                  }
                null !== d2.tail && G2() > vf && (b2.flags |= 64, e = true, rf(d2, false), b2.lanes = 33554432);
              }
            else {
              if (!e)
                if (a2 = Td(f2), null !== a2) {
                  if (b2.flags |= 64, e = true, a2 = a2.updateQueue, null !== a2 && (b2.updateQueue = a2, b2.flags |= 4), rf(d2, true), null === d2.tail && "hidden" === d2.tailMode && !f2.alternate && !Wd)
                    return b2 = b2.lastEffect = d2.lastEffect, null !== b2 && (b2.nextEffect = null), null;
                } else
                  2 * G2() - d2.renderingStartTime > vf && 1073741824 !== c2 && (b2.flags |= 64, e = true, rf(d2, false), b2.lanes = 33554432);
              d2.isBackwards ? (f2.sibling = b2.child, b2.child = f2) : (a2 = d2.last, null !== a2 ? a2.sibling = f2 : b2.child = f2, d2.last = f2);
            }
            return null !== d2.tail ? (a2 = d2.tail, d2.rendering = a2, d2.tail = a2.sibling, d2.lastEffect = b2.lastEffect, d2.renderingStartTime = G2(), a2.sibling = null, b2 = M2.current, A2(M2, e ? b2 & 1 | 2 : b2 & 1), a2) : null;
          case 23:
          case 24:
            return wf(), null !== a2 && null !== a2.memoizedState !== (null !== b2.memoizedState) && "unstable-defer-without-hiding" !== d2.mode && (b2.flags |= 4), null;
        }
        throw Error(q2(156, b2.tag));
      }
      function xf(a2) {
        switch (a2.tag) {
          case 1:
            E2(a2.type) && $b();
            var b2 = a2.flags;
            return b2 & 4096 ? (a2.flags = b2 & -4097 | 64, a2) : null;
          case 3:
            Qd();
            z2(D2);
            z2(B2);
            ee();
            b2 = a2.flags;
            if (0 !== (b2 & 64))
              throw Error(q2(285));
            a2.flags = b2 & -4097 | 64;
            return a2;
          case 5:
            return Sd(a2), null;
          case 13:
            return z2(M2), b2 = a2.flags, b2 & 4096 ? (a2.flags = b2 & -4097 | 64, a2) : null;
          case 19:
            return z2(M2), null;
          case 4:
            return Qd(), null;
          case 10:
            return dd(a2), null;
          case 23:
          case 24:
            return wf(), null;
          default:
            return null;
        }
      }
      function yf(a2, b2) {
        try {
          var c2 = "", d2 = b2;
          do
            c2 += Wc(d2), d2 = d2.return;
          while (d2);
          var e = c2;
        } catch (f2) {
          e = "\nError generating stack: " + f2.message + "\n" + f2.stack;
        }
        return { value: a2, source: b2, stack: e };
      }
      function zf(a2, b2) {
        try {
          console.error(b2.value);
        } catch (c2) {
          setTimeout(function() {
            throw c2;
          });
        }
      }
      var Af = "function" === typeof WeakMap ? WeakMap : Map;
      function Bf(a2, b2, c2) {
        c2 = kd(-1, c2);
        c2.tag = 3;
        c2.payload = { element: null };
        var d2 = b2.value;
        c2.callback = function() {
          Cf || (Cf = true, Df = d2);
          zf(a2, b2);
        };
        return c2;
      }
      function Ef(a2, b2, c2) {
        c2 = kd(-1, c2);
        c2.tag = 3;
        var d2 = a2.type.getDerivedStateFromError;
        if ("function" === typeof d2) {
          var e = b2.value;
          c2.payload = function() {
            zf(a2, b2);
            return d2(e);
          };
        }
        var f2 = a2.stateNode;
        null !== f2 && "function" === typeof f2.componentDidCatch && (c2.callback = function() {
          "function" !== typeof d2 && (null === Ff ? Ff = /* @__PURE__ */ new Set([this]) : Ff.add(this), zf(a2, b2));
          var c3 = b2.stack;
          this.componentDidCatch(b2.value, { componentStack: null !== c3 ? c3 : "" });
        });
        return c2;
      }
      var Gf = "function" === typeof WeakSet ? WeakSet : Set;
      function Hf(a2) {
        var b2 = a2.ref;
        if (null !== b2)
          if ("function" === typeof b2)
            try {
              b2(null);
            } catch (c2) {
              If(a2, c2);
            }
          else
            b2.current = null;
      }
      function Jf(a2, b2) {
        switch (b2.tag) {
          case 0:
          case 11:
          case 15:
          case 22:
            return;
          case 1:
            if (b2.flags & 256 && null !== a2) {
              var c2 = a2.memoizedProps, d2 = a2.memoizedState;
              a2 = b2.stateNode;
              b2 = a2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? c2 : Xc(b2.type, c2), d2);
              a2.__reactInternalSnapshotBeforeUpdate = b2;
            }
            return;
          case 3:
            Ta && b2.flags & 256 && xb(b2.stateNode.containerInfo);
            return;
          case 5:
          case 6:
          case 4:
          case 17:
            return;
        }
        throw Error(q2(163));
      }
      function Kf(a2, b2) {
        b2 = b2.updateQueue;
        b2 = null !== b2 ? b2.lastEffect : null;
        if (null !== b2) {
          var c2 = b2 = b2.next;
          do {
            if ((c2.tag & a2) === a2) {
              var d2 = c2.destroy;
              c2.destroy = void 0;
              void 0 !== d2 && d2();
            }
            c2 = c2.next;
          } while (c2 !== b2);
        }
      }
      function Lf(a2, b2, c2) {
        switch (c2.tag) {
          case 0:
          case 11:
          case 15:
          case 22:
            b2 = c2.updateQueue;
            b2 = null !== b2 ? b2.lastEffect : null;
            if (null !== b2) {
              a2 = b2 = b2.next;
              do {
                if (3 === (a2.tag & 3)) {
                  var d2 = a2.create;
                  a2.destroy = d2();
                }
                a2 = a2.next;
              } while (a2 !== b2);
            }
            b2 = c2.updateQueue;
            b2 = null !== b2 ? b2.lastEffect : null;
            if (null !== b2) {
              a2 = b2 = b2.next;
              do {
                var e = a2;
                d2 = e.next;
                e = e.tag;
                0 !== (e & 4) && 0 !== (e & 1) && (Mf(c2, a2), Nf(c2, a2));
                a2 = d2;
              } while (a2 !== b2);
            }
            return;
          case 1:
            a2 = c2.stateNode;
            c2.flags & 4 && (null === b2 ? a2.componentDidMount() : (d2 = c2.elementType === c2.type ? b2.memoizedProps : Xc(c2.type, b2.memoizedProps), a2.componentDidUpdate(
              d2,
              b2.memoizedState,
              a2.__reactInternalSnapshotBeforeUpdate
            )));
            b2 = c2.updateQueue;
            null !== b2 && qd(c2, b2, a2);
            return;
          case 3:
            b2 = c2.updateQueue;
            if (null !== b2) {
              a2 = null;
              if (null !== c2.child)
                switch (c2.child.tag) {
                  case 5:
                    a2 = Da(c2.child.stateNode);
                    break;
                  case 1:
                    a2 = c2.child.stateNode;
                }
              qd(c2, b2, a2);
            }
            return;
          case 5:
            a2 = c2.stateNode;
            null === b2 && c2.flags & 4 && mb(a2, c2.type, c2.memoizedProps, c2);
            return;
          case 6:
            return;
          case 4:
            return;
          case 12:
            return;
          case 13:
            Va && null === c2.memoizedState && (c2 = c2.alternate, null !== c2 && (c2 = c2.memoizedState, null !== c2 && (c2 = c2.dehydrated, null !== c2 && Pb(c2))));
            return;
          case 19:
          case 17:
          case 20:
          case 21:
          case 23:
          case 24:
            return;
        }
        throw Error(q2(163));
      }
      function Of(a2, b2) {
        if (Ta)
          for (var c2 = a2; ; ) {
            if (5 === c2.tag) {
              var d2 = c2.stateNode;
              b2 ? tb(d2) : vb(c2.stateNode, c2.memoizedProps);
            } else if (6 === c2.tag)
              d2 = c2.stateNode, b2 ? ub(d2) : wb(d2, c2.memoizedProps);
            else if ((23 !== c2.tag && 24 !== c2.tag || null === c2.memoizedState || c2 === a2) && null !== c2.child) {
              c2.child.return = c2;
              c2 = c2.child;
              continue;
            }
            if (c2 === a2)
              break;
            for (; null === c2.sibling; ) {
              if (null === c2.return || c2.return === a2)
                return;
              c2 = c2.return;
            }
            c2.sibling.return = c2.return;
            c2 = c2.sibling;
          }
      }
      function Pf(a2, b2) {
        if (fc && "function" === typeof fc.onCommitFiberUnmount)
          try {
            fc.onCommitFiberUnmount(ec, b2);
          } catch (f2) {
          }
        switch (b2.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
          case 22:
            a2 = b2.updateQueue;
            if (null !== a2 && (a2 = a2.lastEffect, null !== a2)) {
              var c2 = a2 = a2.next;
              do {
                var d2 = c2, e = d2.destroy;
                d2 = d2.tag;
                if (void 0 !== e)
                  if (0 !== (d2 & 4))
                    Mf(b2, c2);
                  else {
                    d2 = b2;
                    try {
                      e();
                    } catch (f2) {
                      If(d2, f2);
                    }
                  }
                c2 = c2.next;
              } while (c2 !== a2);
            }
            break;
          case 1:
            Hf(b2);
            a2 = b2.stateNode;
            if ("function" === typeof a2.componentWillUnmount)
              try {
                a2.props = b2.memoizedProps, a2.state = b2.memoizedState, a2.componentWillUnmount();
              } catch (f2) {
                If(
                  b2,
                  f2
                );
              }
            break;
          case 5:
            Hf(b2);
            break;
          case 4:
            Ta ? Qf(a2, b2) : Ua && Ua && (b2 = b2.stateNode.containerInfo, a2 = zb(b2), Cb(b2, a2));
        }
      }
      function Rf(a2, b2) {
        for (var c2 = b2; ; )
          if (Pf(a2, c2), null === c2.child || Ta && 4 === c2.tag) {
            if (c2 === b2)
              break;
            for (; null === c2.sibling; ) {
              if (null === c2.return || c2.return === b2)
                return;
              c2 = c2.return;
            }
            c2.sibling.return = c2.return;
            c2 = c2.sibling;
          } else
            c2.child.return = c2, c2 = c2.child;
      }
      function Sf(a2) {
        a2.alternate = null;
        a2.child = null;
        a2.dependencies = null;
        a2.firstEffect = null;
        a2.lastEffect = null;
        a2.memoizedProps = null;
        a2.memoizedState = null;
        a2.pendingProps = null;
        a2.return = null;
        a2.updateQueue = null;
      }
      function Tf(a2) {
        return 5 === a2.tag || 3 === a2.tag || 4 === a2.tag;
      }
      function Uf(a2) {
        if (Ta) {
          a: {
            for (var b2 = a2.return; null !== b2; ) {
              if (Tf(b2))
                break a;
              b2 = b2.return;
            }
            throw Error(q2(160));
          }
          var c2 = b2;
          b2 = c2.stateNode;
          switch (c2.tag) {
            case 5:
              var d2 = false;
              break;
            case 3:
              b2 = b2.containerInfo;
              d2 = true;
              break;
            case 4:
              b2 = b2.containerInfo;
              d2 = true;
              break;
            default:
              throw Error(q2(161));
          }
          c2.flags & 16 && (sb(b2), c2.flags &= -17);
          a:
            b:
              for (c2 = a2; ; ) {
                for (; null === c2.sibling; ) {
                  if (null === c2.return || Tf(c2.return)) {
                    c2 = null;
                    break a;
                  }
                  c2 = c2.return;
                }
                c2.sibling.return = c2.return;
                for (c2 = c2.sibling; 5 !== c2.tag && 6 !== c2.tag && 18 !== c2.tag; ) {
                  if (c2.flags & 2)
                    continue b;
                  if (null === c2.child || 4 === c2.tag)
                    continue b;
                  else
                    c2.child.return = c2, c2 = c2.child;
                }
                if (!(c2.flags & 2)) {
                  c2 = c2.stateNode;
                  break a;
                }
              }
          d2 ? Vf(a2, c2, b2) : Wf(a2, c2, b2);
        }
      }
      function Vf(a2, b2, c2) {
        var d2 = a2.tag, e = 5 === d2 || 6 === d2;
        if (e)
          a2 = e ? a2.stateNode : a2.stateNode.instance, b2 ? pb(c2, a2, b2) : kb(c2, a2);
        else if (4 !== d2 && (a2 = a2.child, null !== a2))
          for (Vf(a2, b2, c2), a2 = a2.sibling; null !== a2; )
            Vf(a2, b2, c2), a2 = a2.sibling;
      }
      function Wf(a2, b2, c2) {
        var d2 = a2.tag, e = 5 === d2 || 6 === d2;
        if (e)
          a2 = e ? a2.stateNode : a2.stateNode.instance, b2 ? ob(c2, a2, b2) : jb(c2, a2);
        else if (4 !== d2 && (a2 = a2.child, null !== a2))
          for (Wf(a2, b2, c2), a2 = a2.sibling; null !== a2; )
            Wf(a2, b2, c2), a2 = a2.sibling;
      }
      function Qf(a2, b2) {
        for (var c2 = b2, d2 = false, e, f2; ; ) {
          if (!d2) {
            d2 = c2.return;
            a:
              for (; ; ) {
                if (null === d2)
                  throw Error(q2(160));
                e = d2.stateNode;
                switch (d2.tag) {
                  case 5:
                    f2 = false;
                    break a;
                  case 3:
                    e = e.containerInfo;
                    f2 = true;
                    break a;
                  case 4:
                    e = e.containerInfo;
                    f2 = true;
                    break a;
                }
                d2 = d2.return;
              }
            d2 = true;
          }
          if (5 === c2.tag || 6 === c2.tag)
            Rf(a2, c2), f2 ? rb(e, c2.stateNode) : qb(e, c2.stateNode);
          else if (4 === c2.tag) {
            if (null !== c2.child) {
              e = c2.stateNode.containerInfo;
              f2 = true;
              c2.child.return = c2;
              c2 = c2.child;
              continue;
            }
          } else if (Pf(a2, c2), null !== c2.child) {
            c2.child.return = c2;
            c2 = c2.child;
            continue;
          }
          if (c2 === b2)
            break;
          for (; null === c2.sibling; ) {
            if (null === c2.return || c2.return === b2)
              return;
            c2 = c2.return;
            4 === c2.tag && (d2 = false);
          }
          c2.sibling.return = c2.return;
          c2 = c2.sibling;
        }
      }
      function Xf(a2, b2) {
        if (Ta) {
          switch (b2.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
            case 22:
              Kf(3, b2);
              return;
            case 1:
              return;
            case 5:
              var c2 = b2.stateNode;
              if (null != c2) {
                var d2 = b2.memoizedProps;
                a2 = null !== a2 ? a2.memoizedProps : d2;
                var e = b2.type, f2 = b2.updateQueue;
                b2.updateQueue = null;
                null !== f2 && nb(c2, f2, e, a2, d2, b2);
              }
              return;
            case 6:
              if (null === b2.stateNode)
                throw Error(q2(162));
              c2 = b2.memoizedProps;
              lb(b2.stateNode, null !== a2 ? a2.memoizedProps : c2, c2);
              return;
            case 3:
              Va && (b2 = b2.stateNode, b2.hydrate && (b2.hydrate = false, Ob(b2.containerInfo)));
              return;
            case 12:
              return;
            case 13:
              Yf(b2);
              Zf(b2);
              return;
            case 19:
              Zf(b2);
              return;
            case 17:
              return;
            case 23:
            case 24:
              Of(b2, null !== b2.memoizedState);
              return;
          }
          throw Error(q2(163));
        }
        switch (b2.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
          case 22:
            Kf(3, b2);
            return;
          case 12:
            return;
          case 13:
            Yf(b2);
            Zf(b2);
            return;
          case 19:
            Zf(b2);
            return;
          case 3:
            Va && (c2 = b2.stateNode, c2.hydrate && (c2.hydrate = false, Ob(c2.containerInfo)));
            break;
          case 23:
          case 24:
            return;
        }
        a:
          if (Ua) {
            switch (b2.tag) {
              case 1:
              case 5:
              case 6:
              case 20:
                break a;
              case 3:
              case 4:
                b2 = b2.stateNode;
                Cb(b2.containerInfo, b2.pendingChildren);
                break a;
            }
            throw Error(q2(163));
          }
      }
      function Yf(a2) {
        null !== a2.memoizedState && ($f = G2(), Ta && Of(a2.child, true));
      }
      function Zf(a2) {
        var b2 = a2.updateQueue;
        if (null !== b2) {
          a2.updateQueue = null;
          var c2 = a2.stateNode;
          null === c2 && (c2 = a2.stateNode = new Gf());
          b2.forEach(function(b3) {
            var d2 = ag.bind(null, a2, b3);
            c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
          });
        }
      }
      function bg(a2, b2) {
        return null !== a2 && (a2 = a2.memoizedState, null === a2 || null !== a2.dehydrated) ? (b2 = b2.memoizedState, null !== b2 && null === b2.dehydrated) : false;
      }
      var cg = 0, dg = 1, eg = 2, fg = 3, gg = 4;
      if ("function" === typeof Symbol && Symbol.for) {
        var hg = Symbol.for;
        cg = hg("selector.component");
        dg = hg("selector.has_pseudo_class");
        eg = hg("selector.role");
        fg = hg("selector.test_id");
        gg = hg("selector.text");
      }
      function ig(a2) {
        var b2 = Wa(a2);
        if (null != b2) {
          if ("string" !== typeof b2.memoizedProps["data-testname"])
            throw Error(q2(364));
          return b2;
        }
        a2 = cb2(a2);
        if (null === a2)
          throw Error(q2(362));
        return a2.stateNode.current;
      }
      function jg(a2, b2) {
        switch (b2.$$typeof) {
          case cg:
            if (a2.type === b2.value)
              return true;
            break;
          case dg:
            a: {
              b2 = b2.value;
              a2 = [a2, 0];
              for (var c2 = 0; c2 < a2.length; ) {
                var d2 = a2[c2++], e = a2[c2++], f2 = b2[e];
                if (5 !== d2.tag || !fb(d2)) {
                  for (; null != f2 && jg(d2, f2); )
                    e++, f2 = b2[e];
                  if (e === b2.length) {
                    b2 = true;
                    break a;
                  } else
                    for (d2 = d2.child; null !== d2; )
                      a2.push(d2, e), d2 = d2.sibling;
                }
              }
              b2 = false;
            }
            return b2;
          case eg:
            if (5 === a2.tag && gb(a2.stateNode, b2.value))
              return true;
            break;
          case gg:
            if (5 === a2.tag || 6 === a2.tag) {
              if (a2 = eb(a2), null !== a2 && 0 <= a2.indexOf(b2.value))
                return true;
            }
            break;
          case fg:
            if (5 === a2.tag && (a2 = a2.memoizedProps["data-testname"], "string" === typeof a2 && a2.toLowerCase() === b2.value.toLowerCase()))
              return true;
            break;
          default:
            throw Error(q2(365, b2));
        }
        return false;
      }
      function kg(a2) {
        switch (a2.$$typeof) {
          case cg:
            return "<" + (wa(a2.value) || "Unknown") + ">";
          case dg:
            return ":has(" + (kg(a2) || "") + ")";
          case eg:
            return '[role="' + a2.value + '"]';
          case gg:
            return '"' + a2.value + '"';
          case fg:
            return '[data-testname="' + a2.value + '"]';
          default:
            throw Error(q2(365, a2));
        }
      }
      function lg(a2, b2) {
        var c2 = [];
        a2 = [a2, 0];
        for (var d2 = 0; d2 < a2.length; ) {
          var e = a2[d2++], f2 = a2[d2++], g2 = b2[f2];
          if (5 !== e.tag || !fb(e)) {
            for (; null != g2 && jg(e, g2); )
              f2++, g2 = b2[f2];
            if (f2 === b2.length)
              c2.push(e);
            else
              for (e = e.child; null !== e; )
                a2.push(e, f2), e = e.sibling;
          }
        }
        return c2;
      }
      function mg(a2, b2) {
        if (!bb)
          throw Error(q2(363));
        a2 = ig(a2);
        a2 = lg(a2, b2);
        b2 = [];
        a2 = Array.from(a2);
        for (var c2 = 0; c2 < a2.length; ) {
          var d2 = a2[c2++];
          if (5 === d2.tag)
            fb(d2) || b2.push(d2.stateNode);
          else
            for (d2 = d2.child; null !== d2; )
              a2.push(d2), d2 = d2.sibling;
        }
        return b2;
      }
      var ng = null;
      function og(a2) {
        if (null === ng)
          try {
            var b2 = ("require" + Math.random()).slice(0, 7);
            ng = (module2 && module2[b2]).call(module2, "timers").setImmediate;
          } catch (c2) {
            ng = function(a3) {
              var b3 = new MessageChannel();
              b3.port1.onmessage = a3;
              b3.port2.postMessage(void 0);
            };
          }
        return ng(a2);
      }
      var pg = Math.ceil, qg = ca.ReactCurrentDispatcher, rg = ca.ReactCurrentOwner, sg = ca.IsSomeRendererActing, V2 = 0, R2 = null, W2 = null, U2 = 0, tg = 0, ug = Wb(0), T2 = 0, vg = null, wg = 0, pd = 0, tf = 0, xg = 0, yg = null, $f = 0, vf = Infinity;
      function zg() {
        vf = G2() + 500;
      }
      var X2 = null, Cf = false, Df = null, Ff = null, Ag = false, Bg = null, Cg = 90, Dg = [], Eg = [], Fg = null, Gg = 0, Hg = null, Ig = -1, Jg = 0, Kg = 0, Lg = null, Mg = false;
      function K() {
        return 0 !== (V2 & 48) ? G2() : -1 !== Ig ? Ig : Ig = G2();
      }
      function td(a2) {
        a2 = a2.mode;
        if (0 === (a2 & 2))
          return 1;
        if (0 === (a2 & 4))
          return 99 === Nc() ? 1 : 2;
        0 === Jg && (Jg = wg);
        if (0 !== Sc.transition) {
          0 !== Kg && (Kg = null !== yg ? yg.pendingLanes : 0);
          a2 = Jg;
          var b2 = 4186112 & ~Kg;
          b2 &= -b2;
          0 === b2 && (a2 = 4186112 & ~a2, b2 = a2 & -a2, 0 === b2 && (b2 = 8192));
          return b2;
        }
        a2 = Nc();
        0 !== (V2 & 4) && 98 === a2 ? a2 = oc(12, Jg) : (a2 = jc(a2), a2 = oc(a2, Jg));
        return a2;
      }
      function ud(a2, b2, c2) {
        if (50 < Gg)
          throw Gg = 0, Hg = null, Error(q2(185));
        a2 = Ng(a2, b2);
        if (null === a2)
          return null;
        rc(a2, b2, c2);
        a2 === R2 && (tf |= b2, 4 === T2 && uf(a2, U2));
        var d2 = Nc();
        1 === b2 ? 0 !== (V2 & 8) && 0 === (V2 & 48) ? Og(a2) : (Z2(a2, c2), 0 === V2 && (zg(), H2())) : (0 === (V2 & 4) || 98 !== d2 && 99 !== d2 || (null === Fg ? Fg = /* @__PURE__ */ new Set([a2]) : Fg.add(a2)), Z2(a2, c2));
        yg = a2;
      }
      function Ng(a2, b2) {
        a2.lanes |= b2;
        var c2 = a2.alternate;
        null !== c2 && (c2.lanes |= b2);
        c2 = a2;
        for (a2 = a2.return; null !== a2; )
          a2.childLanes |= b2, c2 = a2.alternate, null !== c2 && (c2.childLanes |= b2), c2 = a2, a2 = a2.return;
        return 3 === c2.tag ? c2.stateNode : null;
      }
      function Z2(a2, b2) {
        for (var c2 = a2.callbackNode, d2 = a2.suspendedLanes, e = a2.pingedLanes, f2 = a2.expirationTimes, g2 = a2.pendingLanes; 0 < g2; ) {
          var h2 = 31 - mc(g2), k2 = 1 << h2, l2 = f2[h2];
          if (-1 === l2) {
            if (0 === (k2 & d2) || 0 !== (k2 & e)) {
              l2 = b2;
              ic(k2);
              var n2 = F2;
              f2[h2] = 10 <= n2 ? l2 + 250 : 6 <= n2 ? l2 + 5e3 : -1;
            }
          } else
            l2 <= b2 && (a2.expiredLanes |= k2);
          g2 &= ~k2;
        }
        d2 = lc(a2, a2 === R2 ? U2 : 0);
        b2 = F2;
        if (0 === d2)
          null !== c2 && (c2 !== Hc && xc(c2), a2.callbackNode = null, a2.callbackPriority = 0);
        else {
          if (null !== c2) {
            if (a2.callbackPriority === b2)
              return;
            c2 !== Hc && xc(c2);
          }
          15 === b2 ? (c2 = Og.bind(null, a2), null === Jc ? (Jc = [c2], Kc = wc(Cc, Rc)) : Jc.push(c2), c2 = Hc) : 14 === b2 ? c2 = Qc(99, Og.bind(null, a2)) : (c2 = kc(b2), c2 = Qc(c2, Pg.bind(null, a2)));
          a2.callbackPriority = b2;
          a2.callbackNode = c2;
        }
      }
      function Pg(a2) {
        Ig = -1;
        Kg = Jg = 0;
        if (0 !== (V2 & 48))
          throw Error(q2(327));
        var b2 = a2.callbackNode;
        if (Qg() && a2.callbackNode !== b2)
          return null;
        var c2 = lc(a2, a2 === R2 ? U2 : 0);
        if (0 === c2)
          return null;
        var d2 = c2;
        var e = V2;
        V2 |= 16;
        var f2 = Rg();
        if (R2 !== a2 || U2 !== d2)
          zg(), Sg(a2, d2);
        do
          try {
            Tg();
            break;
          } catch (h2) {
            Ug(a2, h2);
          }
        while (1);
        bd();
        qg.current = f2;
        V2 = e;
        null !== W2 ? d2 = 0 : (R2 = null, U2 = 0, d2 = T2);
        if (0 !== (wg & tf))
          Sg(a2, 0);
        else if (0 !== d2) {
          2 === d2 && (V2 |= 64, a2.hydrate && (a2.hydrate = false, xb(a2.containerInfo)), c2 = nc(a2), 0 !== c2 && (d2 = Vg(a2, c2)));
          if (1 === d2)
            throw b2 = vg, Sg(a2, 0), uf(a2, c2), Z2(a2, G2()), b2;
          a2.finishedWork = a2.current.alternate;
          a2.finishedLanes = c2;
          switch (d2) {
            case 0:
            case 1:
              throw Error(q2(345));
            case 2:
              Zg(a2);
              break;
            case 3:
              uf(a2, c2);
              if ((c2 & 62914560) === c2 && (d2 = $f + 500 - G2(), 10 < d2)) {
                if (0 !== lc(a2, 0))
                  break;
                e = a2.suspendedLanes;
                if ((e & c2) !== c2) {
                  K();
                  a2.pingedLanes |= a2.suspendedLanes & e;
                  break;
                }
                a2.timeoutHandle = Pa(Zg.bind(null, a2), d2);
                break;
              }
              Zg(a2);
              break;
            case 4:
              uf(a2, c2);
              if ((c2 & 4186112) === c2)
                break;
              d2 = a2.eventTimes;
              for (e = -1; 0 < c2; ) {
                var g2 = 31 - mc(c2);
                f2 = 1 << g2;
                g2 = d2[g2];
                g2 > e && (e = g2);
                c2 &= ~f2;
              }
              c2 = e;
              c2 = G2() - c2;
              c2 = (120 > c2 ? 120 : 480 > c2 ? 480 : 1080 > c2 ? 1080 : 1920 > c2 ? 1920 : 3e3 > c2 ? 3e3 : 4320 > c2 ? 4320 : 1960 * pg(c2 / 1960)) - c2;
              if (10 < c2) {
                a2.timeoutHandle = Pa(Zg.bind(null, a2), c2);
                break;
              }
              Zg(a2);
              break;
            case 5:
              Zg(a2);
              break;
            default:
              throw Error(q2(329));
          }
        }
        Z2(a2, G2());
        return a2.callbackNode === b2 ? Pg.bind(null, a2) : null;
      }
      function uf(a2, b2) {
        b2 &= ~xg;
        b2 &= ~tf;
        a2.suspendedLanes |= b2;
        a2.pingedLanes &= ~b2;
        for (a2 = a2.expirationTimes; 0 < b2; ) {
          var c2 = 31 - mc(b2), d2 = 1 << c2;
          a2[c2] = -1;
          b2 &= ~d2;
        }
      }
      function Og(a2) {
        if (0 !== (V2 & 48))
          throw Error(q2(327));
        Qg();
        if (a2 === R2 && 0 !== (a2.expiredLanes & U2)) {
          var b2 = U2;
          var c2 = Vg(a2, b2);
          0 !== (wg & tf) && (b2 = lc(a2, b2), c2 = Vg(a2, b2));
        } else
          b2 = lc(a2, 0), c2 = Vg(a2, b2);
        0 !== a2.tag && 2 === c2 && (V2 |= 64, a2.hydrate && (a2.hydrate = false, xb(a2.containerInfo)), b2 = nc(a2), 0 !== b2 && (c2 = Vg(a2, b2)));
        if (1 === c2)
          throw c2 = vg, Sg(a2, 0), uf(a2, b2), Z2(a2, G2()), c2;
        a2.finishedWork = a2.current.alternate;
        a2.finishedLanes = b2;
        Zg(a2);
        Z2(a2, G2());
        return null;
      }
      function $g() {
        if (null !== Fg) {
          var a2 = Fg;
          Fg = null;
          a2.forEach(function(a3) {
            a3.expiredLanes |= 24 & a3.pendingLanes;
            Z2(a3, G2());
          });
        }
        H2();
      }
      function ah(a2, b2) {
        var c2 = V2;
        V2 |= 1;
        try {
          return a2(b2);
        } finally {
          V2 = c2, 0 === V2 && (zg(), H2());
        }
      }
      function bh(a2, b2) {
        var c2 = V2;
        if (0 !== (c2 & 48))
          return a2(b2);
        V2 |= 1;
        try {
          if (a2)
            return Pc(99, a2.bind(null, b2));
        } finally {
          V2 = c2, H2();
        }
      }
      function Xe(a2, b2) {
        A2(ug, tg);
        tg |= b2;
        wg |= b2;
      }
      function wf() {
        tg = ug.current;
        z2(ug);
      }
      function Sg(a2, b2) {
        a2.finishedWork = null;
        a2.finishedLanes = 0;
        var c2 = a2.timeoutHandle;
        c2 !== Ra && (a2.timeoutHandle = Ra, Qa(c2));
        if (null !== W2)
          for (c2 = W2.return; null !== c2; ) {
            var d2 = c2;
            switch (d2.tag) {
              case 1:
                d2 = d2.type.childContextTypes;
                null !== d2 && void 0 !== d2 && $b();
                break;
              case 3:
                Qd();
                z2(D2);
                z2(B2);
                ee();
                break;
              case 5:
                Sd(d2);
                break;
              case 4:
                Qd();
                break;
              case 13:
                z2(M2);
                break;
              case 19:
                z2(M2);
                break;
              case 10:
                dd(d2);
                break;
              case 23:
              case 24:
                wf();
            }
            c2 = c2.return;
          }
        R2 = a2;
        W2 = Ed(a2.current, null);
        U2 = tg = wg = b2;
        T2 = 0;
        vg = null;
        xg = tf = pd = 0;
      }
      function Ug(a2, b2) {
        do {
          var c2 = W2;
          try {
            bd();
            fe.current = pe;
            if (ie) {
              for (var d2 = N.memoizedState; null !== d2; ) {
                var e = d2.queue;
                null !== e && (e.pending = null);
                d2 = d2.next;
              }
              ie = false;
            }
            he = 0;
            P2 = O2 = N = null;
            je = false;
            rg.current = null;
            if (null === c2 || null === c2.return) {
              T2 = 1;
              vg = b2;
              W2 = null;
              break;
            }
            a: {
              var f2 = a2, g2 = c2.return, h2 = c2, k2 = b2;
              b2 = U2;
              h2.flags |= 2048;
              h2.firstEffect = h2.lastEffect = null;
              if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
                var l2 = k2;
                if (0 === (h2.mode & 2)) {
                  var n2 = h2.alternate;
                  n2 ? (h2.updateQueue = n2.updateQueue, h2.memoizedState = n2.memoizedState, h2.lanes = n2.lanes) : (h2.updateQueue = null, h2.memoizedState = null);
                }
                var t2 = 0 !== (M2.current & 1), p2 = g2;
                do {
                  var y2;
                  if (y2 = 13 === p2.tag) {
                    var x2 = p2.memoizedState;
                    if (null !== x2)
                      y2 = null !== x2.dehydrated ? true : false;
                    else {
                      var Y2 = p2.memoizedProps;
                      y2 = void 0 === Y2.fallback ? false : true !== Y2.unstable_avoidThisFallback ? true : t2 ? false : true;
                    }
                  }
                  if (y2) {
                    var u2 = p2.updateQueue;
                    if (null === u2) {
                      var v2 = /* @__PURE__ */ new Set();
                      v2.add(l2);
                      p2.updateQueue = v2;
                    } else
                      u2.add(l2);
                    if (0 === (p2.mode & 2)) {
                      p2.flags |= 64;
                      h2.flags |= 16384;
                      h2.flags &= -2981;
                      if (1 === h2.tag)
                        if (null === h2.alternate)
                          h2.tag = 17;
                        else {
                          var C2 = kd(-1, 1);
                          C2.tag = 2;
                          md(h2, C2);
                        }
                      h2.lanes |= 1;
                      break a;
                    }
                    k2 = void 0;
                    h2 = b2;
                    var Oa = f2.pingCache;
                    null === Oa ? (Oa = f2.pingCache = new Af(), k2 = /* @__PURE__ */ new Set(), Oa.set(l2, k2)) : (k2 = Oa.get(l2), void 0 === k2 && (k2 = /* @__PURE__ */ new Set(), Oa.set(l2, k2)));
                    if (!k2.has(h2)) {
                      k2.add(h2);
                      var Qe = ch.bind(null, f2, l2, h2);
                      l2.then(Qe, Qe);
                    }
                    p2.flags |= 4096;
                    p2.lanes = b2;
                    break a;
                  }
                  p2 = p2.return;
                } while (null !== p2);
                k2 = Error((wa(h2.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
              }
              5 !== T2 && (T2 = 2);
              k2 = yf(k2, h2);
              p2 = g2;
              do {
                switch (p2.tag) {
                  case 3:
                    f2 = k2;
                    p2.flags |= 4096;
                    b2 &= -b2;
                    p2.lanes |= b2;
                    var Wg = Bf(p2, f2, b2);
                    nd(p2, Wg);
                    break a;
                  case 1:
                    f2 = k2;
                    var Xg = p2.type, ld = p2.stateNode;
                    if (0 === (p2.flags & 64) && ("function" === typeof Xg.getDerivedStateFromError || null !== ld && "function" === typeof ld.componentDidCatch && (null === Ff || !Ff.has(ld)))) {
                      p2.flags |= 4096;
                      b2 &= -b2;
                      p2.lanes |= b2;
                      var Yg = Ef(p2, f2, b2);
                      nd(p2, Yg);
                      break a;
                    }
                }
                p2 = p2.return;
              } while (null !== p2);
            }
            dh(c2);
          } catch (w2) {
            b2 = w2;
            W2 === c2 && null !== c2 && (W2 = c2 = c2.return);
            continue;
          }
          break;
        } while (1);
      }
      function Rg() {
        var a2 = qg.current;
        qg.current = pe;
        return null === a2 ? pe : a2;
      }
      function Vg(a2, b2) {
        var c2 = V2;
        V2 |= 16;
        var d2 = Rg();
        R2 === a2 && U2 === b2 || Sg(a2, b2);
        do
          try {
            eh();
            break;
          } catch (e) {
            Ug(a2, e);
          }
        while (1);
        bd();
        V2 = c2;
        qg.current = d2;
        if (null !== W2)
          throw Error(q2(261));
        R2 = null;
        U2 = 0;
        return T2;
      }
      function eh() {
        for (; null !== W2; )
          fh(W2);
      }
      function Tg() {
        for (; null !== W2 && !yc(); )
          fh(W2);
      }
      function fh(a2) {
        var b2 = gh(a2.alternate, a2, tg);
        a2.memoizedProps = a2.pendingProps;
        null === b2 ? dh(a2) : W2 = b2;
        rg.current = null;
      }
      function dh(a2) {
        var b2 = a2;
        do {
          var c2 = b2.alternate;
          a2 = b2.return;
          if (0 === (b2.flags & 2048)) {
            c2 = sf(c2, b2, tg);
            if (null !== c2) {
              W2 = c2;
              return;
            }
            c2 = b2;
            if (24 !== c2.tag && 23 !== c2.tag || null === c2.memoizedState || 0 !== (tg & 1073741824) || 0 === (c2.mode & 4)) {
              for (var d2 = 0, e = c2.child; null !== e; )
                d2 |= e.lanes | e.childLanes, e = e.sibling;
              c2.childLanes = d2;
            }
            null !== a2 && 0 === (a2.flags & 2048) && (null === a2.firstEffect && (a2.firstEffect = b2.firstEffect), null !== b2.lastEffect && (null !== a2.lastEffect && (a2.lastEffect.nextEffect = b2.firstEffect), a2.lastEffect = b2.lastEffect), 1 < b2.flags && (null !== a2.lastEffect ? a2.lastEffect.nextEffect = b2 : a2.firstEffect = b2, a2.lastEffect = b2));
          } else {
            c2 = xf(b2);
            if (null !== c2) {
              c2.flags &= 2047;
              W2 = c2;
              return;
            }
            null !== a2 && (a2.firstEffect = a2.lastEffect = null, a2.flags |= 2048);
          }
          b2 = b2.sibling;
          if (null !== b2) {
            W2 = b2;
            return;
          }
          W2 = b2 = a2;
        } while (null !== b2);
        0 === T2 && (T2 = 5);
      }
      function Zg(a2) {
        var b2 = Nc();
        Pc(99, hh.bind(null, a2, b2));
        return null;
      }
      function hh(a2, b2) {
        do
          Qg();
        while (null !== Bg);
        if (0 !== (V2 & 48))
          throw Error(q2(327));
        var c2 = a2.finishedWork;
        if (null === c2)
          return null;
        a2.finishedWork = null;
        a2.finishedLanes = 0;
        if (c2 === a2.current)
          throw Error(q2(177));
        a2.callbackNode = null;
        var d2 = c2.lanes | c2.childLanes, e = d2, f2 = a2.pendingLanes & ~e;
        a2.pendingLanes = e;
        a2.suspendedLanes = 0;
        a2.pingedLanes = 0;
        a2.expiredLanes &= e;
        a2.mutableReadLanes &= e;
        a2.entangledLanes &= e;
        e = a2.entanglements;
        for (var g2 = a2.eventTimes, h2 = a2.expirationTimes; 0 < f2; ) {
          var k2 = 31 - mc(f2), l2 = 1 << k2;
          e[k2] = 0;
          g2[k2] = -1;
          h2[k2] = -1;
          f2 &= ~l2;
        }
        null !== Fg && 0 === (d2 & 24) && Fg.has(a2) && Fg.delete(a2);
        a2 === R2 && (W2 = R2 = null, U2 = 0);
        1 < c2.flags ? null !== c2.lastEffect ? (c2.lastEffect.nextEffect = c2, d2 = c2.firstEffect) : d2 = c2 : d2 = c2.firstEffect;
        if (null !== d2) {
          e = V2;
          V2 |= 32;
          rg.current = null;
          Lg = Ga(a2.containerInfo);
          Mg = false;
          X2 = d2;
          do
            try {
              ih();
            } catch (v2) {
              if (null === X2)
                throw Error(q2(330));
              If(X2, v2);
              X2 = X2.nextEffect;
            }
          while (null !== X2);
          Lg = null;
          X2 = d2;
          do
            try {
              for (g2 = a2; null !== X2; ) {
                var n2 = X2.flags;
                n2 & 16 && Ta && sb(X2.stateNode);
                if (n2 & 128) {
                  var t2 = X2.alternate;
                  if (null !== t2) {
                    var p2 = t2.ref;
                    null !== p2 && ("function" === typeof p2 ? p2(null) : p2.current = null);
                  }
                }
                switch (n2 & 1038) {
                  case 2:
                    Uf(X2);
                    X2.flags &= -3;
                    break;
                  case 6:
                    Uf(X2);
                    X2.flags &= -3;
                    Xf(X2.alternate, X2);
                    break;
                  case 1024:
                    X2.flags &= -1025;
                    break;
                  case 1028:
                    X2.flags &= -1025;
                    Xf(X2.alternate, X2);
                    break;
                  case 4:
                    Xf(X2.alternate, X2);
                    break;
                  case 8:
                    h2 = g2;
                    f2 = X2;
                    Ta ? Qf(h2, f2) : Rf(h2, f2);
                    var y2 = f2.alternate;
                    Sf(f2);
                    null !== y2 && Sf(y2);
                }
                X2 = X2.nextEffect;
              }
            } catch (v2) {
              if (null === X2)
                throw Error(q2(330));
              If(X2, v2);
              X2 = X2.nextEffect;
            }
          while (null !== X2);
          Mg && $a();
          Ha(a2.containerInfo);
          a2.current = c2;
          X2 = d2;
          do
            try {
              for (n2 = a2; null !== X2; ) {
                var x2 = X2.flags;
                x2 & 36 && Lf(n2, X2.alternate, X2);
                if (x2 & 128) {
                  t2 = void 0;
                  var Y2 = X2.ref;
                  if (null !== Y2) {
                    var u2 = X2.stateNode;
                    switch (X2.tag) {
                      case 5:
                        t2 = Da(u2);
                        break;
                      default:
                        t2 = u2;
                    }
                    "function" === typeof Y2 ? Y2(t2) : Y2.current = t2;
                  }
                }
                X2 = X2.nextEffect;
              }
            } catch (v2) {
              if (null === X2)
                throw Error(q2(330));
              If(X2, v2);
              X2 = X2.nextEffect;
            }
          while (null !== X2);
          X2 = null;
          Ic();
          V2 = e;
        } else
          a2.current = c2;
        if (Ag)
          Ag = false, Bg = a2, Cg = b2;
        else
          for (X2 = d2; null !== X2; )
            b2 = X2.nextEffect, X2.nextEffect = null, X2.flags & 8 && (x2 = X2, x2.sibling = null, x2.stateNode = null), X2 = b2;
        d2 = a2.pendingLanes;
        0 === d2 && (Ff = null);
        1 === d2 ? a2 === Hg ? Gg++ : (Gg = 0, Hg = a2) : Gg = 0;
        c2 = c2.stateNode;
        if (fc && "function" === typeof fc.onCommitFiberRoot)
          try {
            fc.onCommitFiberRoot(
              ec,
              c2,
              void 0,
              64 === (c2.current.flags & 64)
            );
          } catch (v2) {
          }
        Z2(a2, G2());
        if (Cf)
          throw Cf = false, a2 = Df, Df = null, a2;
        if (0 !== (V2 & 8))
          return null;
        H2();
        return null;
      }
      function ih() {
        for (; null !== X2; ) {
          var a2 = X2.alternate;
          Mg || null === Lg || (0 !== (X2.flags & 8) ? Ca(X2, Lg) && (Mg = true, Za()) : 13 === X2.tag && bg(a2, X2) && Ca(X2, Lg) && (Mg = true, Za()));
          var b2 = X2.flags;
          0 !== (b2 & 256) && Jf(a2, X2);
          0 === (b2 & 512) || Ag || (Ag = true, Qc(97, function() {
            Qg();
            return null;
          }));
          X2 = X2.nextEffect;
        }
      }
      function Qg() {
        if (90 !== Cg) {
          var a2 = 97 < Cg ? 97 : Cg;
          Cg = 90;
          return Pc(a2, jh);
        }
        return false;
      }
      function Nf(a2, b2) {
        Dg.push(b2, a2);
        Ag || (Ag = true, Qc(97, function() {
          Qg();
          return null;
        }));
      }
      function Mf(a2, b2) {
        Eg.push(b2, a2);
        Ag || (Ag = true, Qc(97, function() {
          Qg();
          return null;
        }));
      }
      function jh() {
        if (null === Bg)
          return false;
        var a2 = Bg;
        Bg = null;
        if (0 !== (V2 & 48))
          throw Error(q2(331));
        var b2 = V2;
        V2 |= 32;
        var c2 = Eg;
        Eg = [];
        for (var d2 = 0; d2 < c2.length; d2 += 2) {
          var e = c2[d2], f2 = c2[d2 + 1], g2 = e.destroy;
          e.destroy = void 0;
          if ("function" === typeof g2)
            try {
              g2();
            } catch (k2) {
              if (null === f2)
                throw Error(q2(330));
              If(f2, k2);
            }
        }
        c2 = Dg;
        Dg = [];
        for (d2 = 0; d2 < c2.length; d2 += 2) {
          e = c2[d2];
          f2 = c2[d2 + 1];
          try {
            var h2 = e.create;
            e.destroy = h2();
          } catch (k2) {
            if (null === f2)
              throw Error(q2(330));
            If(f2, k2);
          }
        }
        for (h2 = a2.current.firstEffect; null !== h2; )
          a2 = h2.nextEffect, h2.nextEffect = null, h2.flags & 8 && (h2.sibling = null, h2.stateNode = null), h2 = a2;
        V2 = b2;
        H2();
        return true;
      }
      function kh(a2, b2, c2) {
        b2 = yf(c2, b2);
        b2 = Bf(a2, b2, 1);
        md(a2, b2);
        b2 = K();
        a2 = Ng(a2, 1);
        null !== a2 && (rc(a2, 1, b2), Z2(a2, b2));
      }
      function If(a2, b2) {
        if (3 === a2.tag)
          kh(a2, a2, b2);
        else
          for (var c2 = a2.return; null !== c2; ) {
            if (3 === c2.tag) {
              kh(c2, a2, b2);
              break;
            } else if (1 === c2.tag) {
              var d2 = c2.stateNode;
              if ("function" === typeof c2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Ff || !Ff.has(d2))) {
                a2 = yf(b2, a2);
                var e = Ef(c2, a2, 1);
                md(c2, e);
                e = K();
                c2 = Ng(c2, 1);
                if (null !== c2)
                  rc(c2, 1, e), Z2(c2, e);
                else if ("function" === typeof d2.componentDidCatch && (null === Ff || !Ff.has(d2)))
                  try {
                    d2.componentDidCatch(b2, a2);
                  } catch (f2) {
                  }
                break;
              }
            }
            c2 = c2.return;
          }
      }
      function ch(a2, b2, c2) {
        var d2 = a2.pingCache;
        null !== d2 && d2.delete(b2);
        b2 = K();
        a2.pingedLanes |= a2.suspendedLanes & c2;
        R2 === a2 && (U2 & c2) === c2 && (4 === T2 || 3 === T2 && (U2 & 62914560) === U2 && 500 > G2() - $f ? Sg(a2, 0) : xg |= c2);
        Z2(a2, b2);
      }
      function ag(a2, b2) {
        var c2 = a2.stateNode;
        null !== c2 && c2.delete(b2);
        b2 = 0;
        0 === b2 && (b2 = a2.mode, 0 === (b2 & 2) ? b2 = 1 : 0 === (b2 & 4) ? b2 = 99 === Nc() ? 1 : 2 : (0 === Jg && (Jg = wg), b2 = pc(62914560 & ~Jg), 0 === b2 && (b2 = 4194304)));
        c2 = K();
        a2 = Ng(a2, b2);
        null !== a2 && (rc(a2, b2, c2), Z2(a2, c2));
      }
      var gh;
      gh = function(a2, b2, c2) {
        var d2 = b2.lanes;
        if (null !== a2)
          if (a2.memoizedProps !== b2.pendingProps || D2.current)
            gd = true;
          else if (0 !== (c2 & d2))
            gd = 0 !== (a2.flags & 16384) ? true : false;
          else {
            gd = false;
            switch (b2.tag) {
              case 3:
                af(b2);
                ce();
                break;
              case 5:
                Rd(b2);
                break;
              case 1:
                E2(b2.type) && cc(b2);
                break;
              case 4:
                Pd(b2, b2.stateNode.containerInfo);
                break;
              case 10:
                cd(b2, b2.memoizedProps.value);
                break;
              case 13:
                if (null !== b2.memoizedState) {
                  if (0 !== (c2 & b2.child.childLanes))
                    return cf(a2, b2, c2);
                  A2(M2, M2.current & 1);
                  b2 = Re(a2, b2, c2);
                  return null !== b2 ? b2.sibling : null;
                }
                A2(M2, M2.current & 1);
                break;
              case 19:
                d2 = 0 !== (c2 & b2.childLanes);
                if (0 !== (a2.flags & 64)) {
                  if (d2)
                    return kf(a2, b2, c2);
                  b2.flags |= 64;
                }
                var e = b2.memoizedState;
                null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
                A2(M2, M2.current);
                if (d2)
                  break;
                else
                  return null;
              case 23:
              case 24:
                return b2.lanes = 0, We(a2, b2, c2);
            }
            return Re(a2, b2, c2);
          }
        else
          gd = false;
        b2.lanes = 0;
        switch (b2.tag) {
          case 2:
            d2 = b2.type;
            null !== a2 && (a2.alternate = null, b2.alternate = null, b2.flags |= 2);
            a2 = b2.pendingProps;
            e = Zb(b2, B2.current);
            fd(b2, c2);
            e = le(null, b2, d2, a2, e, c2);
            b2.flags |= 1;
            if ("object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
              b2.tag = 1;
              b2.memoizedState = null;
              b2.updateQueue = null;
              if (E2(d2)) {
                var f2 = true;
                cc(b2);
              } else
                f2 = false;
              b2.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;
              id(b2);
              var g2 = d2.getDerivedStateFromProps;
              "function" === typeof g2 && sd(b2, d2, g2, a2);
              e.updater = vd;
              b2.stateNode = e;
              e._reactInternals = b2;
              zd(b2, d2, a2, c2);
              b2 = $e(null, b2, d2, true, f2, c2);
            } else
              b2.tag = 0, S2(null, b2, e, c2), b2 = b2.child;
            return b2;
          case 16:
            e = b2.elementType;
            a: {
              null !== a2 && (a2.alternate = null, b2.alternate = null, b2.flags |= 2);
              a2 = b2.pendingProps;
              f2 = e._init;
              e = f2(e._payload);
              b2.type = e;
              f2 = b2.tag = lh(e);
              a2 = Xc(e, a2);
              switch (f2) {
                case 0:
                  b2 = Ve(null, b2, e, a2, c2);
                  break a;
                case 1:
                  b2 = Ze(null, b2, e, a2, c2);
                  break a;
                case 11:
                  b2 = Pe(null, b2, e, a2, c2);
                  break a;
                case 14:
                  b2 = Se(null, b2, e, Xc(e.type, a2), d2, c2);
                  break a;
              }
              throw Error(q2(306, e, ""));
            }
            return b2;
          case 0:
            return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Xc(d2, e), Ve(a2, b2, d2, e, c2);
          case 1:
            return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Xc(d2, e), Ze(a2, b2, d2, e, c2);
          case 3:
            af(b2);
            d2 = b2.updateQueue;
            if (null === a2 || null === d2)
              throw Error(q2(282));
            d2 = b2.pendingProps;
            e = b2.memoizedState;
            e = null !== e ? e.element : null;
            jd(a2, b2);
            od(b2, d2, null, c2);
            d2 = b2.memoizedState.element;
            if (d2 === e)
              ce(), b2 = Re(a2, b2, c2);
            else {
              e = b2.stateNode;
              if (f2 = e.hydrate)
                Va ? (Vd = Kb(b2.stateNode.containerInfo), Ud = b2, f2 = Wd = true) : f2 = false;
              if (f2) {
                if (Va && (a2 = e.mutableSourceEagerHydrationData, null != a2))
                  for (e = 0; e < a2.length; e += 2)
                    f2 = a2[e], g2 = a2[e + 1], Sa ? f2._workInProgressVersionPrimary = g2 : f2._workInProgressVersionSecondary = g2, de.push(f2);
                c2 = Kd(b2, null, d2, c2);
                for (b2.child = c2; c2; )
                  c2.flags = c2.flags & -3 | 1024, c2 = c2.sibling;
              } else
                S2(a2, b2, d2, c2), ce();
              b2 = b2.child;
            }
            return b2;
          case 5:
            return Rd(b2), null === a2 && $d(b2), d2 = b2.type, e = b2.pendingProps, f2 = null !== a2 ? a2.memoizedProps : null, g2 = e.children, Ma(d2, e) ? g2 = null : null !== f2 && Ma(d2, f2) && (b2.flags |= 16), Ye(a2, b2), S2(a2, b2, g2, c2), b2.child;
          case 6:
            return null === a2 && $d(b2), null;
          case 13:
            return cf(a2, b2, c2);
          case 4:
            return Pd(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a2 ? b2.child = Jd(b2, null, d2, c2) : S2(a2, b2, d2, c2), b2.child;
          case 11:
            return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Xc(d2, e), Pe(a2, b2, d2, e, c2);
          case 7:
            return S2(a2, b2, b2.pendingProps, c2), b2.child;
          case 8:
            return S2(
              a2,
              b2,
              b2.pendingProps.children,
              c2
            ), b2.child;
          case 12:
            return S2(a2, b2, b2.pendingProps.children, c2), b2.child;
          case 10:
            a: {
              d2 = b2.type._context;
              e = b2.pendingProps;
              g2 = b2.memoizedProps;
              f2 = e.value;
              cd(b2, f2);
              if (null !== g2) {
                var h2 = g2.value;
                f2 = I2(h2, f2) ? 0 : ("function" === typeof d2._calculateChangedBits ? d2._calculateChangedBits(h2, f2) : 1073741823) | 0;
                if (0 === f2) {
                  if (g2.children === e.children && !D2.current) {
                    b2 = Re(a2, b2, c2);
                    break a;
                  }
                } else
                  for (h2 = b2.child, null !== h2 && (h2.return = b2); null !== h2; ) {
                    var k2 = h2.dependencies;
                    if (null !== k2) {
                      g2 = h2.child;
                      for (var l2 = k2.firstContext; null !== l2; ) {
                        if (l2.context === d2 && 0 !== (l2.observedBits & f2)) {
                          1 === h2.tag && (l2 = kd(-1, c2 & -c2), l2.tag = 2, md(h2, l2));
                          h2.lanes |= c2;
                          l2 = h2.alternate;
                          null !== l2 && (l2.lanes |= c2);
                          ed(h2.return, c2);
                          k2.lanes |= c2;
                          break;
                        }
                        l2 = l2.next;
                      }
                    } else
                      g2 = 10 === h2.tag ? h2.type === b2.type ? null : h2.child : h2.child;
                    if (null !== g2)
                      g2.return = h2;
                    else
                      for (g2 = h2; null !== g2; ) {
                        if (g2 === b2) {
                          g2 = null;
                          break;
                        }
                        h2 = g2.sibling;
                        if (null !== h2) {
                          h2.return = g2.return;
                          g2 = h2;
                          break;
                        }
                        g2 = g2.return;
                      }
                    h2 = g2;
                  }
              }
              S2(a2, b2, e.children, c2);
              b2 = b2.child;
            }
            return b2;
          case 9:
            return e = b2.type, f2 = b2.pendingProps, d2 = f2.children, fd(b2, c2), e = J(e, f2.unstable_observedBits), d2 = d2(e), b2.flags |= 1, S2(
              a2,
              b2,
              d2,
              c2
            ), b2.child;
          case 14:
            return e = b2.type, f2 = Xc(e, b2.pendingProps), f2 = Xc(e.type, f2), Se(a2, b2, e, f2, d2, c2);
          case 15:
            return Ue(a2, b2, b2.type, b2.pendingProps, d2, c2);
          case 17:
            return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Xc(d2, e), null !== a2 && (a2.alternate = null, b2.alternate = null, b2.flags |= 2), b2.tag = 1, E2(d2) ? (a2 = true, cc(b2)) : a2 = false, fd(b2, c2), xd(b2, d2, e), zd(b2, d2, e, c2), $e(null, b2, d2, true, a2, c2);
          case 19:
            return kf(a2, b2, c2);
          case 23:
            return We(a2, b2, c2);
          case 24:
            return We(a2, b2, c2);
        }
        throw Error(q2(156, b2.tag));
      };
      var mh = { current: false }, nh = m2.unstable_flushAllWithoutAsserting, oh = "function" === typeof nh;
      function ph() {
        if (void 0 !== nh)
          return nh();
        for (var a2 = false; Qg(); )
          a2 = true;
        return a2;
      }
      function qh(a2) {
        try {
          ph(), og(function() {
            ph() ? qh(a2) : a2();
          });
        } catch (b2) {
          a2(b2);
        }
      }
      var rh = 0, sh = false;
      function th(a2, b2, c2, d2) {
        this.tag = a2;
        this.key = c2;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = b2;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = d2;
        this.flags = 0;
        this.lastEffect = this.firstEffect = this.nextEffect = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
      }
      function Yd(a2, b2, c2, d2) {
        return new th(a2, b2, c2, d2);
      }
      function Te(a2) {
        a2 = a2.prototype;
        return !(!a2 || !a2.isReactComponent);
      }
      function lh(a2) {
        if ("function" === typeof a2)
          return Te(a2) ? 1 : 0;
        if (void 0 !== a2 && null !== a2) {
          a2 = a2.$$typeof;
          if (a2 === la)
            return 11;
          if (a2 === oa)
            return 14;
        }
        return 2;
      }
      function Ed(a2, b2) {
        var c2 = a2.alternate;
        null === c2 ? (c2 = Yd(a2.tag, b2, a2.key, a2.mode), c2.elementType = a2.elementType, c2.type = a2.type, c2.stateNode = a2.stateNode, c2.alternate = a2, a2.alternate = c2) : (c2.pendingProps = b2, c2.type = a2.type, c2.flags = 0, c2.nextEffect = null, c2.firstEffect = null, c2.lastEffect = null);
        c2.childLanes = a2.childLanes;
        c2.lanes = a2.lanes;
        c2.child = a2.child;
        c2.memoizedProps = a2.memoizedProps;
        c2.memoizedState = a2.memoizedState;
        c2.updateQueue = a2.updateQueue;
        b2 = a2.dependencies;
        c2.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
        c2.sibling = a2.sibling;
        c2.index = a2.index;
        c2.ref = a2.ref;
        return c2;
      }
      function Gd(a2, b2, c2, d2, e, f2) {
        var g2 = 2;
        d2 = a2;
        if ("function" === typeof a2)
          Te(a2) && (g2 = 1);
        else if ("string" === typeof a2)
          g2 = 5;
        else
          a:
            switch (a2) {
              case fa:
                return Id(c2.children, e, f2, b2);
              case ra:
                g2 = 8;
                e |= 16;
                break;
              case ha:
                g2 = 8;
                e |= 1;
                break;
              case ia:
                return a2 = Yd(12, c2, b2, e | 8), a2.elementType = ia, a2.type = ia, a2.lanes = f2, a2;
              case ma:
                return a2 = Yd(13, c2, b2, e), a2.type = ma, a2.elementType = ma, a2.lanes = f2, a2;
              case na:
                return a2 = Yd(19, c2, b2, e), a2.elementType = na, a2.lanes = f2, a2;
              case sa:
                return ef(c2, e, f2, b2);
              case ta:
                return a2 = Yd(24, c2, b2, e), a2.elementType = ta, a2.lanes = f2, a2;
              default:
                if ("object" === typeof a2 && null !== a2)
                  switch (a2.$$typeof) {
                    case ja:
                      g2 = 10;
                      break a;
                    case ka:
                      g2 = 9;
                      break a;
                    case la:
                      g2 = 11;
                      break a;
                    case oa:
                      g2 = 14;
                      break a;
                    case pa:
                      g2 = 16;
                      d2 = null;
                      break a;
                    case qa:
                      g2 = 22;
                      break a;
                  }
                throw Error(q2(130, null == a2 ? a2 : typeof a2, ""));
            }
        b2 = Yd(g2, c2, b2, e);
        b2.elementType = a2;
        b2.type = d2;
        b2.lanes = f2;
        return b2;
      }
      function Id(a2, b2, c2, d2) {
        a2 = Yd(7, a2, d2, b2);
        a2.lanes = c2;
        return a2;
      }
      function ef(a2, b2, c2, d2) {
        a2 = Yd(23, a2, d2, b2);
        a2.elementType = sa;
        a2.lanes = c2;
        return a2;
      }
      function Fd(a2, b2, c2) {
        a2 = Yd(6, a2, null, b2);
        a2.lanes = c2;
        return a2;
      }
      function Hd(a2, b2, c2) {
        b2 = Yd(4, null !== a2.children ? a2.children : [], a2.key, b2);
        b2.lanes = c2;
        b2.stateNode = { containerInfo: a2.containerInfo, pendingChildren: null, implementation: a2.implementation };
        return b2;
      }
      function uh(a2, b2, c2) {
        this.tag = b2;
        this.containerInfo = a2;
        this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = Ra;
        this.pendingContext = this.context = null;
        this.hydrate = c2;
        this.callbackNode = null;
        this.callbackPriority = 0;
        this.eventTimes = qc(0);
        this.expirationTimes = qc(-1);
        this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = qc(0);
        Va && (this.mutableSourceEagerHydrationData = null);
      }
      function vh(a2) {
        var b2 = a2._reactInternals;
        if (void 0 === b2) {
          if ("function" === typeof a2.render)
            throw Error(q2(188));
          throw Error(q2(268, Object.keys(a2)));
        }
        a2 = Aa(b2);
        return null === a2 ? null : a2.stateNode;
      }
      function wh(a2, b2) {
        a2 = a2.memoizedState;
        if (null !== a2 && null !== a2.dehydrated) {
          var c2 = a2.retryLane;
          a2.retryLane = 0 !== c2 && c2 < b2 ? c2 : b2;
        }
      }
      function xh(a2, b2) {
        wh(a2, b2);
        (a2 = a2.alternate) && wh(a2, b2);
      }
      function yh(a2) {
        a2 = Aa(a2);
        return null === a2 ? null : a2.stateNode;
      }
      function zh() {
        return null;
      }
      exports3.IsThisRendererActing = mh;
      exports3.act = function(a2) {
        function b2() {
          rh--;
          sg.current = c2;
          mh.current = d2;
        }
        false === sh && (sh = true, console.error("act(...) is not supported in production builds of React, and might not behave as expected."));
        rh++;
        var c2 = sg.current, d2 = mh.current;
        sg.current = true;
        mh.current = true;
        try {
          var e = ah(a2);
        } catch (f2) {
          throw b2(), f2;
        }
        if (null !== e && "object" === typeof e && "function" === typeof e.then)
          return { then: function(a3, d3) {
            e.then(function() {
              1 < rh || true === oh && true === c2 ? (b2(), a3()) : qh(function(c3) {
                b2();
                c3 ? d3(c3) : a3();
              });
            }, function(a4) {
              b2();
              d3(a4);
            });
          } };
        try {
          1 !== rh || false !== oh && false !== c2 || ph(), b2();
        } catch (f2) {
          throw b2(), f2;
        }
        return { then: function(a3) {
          a3();
        } };
      };
      exports3.attemptContinuousHydration = function(a2) {
        if (13 === a2.tag) {
          var b2 = K();
          ud(a2, 67108864, b2);
          xh(a2, 67108864);
        }
      };
      exports3.attemptHydrationAtCurrentPriority = function(a2) {
        if (13 === a2.tag) {
          var b2 = K(), c2 = td(a2);
          ud(a2, c2, b2);
          xh(a2, c2);
        }
      };
      exports3.attemptSynchronousHydration = function(a2) {
        switch (a2.tag) {
          case 3:
            var b2 = a2.stateNode;
            if (b2.hydrate) {
              var c2 = ic(b2.pendingLanes);
              b2.expiredLanes |= c2 & b2.pendingLanes;
              Z2(b2, G2());
              0 === (V2 & 48) && (zg(), H2());
            }
            break;
          case 13:
            var d2 = K();
            bh(function() {
              return ud(a2, 1, d2);
            });
            xh(a2, 4);
        }
      };
      exports3.attemptUserBlockingHydration = function(a2) {
        if (13 === a2.tag) {
          var b2 = K();
          ud(a2, 4, b2);
          xh(a2, 4);
        }
      };
      exports3.batchedEventUpdates = function(a2, b2) {
        var c2 = V2;
        V2 |= 2;
        try {
          return a2(b2);
        } finally {
          V2 = c2, 0 === V2 && (zg(), H2());
        }
      };
      exports3.batchedUpdates = ah;
      exports3.createComponentSelector = function(a2) {
        return { $$typeof: cg, value: a2 };
      };
      exports3.createContainer = function(a2, b2, c2) {
        a2 = new uh(a2, b2, c2);
        b2 = Yd(3, null, null, 2 === b2 ? 7 : 1 === b2 ? 3 : 0);
        a2.current = b2;
        b2.stateNode = a2;
        id(b2);
        return a2;
      };
      exports3.createHasPsuedoClassSelector = function(a2) {
        return { $$typeof: dg, value: a2 };
      };
      exports3.createPortal = function(a2, b2, c2) {
        var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        return { $$typeof: ea, key: null == d2 ? null : "" + d2, children: a2, containerInfo: b2, implementation: c2 };
      };
      exports3.createRoleSelector = function(a2) {
        return { $$typeof: eg, value: a2 };
      };
      exports3.createTestNameSelector = function(a2) {
        return { $$typeof: fg, value: a2 };
      };
      exports3.createTextSelector = function(a2) {
        return { $$typeof: gg, value: a2 };
      };
      exports3.deferredUpdates = function(a2) {
        return Pc(97, a2);
      };
      exports3.discreteUpdates = function(a2, b2, c2, d2, e) {
        var f2 = V2;
        V2 |= 4;
        try {
          return Pc(98, a2.bind(null, b2, c2, d2, e));
        } finally {
          V2 = f2, 0 === V2 && (zg(), H2());
        }
      };
      exports3.findAllNodes = mg;
      exports3.findBoundingRects = function(a2, b2) {
        if (!bb)
          throw Error(q2(363));
        b2 = mg(a2, b2);
        a2 = [];
        for (var c2 = 0; c2 < b2.length; c2++)
          a2.push(db(b2[c2]));
        for (b2 = a2.length - 1; 0 < b2; b2--) {
          c2 = a2[b2];
          for (var d2 = c2.x, e = d2 + c2.width, f2 = c2.y, g2 = f2 + c2.height, h2 = b2 - 1; 0 <= h2; h2--)
            if (b2 !== h2) {
              var k2 = a2[h2], l2 = k2.x, n2 = l2 + k2.width, t2 = k2.y, p2 = t2 + k2.height;
              if (d2 >= l2 && f2 >= t2 && e <= n2 && g2 <= p2) {
                a2.splice(b2, 1);
                break;
              } else if (!(d2 !== l2 || c2.width !== k2.width || p2 < f2 || t2 > g2)) {
                t2 > f2 && (k2.height += t2 - f2, k2.y = f2);
                p2 < g2 && (k2.height = g2 - t2);
                a2.splice(b2, 1);
                break;
              } else if (!(f2 !== t2 || c2.height !== k2.height || n2 < d2 || l2 > e)) {
                l2 > d2 && (k2.width += l2 - d2, k2.x = d2);
                n2 < e && (k2.width = e - l2);
                a2.splice(b2, 1);
                break;
              }
            }
        }
        return a2;
      };
      exports3.findHostInstance = vh;
      exports3.findHostInstanceWithNoPortals = function(a2) {
        a2 = Ba(a2);
        return null === a2 ? null : 20 === a2.tag ? a2.stateNode.instance : a2.stateNode;
      };
      exports3.findHostInstanceWithWarning = function(a2) {
        return vh(a2);
      };
      exports3.flushControlled = function(a2) {
        var b2 = V2;
        V2 |= 1;
        try {
          Pc(99, a2);
        } finally {
          V2 = b2, 0 === V2 && (zg(), H2());
        }
      };
      exports3.flushDiscreteUpdates = function() {
        0 === (V2 & 49) && ($g(), Qg());
      };
      exports3.flushPassiveEffects = Qg;
      exports3.flushSync = bh;
      exports3.focusWithin = function(a2, b2) {
        if (!bb)
          throw Error(q2(363));
        a2 = ig(a2);
        b2 = lg(a2, b2);
        b2 = Array.from(b2);
        for (a2 = 0; a2 < b2.length; ) {
          var c2 = b2[a2++];
          if (!fb(c2)) {
            if (5 === c2.tag && hb(c2.stateNode))
              return true;
            for (c2 = c2.child; null !== c2; )
              b2.push(c2), c2 = c2.sibling;
          }
        }
        return false;
      };
      exports3.getCurrentUpdateLanePriority = function() {
        return hc;
      };
      exports3.getFindAllNodesFailureDescription = function(a2, b2) {
        if (!bb)
          throw Error(q2(363));
        var c2 = 0, d2 = [];
        a2 = [ig(a2), 0];
        for (var e = 0; e < a2.length; ) {
          var f2 = a2[e++], g2 = a2[e++], h2 = b2[g2];
          if (5 !== f2.tag || !fb(f2)) {
            if (jg(f2, h2) && (d2.push(kg(h2)), g2++, g2 > c2 && (c2 = g2)), g2 < b2.length)
              for (f2 = f2.child; null !== f2; )
                a2.push(f2, g2), f2 = f2.sibling;
          }
        }
        if (c2 < b2.length) {
          for (a2 = []; c2 < b2.length; c2++)
            a2.push(kg(b2[c2]));
          return "findAllNodes was able to match part of the selector:\n  " + (d2.join(" > ") + "\n\nNo matching component was found for:\n  ") + a2.join(" > ");
        }
        return null;
      };
      exports3.getPublicRootInstance = function(a2) {
        a2 = a2.current;
        if (!a2.child)
          return null;
        switch (a2.child.tag) {
          case 5:
            return Da(a2.child.stateNode);
          default:
            return a2.child.stateNode;
        }
      };
      exports3.injectIntoDevTools = function(a2) {
        a2 = {
          bundleType: a2.bundleType,
          version: a2.version,
          rendererPackageName: a2.rendererPackageName,
          rendererConfig: a2.rendererConfig,
          overrideHookState: null,
          overrideHookStateDeletePath: null,
          overrideHookStateRenamePath: null,
          overrideProps: null,
          overridePropsDeletePath: null,
          overridePropsRenamePath: null,
          setSuspenseHandler: null,
          scheduleUpdate: null,
          currentDispatcherRef: ca.ReactCurrentDispatcher,
          findHostInstanceByFiber: yh,
          findFiberByHostInstance: a2.findFiberByHostInstance || zh,
          findHostInstancesForRefresh: null,
          scheduleRefresh: null,
          scheduleRoot: null,
          setRefreshHandler: null,
          getCurrentFiber: null
        };
        if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)
          a2 = false;
        else {
          var b2 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (!b2.isDisabled && b2.supportsFiber)
            try {
              ec = b2.inject(a2), fc = b2;
            } catch (c2) {
            }
          a2 = true;
        }
        return a2;
      };
      exports3.observeVisibleRects = function(a2, b2, c2, d2) {
        if (!bb)
          throw Error(q2(363));
        a2 = mg(a2, b2);
        var e = ib(a2, c2, d2).disconnect;
        return { disconnect: function() {
          e();
        } };
      };
      exports3.registerMutableSourceForHydration = function(a2, b2) {
        var c2 = b2._getVersion;
        c2 = c2(b2._source);
        null == a2.mutableSourceEagerHydrationData ? a2.mutableSourceEagerHydrationData = [b2, c2] : a2.mutableSourceEagerHydrationData.push(b2, c2);
      };
      exports3.runWithPriority = function(a2, b2) {
        var c2 = hc;
        try {
          return hc = a2, b2();
        } finally {
          hc = c2;
        }
      };
      exports3.shouldSuspend = function() {
        return false;
      };
      exports3.unbatchedUpdates = function(a2, b2) {
        var c2 = V2;
        V2 &= -2;
        V2 |= 8;
        try {
          return a2(b2);
        } finally {
          V2 = c2, 0 === V2 && (zg(), H2());
        }
      };
      exports3.updateContainer = function(a2, b2, c2, d2) {
        var e = b2.current, f2 = K(), g2 = td(e);
        a:
          if (c2) {
            c2 = c2._reactInternals;
            b: {
              if (xa(c2) !== c2 || 1 !== c2.tag)
                throw Error(q2(170));
              var h2 = c2;
              do {
                switch (h2.tag) {
                  case 3:
                    h2 = h2.stateNode.context;
                    break b;
                  case 1:
                    if (E2(h2.type)) {
                      h2 = h2.stateNode.__reactInternalMemoizedMergedChildContext;
                      break b;
                    }
                }
                h2 = h2.return;
              } while (null !== h2);
              throw Error(q2(171));
            }
            if (1 === c2.tag) {
              var k2 = c2.type;
              if (E2(k2)) {
                c2 = bc(c2, k2, h2);
                break a;
              }
            }
            c2 = h2;
          } else
            c2 = Xb;
        null === b2.context ? b2.context = c2 : b2.pendingContext = c2;
        b2 = kd(f2, g2);
        b2.payload = { element: a2 };
        d2 = void 0 === d2 ? null : d2;
        null !== d2 && (b2.callback = d2);
        md(e, b2);
        ud(e, g2, f2);
        return g2;
      };
      return exports3;
    };
  }
});

// node_modules/.pnpm/scheduler@0.20.2/node_modules/scheduler/cjs/scheduler-tracing.production.min.js
var require_scheduler_tracing_production_min = __commonJS({
  "node_modules/.pnpm/scheduler@0.20.2/node_modules/scheduler/cjs/scheduler-tracing.production.min.js"(exports2) {
    "use strict";
    var b2 = 0;
    exports2.__interactionsRef = null;
    exports2.__subscriberRef = null;
    exports2.unstable_clear = function(a2) {
      return a2();
    };
    exports2.unstable_getCurrent = function() {
      return null;
    };
    exports2.unstable_getThreadID = function() {
      return ++b2;
    };
    exports2.unstable_subscribe = function() {
    };
    exports2.unstable_trace = function(a2, d2, c2) {
      return c2();
    };
    exports2.unstable_unsubscribe = function() {
    };
    exports2.unstable_wrap = function(a2) {
      return a2;
    };
  }
});

// node_modules/.pnpm/scheduler@0.20.2/node_modules/scheduler/cjs/scheduler-tracing.development.js
var require_scheduler_tracing_development = __commonJS({
  "node_modules/.pnpm/scheduler@0.20.2/node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var DEFAULT_THREAD_ID = 0;
        var interactionIDCounter = 0;
        var threadIDCounter = 0;
        exports2.__interactionsRef = null;
        exports2.__subscriberRef = null;
        {
          exports2.__interactionsRef = {
            current: /* @__PURE__ */ new Set()
          };
          exports2.__subscriberRef = {
            current: null
          };
        }
        function unstable_clear(callback) {
          var prevInteractions = exports2.__interactionsRef.current;
          exports2.__interactionsRef.current = /* @__PURE__ */ new Set();
          try {
            return callback();
          } finally {
            exports2.__interactionsRef.current = prevInteractions;
          }
        }
        function unstable_getCurrent() {
          {
            return exports2.__interactionsRef.current;
          }
        }
        function unstable_getThreadID() {
          return ++threadIDCounter;
        }
        function unstable_trace(name, timestamp, callback) {
          var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
          var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name,
            timestamp
          };
          var prevInteractions = exports2.__interactionsRef.current;
          var interactions = new Set(prevInteractions);
          interactions.add(interaction);
          exports2.__interactionsRef.current = interactions;
          var subscriber = exports2.__subscriberRef.current;
          var returnValue;
          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction);
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID);
              }
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports2.__interactionsRef.current = prevInteractions;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID);
                  }
                } finally {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                }
              }
            }
          }
          return returnValue;
        }
        function unstable_wrap(callback) {
          var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
          var wrappedInteractions = exports2.__interactionsRef.current;
          var subscriber = exports2.__subscriberRef.current;
          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
          }
          wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
          });
          var hasRun = false;
          function wrapped() {
            var prevInteractions = exports2.__interactionsRef.current;
            exports2.__interactionsRef.current = wrappedInteractions;
            subscriber = exports2.__subscriberRef.current;
            try {
              var returnValue;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID);
                }
              } finally {
                try {
                  returnValue = callback.apply(void 0, arguments);
                } finally {
                  exports2.__interactionsRef.current = prevInteractions;
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID);
                  }
                }
              }
              return returnValue;
            } finally {
              if (!hasRun) {
                hasRun = true;
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }
          }
          wrapped.cancel = function cancel() {
            subscriber = exports2.__subscriberRef.current;
            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID);
              }
            } finally {
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          };
          return wrapped;
        }
        var subscribers = null;
        {
          subscribers = /* @__PURE__ */ new Set();
        }
        function unstable_subscribe(subscriber) {
          {
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
              exports2.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted,
                onInteractionTraced,
                onWorkCanceled,
                onWorkScheduled,
                onWorkStarted,
                onWorkStopped
              };
            }
          }
        }
        function unstable_unsubscribe(subscriber) {
          {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
              exports2.__subscriberRef.current = null;
            }
          }
        }
        function onInteractionTraced(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkScheduled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStarted(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStopped(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkCanceled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        exports2.unstable_clear = unstable_clear;
        exports2.unstable_getCurrent = unstable_getCurrent;
        exports2.unstable_getThreadID = unstable_getThreadID;
        exports2.unstable_subscribe = unstable_subscribe;
        exports2.unstable_trace = unstable_trace;
        exports2.unstable_unsubscribe = unstable_unsubscribe;
        exports2.unstable_wrap = unstable_wrap;
      })();
    }
  }
});

// node_modules/.pnpm/scheduler@0.20.2/node_modules/scheduler/tracing.js
var require_tracing = __commonJS({
  "node_modules/.pnpm/scheduler@0.20.2/node_modules/scheduler/tracing.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_scheduler_tracing_production_min();
    } else {
      module2.exports = require_scheduler_tracing_development();
    }
  }
});

// node_modules/.pnpm/react-reconciler@0.26.2_react@17.0.2/node_modules/react-reconciler/cjs/react-reconciler.development.js
var require_react_reconciler_development = __commonJS({
  "node_modules/.pnpm/react-reconciler@0.26.2_react@17.0.2/node_modules/react-reconciler/cjs/react-reconciler.development.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      module2.exports = function $$$reconciler($$$hostConfig) {
        var exports3 = {};
        "use strict";
        var React2 = require_react();
        var _assign = require_object_assign();
        var Scheduler = require_scheduler();
        var tracing = require_tracing();
        var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var OffscreenComponent = 23;
        var LegacyHiddenComponent = 24;
        function get(key2) {
          return key2._reactInternals;
        }
        function set(key2, value) {
          key2._reactInternals = value;
        }
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type2) {
          return type2.displayName || "Context";
        }
        function getComponentName(type2) {
          if (type2 == null) {
            return null;
          }
          {
            if (typeof type2.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type2 === "function") {
            return type2.displayName || type2.name || null;
          }
          if (typeof type2 === "string") {
            return type2;
          }
          switch (type2) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type2;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type2;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type2, type2.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type2.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type2._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentName(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var PassiveUnmountPendingDev = 8192;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var ForceUpdateForLegacySuspense = 16384;
        var enableProfilerTimer = true;
        var enableFundamentalAPI = false;
        var enableNewReconciler = false;
        var warnAboutStringRefs = false;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a2 = fiber;
          var b2 = alternate;
          while (true) {
            var parentA = a2.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a2 = b2 = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a2) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b2) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }
            if (a2.return !== b2.return) {
              a2 = parentA;
              b2 = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a2) {
                  didFindChild = true;
                  a2 = parentA;
                  b2 = parentB;
                  break;
                }
                if (_child === b2) {
                  didFindChild = true;
                  b2 = parentA;
                  a2 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentB;
                    b2 = parentA;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentB;
                    a2 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }
            if (!(a2.alternate === b2)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (!(a2.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (a2.stateNode.current === a2) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
              return node;
            } else if (node.child && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function doesFiberContain(parentFiber, childFiber) {
          var node = childFiber;
          var parentFiberAlternate = parentFiber.alternate;
          while (node !== null) {
            if (node === parentFiber || node === parentFiberAlternate) {
              return true;
            }
            node = node.return;
          }
          return false;
        }
        var getPublicInstance = $$$hostConfig.getPublicInstance;
        var getRootHostContext = $$$hostConfig.getRootHostContext;
        var getChildHostContext = $$$hostConfig.getChildHostContext;
        var prepareForCommit = $$$hostConfig.prepareForCommit;
        var resetAfterCommit = $$$hostConfig.resetAfterCommit;
        var createInstance = $$$hostConfig.createInstance;
        var appendInitialChild = $$$hostConfig.appendInitialChild;
        var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;
        var prepareUpdate = $$$hostConfig.prepareUpdate;
        var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;
        var createTextInstance = $$$hostConfig.createTextInstance;
        var scheduleTimeout = $$$hostConfig.scheduleTimeout;
        var cancelTimeout = $$$hostConfig.cancelTimeout;
        var noTimeout = $$$hostConfig.noTimeout;
        var now = $$$hostConfig.now;
        var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;
        var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;
        var supportsMutation = $$$hostConfig.supportsMutation;
        var supportsPersistence = $$$hostConfig.supportsPersistence;
        var supportsHydration = $$$hostConfig.supportsHydration;
        var getFundamentalComponentInstance = $$$hostConfig.getFundamentalComponentInstance;
        var mountFundamentalComponent = $$$hostConfig.mountFundamentalComponent;
        var shouldUpdateFundamentalComponent = $$$hostConfig.shouldUpdateFundamentalComponent;
        var getInstanceFromNode = $$$hostConfig.getInstanceFromNode;
        var isOpaqueHydratingObject = $$$hostConfig.isOpaqueHydratingObject;
        var makeOpaqueHydratingObject = $$$hostConfig.makeOpaqueHydratingObject;
        var makeClientId = $$$hostConfig.makeClientId;
        var makeClientIdInDEV = $$$hostConfig.makeClientIdInDEV;
        var beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;
        var afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;
        var preparePortalMount = $$$hostConfig.preparePortalMount;
        var prepareScopeUpdate = $$$hostConfig.preparePortalMount;
        var getInstanceFromScope = $$$hostConfig.getInstanceFromScope;
        var supportsTestSelectors = $$$hostConfig.supportsTestSelectors;
        var findFiberRoot = $$$hostConfig.findFiberRoot;
        var getBoundingRect = $$$hostConfig.getBoundingRect;
        var getTextContent = $$$hostConfig.getTextContent;
        var isHiddenSubtree = $$$hostConfig.isHiddenSubtree;
        var matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;
        var setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;
        var setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver;
        var appendChild = $$$hostConfig.appendChild;
        var appendChildToContainer = $$$hostConfig.appendChildToContainer;
        var commitTextUpdate = $$$hostConfig.commitTextUpdate;
        var commitMount = $$$hostConfig.commitMount;
        var commitUpdate = $$$hostConfig.commitUpdate;
        var insertBefore = $$$hostConfig.insertBefore;
        var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;
        var removeChild = $$$hostConfig.removeChild;
        var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;
        var resetTextContent = $$$hostConfig.resetTextContent;
        var hideInstance = $$$hostConfig.hideInstance;
        var hideTextInstance = $$$hostConfig.hideTextInstance;
        var unhideInstance = $$$hostConfig.unhideInstance;
        var unhideTextInstance = $$$hostConfig.unhideTextInstance;
        var updateFundamentalComponent = $$$hostConfig.updateFundamentalComponent;
        var unmountFundamentalComponent = $$$hostConfig.unmountFundamentalComponent;
        var clearContainer = $$$hostConfig.clearContainer;
        var cloneInstance = $$$hostConfig.cloneInstance;
        var createContainerChildSet = $$$hostConfig.createContainerChildSet;
        var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;
        var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;
        var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;
        var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;
        var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance;
        var cloneFundamentalInstance = $$$hostConfig.cloneInstance;
        var canHydrateInstance = $$$hostConfig.canHydrateInstance;
        var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;
        var canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;
        var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;
        var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;
        var registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;
        var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;
        var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;
        var hydrateInstance = $$$hostConfig.hydrateInstance;
        var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;
        var hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;
        var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;
        var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;
        var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;
        var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;
        var clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;
        var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;
        var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;
        var didNotHydrateContainerInstance = $$$hostConfig.didNotHydrateContainerInstance;
        var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;
        var didNotFindHydratableContainerInstance = $$$hostConfig.didNotFindHydratableContainerInstance;
        var didNotFindHydratableContainerTextInstance = $$$hostConfig.didNotFindHydratableContainerTextInstance;
        var didNotFindHydratableContainerSuspenseInstance = $$$hostConfig.didNotFindHydratableContainerSuspenseInstance;
        var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;
        var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;
        var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn2, construct) {
          if (!fn2 || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn2);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn2, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn2.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn2();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        {
                          if (typeof fn2 === "function") {
                            componentFrameCache.set(fn2, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn2 ? fn2.displayName || fn2.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn2 === "function") {
              componentFrameCache.set(fn2, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn2, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn2, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
          if (type2 == null) {
            return "";
          }
          if (typeof type2 === "function") {
            {
              return describeNativeComponentFrame(type2, shouldConstruct(type2));
            }
          }
          if (typeof type2 === "string") {
            return describeBuiltInComponentFrame(type2);
          }
          switch (type2) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type2.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type2._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err2 = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err2.name = "Invariant Violation";
                    throw err2;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type2 = workInProgress2.type;
            var contextTypes = type2.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key2 in contextTypes) {
              context[key2] = unmaskedContext[key2];
            }
            {
              var name = getComponentName(type2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type2) {
          {
            var childContextTypes = type2.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type2, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type2.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentName(type2) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error((getComponentName(type2) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
            }
            {
              var name = getComponentName(type2) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return _assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type2, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type2, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var rendererID = null;
        var injectedHook = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err2) {
            {
              error("React instrumentation encountered an error: %s.", err2);
            }
          }
          return true;
        }
        function onScheduleRoot(root, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root, children);
              } catch (err2) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err2);
                }
              }
            }
          }
        }
        function onCommitRoot(root, priorityLevel) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root, void 0, didError);
              }
            } catch (err2) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err2);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err2) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err2);
                }
              }
            }
          }
        }
        var Scheduler_now = Scheduler.unstable_now;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var ImmediatePriority = 99;
        var UserBlockingPriority = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        var initialTimeMs = Scheduler_now();
        var SyncLanePriority = 15;
        var SyncBatchedLanePriority = 14;
        var InputDiscreteHydrationLanePriority = 13;
        var InputDiscreteLanePriority = 12;
        var InputContinuousHydrationLanePriority = 11;
        var InputContinuousLanePriority = 10;
        var DefaultHydrationLanePriority = 9;
        var DefaultLanePriority = 8;
        var TransitionHydrationPriority = 7;
        var TransitionPriority = 6;
        var RetryLanePriority = 5;
        var SelectiveHydrationLanePriority = 4;
        var IdleHydrationLanePriority = 3;
        var IdleLanePriority = 2;
        var OffscreenLanePriority = 1;
        var NoLanePriority = 0;
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var SyncBatchedLane = 2;
        var InputDiscreteHydrationLane = 4;
        var InputDiscreteLanes = 24;
        var InputContinuousHydrationLane = 32;
        var InputContinuousLanes = 192;
        var DefaultHydrationLane = 256;
        var DefaultLanes = 3584;
        var TransitionHydrationLane = 4096;
        var TransitionLanes = 4186112;
        var RetryLanes = 62914560;
        var SomeRetryLane = 33554432;
        var SelectiveHydrationLane = 67108864;
        var NonIdleLanes = 134217727;
        var IdleHydrationLane = 134217728;
        var IdleLanes = 805306368;
        var OffscreenLane = 1073741824;
        var NoTimestamp = -1;
        var currentUpdateLanePriority = NoLanePriority;
        function getCurrentUpdateLanePriority() {
          return currentUpdateLanePriority;
        }
        function setCurrentUpdateLanePriority(newLanePriority) {
          currentUpdateLanePriority = newLanePriority;
        }
        var return_highestLanePriority = DefaultLanePriority;
        function getHighestPriorityLanes(lanes) {
          if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
          }
          if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
          }
          if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
          }
          var inputDiscreteLanes = InputDiscreteLanes & lanes;
          if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
          }
          if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
          }
          var inputContinuousLanes = InputContinuousLanes & lanes;
          if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
          }
          if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
          }
          var defaultLanes = DefaultLanes & lanes;
          if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
          }
          if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
          }
          var transitionLanes = TransitionLanes & lanes;
          if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
          }
          var retryLanes = RetryLanes & lanes;
          if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
          }
          if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
          }
          if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
          }
          var idleLanes = IdleLanes & lanes;
          if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
          }
          if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
          }
          {
            error("Should have found matching lanes. This is a bug in React.");
          }
          return_highestLanePriority = DefaultLanePriority;
          return lanes;
        }
        function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
          switch (schedulerPriorityLevel) {
            case ImmediatePriority:
              return SyncLanePriority;
            case UserBlockingPriority:
              return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
              return DefaultLanePriority;
            case IdlePriority:
              return IdleLanePriority;
            default:
              return NoLanePriority;
          }
        }
        function lanePriorityToSchedulerPriority(lanePriority) {
          switch (lanePriority) {
            case SyncLanePriority:
            case SyncBatchedLanePriority:
              return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
              return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
              return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
              return IdlePriority;
            case NoLanePriority:
              return NoPriority;
            default: {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
        }
        function getNextLanes(root, wipLanes) {
          var pendingLanes = root.pendingLanes;
          if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var nextLanePriority = NoLanePriority;
          var expiredLanes = root.expiredLanes;
          var suspendedLanes = root.suspendedLanes;
          var pingedLanes = root.pingedLanes;
          if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
          } else {
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) {
              return wipLanes;
            } else {
              return_highestLanePriority = nextLanePriority;
            }
          }
          var entangledLanes = root.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root, lanes) {
          var eventTimes = root.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          getHighestPriorityLanes(lane);
          var priority = return_highestLanePriority;
          if (priority >= InputContinuousLanePriority) {
            return currentTime + 250;
          } else if (priority >= TransitionPriority) {
            return currentTime + 5e3;
          } else {
            return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root, currentTime) {
          var pendingLanes = root.pendingLanes;
          var suspendedLanes = root.suspendedLanes;
          var pingedLanes = root.pingedLanes;
          var expirationTimes = root.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root) {
          return getHighestPriorityLanes(root.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root) {
          var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function returnNextLanesPriority() {
          return return_highestLanePriority;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function findUpdateLane(lanePriority, wipLanes) {
          switch (lanePriority) {
            case NoLanePriority:
              break;
            case SyncLanePriority:
              return SyncLane;
            case SyncBatchedLanePriority:
              return SyncBatchedLane;
            case InputDiscreteLanePriority: {
              var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
              if (_lane === NoLane) {
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
              }
              return _lane;
            }
            case InputContinuousLanePriority: {
              var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
              if (_lane2 === NoLane) {
                return findUpdateLane(DefaultLanePriority, wipLanes);
              }
              return _lane2;
            }
            case DefaultLanePriority: {
              var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
              if (_lane3 === NoLane) {
                _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(DefaultLanes);
                }
              }
              return _lane3;
            }
            case TransitionPriority:
            case RetryLanePriority:
              break;
            case IdleLanePriority:
              var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(IdleLanes);
              }
              return lane;
          }
          {
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
          }
        }
        function findTransitionLane(wipLanes, pendingLanes) {
          var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes);
            }
          }
          return lane;
        }
        function findRetryLane(wipLanes) {
          var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(RetryLanes);
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function getLowestPriorityLane(lanes) {
          var index2 = 31 - clz32(lanes);
          return index2 < 0 ? NoLanes : 1 << index2;
        }
        function getEqualOrHigherPriorityLanes(lanes) {
          return (getLowestPriorityLane(lanes) << 1) - 1;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a2, b2) {
          return (a2 & b2) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a2, b2) {
          return a2 | b2;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a2, b2) {
          return a2 !== NoLane && a2 < b2 ? a2 : b2;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i3 = 0; i3 < TotalLanes; i3++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root, updateLane, eventTime) {
          root.pendingLanes |= updateLane;
          var higherPriorityLanes = updateLane - 1;
          root.suspendedLanes &= higherPriorityLanes;
          root.pingedLanes &= higherPriorityLanes;
          var eventTimes = root.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root, suspendedLanes) {
          root.suspendedLanes |= suspendedLanes;
          root.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root, pingedLanes, eventTime) {
          root.pingedLanes |= root.suspendedLanes & pingedLanes;
        }
        function markRootExpired(root, expiredLanes) {
          root.expiredLanes |= expiredLanes & root.pendingLanes;
        }
        function markDiscreteUpdatesExpired(root) {
          root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
        }
        function hasDiscreteLanes(lanes) {
          return (lanes & InputDiscreteLanes) !== NoLanes;
        }
        function markRootMutableRead(root, updateLane) {
          root.mutableReadLanes |= updateLane & root.pendingLanes;
        }
        function markRootFinished(root, remainingLanes) {
          var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
          root.pendingLanes = remainingLanes;
          root.suspendedLanes = 0;
          root.pingedLanes = 0;
          root.expiredLanes &= remainingLanes;
          root.mutableReadLanes &= remainingLanes;
          root.entangledLanes &= remainingLanes;
          var entanglements = root.entanglements;
          var eventTimes = root.eventTimes;
          var expirationTimes = root.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root, entangledLanes) {
          root.entangledLanes |= entangledLanes;
          var entanglements = root.entanglements;
          var lanes = entangledLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] |= entangledLanes;
            lanes &= ~lane;
          }
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(lanes) {
          if (lanes === 0) {
            return 32;
          }
          return 31 - (log(lanes) / LN2 | 0) | 0;
        }
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority$1 = 99;
        var UserBlockingPriority$1 = 98;
        var NormalPriority$1 = 97;
        var LowPriority$1 = 96;
        var IdlePriority$1 = 95;
        var NoPriority$1 = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
        };
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs$1 = Scheduler_now$1();
        var now$1 = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
          return Scheduler_now$1() - initialTimeMs$1;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$1;
            case Scheduler_NormalPriority:
              return NormalPriority$1;
            case Scheduler_LowPriority:
              return LowPriority$1;
            case Scheduler_IdlePriority:
              return IdlePriority$1;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority$1:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority$1:
              return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
              return Scheduler_NormalPriority;
            case LowPriority$1:
              return Scheduler_LowPriority;
            case IdlePriority$1:
              return Scheduler_IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function runWithPriority(reactPriorityLevel, fn2) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn2);
        }
        function scheduleCallback(reactPriorityLevel, callback, options) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options);
        }
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            syncQueue.push(callback);
          }
          return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i3 = 0;
            {
              try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority(ImmediatePriority$1, function() {
                  for (; i3 < _queue.length; i3++) {
                    var callback = _queue[i3];
                    do {
                      callback = callback(_isSync2);
                    } while (callback !== null);
                  }
                });
                syncQueue = null;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i3 + 1);
                }
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error2;
              } finally {
                isFlushingSyncQueue = false;
              }
            }
          }
        }
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var DebugTracingMode = 16;
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = 0;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig.transition;
        }
        function is(x2, y2) {
          return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i3 = 0; i3 < keysA.length; i3++) {
            if (!hasOwnProperty2.call(objB, keysA[i3]) || !objectIs(objA[keysA[i3]], objB[keysA[i3]])) {
              return false;
            }
          }
          return true;
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case Block:
              return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x2) {
            return "\nError generating stack: " + x2.message + "\n" + x2.stack;
          }
        }
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentName(owner.type);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function getIsRendering() {
          {
            return isRendering;
          }
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = _assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var MAX_SIGNED_31_BIT_INT = 1073741823;
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, nextValue) {
          var context = providerFiber.type._context;
          if (isPrimaryRenderer) {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          } else {
            push(valueCursor, context._currentValue2, providerFiber);
            context._currentValue2 = nextValue;
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context = providerFiber.type._context;
          if (isPrimaryRenderer) {
            context._currentValue = currentValue;
          } else {
            context._currentValue2 = currentValue;
          }
        }
        function calculateChangedBits(context, newValue, oldValue) {
          if (objectIs(oldValue, newValue)) {
            return 0;
          } else {
            var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            {
              if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
              }
            }
            return changedBits | 0;
          }
        }
        function scheduleWorkOnParentPath(parent, renderLanes2) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            } else {
              break;
            }
            node = node.return;
          }
        }
        function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                  if (fiber.tag === ClassComponent) {
                    var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                    update.tag = ForceUpdate;
                    enqueueUpdate(fiber, update);
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleWorkOnParentPath(fiber.return, renderLanes2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
        function readContext(context, observedBits) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          if (lastContextWithAllBitsObserved === context)
            ;
          else if (observedBits === false || observedBits === 0)
            ;
          else {
            var resolvedObservedBits;
            if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
              lastContextWithAllBitsObserved = context;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else {
              resolvedObservedBits = observedBits;
            }
            var contextItem = {
              context,
              observedBits: resolvedObservedBits,
              next: null
            };
            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem,
                responders: null
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return isPrimaryRenderer ? context._currentValue : context._currentValue2;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictMode) {
                    disableLogs();
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictMode) {
                    disableLogs();
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return _assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (!(typeof callback === "function")) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i3 = 0; i3 < effects.length; i3++) {
              var effect = effects[i3];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var isArray = Array.isArray;
        var emptyRefsObject = new React2.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key2 = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key2)) {
              didWarnOnInvalidCallback.add(key2);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type2, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type2) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                getDerivedStateFromProps(nextProps, prevState);
              } finally {
                reenableLogs();
              }
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  reenableLogs();
                }
              }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentName(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                new ctor(props, context);
              } finally {
                reenableLogs();
              }
            }
          }
          var instance = new ctor(props, context);
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (!(typeof child._store === "object")) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            child._store.validated = true;
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        var isArray$1 = Array.isArray;
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = inst.refs;
                if (refs === emptyRefsObject) {
                  refs = inst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (!(typeof mixedRef === "string")) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }
              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
          }
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags = Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags = Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            if (current2 !== null) {
              if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key2) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key2);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key2 = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key2 !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key2) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key2);
                    }
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key2) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                if (key2 !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                  }
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key2 = child.key;
                  if (typeof key2 !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key2);
                    break;
                  }
                  if (!knownKeys.has(key2)) {
                    knownKeys.add(key2);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key2);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i3 = 0; i3 < newChildren.length; i3++) {
                var child = newChildren[i3];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === "function")) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key2 = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key2) {
                switch (child.tag) {
                  case Fragment: {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                    break;
                  }
                  case Block:
                  default: {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing3 = useFiber(child, element.props);
                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }
                    break;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key2 = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key2) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            var isObject = typeof newChild === "object" && newChild !== null;
            if (isObject) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            if (isArray$1(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (isObject) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
              switch (returnFiber.tag) {
                case ClassComponent: {
                  {
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  {
                    {
                      throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                    }
                  }
                }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (!(current2 === null || workInProgress2.child === current2.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c2) {
          if (!(c2 !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c2;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type, rootInstance);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          if (props.fallback === void 0) {
            return false;
          }
          if (props.unstable_avoidThisFallback !== true) {
            return true;
          }
          if (hasInvisibleParent) {
            return false;
          }
          return true;
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Layout = 2;
        var Passive$1 = 4;
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function enterHydrationState(fiber) {
          if (!supportsHydration) {
            return false;
          }
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.flags = Deletion;
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type2 = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type2, props);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableContainerSuspenseInstance(parentContainer);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                    break;
                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type2 = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type2, props);
              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              return false;
            }
            default:
              return false;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          if (!supportsHydration) {
            {
              {
                throw Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          if (!supportsHydration) {
            {
              {
                throw Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
                }
              }
            }
          }
          return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          if (!supportsHydration) {
            {
              {
                throw Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (!supportsHydration) {
            return false;
          }
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var type2 = fiber.type;
          if (fiber.tag !== HostComponent || type2 !== "head" && type2 !== "body" && !shouldSetTextContent(type2, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function resetHydrationState() {
          if (!supportsHydration) {
            return;
          }
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }
        function getIsHydrating() {
          return isHydrating;
        }
        var workInProgressSources = [];
        var rendererSigil$1;
        {
          rendererSigil$1 = {};
        }
        function markSourceAsDirty(mutableSource) {
          workInProgressSources.push(mutableSource);
        }
        function resetWorkInProgressVersions() {
          for (var i3 = 0; i3 < workInProgressSources.length; i3++) {
            var mutableSource = workInProgressSources[i3];
            if (isPrimaryRenderer) {
              mutableSource._workInProgressVersionPrimary = null;
            } else {
              mutableSource._workInProgressVersionSecondary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function getWorkInProgressVersion(mutableSource) {
          if (isPrimaryRenderer) {
            return mutableSource._workInProgressVersionPrimary;
          } else {
            return mutableSource._workInProgressVersionSecondary;
          }
        }
        function setWorkInProgressVersion(mutableSource, version) {
          if (isPrimaryRenderer) {
            mutableSource._workInProgressVersionPrimary = version;
          } else {
            mutableSource._workInProgressVersionSecondary = version;
          }
          workInProgressSources.push(mutableSource);
        }
        function warnAboutMultipleRenderersDEV(mutableSource) {
          {
            if (isPrimaryRenderer) {
              if (mutableSource._currentPrimaryRenderer == null) {
                mutableSource._currentPrimaryRenderer = rendererSigil$1;
              } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
              }
            } else {
              if (mutableSource._currentSecondaryRenderer == null) {
                mutableSource._currentSecondaryRenderer = rendererSigil$1;
              } else if (mutableSource._currentSecondaryRenderer !== rendererSigil$1) {
                error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
              }
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnAboutUseOpaqueIdentifier;
        {
          didWarnAboutUseOpaqueIdentifier = {};
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i3 = 0; i3 <= hookTypesUpdateIndexDev; i3++) {
                  var oldHookName = hookTypesDev[i3];
                  var newHookName = i3 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i3 + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
            if (objectIs(nextDeps[i3], prevDeps[i3])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;
          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }
          return children;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.flags &= ~(Passive | Update);
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.eagerReducer === reducer) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
          {
            warnAboutMultipleRenderersDEV(source);
          }
          var getVersion = source._getVersion;
          var version = getVersion(source._source);
          var isSafeToReadFromSource = false;
          var currentRenderVersion = getWorkInProgressVersion(source);
          if (currentRenderVersion !== null) {
            isSafeToReadFromSource = currentRenderVersion === version;
          } else {
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);
            if (isSafeToReadFromSource) {
              setWorkInProgressVersion(source, version);
            }
          }
          if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            {
              if (typeof snapshot === "function") {
                error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
              }
            }
            return snapshot;
          } else {
            markSourceAsDirty(source);
            {
              {
                throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
              }
            }
          }
        }
        function useMutableSource(hook, source, getSnapshot, subscribe) {
          var root = getWorkInProgressRoot();
          if (!(root !== null)) {
            {
              throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
          }
          var getVersion = source._getVersion;
          var version = getVersion(source._source);
          var dispatcher = ReactCurrentDispatcher$1.current;
          var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root, source, getSnapshot);
          }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
          var snapshot = currentSnapshot;
          var stateHook = workInProgressHook;
          var memoizedState = hook.memoizedState;
          var refs = memoizedState.refs;
          var prevGetSnapshot = refs.getSnapshot;
          var prevSource = memoizedState.source;
          var prevSubscribe = memoizedState.subscribe;
          var fiber = currentlyRenderingFiber$1;
          hook.memoizedState = {
            refs,
            source,
            subscribe
          };
          dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot;
            refs.setSnapshot = setSnapshot;
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
              var maybeNewSnapshot = getSnapshot(source._source);
              {
                if (typeof maybeNewSnapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              if (!objectIs(snapshot, maybeNewSnapshot)) {
                setSnapshot(maybeNewSnapshot);
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root, lane);
              }
              markRootEntangled(root, root.mutableReadLanes);
            }
          }, [getSnapshot, source, subscribe]);
          dispatcher.useEffect(function() {
            var handleChange = function() {
              var latestGetSnapshot = refs.getSnapshot;
              var latestSetSnapshot = refs.setSnapshot;
              try {
                latestSetSnapshot(latestGetSnapshot(source._source));
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root, lane);
              } catch (error2) {
                latestSetSnapshot(function() {
                  throw error2;
                });
              }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            {
              if (typeof unsubscribe !== "function") {
                error("Mutable source subscribe function must return an unsubscribe function.");
              }
            }
            return unsubscribe;
          }, [source, subscribe]);
          if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            var newQueue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
          }
          return snapshot;
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = {
            refs: {
              getSnapshot,
              setSnapshot: null
            },
            source,
            subscribe
          };
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          var hook = updateWorkInProgressHook();
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref = {
            current: initialValue
          };
          {
            Object.seal(ref);
          }
          hook.memoizedState = ref;
          return ref;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function updateEffect(create, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          return mountEffectImpl(Update, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var _mountState = mountState(value), prevValue = _mountState[0], setValue2 = _mountState[1];
          mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue2(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function updateDeferredValue(value) {
          var _updateState = updateState(), prevValue = _updateState[0], setValue2 = _updateState[1];
          updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue2(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function rerenderDeferredValue(value) {
          var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue2 = _rerenderState[1];
          updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue2(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function startTransition(setPending, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          {
            runWithPriority(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function() {
              setPending(true);
            });
            runWithPriority(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setPending(false);
                callback();
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            });
          }
        }
        function mountTransition() {
          var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
          var start = startTransition.bind(null, setPending);
          mountRef(start);
          return [start, isPending];
        }
        function updateTransition() {
          var _updateState2 = updateState(), isPending = _updateState2[0];
          var startRef = updateRef();
          var start = startRef.current;
          return [start, isPending];
        }
        function rerenderTransition() {
          var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
          var startRef = updateRef();
          var start = startRef.current;
          return [start, isPending];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function warnOnOpaqueIdentifierAccessInDEV(fiber) {
          {
            var name = getComponentName(fiber.type) || "Unknown";
            if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
              error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
              didWarnAboutUseOpaqueIdentifier[name] = true;
            }
          }
        }
        function mountOpaqueIdentifier() {
          var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
          if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
              if (!didUpgrade) {
                didUpgrade = true;
                {
                  isUpdatingOpaqueValueInRenderPhase = true;
                  setId(makeId());
                  isUpdatingOpaqueValueInRenderPhase = false;
                  warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
              }
              {
                {
                  throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                }
              }
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
              currentlyRenderingFiber$1.flags |= Update | Passive;
              pushEffect(HasEffect | Passive$1, function() {
                setId(makeId());
              }, void 0, null);
            }
            return id;
          } else {
            var _id = makeId();
            mountState(_id);
            return _id;
          }
        }
        function updateOpaqueIdentifier() {
          var id = updateState()[0];
          return id;
        }
        function rerenderOpaqueIdentifier() {
          var id = rerenderState()[0];
          return id;
        }
        function dispatchAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          } else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.eagerReducer = lastRenderedReducer;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            {
              if ("undefined" !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useOpaqueIdentifier: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$2 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$2();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$2();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$2();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$2() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(Component)
                );
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
          if (current2 === null) {
            var type2 = Component.type;
            if (isSimpleFunctionComponent(type2) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type2;
              {
                resolvedType = resolveFunctionForHotReloading(type2);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type2);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
            }
            {
              var innerPropTypes = type2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(type2)
                );
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(
                _innerPropTypes,
                nextProps,
                "prop",
                getComponentName(_type)
              );
            }
          }
          var currentChild = current2.child;
          if (!includesSomeLane(updateLanes, renderLanes2)) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x2) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    "prop",
                    getComponentName(outerMemoType)
                  );
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              if (!includesSomeLane(renderLanes2, updateLanes)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              {
                markSpawnedWork(OffscreenLane);
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes
              };
              workInProgress2.memoizedState = _nextState;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        var updateLegacyHiddenComponent = updateOffscreenComponent;
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(Component)
                );
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(Component)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  instance.render();
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root = workInProgress2.stateNode;
          if (root.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root.pendingContext, root.pendingContext !== root.context);
          } else if (root.context) {
            pushTopLevelContextObject(workInProgress2, root.context, false);
          }
          pushHostContainer(workInProgress2, root.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(current2 !== null && updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var nextChildren = nextState.element;
          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var root = workInProgress2.stateNode;
          if (root.hydrate && enterHydrationState(workInProgress2)) {
            if (supportsHydration) {
              var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;
              if (mutableSourceEagerHydrationData != null) {
                for (var i3 = 0; i3 < mutableSourceEagerHydrationData.length; i3 += 2) {
                  var mutableSource = mutableSourceEagerHydrationData[i3];
                  var version = mutableSourceEagerHydrationData[i3 + 1];
                  setWorkInProgressVersion(mutableSource, version);
                }
              }
            }
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.flags = node.flags & ~Placement | Hydrating;
              node = node.sibling;
            }
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            resetHydrationState();
          }
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type2 = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type2, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type2, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      "prop",
                      getComponentName(Component)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component,
                resolveDefaultProps(Component.type, resolvedProps),
                updateLanes,
                renderLanes2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          {
            {
              throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
            }
          }
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            setIsRendering(false);
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || workInProgress2._debugID || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            if (nextProps.fallback !== void 0) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
              var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment = workInProgress2.child;
              _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.lanes = SomeRetryLane;
              {
                markSpawnedWork(SomeRetryLane);
              }
              return _fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              if (showFallback) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _nextPrimaryChildren2 = nextProps.children;
                var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                var _primaryChildFragment3 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment;
              } else {
                var _nextPrimaryChildren3 = nextProps.children;
                var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment4;
              }
            } else {
              if (showFallback) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                var _primaryChildFragment5 = workInProgress2.child;
                var _prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment6;
              }
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
              workInProgress2.firstEffect = primaryChildFragment.firstEffect;
              workInProgress2.lastEffect = progressedLastEffect;
              progressedLastEffect.nextEffect = null;
            } else {
              workInProgress2.firstEffect = workInProgress2.lastEffect = null;
            }
          } else {
            primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function scheduleWorkOnFiber(fiber, renderLanes2) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleWorkOnParentPath(fiber.return, renderLanes2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleWorkOnFiber(node, renderLanes2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleWorkOnFiber(node, renderLanes2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isArray2 = Array.isArray(childSlot);
            var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
            if (isArray2 || isIterable) {
              var type2 = isArray2 ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type2, index2, type2);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i3 = 0; i3 < children.length; i3++) {
                  if (!validateSuspenseListNestedChild(children[i3], i3)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  tail,
                  lastContentRow,
                  tailMode,
                  workInProgress2.lastEffect
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  _tail,
                  null,
                  tailMode,
                  workInProgress2.lastEffect
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  null,
                  null,
                  void 0,
                  workInProgress2.lastEffect
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, newValue);
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context, newProps.unstable_observedBits);
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            return null;
          } else {
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = current2;
              returnFiber.lastEffect = current2;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current2;
            }
            current2.nextEffect = null;
            current2.flags = Deletion;
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          var updateLanes = workInProgress2.lanes;
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else if (!includesSomeLane(renderLanes2, updateLanes)) {
              didReceiveUpdate = false;
              switch (workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2);
                  resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  break;
                case ClassComponent: {
                  var Component = workInProgress2.type;
                  if (isContextProvider(Component)) {
                    pushContextProvider(workInProgress2);
                  }
                  break;
                }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider: {
                  var newValue = workInProgress2.memoizedProps.value;
                  pushProvider(workInProgress2, newValue);
                  break;
                }
                case Profiler:
                  {
                    var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (hasChildWork) {
                      workInProgress2.flags |= Update;
                    }
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                  break;
                case SuspenseComponent: {
                  var state = workInProgress2.memoizedState;
                  if (state !== null) {
                    var primaryChildFragment = workInProgress2.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                      return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }
                  break;
                }
                case SuspenseListComponent: {
                  var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                  var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                    }
                    workInProgress2.flags |= DidCapture;
                  }
                  var renderState = workInProgress2.memoizedState;
                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                  }
                  pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
                case OffscreenComponent:
                case LegacyHiddenComponent: {
                  workInProgress2.lanes = NoLanes;
                  return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                }
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else {
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
            }
            case FunctionComponent: {
              var _Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type2 = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type2 ? _unresolvedProps2 : resolveDefaultProps(type2, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type2, _resolvedProps2, renderLanes2);
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      "prop",
                      getComponentName(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component3 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case Block: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
            case LegacyHiddenComponent: {
              return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        if (supportsMutation) {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type2, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type2, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        } else if (supportsPersistence) {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (needsVisibilityToggle && isHidden) {
                  var props = node.memoizedProps;
                  var type2 = node.type;
                  instance = cloneHiddenInstance(instance, type2, props, node);
                }
                appendInitialChild(parent, instance);
              } else if (node.tag === HostText) {
                var _instance = node.stateNode;
                if (needsVisibilityToggle && isHidden) {
                  var text = node.memoizedProps;
                  _instance = cloneHiddenTextInstance(_instance, text, node);
                }
                appendInitialChild(parent, _instance);
              } else if (node.tag === HostPortal)
                ;
              else if (node.tag === SuspenseComponent) {
                if ((node.flags & Update) !== NoFlags) {
                  var newIsHidden = node.memoizedState !== null;
                  if (newIsHidden) {
                    var primaryChildParent = node.child;
                    if (primaryChildParent !== null) {
                      if (primaryChildParent.child !== null) {
                        primaryChildParent.child.return = primaryChildParent;
                        appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                      }
                      var fallbackChildParent = primaryChildParent.sibling;
                      if (fallbackChildParent !== null) {
                        fallbackChildParent.return = node;
                        node = fallbackChildParent;
                        continue;
                      }
                    }
                  }
                }
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              node = node;
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          var appendAllChildrenToContainer = function(containerChildSet, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (needsVisibilityToggle && isHidden) {
                  var props = node.memoizedProps;
                  var type2 = node.type;
                  instance = cloneHiddenInstance(instance, type2, props, node);
                }
                appendChildToContainerChildSet(containerChildSet, instance);
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (needsVisibilityToggle && isHidden) {
                  var text = node.memoizedProps;
                  _instance3 = cloneHiddenTextInstance(_instance3, text, node);
                }
                appendChildToContainerChildSet(containerChildSet, _instance3);
              } else if (node.tag === HostPortal)
                ;
              else if (node.tag === SuspenseComponent) {
                if ((node.flags & Update) !== NoFlags) {
                  var newIsHidden = node.memoizedState !== null;
                  if (newIsHidden) {
                    var primaryChildParent = node.child;
                    if (primaryChildParent !== null) {
                      if (primaryChildParent.child !== null) {
                        primaryChildParent.child.return = primaryChildParent;
                        appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
                      }
                      var fallbackChildParent = primaryChildParent.sibling;
                      if (fallbackChildParent !== null) {
                        fallbackChildParent.return = node;
                        node = fallbackChildParent;
                        continue;
                      }
                    }
                  }
                }
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              node = node;
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
            var portalOrRoot = workInProgress2.stateNode;
            var childrenUnchanged = workInProgress2.firstEffect === null;
            if (childrenUnchanged)
              ;
            else {
              var container = portalOrRoot.containerInfo;
              var newChildSet = createContainerChildSet(container);
              appendAllChildrenToContainer(newChildSet, workInProgress2, false, false);
              portalOrRoot.pendingChildren = newChildSet;
              markUpdate(workInProgress2);
              finalizeContainerChildren(container, newChildSet);
            }
          };
          updateHostComponent$1 = function(current2, workInProgress2, type2, newProps, rootContainerInstance) {
            var currentInstance = current2.stateNode;
            var oldProps = current2.memoizedProps;
            var childrenUnchanged = workInProgress2.firstEffect === null;
            if (childrenUnchanged && oldProps === newProps) {
              workInProgress2.stateNode = currentInstance;
              return;
            }
            var recyclableInstance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = null;
            if (oldProps !== newProps) {
              updatePayload = prepareUpdate(recyclableInstance, type2, oldProps, newProps, rootContainerInstance, currentHostContext);
            }
            if (childrenUnchanged && updatePayload === null) {
              workInProgress2.stateNode = currentInstance;
              return;
            }
            var newInstance = cloneInstance(currentInstance, updatePayload, type2, oldProps, newProps, workInProgress2, childrenUnchanged, recyclableInstance);
            if (finalizeInitialChildren(newInstance, type2, newProps, rootContainerInstance, currentHostContext)) {
              markUpdate(workInProgress2);
            }
            workInProgress2.stateNode = newInstance;
            if (childrenUnchanged) {
              markUpdate(workInProgress2);
            } else {
              appendAllChildren(newInstance, workInProgress2, false, false);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              var rootContainerInstance = getRootHostContainer();
              var currentHostContext = getHostContext();
              workInProgress2.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress2);
              markUpdate(workInProgress2);
            } else {
              workInProgress2.stateNode = current2.stateNode;
            }
          };
        } else {
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type2, newProps, rootContainerInstance) {
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var fiberRoot = workInProgress2.stateNode;
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else if (!fiberRoot.hydrate) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              updateHostContainer(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type2 = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type2, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type2, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type2, newProps, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;
              if (current2 === null) {
                if (workInProgress2.memoizedProps.fallback !== void 0) {
                  popHydrationState(workInProgress2);
                }
              } else {
                var prevState = current2.memoizedState;
                prevDidTimeout = prevState !== null;
              }
              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
              if (supportsPersistence) {
                if (nextDidTimeout) {
                  workInProgress2.flags |= Update;
                }
              }
              if (supportsMutation) {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress2.flags |= Update;
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;
                        if (newThennables !== null) {
                          workInProgress2.updateQueue = newThennables;
                          workInProgress2.flags |= Update;
                        }
                        if (renderState.lastEffect === null) {
                          workInProgress2.firstEffect = null;
                        }
                        workInProgress2.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now$1() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null) {
                      workInProgress2.updateQueue = _newThennables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }
                      return null;
                    }
                  } else if (now$1() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress2.lastEffect;
                renderState.renderingStartTime = now$1();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              return null;
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case Block:
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              if (current2 !== null) {
                var _nextState = workInProgress2.memoizedState;
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                var nextIsHidden = _nextState !== null;
                if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                  workInProgress2.flags |= Update;
                }
              }
              return null;
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function unwindWork(workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if (!((_flags & DidCapture) === NoFlags)) {
                {
                  throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                }
              }
              workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              popProvider(interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        function createCapturedValue(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentName(source.type) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              var errorBoundaryName = getComponentName(boundary.type);
              if (errorBoundaryName) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              logCapturedError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
                logCapturedError(fiber, errorInfo);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                  }
                }
              }
            };
          } else {
            update.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }
          return update;
        }
        function attachPingListener(root, wakeable, lanes) {
          var pingCache = root.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            wakeable.then(ping, ping);
          }
        }
        function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
            var _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var wakeables = _workInProgress.updateQueue;
                if (wakeables === null) {
                  var updateQueue = /* @__PURE__ */ new Set();
                  updateQueue.add(wakeable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  wakeables.add(wakeable);
                }
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.flags |= DidCapture;
                  sourceFiber.flags |= ForceUpdateForLegacySuspense;
                  sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) {
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      var update = createUpdate(NoTimestamp, SyncLane);
                      update.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update);
                    }
                  }
                  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                  return;
                }
                attachPingListener(root, wakeable, rootRenderLanes);
                _workInProgress.flags |= ShouldCapture;
                _workInProgress.lanes = rootRenderLanes;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
          }
          renderDidError();
          value = createCapturedValue(value, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function invokeGuardedCallbackProd(name, func2, context, a2, b2, c2, d2, e, f2) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func2.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func2, context, a2, b2, c2, d2, e, f2) {
              if (!(typeof document !== "undefined")) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func2.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func2, context, a2, b2, c2, d2, e, f2) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          {
            instance.componentWillUnmount();
          }
        };
        function safelyCallComponentWillUnmount(current2, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current2, unmountError);
            }
          }
        }
        function safelyDetachRef(current2) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current2, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);
            if (hasCaughtError()) {
              var error2 = clearCaughtError();
              captureCommitPhaseError(current2, error2);
            }
          }
        }
        function commitBeforeMutationLifeCycles(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              return;
            }
            case ClassComponent: {
              if (finishedWork.flags & Snapshot) {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
              }
              return;
            }
            case HostRoot: {
              if (supportsMutation) {
                if (finishedWork.flags & Snapshot) {
                  var root = finishedWork.stateNode;
                  clearContainer(root.containerInfo);
                }
              }
              return;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitHookEffectListUnmount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  destroy();
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var create = effect.create;
                effect.destroy = create();
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function schedulePassiveEffects(finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              var _effect = effect, next = _effect.next, tag = _effect.tag;
              if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                enqueuePendingPassiveHookEffectMount(finishedWork, effect);
              }
              effect = next;
            } while (effect !== firstEffect);
          }
        }
        function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
              schedulePassiveEffects(finishedWork);
              return;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update) {
                if (current2 === null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidMount();
                  }
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  }
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              return;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              return;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type2 = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type2, props, finishedWork);
              }
              return;
            }
            case HostText: {
              return;
            }
            case HostPortal: {
              return;
            }
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime2 = getCommitTime();
                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          if (supportsMutation) {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function commitDetachRef(current2) {
          var currentRef = current2.ref;
          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }
        function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
          onCommitUnmount(current2);
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              var updateQueue = current2.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;
                  do {
                    var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                    if (destroy !== void 0) {
                      if ((tag & Passive$1) !== NoFlags$1) {
                        enqueuePendingPassiveHookEffectUnmount(current2, effect);
                      } else {
                        {
                          safelyCallDestroy(current2, destroy);
                        }
                      }
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
              return;
            }
            case ClassComponent: {
              safelyDetachRef(current2);
              var instance = current2.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current2, instance);
              }
              return;
            }
            case HostComponent: {
              safelyDetachRef(current2);
              return;
            }
            case HostPortal: {
              if (supportsMutation) {
                unmountHostComponents(finishedRoot, current2);
              } else if (supportsPersistence) {
                emptyPortalContainer(current2);
              }
              return;
            }
            case FundamentalComponent: {
              return;
            }
            case DehydratedFragment: {
              return;
            }
            case ScopeComponent: {
              return;
            }
          }
        }
        function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
          var node = root;
          while (true) {
            commitUnmount(finishedRoot, node);
            if (node.child !== null && (!supportsMutation || node.tag !== HostPortal)) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === root) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === root) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function detachFiberMutation(fiber) {
          fiber.alternate = null;
          fiber.child = null;
          fiber.dependencies = null;
          fiber.firstEffect = null;
          fiber.lastEffect = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.return = null;
          fiber.updateQueue = null;
          {
            fiber._debugOwner = null;
          }
        }
        function emptyPortalContainer(current2) {
          if (!supportsPersistence) {
            return;
          }
          var portal = current2.stateNode;
          var containerInfo = portal.containerInfo;
          var emptyChildSet = createContainerChildSet(containerInfo);
          replaceContainerChildren(containerInfo, emptyChildSet);
        }
        function commitContainer(finishedWork) {
          if (!supportsPersistence) {
            return;
          }
          switch (finishedWork.tag) {
            case ClassComponent:
            case HostComponent:
            case HostText:
            case FundamentalComponent: {
              return;
            }
            case HostRoot:
            case HostPortal: {
              var portalOrRoot = finishedWork.stateNode;
              var containerInfo = portalOrRoot.containerInfo, pendingChildren = portalOrRoot.pendingChildren;
              replaceContainerChildren(containerInfo, pendingChildren);
              return;
            }
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          if (!supportsMutation) {
            return;
          }
          var parentFiber = getHostParentFiber(finishedWork);
          var parent;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentStateNode;
              isContainer = false;
              break;
            case HostRoot:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case HostPortal:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case FundamentalComponent:
            default: {
              {
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (parentFiber.flags & ContentReset) {
            resetTextContent(parent);
            parentFiber.flags &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent);
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
          var node = current2;
          var currentParentIsValid = false;
          var currentParent;
          var currentParentIsContainer;
          while (true) {
            if (!currentParentIsValid) {
              var parent = node.return;
              findParent:
                while (true) {
                  if (!(parent !== null)) {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var parentStateNode = parent.stateNode;
                  switch (parent.tag) {
                    case HostComponent:
                      currentParent = parentStateNode;
                      currentParentIsContainer = false;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                  }
                  parent = parent.return;
                }
              currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              if (node.child !== null) {
                currentParent = node.stateNode.containerInfo;
                currentParentIsContainer = true;
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node);
              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            }
            if (node === current2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === current2) {
                return;
              }
              node = node.return;
              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
          if (supportsMutation) {
            unmountHostComponents(finishedRoot, current2);
          } else {
            commitNestedUnmounts(finishedRoot, current2);
          }
          var alternate = current2.alternate;
          detachFiberMutation(current2);
          if (alternate !== null) {
            detachFiberMutation(alternate);
          }
        }
        function commitWork(current2, finishedWork) {
          if (!supportsMutation) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case HostRoot: {
                if (supportsHydration) {
                  var root = finishedWork.stateNode;
                  if (root.hydrate) {
                    root.hydrate = false;
                    commitHydratedContainer(root.containerInfo);
                  }
                }
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                return;
              }
            }
            commitContainer(finishedWork);
            return;
          }
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              }
              return;
            }
            case ClassComponent: {
              return;
            }
            case HostComponent: {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type2 = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type2, oldProps, newProps, finishedWork);
                }
              }
              return;
            }
            case HostText: {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
            case HostRoot: {
              if (supportsHydration) {
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                  _root.hydrate = false;
                  commitHydratedContainer(_root.containerInfo);
                }
              }
              return;
            }
            case Profiler: {
              return;
            }
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case IncompleteClassComponent: {
              return;
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              var newState = finishedWork.memoizedState;
              var isHidden = newState !== null;
              hideOrUnhideAllChildren(finishedWork, isHidden);
              return;
            }
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState !== null) {
            markCommitTimeOfFallback();
            if (supportsMutation) {
              var primaryChildParent = finishedWork.child;
              hideOrUnhideAllChildren(primaryChildParent, true);
            }
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          if (!supportsHydration) {
            return;
          }
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry2 = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                {
                  if (wakeable.__reactDoNotTraceInteractions !== true) {
                    retry2 = tracing.unstable_wrap(retry2);
                  }
                }
                retryCache.add(wakeable);
                wakeable.then(retry2, retry2);
              }
            });
          }
        }
        function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
          if (current2 !== null) {
            var oldState = current2.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
              var newState = finishedWork.memoizedState;
              return newState !== null && newState.dehydrated === null;
            }
          }
          return false;
        }
        function commitResetTextContent(current2) {
          if (!supportsMutation) {
            return;
          }
          resetTextContent(current2.stateNode);
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor$1 = Symbol.for;
          COMPONENT_TYPE = symbolFor$1("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor$1("selector.role");
          TEST_NAME_TYPE = symbolFor$1("selector.test_id");
          TEXT_TYPE = symbolFor$1("selector.text");
        }
        function createComponentSelector(component) {
          return {
            $$typeof: COMPONENT_TYPE,
            value: component
          };
        }
        function createHasPsuedoClassSelector(selectors) {
          return {
            $$typeof: HAS_PSEUDO_CLASS_TYPE,
            value: selectors
          };
        }
        function createRoleSelector(role) {
          return {
            $$typeof: ROLE_TYPE,
            value: role
          };
        }
        function createTextSelector(text) {
          return {
            $$typeof: TEXT_TYPE,
            value: text
          };
        }
        function createTestNameSelector(id) {
          return {
            $$typeof: TEST_NAME_TYPE,
            value: id
          };
        }
        function findFiberRootForHostRoot(hostRoot) {
          var maybeFiber = getInstanceFromNode(hostRoot);
          if (maybeFiber != null) {
            if (!(typeof maybeFiber.memoizedProps["data-testname"] === "string")) {
              {
                throw Error("Invalid host root specified. Should be either a React container or a node with a testname attribute.");
              }
            }
            return maybeFiber;
          } else {
            var fiberRoot = findFiberRoot(hostRoot);
            if (!(fiberRoot !== null)) {
              {
                throw Error("Could not find React container within specified host subtree.");
              }
            }
            return fiberRoot.stateNode.current;
          }
        }
        function matchSelector(fiber, selector) {
          switch (selector.$$typeof) {
            case COMPONENT_TYPE:
              if (fiber.type === selector.value) {
                return true;
              }
              break;
            case HAS_PSEUDO_CLASS_TYPE:
              return hasMatchingPaths(fiber, selector.value);
            case ROLE_TYPE:
              if (fiber.tag === HostComponent) {
                var node = fiber.stateNode;
                if (matchAccessibilityRole(node, selector.value)) {
                  return true;
                }
              }
              break;
            case TEXT_TYPE:
              if (fiber.tag === HostComponent || fiber.tag === HostText) {
                var textContent = getTextContent(fiber);
                if (textContent !== null && textContent.indexOf(selector.value) >= 0) {
                  return true;
                }
              }
              break;
            case TEST_NAME_TYPE:
              if (fiber.tag === HostComponent) {
                var dataTestID = fiber.memoizedProps["data-testname"];
                if (typeof dataTestID === "string" && dataTestID.toLowerCase() === selector.value.toLowerCase()) {
                  return true;
                }
              }
              break;
            default: {
              {
                throw Error("Invalid selector type " + selector + " specified.");
              }
            }
          }
          return false;
        }
        function selectorToString(selector) {
          switch (selector.$$typeof) {
            case COMPONENT_TYPE:
              var displayName = getComponentName(selector.value) || "Unknown";
              return "<" + displayName + ">";
            case HAS_PSEUDO_CLASS_TYPE:
              return ":has(" + (selectorToString(selector) || "") + ")";
            case ROLE_TYPE:
              return '[role="' + selector.value + '"]';
            case TEXT_TYPE:
              return '"' + selector.value + '"';
            case TEST_NAME_TYPE:
              return '[data-testname="' + selector.value + '"]';
            default: {
              {
                throw Error("Invalid selector type " + selector + " specified.");
              }
            }
          }
        }
        function findPaths(root, selectors) {
          var matchingFibers = [];
          var stack = [root, 0];
          var index2 = 0;
          while (index2 < stack.length) {
            var fiber = stack[index2++];
            var selectorIndex = stack[index2++];
            var selector = selectors[selectorIndex];
            if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
              continue;
            } else {
              while (selector != null && matchSelector(fiber, selector)) {
                selectorIndex++;
                selector = selectors[selectorIndex];
              }
            }
            if (selectorIndex === selectors.length) {
              matchingFibers.push(fiber);
            } else {
              var child = fiber.child;
              while (child !== null) {
                stack.push(child, selectorIndex);
                child = child.sibling;
              }
            }
          }
          return matchingFibers;
        }
        function hasMatchingPaths(root, selectors) {
          var stack = [root, 0];
          var index2 = 0;
          while (index2 < stack.length) {
            var fiber = stack[index2++];
            var selectorIndex = stack[index2++];
            var selector = selectors[selectorIndex];
            if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
              continue;
            } else {
              while (selector != null && matchSelector(fiber, selector)) {
                selectorIndex++;
                selector = selectors[selectorIndex];
              }
            }
            if (selectorIndex === selectors.length) {
              return true;
            } else {
              var child = fiber.child;
              while (child !== null) {
                stack.push(child, selectorIndex);
                child = child.sibling;
              }
            }
          }
          return false;
        }
        function findAllNodes(hostRoot, selectors) {
          if (!supportsTestSelectors) {
            {
              {
                throw Error("Test selector API is not supported by this renderer.");
              }
            }
          }
          var root = findFiberRootForHostRoot(hostRoot);
          var matchingFibers = findPaths(root, selectors);
          var instanceRoots = [];
          var stack = Array.from(matchingFibers);
          var index2 = 0;
          while (index2 < stack.length) {
            var node = stack[index2++];
            if (node.tag === HostComponent) {
              if (isHiddenSubtree(node)) {
                continue;
              }
              instanceRoots.push(node.stateNode);
            } else {
              var child = node.child;
              while (child !== null) {
                stack.push(child);
                child = child.sibling;
              }
            }
          }
          return instanceRoots;
        }
        function getFindAllNodesFailureDescription(hostRoot, selectors) {
          if (!supportsTestSelectors) {
            {
              {
                throw Error("Test selector API is not supported by this renderer.");
              }
            }
          }
          var root = findFiberRootForHostRoot(hostRoot);
          var maxSelectorIndex = 0;
          var matchedNames = [];
          var stack = [root, 0];
          var index2 = 0;
          while (index2 < stack.length) {
            var fiber = stack[index2++];
            var selectorIndex = stack[index2++];
            var selector = selectors[selectorIndex];
            if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
              continue;
            } else if (matchSelector(fiber, selector)) {
              matchedNames.push(selectorToString(selector));
              selectorIndex++;
              if (selectorIndex > maxSelectorIndex) {
                maxSelectorIndex = selectorIndex;
              }
            }
            if (selectorIndex < selectors.length) {
              var child = fiber.child;
              while (child !== null) {
                stack.push(child, selectorIndex);
                child = child.sibling;
              }
            }
          }
          if (maxSelectorIndex < selectors.length) {
            var unmatchedNames = [];
            for (var i3 = maxSelectorIndex; i3 < selectors.length; i3++) {
              unmatchedNames.push(selectorToString(selectors[i3]));
            }
            return "findAllNodes was able to match part of the selector:\n" + ("  " + matchedNames.join(" > ") + "\n\n") + "No matching component was found for:\n" + ("  " + unmatchedNames.join(" > "));
          }
          return null;
        }
        function findBoundingRects(hostRoot, selectors) {
          if (!supportsTestSelectors) {
            {
              {
                throw Error("Test selector API is not supported by this renderer.");
              }
            }
          }
          var instanceRoots = findAllNodes(hostRoot, selectors);
          var boundingRects = [];
          for (var i3 = 0; i3 < instanceRoots.length; i3++) {
            boundingRects.push(getBoundingRect(instanceRoots[i3]));
          }
          for (var _i = boundingRects.length - 1; _i > 0; _i--) {
            var targetRect = boundingRects[_i];
            var targetLeft = targetRect.x;
            var targetRight = targetLeft + targetRect.width;
            var targetTop = targetRect.y;
            var targetBottom = targetTop + targetRect.height;
            for (var j2 = _i - 1; j2 >= 0; j2--) {
              if (_i !== j2) {
                var otherRect = boundingRects[j2];
                var otherLeft = otherRect.x;
                var otherRight = otherLeft + otherRect.width;
                var otherTop = otherRect.y;
                var otherBottom = otherTop + otherRect.height;
                if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {
                  boundingRects.splice(_i, 1);
                  break;
                } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {
                  if (otherTop > targetTop) {
                    otherRect.height += otherTop - targetTop;
                    otherRect.y = targetTop;
                  }
                  if (otherBottom < targetBottom) {
                    otherRect.height = targetBottom - otherTop;
                  }
                  boundingRects.splice(_i, 1);
                  break;
                } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {
                  if (otherLeft > targetLeft) {
                    otherRect.width += otherLeft - targetLeft;
                    otherRect.x = targetLeft;
                  }
                  if (otherRight < targetRight) {
                    otherRect.width = targetRight - otherLeft;
                  }
                  boundingRects.splice(_i, 1);
                  break;
                }
              }
            }
          }
          return boundingRects;
        }
        function focusWithin(hostRoot, selectors) {
          if (!supportsTestSelectors) {
            {
              {
                throw Error("Test selector API is not supported by this renderer.");
              }
            }
          }
          var root = findFiberRootForHostRoot(hostRoot);
          var matchingFibers = findPaths(root, selectors);
          var stack = Array.from(matchingFibers);
          var index2 = 0;
          while (index2 < stack.length) {
            var fiber = stack[index2++];
            if (isHiddenSubtree(fiber)) {
              continue;
            }
            if (fiber.tag === HostComponent) {
              var node = fiber.stateNode;
              if (setFocusIfFocusable(node)) {
                return true;
              }
            }
            var child = fiber.child;
            while (child !== null) {
              stack.push(child);
              child = child.sibling;
            }
          }
          return false;
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          if (supportsTestSelectors) {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        function observeVisibleRects(hostRoot, selectors, callback, options) {
          if (!supportsTestSelectors) {
            {
              {
                throw Error("Test selector API is not supported by this renderer.");
              }
            }
          }
          var instanceRoots = findAllNodes(hostRoot, selectors);
          var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options), disconnect = _setupIntersectionObs.disconnect, observe = _setupIntersectionObs.observe, unobserve = _setupIntersectionObs.unobserve;
          var commitHook = function() {
            var nextInstanceRoots = findAllNodes(hostRoot, selectors);
            instanceRoots.forEach(function(target) {
              if (nextInstanceRoots.indexOf(target) < 0) {
                unobserve(target);
              }
            });
            nextInstanceRoots.forEach(function(target) {
              if (instanceRoots.indexOf(target) < 0) {
                observe(target);
              }
            });
          };
          commitHooks.push(commitHook);
          return {
            disconnect: function() {
              var index2 = commitHooks.indexOf(commitHook);
              if (index2 >= 0) {
                commitHooks.splice(index2, 1);
              }
              disconnect();
            }
          };
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task2) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task2);
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RetryAfterError = 64;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var mostRecentlyUpdatedRoot = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority$1;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveHookEffectsMount = [];
        var pendingPassiveHookEffectsUnmount = [];
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoTimestamp;
        var currentEventWipLanes = NoLanes;
        var currentEventPendingLanes = NoLanes;
        var isFlushingPassiveEffects = false;
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now$1();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now$1();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          }
          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) {
              currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            }
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
          }
          var schedulerPriority = getCurrentPriorityLevel();
          var lane;
          if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$1) {
            lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
          } else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
          }
          return lane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          }
          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }
          return findRetryLane(currentEventWipLanes);
        }
        function scheduleUpdateOnFiber(fiber, lane, eventTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root = markUpdateLaneFromFiberToRoot(fiber, lane);
          if (root === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
          }
          markRootUpdated(root, lane, eventTime);
          if (root === workInProgressRoot) {
            {
              workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root, workInProgressRootRenderLanes);
            }
          }
          var priorityLevel = getCurrentPriorityLevel();
          if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              schedulePendingInteractions(root, lane);
              performSyncWorkOnRoot(root);
            } else {
              ensureRootIsScheduled(root, eventTime);
              schedulePendingInteractions(root, lane);
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          } else {
            if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority$1)) {
              if (rootsWithPendingDiscreteUpdates === null) {
                rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Set([root]);
              } else {
                rootsWithPendingDiscreteUpdates.add(root);
              }
            }
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, lane);
          }
          mostRecentlyUpdatedRoot = root;
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root = node.stateNode;
            return root;
          } else {
            return null;
          }
        }
        function ensureRootIsScheduled(root, currentTime) {
          var existingCallbackNode = root.callbackNode;
          markStarvedLanesAsExpired(root, currentTime);
          var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          var newCallbackPriority = returnNextLanesPriority();
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback(existingCallbackNode);
              root.callbackNode = null;
              root.callbackPriority = NoLanePriority;
            }
            return;
          }
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) {
              return;
            }
            cancelCallback(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLanePriority) {
            newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
          } else if (newCallbackPriority === SyncBatchedLanePriority) {
            newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
          } else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
          }
          root.callbackPriority = newCallbackPriority;
          root.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root) {
          currentEventTime = NoTimestamp;
          currentEventWipLanes = NoLanes;
          currentEventPendingLanes = NoLanes;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var originalCallbackNode = root.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var exitStatus = renderRootConcurrent(root, lanes);
          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
            prepareFreshStack(root, NoLanes);
          } else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root.hydrate) {
                root.hydrate = false;
                clearContainer(root.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root, NoLanes);
              markRootSuspended$1(root, lanes);
              ensureRootIsScheduled(root, now$1());
              throw fatalError;
            }
            var finishedWork = root.current.alternate;
            root.finishedWork = finishedWork;
            root.finishedLanes = lanes;
            finishConcurrentRender(root, exitStatus, lanes);
          }
          ensureRootIsScheduled(root, now$1());
          if (root.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root);
          }
          return null;
        }
        function finishConcurrentRender(root, exitStatus, lanes) {
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored: {
              {
                {
                  throw Error("Root did not complete. This is a bug in React.");
                }
              }
            }
            case RootErrored: {
              commitRoot(root);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root, suspendedLanes);
                    break;
                  }
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now$1() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root);
              break;
            }
            case RootCompleted: {
              commitRoot(root);
              break;
            }
            default: {
              {
                {
                  throw Error("Unknown root exit status.");
                }
              }
            }
          }
        }
        function markRootSuspended$1(root, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
          markRootSuspended(root, suspendedLanes);
        }
        function performSyncWorkOnRoot(root) {
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          var lanes;
          var exitStatus;
          if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              lanes = getNextLanes(root, lanes);
              exitStatus = renderRootSync(root, lanes);
            }
          } else {
            lanes = getNextLanes(root, NoLanes);
            exitStatus = renderRootSync(root, lanes);
          }
          if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError;
            if (root.hydrate) {
              root.hydrate = false;
              clearContainer(root.containerInfo);
            }
            lanes = getLanesToRetrySynchronouslyOnError(root);
            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root, lanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now$1());
            throw fatalError;
          }
          var finishedWork = root.current.alternate;
          root.finishedWork = finishedWork;
          root.finishedLanes = lanes;
          commitRoot(root);
          ensureRootIsScheduled(root, now$1());
          return null;
        }
        function flushRoot(root, lanes) {
          markRootExpired(root, lanes);
          ensureRootIsScheduled(root, now$1());
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
              }
            }
            return;
          }
          flushPendingDiscreteUpdates();
          flushPassiveEffects();
        }
        function deferredUpdates(fn2) {
          {
            return runWithPriority(NormalPriority$1, fn2);
          }
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root) {
              markDiscreteUpdatesExpired(root);
              ensureRootIsScheduled(root, now$1());
            });
          }
          flushSyncCallbackQueue();
        }
        function batchedUpdates(fn2, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn2(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function batchedEventUpdates(fn2, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn2(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function discreteUpdates(fn2, a2, b2, c2, d2) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          {
            try {
              return runWithPriority(UserBlockingPriority$1, fn2.bind(null, a2, b2, c2, d2));
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
        }
        function unbatchedUpdates(fn2, a2) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;
          try {
            return fn2(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function flushSync(fn2, a2) {
          var prevExecutionContext = executionContext;
          if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
            return fn2(a2);
          }
          executionContext |= BatchedContext;
          {
            try {
              if (fn2) {
                return runWithPriority(ImmediatePriority$1, fn2.bind(null, a2));
              } else {
                return void 0;
              }
            } finally {
              executionContext = prevExecutionContext;
              flushSyncCallbackQueue();
            }
          }
        }
        function flushControlled(fn2) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          {
            try {
              runWithPriority(ImmediatePriority$1, fn2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root, lanes) {
          root.finishedWork = null;
          root.finishedLanes = NoLanes;
          var timeoutHandle = root.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root;
          workInProgress = createWorkInProgress(root.current, null);
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }
        function handleError(root, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function pushInteractions(root) {
          {
            var prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root.memoizedInteractions;
            return prevInteractions;
          }
        }
        function popInteractions(prevInteractions) {
          {
            tracing.__interactionsRef.current = prevInteractions;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now$1();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function renderRootSync(root, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root, lanes);
            startWorkOnPendingInteractions(root, lanes);
          }
          var prevInteractions = pushInteractions(root);
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            {
              {
                throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root, lanes);
            startWorkOnPendingInteractions(root, lanes);
          }
          var prevInteractions = pushInteractions(root);
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            return RootIncomplete;
          } else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
              resetChildLanes(completedWork);
              if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = completedWork.firstEffect;
                }
                if (completedWork.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                  }
                  returnFiber.lastEffect = completedWork.lastEffect;
                }
                var flags = completedWork.flags;
                if (flags > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork;
                  } else {
                    returnFiber.firstEffect = completedWork;
                  }
                  returnFiber.lastEffect = completedWork;
                }
              }
            } else {
              var _next = unwindWork(completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.flags |= Incomplete;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function resetChildLanes(completedWork) {
          if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
            return;
          }
          var newChildLanes = NoLanes;
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
              var primaryChildFragment = completedWork.child;
              if (primaryChildFragment !== null) {
                treeBaseDuration -= primaryChildFragment.treeBaseDuration;
              }
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              _child = _child.sibling;
            }
          }
          completedWork.childLanes = newChildLanes;
        }
        function commitRoot(root) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
          return null;
        }
        function commitRootImpl(root, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var finishedWork = root.finishedWork;
          var lanes = root.finishedLanes;
          if (finishedWork === null) {
            return null;
          }
          root.finishedWork = null;
          root.finishedLanes = NoLanes;
          if (!(finishedWork !== root.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          root.callbackNode = null;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root, remainingLanes);
          if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
              rootsWithPendingDiscreteUpdates.delete(root);
            }
          }
          if (root === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          var firstEffect;
          if (finishedWork.flags > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }
          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root);
            ReactCurrentOwner$2.current = null;
            focusedInstanceHandle = prepareForCommit(root.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            focusedInstanceHandle = null;
            {
              recordCommitTime();
            }
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            if (shouldFireAfterActiveInstanceBlur) {
              afterActiveInstanceBlur();
            }
            resetAfterCommit(root.containerInfo);
            root.current = finishedWork;
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            nextEffect = null;
            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            root.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            nextEffect = firstEffect;
            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              if (nextEffect.flags & Deletion) {
                detachFiberAfterEffects(nextEffect);
              }
              nextEffect = nextNextEffect;
            }
          }
          remainingLanes = root.pendingLanes;
          if (remainingLanes !== NoLanes) {
            {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for (var i3 = 0; i3 < expirationTimes.length; i3++) {
                  scheduleInteractions(root, expirationTimes[i3], root.memoizedInteractions);
                }
              }
              schedulePendingInteractions(root, remainingLanes);
            }
          } else {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              finishPendingInteractions(root, lanes);
            }
          }
          if (remainingLanes === SyncLane) {
            if (root === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root;
            }
          } else {
            nestedUpdateCount = 0;
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root, now$1());
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }
          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            return null;
          }
          flushSyncCallbackQueue();
          return null;
        }
        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var current2 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
              if ((nextEffect.flags & Deletion) !== NoFlags) {
                if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                  beforeActiveInstanceBlur();
                }
              } else {
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                  beforeActiveInstanceBlur();
                }
              }
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(nextEffect);
              commitBeforeMutationLifeCycles(current2, nextEffect);
              resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority$1, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root, renderPriorityLevel) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) {
              commitResetTextContent(nextEffect);
            }
            if (flags & Ref) {
              var current2 = nextEffect.alternate;
              if (current2 !== null) {
                commitDetachRef(current2);
              }
            }
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch (primaryFlags) {
              case Placement: {
                commitPlacement(nextEffect);
                nextEffect.flags &= ~Placement;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(nextEffect);
                nextEffect.flags &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
              case Hydrating: {
                nextEffect.flags &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                nextEffect.flags &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
              case Update: {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }
              case Deletion: {
                commitDeletion(root, nextEffect);
                break;
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root, committedLanes) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
              var current2 = nextEffect.alternate;
              commitLifeCycles(root, current2, nextEffect);
            }
            {
              if (flags & Ref) {
                commitAttachRef(nextEffect);
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            {
              return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
            }
          }
          return false;
        }
        function enqueuePendingPassiveHookEffectMount(fiber, effect) {
          pendingPassiveHookEffectsMount.push(effect, fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
          pendingPassiveHookEffectsUnmount.push(effect, fiber);
          {
            fiber.flags |= PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.flags |= PassiveUnmountPendingDev;
            }
          }
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        function invokePassiveEffectCreate(effect) {
          var create = effect.create;
          effect.destroy = create();
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var root = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }
          {
            isFlushingPassiveEffects = true;
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root);
          var unmountEffects = pendingPassiveHookEffectsUnmount;
          pendingPassiveHookEffectsUnmount = [];
          for (var i3 = 0; i3 < unmountEffects.length; i3 += 2) {
            var _effect = unmountEffects[i3];
            var fiber = unmountEffects[i3 + 1];
            var destroy = _effect.destroy;
            _effect.destroy = void 0;
            {
              fiber.flags &= ~PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags &= ~PassiveUnmountPendingDev;
              }
            }
            if (typeof destroy === "function") {
              {
                setCurrentFiber(fiber);
                {
                  invokeGuardedCallback(null, destroy, null);
                }
                if (hasCaughtError()) {
                  if (!(fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(fiber, error2);
                }
                resetCurrentFiber();
              }
            }
          }
          var mountEffects = pendingPassiveHookEffectsMount;
          pendingPassiveHookEffectsMount = [];
          for (var _i = 0; _i < mountEffects.length; _i += 2) {
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            {
              setCurrentFiber(_fiber);
              {
                invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
              }
              if (hasCaughtError()) {
                if (!(_fiber !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
              }
              resetCurrentFiber();
            }
          }
          var effect = root.current.firstEffect;
          while (effect !== null) {
            var nextNextEffect = effect.nextEffect;
            effect.nextEffect = null;
            if (effect.flags & Deletion) {
              detachFiberAfterEffects(effect);
            }
            effect = nextNextEffect;
          }
          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root, lanes);
          }
          {
            isFlushingPassiveEffects = false;
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValue(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          enqueueUpdate(rootFiber, update);
          var eventTime = requestEventTime();
          var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
          if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, SyncLane);
          }
        }
        function captureCommitPhaseError(sourceFiber, error2) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
            return;
          }
          var fiber = sourceFiber.return;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error2, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                enqueueUpdate(fiber, update);
                var eventTime = requestEventTime();
                var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                if (root !== null) {
                  markRootUpdated(root, SyncLane, eventTime);
                  ensureRootIsScheduled(root, eventTime);
                  schedulePendingInteractions(root, SyncLane);
                } else {
                  if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    try {
                      instance.componentDidCatch(error2, errorInfo);
                    } catch (errorToIgnore) {
                    }
                  }
                }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root, wakeable, pingedLanes) {
          var pingCache = root.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root, pingedLanes);
          if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, pingedLanes);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
          if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, retryLane);
          }
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag = fiber.tag;
            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            if (isFlushingPassiveEffects)
              ;
            else {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else {
                throw originalError;
              }
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        var IsThisRendererActing = {
          current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (warnsIfNotActing === true && IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if (warnsIfNotActing === true && (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            }
          }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (warnsIfNotActing === true && executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
              }
            }
          }
        }
        function computeThreadID(root, lane) {
          return lane * 1e3 + root.interactionThreadID;
        }
        function markSpawnedWork(lane) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [lane];
          } else {
            spawnedWorkDuringRender.push(lane);
          }
        }
        function scheduleInteractions(root, lane, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) {
              interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) {
                  interaction.__count++;
                }
                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(lane, new Set(interactions));
              interactions.forEach(function(interaction) {
                interaction.__count++;
              });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root, lane);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root, lane) {
          scheduleInteractions(root, lane, tracing.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root, lanes) {
          var interactions = /* @__PURE__ */ new Set();
          root.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) {
              scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
              });
            }
          });
          root.memoizedInteractions = interactions;
          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root, lanes);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                scheduleCallback(ImmediatePriority$1, function() {
                  throw error2;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root, committedLanes) {
          var remainingLanesAfterCommit = root.pendingLanes;
          var subscriber;
          try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root, committedLanes);
              subscriber.onWorkStopped(root.memoizedInteractions, threadID);
            }
          } catch (error2) {
            scheduleCallback(ImmediatePriority$1, function() {
              throw error2;
            });
          } finally {
            var pendingInteractionMap = root.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
              if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                pendingInteractionMap.delete(lane);
                scheduledInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error2) {
                      scheduleCallback(ImmediatePriority$1, function() {
                        throw error2;
                      });
                    }
                  }
                });
              }
            });
          }
        }
        function shouldForceFlushFallbacksInDEV() {
          return actingUpdatesScopeDepth > 0;
        }
        var flushMockScheduler = Scheduler.unstable_flushAllWithoutAsserting;
        var isSchedulerMocked = typeof flushMockScheduler === "function";
        function flushActWork() {
          if (flushMockScheduler !== void 0) {
            try {
              return flushMockScheduler();
            } finally {
            }
          } else {
            try {
              var didFlushWork = false;
              while (flushPassiveEffects()) {
                didFlushWork = true;
              }
              return didFlushWork;
            } finally {
            }
          }
        }
        function flushWorkAndMicroTasks(onDone) {
          try {
            flushActWork();
            enqueueTask(function() {
              if (flushActWork()) {
                flushWorkAndMicroTasks(onDone);
              } else {
                onDone();
              }
            });
          } catch (err2) {
            onDone(err2);
          }
        }
        var actingUpdatesScopeDepth = 0;
        function act(callback) {
          var previousActingUpdatesScopeDepth = actingUpdatesScopeDepth;
          actingUpdatesScopeDepth++;
          var previousIsSomeRendererActing = IsSomeRendererActing.current;
          var previousIsThisRendererActing = IsThisRendererActing.current;
          IsSomeRendererActing.current = true;
          IsThisRendererActing.current = true;
          function onDone() {
            actingUpdatesScopeDepth--;
            IsSomeRendererActing.current = previousIsSomeRendererActing;
            IsThisRendererActing.current = previousIsThisRendererActing;
            {
              if (actingUpdatesScopeDepth > previousActingUpdatesScopeDepth) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
            }
          }
          var result;
          try {
            result = batchedUpdates(callback);
          } catch (error2) {
            onDone();
            throw error2;
          }
          if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var called = false;
            {
              if (typeof Promise !== "undefined") {
                Promise.resolve().then(function() {
                }).then(function() {
                  if (called === false) {
                    error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                  }
                });
              }
            }
            return {
              then: function(resolve, reject) {
                called = true;
                result.then(function() {
                  if (actingUpdatesScopeDepth > 1 || isSchedulerMocked === true && previousIsSomeRendererActing === true) {
                    onDone();
                    resolve();
                    return;
                  }
                  flushWorkAndMicroTasks(function(err2) {
                    onDone();
                    if (err2) {
                      reject(err2);
                    } else {
                      resolve();
                    }
                  });
                }, function(err2) {
                  onDone();
                  reject(err2);
                });
              }
            };
          } else {
            {
              if (result !== void 0) {
                error("The callback passed to act(...) function must return undefined, or a Promise. You returned %s", result);
              }
            }
            try {
              if (actingUpdatesScopeDepth === 1 && (isSchedulerMocked === false || previousIsSomeRendererActing === false)) {
                flushActWork();
              }
              onDone();
            } catch (err2) {
              onDone();
              throw err2;
            }
            return {
              then: function(resolve) {
                {
                  error("Do not await the result of calling act(...) with sync logic, it is not a Promise.");
                }
                resolve();
              }
            };
          }
        }
        function detachFiberAfterEffects(fiber) {
          fiber.sibling = null;
          fiber.stateNode = null;
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type2) {
          {
            if (resolveFamily === null) {
              return type2;
            }
            var family = resolveFamily(type2);
            if (family === void 0) {
              return type2;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type2) {
          return resolveFunctionForHotReloading(type2);
        }
        function resolveForwardRefForHotReloading(type2) {
          {
            if (resolveFamily === null) {
              return type2;
            }
            var family = resolveFamily(type2);
            if (family === void 0) {
              if (type2 !== null && type2 !== void 0 && typeof type2.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type2.render);
                if (type2.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type2.displayName !== void 0) {
                    syntheticType.displayName = type2.displayName;
                  }
                  return syntheticType;
                }
              }
              return type2;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root, element) {
          {
            if (root.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type2;
                break;
              case ForwardRef:
                candidateType = type2.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type2;
                break;
              case ForwardRef:
                candidateType = type2.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag, pendingProps, key2, mode) {
          this.tag = tag;
          this.key = key2;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugID = debugCounter++;
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key2, mode) {
          return new FiberNode(tag, pendingProps, key2, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type2) {
          return typeof type2 === "function" && !shouldConstruct$1(type2) && type2.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugID = current2._debugID;
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= Placement;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type2, key2, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type2;
          if (typeof type2 === "function") {
            if (shouldConstruct$1(type2)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type2 === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type2) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key2);
                case REACT_DEBUG_TRACING_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= DebugTracingMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key2);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key2);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key2);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key2);
                case REACT_LEGACY_HIDDEN_TYPE:
                  return createFiberFromLegacyHidden(pendingProps, mode, lanes, key2);
                case REACT_SCOPE_TYPE:
                default: {
                  if (typeof type2 === "object" && type2 !== null) {
                    switch (type2.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type2 == null ? type2 : typeof type2) + "." + info);
                    }
                  }
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key2, mode);
          fiber.elementType = type2;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type2 = element.type;
          var key2 = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type2, key2, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key2) {
          var fiber = createFiber(Fragment, elements, key2, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key2) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" as a prop');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key2, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key2) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key2, mode);
          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key2) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key2, mode);
          {
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key2) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key2, mode);
          {
            fiber.type = REACT_OFFSCREEN_TYPE;
          }
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromLegacyHidden(pendingProps, mode, lanes, key2) {
          var fiber = createFiber(LegacyHiddenComponent, pendingProps, key2, mode);
          {
            fiber.type = REACT_LEGACY_HIDDEN_TYPE;
          }
          fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugID = source._debugID;
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate;
          this.callbackNode = null;
          this.callbackPriority = NoLanePriority;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          if (supportsHydration) {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.interactionThreadID = tracing.unstable_getThreadID();
            this.memoizedInteractions = /* @__PURE__ */ new Set();
            this.pendingInteractionMap = /* @__PURE__ */ new Map();
          }
          {
            switch (tag) {
              case BlockingRoot:
                this._debugRootType = "createBlockingRoot()";
                break;
              case ConcurrentRoot:
                this._debugRootType = "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = "createLegacyRoot()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
          var root = new FiberRootNode(containerInfo, tag, hydrate);
          var uninitializedFiber = createHostRootFiber(tag);
          root.current = uninitializedFiber;
          uninitializedFiber.stateNode = root;
          initializeUpdateQueue(uninitializedFiber);
          return root;
        }
        function registerMutableSourceForHydration(root, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root.mutableSourceEagerHydrationData == null) {
            root.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        function createPortal(children, containerInfo, implementation) {
          var key2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key2 == null ? null : "" + key2,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstance(component) {
          var fiber = get(component);
          if (fiber === void 0) {
            if (typeof component.render === "function") {
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            } else {
              {
                {
                  throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                }
              }
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                  }
                }
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate);
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          {
            if ("undefined" !== typeof jest) {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          var lane = requestUpdateLane(current$1);
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          enqueueUpdate(current$1, update);
          scheduleUpdateOnFiber(current$1, lane, eventTime);
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration(fiber) {
          switch (fiber.tag) {
            case HostRoot:
              var root = fiber.stateNode;
              if (root.hydrate) {
                var lanes = getHighestPriorityPendingLanes(root);
                flushRoot(root, lanes);
              }
              break;
            case SuspenseComponent:
              var eventTime = requestEventTime();
              flushSync(function() {
                return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);
              });
              var retryLane = InputDiscreteHydrationLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptUserBlockingHydration(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = InputDiscreteHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptContinuousHydration(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = SelectiveHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function runWithPriority$1(priority, fn2) {
          var previousPriority = getCurrentUpdateLanePriority();
          try {
            setCurrentUpdateLanePriority(priority);
            return fn2();
          } finally {
            setCurrentUpdateLanePriority(previousPriority);
          }
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }
          return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key2 = path[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index2 + 1 === path.length) {
              if (Array.isArray(updated)) {
                updated.splice(key2, 1);
              } else {
                delete updated[key2];
              }
              return updated;
            }
            updated[key2] = copyWithDeleteImpl(obj[key2], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (Array.isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                obj[oldKey],
                oldPath,
                newPath,
                index2 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i3 = 0; i3 < newPath.length - 1; i3++) {
                if (oldPath[i3] !== newPath[i3]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key2 = path[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            updated[key2] = copyWithSetImpl(obj[key2], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          scheduleUpdate = function(fiber) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools
          });
        }
        exports3.IsThisRendererActing = IsThisRendererActing;
        exports3.act = act;
        exports3.attemptContinuousHydration = attemptContinuousHydration;
        exports3.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;
        exports3.attemptSynchronousHydration = attemptSynchronousHydration;
        exports3.attemptUserBlockingHydration = attemptUserBlockingHydration;
        exports3.batchedEventUpdates = batchedEventUpdates;
        exports3.batchedUpdates = batchedUpdates;
        exports3.createComponentSelector = createComponentSelector;
        exports3.createContainer = createContainer;
        exports3.createHasPsuedoClassSelector = createHasPsuedoClassSelector;
        exports3.createPortal = createPortal;
        exports3.createRoleSelector = createRoleSelector;
        exports3.createTestNameSelector = createTestNameSelector;
        exports3.createTextSelector = createTextSelector;
        exports3.deferredUpdates = deferredUpdates;
        exports3.discreteUpdates = discreteUpdates;
        exports3.findAllNodes = findAllNodes;
        exports3.findBoundingRects = findBoundingRects;
        exports3.findHostInstance = findHostInstance;
        exports3.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;
        exports3.findHostInstanceWithWarning = findHostInstanceWithWarning;
        exports3.flushControlled = flushControlled;
        exports3.flushDiscreteUpdates = flushDiscreteUpdates;
        exports3.flushPassiveEffects = flushPassiveEffects;
        exports3.flushSync = flushSync;
        exports3.focusWithin = focusWithin;
        exports3.getCurrentUpdateLanePriority = getCurrentUpdateLanePriority;
        exports3.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;
        exports3.getPublicRootInstance = getPublicRootInstance;
        exports3.injectIntoDevTools = injectIntoDevTools;
        exports3.observeVisibleRects = observeVisibleRects;
        exports3.registerMutableSourceForHydration = registerMutableSourceForHydration;
        exports3.runWithPriority = runWithPriority$1;
        exports3.shouldSuspend = shouldSuspend;
        exports3.unbatchedUpdates = unbatchedUpdates;
        exports3.updateContainer = updateContainer;
        return exports3;
      };
    }
  }
});

// node_modules/.pnpm/react-reconciler@0.26.2_react@17.0.2/node_modules/react-reconciler/index.js
var require_react_reconciler = __commonJS({
  "node_modules/.pnpm/react-reconciler@0.26.2_react@17.0.2/node_modules/react-reconciler/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_reconciler_production_min();
    } else {
      module2.exports = require_react_reconciler_development();
    }
  }
});

// node_modules/.pnpm/yoga-layout-prebuilt@1.10.0/node_modules/yoga-layout-prebuilt/yoga-layout/dist/YGEnums.js
var require_YGEnums = __commonJS({
  "node_modules/.pnpm/yoga-layout-prebuilt@1.10.0/node_modules/yoga-layout-prebuilt/yoga-layout/dist/YGEnums.js"(exports2, module2) {
    "use strict";
    var CONSTANTS = {
      ALIGN_COUNT: 8,
      ALIGN_AUTO: 0,
      ALIGN_FLEX_START: 1,
      ALIGN_CENTER: 2,
      ALIGN_FLEX_END: 3,
      ALIGN_STRETCH: 4,
      ALIGN_BASELINE: 5,
      ALIGN_SPACE_BETWEEN: 6,
      ALIGN_SPACE_AROUND: 7,
      DIMENSION_COUNT: 2,
      DIMENSION_WIDTH: 0,
      DIMENSION_HEIGHT: 1,
      DIRECTION_COUNT: 3,
      DIRECTION_INHERIT: 0,
      DIRECTION_LTR: 1,
      DIRECTION_RTL: 2,
      DISPLAY_COUNT: 2,
      DISPLAY_FLEX: 0,
      DISPLAY_NONE: 1,
      EDGE_COUNT: 9,
      EDGE_LEFT: 0,
      EDGE_TOP: 1,
      EDGE_RIGHT: 2,
      EDGE_BOTTOM: 3,
      EDGE_START: 4,
      EDGE_END: 5,
      EDGE_HORIZONTAL: 6,
      EDGE_VERTICAL: 7,
      EDGE_ALL: 8,
      EXPERIMENTAL_FEATURE_COUNT: 1,
      EXPERIMENTAL_FEATURE_WEB_FLEX_BASIS: 0,
      FLEX_DIRECTION_COUNT: 4,
      FLEX_DIRECTION_COLUMN: 0,
      FLEX_DIRECTION_COLUMN_REVERSE: 1,
      FLEX_DIRECTION_ROW: 2,
      FLEX_DIRECTION_ROW_REVERSE: 3,
      JUSTIFY_COUNT: 6,
      JUSTIFY_FLEX_START: 0,
      JUSTIFY_CENTER: 1,
      JUSTIFY_FLEX_END: 2,
      JUSTIFY_SPACE_BETWEEN: 3,
      JUSTIFY_SPACE_AROUND: 4,
      JUSTIFY_SPACE_EVENLY: 5,
      LOG_LEVEL_COUNT: 6,
      LOG_LEVEL_ERROR: 0,
      LOG_LEVEL_WARN: 1,
      LOG_LEVEL_INFO: 2,
      LOG_LEVEL_DEBUG: 3,
      LOG_LEVEL_VERBOSE: 4,
      LOG_LEVEL_FATAL: 5,
      MEASURE_MODE_COUNT: 3,
      MEASURE_MODE_UNDEFINED: 0,
      MEASURE_MODE_EXACTLY: 1,
      MEASURE_MODE_AT_MOST: 2,
      NODE_TYPE_COUNT: 2,
      NODE_TYPE_DEFAULT: 0,
      NODE_TYPE_TEXT: 1,
      OVERFLOW_COUNT: 3,
      OVERFLOW_VISIBLE: 0,
      OVERFLOW_HIDDEN: 1,
      OVERFLOW_SCROLL: 2,
      POSITION_TYPE_COUNT: 2,
      POSITION_TYPE_RELATIVE: 0,
      POSITION_TYPE_ABSOLUTE: 1,
      PRINT_OPTIONS_COUNT: 3,
      PRINT_OPTIONS_LAYOUT: 1,
      PRINT_OPTIONS_STYLE: 2,
      PRINT_OPTIONS_CHILDREN: 4,
      UNIT_COUNT: 4,
      UNIT_UNDEFINED: 0,
      UNIT_POINT: 1,
      UNIT_PERCENT: 2,
      UNIT_AUTO: 3,
      WRAP_COUNT: 3,
      WRAP_NO_WRAP: 0,
      WRAP_WRAP: 1,
      WRAP_WRAP_REVERSE: 2
    };
    module2.exports = CONSTANTS;
  }
});

// node_modules/.pnpm/yoga-layout-prebuilt@1.10.0/node_modules/yoga-layout-prebuilt/yoga-layout/dist/entry-common.js
var require_entry_common = __commonJS({
  "node_modules/.pnpm/yoga-layout-prebuilt@1.10.0/node_modules/yoga-layout-prebuilt/yoga-layout/dist/entry-common.js"(exports2, module2) {
    "use strict";
    var _extends = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key2 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i3 = 0; i3 < props.length; i3++) {
          var descriptor = props[i3];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _defineProperty(obj, key2, value) {
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var CONSTANTS = require_YGEnums();
    var Layout = function() {
      function Layout2(left, right, top, bottom, width, height) {
        _classCallCheck(this, Layout2);
        this.left = left;
        this.right = right;
        this.top = top;
        this.bottom = bottom;
        this.width = width;
        this.height = height;
      }
      _createClass(Layout2, [{
        key: "fromJS",
        value: function fromJS(expose) {
          expose(this.left, this.right, this.top, this.bottom, this.width, this.height);
        }
      }, {
        key: "toString",
        value: function toString() {
          return "<Layout#" + this.left + ":" + this.right + ";" + this.top + ":" + this.bottom + ";" + this.width + ":" + this.height + ">";
        }
      }]);
      return Layout2;
    }();
    var Size = function() {
      _createClass(Size2, null, [{
        key: "fromJS",
        value: function fromJS(_ref) {
          var width = _ref.width, height = _ref.height;
          return new Size2(width, height);
        }
      }]);
      function Size2(width, height) {
        _classCallCheck(this, Size2);
        this.width = width;
        this.height = height;
      }
      _createClass(Size2, [{
        key: "fromJS",
        value: function fromJS(expose) {
          expose(this.width, this.height);
        }
      }, {
        key: "toString",
        value: function toString() {
          return "<Size#" + this.width + "x" + this.height + ">";
        }
      }]);
      return Size2;
    }();
    var Value = function() {
      function Value2(unit, value) {
        _classCallCheck(this, Value2);
        this.unit = unit;
        this.value = value;
      }
      _createClass(Value2, [{
        key: "fromJS",
        value: function fromJS(expose) {
          expose(this.unit, this.value);
        }
      }, {
        key: "toString",
        value: function toString() {
          switch (this.unit) {
            case CONSTANTS.UNIT_POINT:
              return String(this.value);
            case CONSTANTS.UNIT_PERCENT:
              return this.value + "%";
            case CONSTANTS.UNIT_AUTO:
              return "auto";
            default: {
              return this.value + "?";
            }
          }
        }
      }, {
        key: "valueOf",
        value: function valueOf() {
          return this.value;
        }
      }]);
      return Value2;
    }();
    module2.exports = function(bind, lib) {
      function patch(prototype, name, fn2) {
        var original = prototype[name];
        prototype[name] = function() {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return fn2.call.apply(fn2, [this, original].concat(args));
        };
      }
      var _arr = ["setPosition", "setMargin", "setFlexBasis", "setWidth", "setHeight", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setPadding"];
      var _loop = function _loop2() {
        var _methods;
        var fnName = _arr[_i];
        var methods = (_methods = {}, _defineProperty(_methods, CONSTANTS.UNIT_POINT, lib.Node.prototype[fnName]), _defineProperty(_methods, CONSTANTS.UNIT_PERCENT, lib.Node.prototype[fnName + "Percent"]), _defineProperty(_methods, CONSTANTS.UNIT_AUTO, lib.Node.prototype[fnName + "Auto"]), _methods);
        patch(lib.Node.prototype, fnName, function(original) {
          for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          var value = args.pop();
          var unit = void 0, asNumber = void 0;
          if (value === "auto") {
            unit = CONSTANTS.UNIT_AUTO;
            asNumber = void 0;
          } else if (value instanceof Value) {
            unit = value.unit;
            asNumber = value.valueOf();
          } else {
            unit = typeof value === "string" && value.endsWith("%") ? CONSTANTS.UNIT_PERCENT : CONSTANTS.UNIT_POINT;
            asNumber = parseFloat(value);
            if (!Number.isNaN(value) && Number.isNaN(asNumber)) {
              throw new Error("Invalid value " + value + " for " + fnName);
            }
          }
          if (!methods[unit])
            throw new Error('Failed to execute "' + fnName + `": Unsupported unit '` + value + "'");
          if (asNumber !== void 0) {
            var _methods$unit;
            return (_methods$unit = methods[unit]).call.apply(_methods$unit, [this].concat(args, [asNumber]));
          } else {
            var _methods$unit2;
            return (_methods$unit2 = methods[unit]).call.apply(_methods$unit2, [this].concat(args));
          }
        });
      };
      for (var _i = 0; _i < _arr.length; _i++) {
        _loop();
      }
      patch(lib.Config.prototype, "free", function() {
        lib.Config.destroy(this);
      });
      patch(lib.Node, "create", function(_2, config) {
        return config ? lib.Node.createWithConfig(config) : lib.Node.createDefault();
      });
      patch(lib.Node.prototype, "free", function() {
        lib.Node.destroy(this);
      });
      patch(lib.Node.prototype, "freeRecursive", function() {
        for (var t2 = 0, T2 = this.getChildCount(); t2 < T2; ++t2) {
          this.getChild(0).freeRecursive();
        }
        this.free();
      });
      patch(lib.Node.prototype, "setMeasureFunc", function(original, measureFunc) {
        if (measureFunc) {
          return original.call(this, function() {
            return Size.fromJS(measureFunc.apply(void 0, arguments));
          });
        } else {
          return this.unsetMeasureFunc();
        }
      });
      patch(lib.Node.prototype, "calculateLayout", function(original) {
        var width = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : NaN;
        var height = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : NaN;
        var direction = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : CONSTANTS.DIRECTION_LTR;
        return original.call(this, width, height, direction);
      });
      return _extends({
        Config: lib.Config,
        Node: lib.Node,
        Layout: bind("Layout", Layout),
        Size: bind("Size", Size),
        Value: bind("Value", Value),
        getInstanceCount: function getInstanceCount() {
          return lib.getInstanceCount.apply(lib, arguments);
        }
      }, CONSTANTS);
    };
  }
});

// node_modules/.pnpm/yoga-layout-prebuilt@1.10.0/node_modules/yoga-layout-prebuilt/yoga-layout/build/Release/nbind.js
var require_nbind = __commonJS({
  "node_modules/.pnpm/yoga-layout-prebuilt@1.10.0/node_modules/yoga-layout-prebuilt/yoga-layout/build/Release/nbind.js"(exports, module) {
    (function(root, wrapper) {
      if (typeof define == "function" && define.amd)
        define([], function() {
          return wrapper;
        });
      else if (typeof module == "object" && module.exports)
        module.exports = wrapper;
      else
        (root.nbind = root.nbind || {}).init = wrapper;
    })(exports, function(Module, cb) {
      if (typeof Module == "function") {
        cb = Module;
        Module = {};
      }
      Module.onRuntimeInitialized = function(init, cb2) {
        return function() {
          if (init)
            init.apply(this, arguments);
          try {
            Module.ccall("nbind_init");
          } catch (err2) {
            cb2(err2);
            return;
          }
          cb2(null, { bind: Module._nbind_value, reflect: Module.NBind.reflect, queryType: Module.NBind.queryType, toggleLightGC: Module.toggleLightGC, lib: Module });
        };
      }(Module.onRuntimeInitialized, cb);
      var Module;
      if (!Module)
        Module = (typeof Module !== "undefined" ? Module : null) || {};
      var moduleOverrides = {};
      for (var key in Module) {
        if (Module.hasOwnProperty(key)) {
          moduleOverrides[key] = Module[key];
        }
      }
      var ENVIRONMENT_IS_WEB = false;
      var ENVIRONMENT_IS_WORKER = false;
      var ENVIRONMENT_IS_NODE = false;
      var ENVIRONMENT_IS_SHELL = false;
      if (Module["ENVIRONMENT"]) {
        if (Module["ENVIRONMENT"] === "WEB") {
          ENVIRONMENT_IS_WEB = true;
        } else if (Module["ENVIRONMENT"] === "WORKER") {
          ENVIRONMENT_IS_WORKER = true;
        } else if (Module["ENVIRONMENT"] === "NODE") {
          ENVIRONMENT_IS_NODE = true;
        } else if (Module["ENVIRONMENT"] === "SHELL") {
          ENVIRONMENT_IS_SHELL = true;
        } else {
          throw new Error("The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.");
        }
      } else {
        ENVIRONMENT_IS_WEB = typeof window === "object";
        ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
        ENVIRONMENT_IS_NODE = typeof process === "object" && typeof __require === "function" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
        ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
      }
      if (ENVIRONMENT_IS_NODE) {
        if (!Module["print"])
          Module["print"] = console.log;
        if (!Module["printErr"])
          Module["printErr"] = console.warn;
        var nodeFS;
        var nodePath;
        Module["read"] = function shell_read(filename, binary) {
          if (!nodeFS)
            nodeFS = {}("");
          if (!nodePath)
            nodePath = {}("");
          filename = nodePath["normalize"](filename);
          var ret = nodeFS["readFileSync"](filename);
          return binary ? ret : ret.toString();
        };
        Module["readBinary"] = function readBinary(filename) {
          var ret = Module["read"](filename, true);
          if (!ret.buffer) {
            ret = new Uint8Array(ret);
          }
          assert(ret.buffer);
          return ret;
        };
        Module["load"] = function load(f2) {
          globalEval(read(f2));
        };
        if (!Module["thisProgram"]) {
          if (process["argv"].length > 1) {
            Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
          } else {
            Module["thisProgram"] = "unknown-program";
          }
        }
        Module["arguments"] = process["argv"].slice(2);
        if (typeof module !== "undefined") {
          module["exports"] = Module;
        }
        process["on"]("uncaughtException", function(ex) {
          if (!(ex instanceof ExitStatus)) {
            throw ex;
          }
        });
        Module["inspect"] = function() {
          return "[Emscripten Module object]";
        };
      } else if (ENVIRONMENT_IS_SHELL) {
        if (!Module["print"])
          Module["print"] = print;
        if (typeof printErr != "undefined")
          Module["printErr"] = printErr;
        if (typeof read != "undefined") {
          Module["read"] = read;
        } else {
          Module["read"] = function shell_read() {
            throw "no read() available";
          };
        }
        Module["readBinary"] = function readBinary(f2) {
          if (typeof readbuffer === "function") {
            return new Uint8Array(readbuffer(f2));
          }
          var data = read(f2, "binary");
          assert(typeof data === "object");
          return data;
        };
        if (typeof scriptArgs != "undefined") {
          Module["arguments"] = scriptArgs;
        } else if (typeof arguments != "undefined") {
          Module["arguments"] = arguments;
        }
        if (typeof quit === "function") {
          Module["quit"] = function(status, toThrow) {
            quit(status);
          };
        }
      } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
        Module["read"] = function shell_read(url) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, false);
          xhr.send(null);
          return xhr.responseText;
        };
        if (ENVIRONMENT_IS_WORKER) {
          Module["readBinary"] = function readBinary(url) {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, false);
            xhr.responseType = "arraybuffer";
            xhr.send(null);
            return new Uint8Array(xhr.response);
          };
        }
        Module["readAsync"] = function readAsync(url, onload, onerror) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, true);
          xhr.responseType = "arraybuffer";
          xhr.onload = function xhr_onload() {
            if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
              onload(xhr.response);
            } else {
              onerror();
            }
          };
          xhr.onerror = onerror;
          xhr.send(null);
        };
        if (typeof arguments != "undefined") {
          Module["arguments"] = arguments;
        }
        if (typeof console !== "undefined") {
          if (!Module["print"])
            Module["print"] = function shell_print(x2) {
              console.log(x2);
            };
          if (!Module["printErr"])
            Module["printErr"] = function shell_printErr(x2) {
              console.warn(x2);
            };
        } else {
          var TRY_USE_DUMP = false;
          if (!Module["print"])
            Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? function(x2) {
              dump(x2);
            } : function(x2) {
            };
        }
        if (ENVIRONMENT_IS_WORKER) {
          Module["load"] = importScripts;
        }
        if (typeof Module["setWindowTitle"] === "undefined") {
          Module["setWindowTitle"] = function(title) {
            document.title = title;
          };
        }
      } else {
        throw "Unknown runtime environment. Where are we?";
      }
      function globalEval(x2) {
        eval.call(null, x2);
      }
      if (!Module["load"] && Module["read"]) {
        Module["load"] = function load(f2) {
          globalEval(Module["read"](f2));
        };
      }
      if (!Module["print"]) {
        Module["print"] = function() {
        };
      }
      if (!Module["printErr"]) {
        Module["printErr"] = Module["print"];
      }
      if (!Module["arguments"]) {
        Module["arguments"] = [];
      }
      if (!Module["thisProgram"]) {
        Module["thisProgram"] = "./this.program";
      }
      if (!Module["quit"]) {
        Module["quit"] = function(status, toThrow) {
          throw toThrow;
        };
      }
      Module.print = Module["print"];
      Module.printErr = Module["printErr"];
      Module["preRun"] = [];
      Module["postRun"] = [];
      for (var key in moduleOverrides) {
        if (moduleOverrides.hasOwnProperty(key)) {
          Module[key] = moduleOverrides[key];
        }
      }
      moduleOverrides = void 0;
      var Runtime = { setTempRet0: function(value) {
        tempRet0 = value;
        return value;
      }, getTempRet0: function() {
        return tempRet0;
      }, stackSave: function() {
        return STACKTOP;
      }, stackRestore: function(stackTop) {
        STACKTOP = stackTop;
      }, getNativeTypeSize: function(type2) {
        switch (type2) {
          case "i1":
          case "i8":
            return 1;
          case "i16":
            return 2;
          case "i32":
            return 4;
          case "i64":
            return 8;
          case "float":
            return 4;
          case "double":
            return 8;
          default: {
            if (type2[type2.length - 1] === "*") {
              return Runtime.QUANTUM_SIZE;
            } else if (type2[0] === "i") {
              var bits = parseInt(type2.substr(1));
              assert(bits % 8 === 0);
              return bits / 8;
            } else {
              return 0;
            }
          }
        }
      }, getNativeFieldSize: function(type2) {
        return Math.max(Runtime.getNativeTypeSize(type2), Runtime.QUANTUM_SIZE);
      }, STACK_ALIGN: 16, prepVararg: function(ptr2, type2) {
        if (type2 === "double" || type2 === "i64") {
          if (ptr2 & 7) {
            assert((ptr2 & 7) === 4);
            ptr2 += 4;
          }
        } else {
          assert((ptr2 & 3) === 0);
        }
        return ptr2;
      }, getAlignSize: function(type2, size, vararg) {
        if (!vararg && (type2 == "i64" || type2 == "double"))
          return 8;
        if (!type2)
          return Math.min(size, 8);
        return Math.min(size || (type2 ? Runtime.getNativeFieldSize(type2) : 0), Runtime.QUANTUM_SIZE);
      }, dynCall: function(sig, ptr2, args) {
        if (args && args.length) {
          return Module["dynCall_" + sig].apply(null, [ptr2].concat(args));
        } else {
          return Module["dynCall_" + sig].call(null, ptr2);
        }
      }, functionPointers: [], addFunction: function(func2) {
        for (var i3 = 0; i3 < Runtime.functionPointers.length; i3++) {
          if (!Runtime.functionPointers[i3]) {
            Runtime.functionPointers[i3] = func2;
            return 2 * (1 + i3);
          }
        }
        throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
      }, removeFunction: function(index) {
        Runtime.functionPointers[(index - 2) / 2] = null;
      }, warnOnce: function(text) {
        if (!Runtime.warnOnce.shown)
          Runtime.warnOnce.shown = {};
        if (!Runtime.warnOnce.shown[text]) {
          Runtime.warnOnce.shown[text] = 1;
          Module.printErr(text);
        }
      }, funcWrappers: {}, getFuncWrapper: function(func2, sig) {
        if (!func2)
          return;
        assert(sig);
        if (!Runtime.funcWrappers[sig]) {
          Runtime.funcWrappers[sig] = {};
        }
        var sigCache = Runtime.funcWrappers[sig];
        if (!sigCache[func2]) {
          if (sig.length === 1) {
            sigCache[func2] = function dynCall_wrapper() {
              return Runtime.dynCall(sig, func2);
            };
          } else if (sig.length === 2) {
            sigCache[func2] = function dynCall_wrapper(arg2) {
              return Runtime.dynCall(sig, func2, [arg2]);
            };
          } else {
            sigCache[func2] = function dynCall_wrapper() {
              return Runtime.dynCall(sig, func2, Array.prototype.slice.call(arguments));
            };
          }
        }
        return sigCache[func2];
      }, getCompilerSetting: function(name) {
        throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
      }, stackAlloc: function(size) {
        var ret = STACKTOP;
        STACKTOP = STACKTOP + size | 0;
        STACKTOP = STACKTOP + 15 & -16;
        return ret;
      }, staticAlloc: function(size) {
        var ret = STATICTOP;
        STATICTOP = STATICTOP + size | 0;
        STATICTOP = STATICTOP + 15 & -16;
        return ret;
      }, dynamicAlloc: function(size) {
        var ret = HEAP32[DYNAMICTOP_PTR >> 2];
        var end = (ret + size + 15 | 0) & -16;
        HEAP32[DYNAMICTOP_PTR >> 2] = end;
        if (end >= TOTAL_MEMORY) {
          var success = enlargeMemory();
          if (!success) {
            HEAP32[DYNAMICTOP_PTR >> 2] = ret;
            return 0;
          }
        }
        return ret;
      }, alignMemory: function(size, quantum) {
        var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
        return ret;
      }, makeBigInt: function(low, high, unsigned) {
        var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * 4294967296 : +(low >>> 0) + +(high | 0) * 4294967296;
        return ret;
      }, GLOBAL_BASE: 8, QUANTUM_SIZE: 4, __dummy__: 0 };
      Module["Runtime"] = Runtime;
      var ABORT = 0;
      var EXITSTATUS = 0;
      function assert(condition, text) {
        if (!condition) {
          abort("Assertion failed: " + text);
        }
      }
      function getCFunc(ident) {
        var func = Module["_" + ident];
        if (!func) {
          try {
            func = eval("_" + ident);
          } catch (e) {
          }
        }
        assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
        return func;
      }
      var cwrap, ccall;
      (function() {
        var JSfuncs = { "stackSave": function() {
          Runtime.stackSave();
        }, "stackRestore": function() {
          Runtime.stackRestore();
        }, "arrayToC": function(arr) {
          var ret = Runtime.stackAlloc(arr.length);
          writeArrayToMemory(arr, ret);
          return ret;
        }, "stringToC": function(str) {
          var ret = 0;
          if (str !== null && str !== void 0 && str !== 0) {
            var len = (str.length << 2) + 1;
            ret = Runtime.stackAlloc(len);
            stringToUTF8(str, ret, len);
          }
          return ret;
        } };
        var toC = { "string": JSfuncs["stringToC"], "array": JSfuncs["arrayToC"] };
        ccall = function ccallFunc(ident2, returnType2, argTypes2, args, opts) {
          var func2 = getCFunc(ident2);
          var cArgs = [];
          var stack = 0;
          if (args) {
            for (var i3 = 0; i3 < args.length; i3++) {
              var converter = toC[argTypes2[i3]];
              if (converter) {
                if (stack === 0)
                  stack = Runtime.stackSave();
                cArgs[i3] = converter(args[i3]);
              } else {
                cArgs[i3] = args[i3];
              }
            }
          }
          var ret = func2.apply(null, cArgs);
          if (returnType2 === "string")
            ret = Pointer_stringify(ret);
          if (stack !== 0) {
            if (opts && opts.async) {
              EmterpreterAsync.asyncFinalizers.push(function() {
                Runtime.stackRestore(stack);
              });
              return;
            }
            Runtime.stackRestore(stack);
          }
          return ret;
        };
        var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
        function parseJSFunc(jsfunc) {
          var parsed = jsfunc.toString().match(sourceRegex).slice(1);
          return { arguments: parsed[0], body: parsed[1], returnValue: parsed[2] };
        }
        var JSsource = null;
        function ensureJSsource() {
          if (!JSsource) {
            JSsource = {};
            for (var fun in JSfuncs) {
              if (JSfuncs.hasOwnProperty(fun)) {
                JSsource[fun] = parseJSFunc(JSfuncs[fun]);
              }
            }
          }
        }
        cwrap = function cwrap(ident, returnType, argTypes) {
          argTypes = argTypes || [];
          var cfunc = getCFunc(ident);
          var numericArgs = argTypes.every(function(type2) {
            return type2 === "number";
          });
          var numericRet = returnType !== "string";
          if (numericRet && numericArgs) {
            return cfunc;
          }
          var argNames = argTypes.map(function(x2, i3) {
            return "$" + i3;
          });
          var funcstr = "(function(" + argNames.join(",") + ") {";
          var nargs = argTypes.length;
          if (!numericArgs) {
            ensureJSsource();
            funcstr += "var stack = " + JSsource["stackSave"].body + ";";
            for (var i = 0; i < nargs; i++) {
              var arg = argNames[i], type = argTypes[i];
              if (type === "number")
                continue;
              var convertCode = JSsource[type + "ToC"];
              funcstr += "var " + convertCode.arguments + " = " + arg + ";";
              funcstr += convertCode.body + ";";
              funcstr += arg + "=(" + convertCode.returnValue + ");";
            }
          }
          var cfuncname = parseJSFunc(function() {
            return cfunc;
          }).returnValue;
          funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
          if (!numericRet) {
            var strgfy = parseJSFunc(function() {
              return Pointer_stringify;
            }).returnValue;
            funcstr += "ret = " + strgfy + "(ret);";
          }
          if (!numericArgs) {
            ensureJSsource();
            funcstr += JSsource["stackRestore"].body.replace("()", "(stack)") + ";";
          }
          funcstr += "return ret})";
          return eval(funcstr);
        };
      })();
      Module["ccall"] = ccall;
      Module["cwrap"] = cwrap;
      function setValue(ptr2, value, type2, noSafe) {
        type2 = type2 || "i8";
        if (type2.charAt(type2.length - 1) === "*")
          type2 = "i32";
        switch (type2) {
          case "i1":
            HEAP8[ptr2 >> 0] = value;
            break;
          case "i8":
            HEAP8[ptr2 >> 0] = value;
            break;
          case "i16":
            HEAP16[ptr2 >> 1] = value;
            break;
          case "i32":
            HEAP32[ptr2 >> 2] = value;
            break;
          case "i64":
            tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr2 >> 2] = tempI64[0], HEAP32[ptr2 + 4 >> 2] = tempI64[1];
            break;
          case "float":
            HEAPF32[ptr2 >> 2] = value;
            break;
          case "double":
            HEAPF64[ptr2 >> 3] = value;
            break;
          default:
            abort("invalid type for setValue: " + type2);
        }
      }
      Module["setValue"] = setValue;
      function getValue(ptr2, type2, noSafe) {
        type2 = type2 || "i8";
        if (type2.charAt(type2.length - 1) === "*")
          type2 = "i32";
        switch (type2) {
          case "i1":
            return HEAP8[ptr2 >> 0];
          case "i8":
            return HEAP8[ptr2 >> 0];
          case "i16":
            return HEAP16[ptr2 >> 1];
          case "i32":
            return HEAP32[ptr2 >> 2];
          case "i64":
            return HEAP32[ptr2 >> 2];
          case "float":
            return HEAPF32[ptr2 >> 2];
          case "double":
            return HEAPF64[ptr2 >> 3];
          default:
            abort("invalid type for setValue: " + type2);
        }
        return null;
      }
      Module["getValue"] = getValue;
      var ALLOC_NORMAL = 0;
      var ALLOC_STACK = 1;
      var ALLOC_STATIC = 2;
      var ALLOC_DYNAMIC = 3;
      var ALLOC_NONE = 4;
      Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
      Module["ALLOC_STACK"] = ALLOC_STACK;
      Module["ALLOC_STATIC"] = ALLOC_STATIC;
      Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
      Module["ALLOC_NONE"] = ALLOC_NONE;
      function allocate(slab, types, allocator, ptr2) {
        var zeroinit, size;
        if (typeof slab === "number") {
          zeroinit = true;
          size = slab;
        } else {
          zeroinit = false;
          size = slab.length;
        }
        var singleType = typeof types === "string" ? types : null;
        var ret;
        if (allocator == ALLOC_NONE) {
          ret = ptr2;
        } else {
          ret = [typeof _malloc === "function" ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === void 0 ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
        }
        if (zeroinit) {
          var ptr2 = ret, stop;
          assert((ret & 3) == 0);
          stop = ret + (size & ~3);
          for (; ptr2 < stop; ptr2 += 4) {
            HEAP32[ptr2 >> 2] = 0;
          }
          stop = ret + size;
          while (ptr2 < stop) {
            HEAP8[ptr2++ >> 0] = 0;
          }
          return ret;
        }
        if (singleType === "i8") {
          if (slab.subarray || slab.slice) {
            HEAPU8.set(slab, ret);
          } else {
            HEAPU8.set(new Uint8Array(slab), ret);
          }
          return ret;
        }
        var i3 = 0, type2, typeSize, previousType;
        while (i3 < size) {
          var curr = slab[i3];
          if (typeof curr === "function") {
            curr = Runtime.getFunctionIndex(curr);
          }
          type2 = singleType || types[i3];
          if (type2 === 0) {
            i3++;
            continue;
          }
          if (type2 == "i64")
            type2 = "i32";
          setValue(ret + i3, curr, type2);
          if (previousType !== type2) {
            typeSize = Runtime.getNativeTypeSize(type2);
            previousType = type2;
          }
          i3 += typeSize;
        }
        return ret;
      }
      Module["allocate"] = allocate;
      function getMemory(size) {
        if (!staticSealed)
          return Runtime.staticAlloc(size);
        if (!runtimeInitialized)
          return Runtime.dynamicAlloc(size);
        return _malloc(size);
      }
      Module["getMemory"] = getMemory;
      function Pointer_stringify(ptr2, length) {
        if (length === 0 || !ptr2)
          return "";
        var hasUtf = 0;
        var t2;
        var i3 = 0;
        while (1) {
          t2 = HEAPU8[ptr2 + i3 >> 0];
          hasUtf |= t2;
          if (t2 == 0 && !length)
            break;
          i3++;
          if (length && i3 == length)
            break;
        }
        if (!length)
          length = i3;
        var ret = "";
        if (hasUtf < 128) {
          var MAX_CHUNK = 1024;
          var curr;
          while (length > 0) {
            curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr2, ptr2 + Math.min(length, MAX_CHUNK)));
            ret = ret ? ret + curr : curr;
            ptr2 += MAX_CHUNK;
            length -= MAX_CHUNK;
          }
          return ret;
        }
        return Module["UTF8ToString"](ptr2);
      }
      Module["Pointer_stringify"] = Pointer_stringify;
      function AsciiToString(ptr2) {
        var str = "";
        while (1) {
          var ch = HEAP8[ptr2++ >> 0];
          if (!ch)
            return str;
          str += String.fromCharCode(ch);
        }
      }
      Module["AsciiToString"] = AsciiToString;
      function stringToAscii(str, outPtr) {
        return writeAsciiToMemory(str, outPtr, false);
      }
      Module["stringToAscii"] = stringToAscii;
      var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
      function UTF8ArrayToString(u8Array, idx) {
        var endPtr = idx;
        while (u8Array[endPtr])
          ++endPtr;
        if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
          return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
        } else {
          var u0, u1, u2, u3, u4, u5;
          var str = "";
          while (1) {
            u0 = u8Array[idx++];
            if (!u0)
              return str;
            if (!(u0 & 128)) {
              str += String.fromCharCode(u0);
              continue;
            }
            u1 = u8Array[idx++] & 63;
            if ((u0 & 224) == 192) {
              str += String.fromCharCode((u0 & 31) << 6 | u1);
              continue;
            }
            u2 = u8Array[idx++] & 63;
            if ((u0 & 240) == 224) {
              u0 = (u0 & 15) << 12 | u1 << 6 | u2;
            } else {
              u3 = u8Array[idx++] & 63;
              if ((u0 & 248) == 240) {
                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
              } else {
                u4 = u8Array[idx++] & 63;
                if ((u0 & 252) == 248) {
                  u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
                } else {
                  u5 = u8Array[idx++] & 63;
                  u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
                }
              }
            }
            if (u0 < 65536) {
              str += String.fromCharCode(u0);
            } else {
              var ch = u0 - 65536;
              str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
            }
          }
        }
      }
      Module["UTF8ArrayToString"] = UTF8ArrayToString;
      function UTF8ToString(ptr2) {
        return UTF8ArrayToString(HEAPU8, ptr2);
      }
      Module["UTF8ToString"] = UTF8ToString;
      function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
        if (!(maxBytesToWrite > 0))
          return 0;
        var startIdx = outIdx;
        var endIdx = outIdx + maxBytesToWrite - 1;
        for (var i3 = 0; i3 < str.length; ++i3) {
          var u2 = str.charCodeAt(i3);
          if (u2 >= 55296 && u2 <= 57343)
            u2 = 65536 + ((u2 & 1023) << 10) | str.charCodeAt(++i3) & 1023;
          if (u2 <= 127) {
            if (outIdx >= endIdx)
              break;
            outU8Array[outIdx++] = u2;
          } else if (u2 <= 2047) {
            if (outIdx + 1 >= endIdx)
              break;
            outU8Array[outIdx++] = 192 | u2 >> 6;
            outU8Array[outIdx++] = 128 | u2 & 63;
          } else if (u2 <= 65535) {
            if (outIdx + 2 >= endIdx)
              break;
            outU8Array[outIdx++] = 224 | u2 >> 12;
            outU8Array[outIdx++] = 128 | u2 >> 6 & 63;
            outU8Array[outIdx++] = 128 | u2 & 63;
          } else if (u2 <= 2097151) {
            if (outIdx + 3 >= endIdx)
              break;
            outU8Array[outIdx++] = 240 | u2 >> 18;
            outU8Array[outIdx++] = 128 | u2 >> 12 & 63;
            outU8Array[outIdx++] = 128 | u2 >> 6 & 63;
            outU8Array[outIdx++] = 128 | u2 & 63;
          } else if (u2 <= 67108863) {
            if (outIdx + 4 >= endIdx)
              break;
            outU8Array[outIdx++] = 248 | u2 >> 24;
            outU8Array[outIdx++] = 128 | u2 >> 18 & 63;
            outU8Array[outIdx++] = 128 | u2 >> 12 & 63;
            outU8Array[outIdx++] = 128 | u2 >> 6 & 63;
            outU8Array[outIdx++] = 128 | u2 & 63;
          } else {
            if (outIdx + 5 >= endIdx)
              break;
            outU8Array[outIdx++] = 252 | u2 >> 30;
            outU8Array[outIdx++] = 128 | u2 >> 24 & 63;
            outU8Array[outIdx++] = 128 | u2 >> 18 & 63;
            outU8Array[outIdx++] = 128 | u2 >> 12 & 63;
            outU8Array[outIdx++] = 128 | u2 >> 6 & 63;
            outU8Array[outIdx++] = 128 | u2 & 63;
          }
        }
        outU8Array[outIdx] = 0;
        return outIdx - startIdx;
      }
      Module["stringToUTF8Array"] = stringToUTF8Array;
      function stringToUTF8(str, outPtr, maxBytesToWrite) {
        return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
      }
      Module["stringToUTF8"] = stringToUTF8;
      function lengthBytesUTF8(str) {
        var len = 0;
        for (var i3 = 0; i3 < str.length; ++i3) {
          var u2 = str.charCodeAt(i3);
          if (u2 >= 55296 && u2 <= 57343)
            u2 = 65536 + ((u2 & 1023) << 10) | str.charCodeAt(++i3) & 1023;
          if (u2 <= 127) {
            ++len;
          } else if (u2 <= 2047) {
            len += 2;
          } else if (u2 <= 65535) {
            len += 3;
          } else if (u2 <= 2097151) {
            len += 4;
          } else if (u2 <= 67108863) {
            len += 5;
          } else {
            len += 6;
          }
        }
        return len;
      }
      Module["lengthBytesUTF8"] = lengthBytesUTF8;
      var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
      function demangle(func2) {
        var __cxa_demangle_func = Module["___cxa_demangle"] || Module["__cxa_demangle"];
        if (__cxa_demangle_func) {
          try {
            var s2 = func2.substr(1);
            var len = lengthBytesUTF8(s2) + 1;
            var buf = _malloc(len);
            stringToUTF8(s2, buf, len);
            var status = _malloc(4);
            var ret = __cxa_demangle_func(buf, 0, 0, status);
            if (getValue(status, "i32") === 0 && ret) {
              return Pointer_stringify(ret);
            }
          } catch (e) {
          } finally {
            if (buf)
              _free(buf);
            if (status)
              _free(status);
            if (ret)
              _free(ret);
          }
          return func2;
        }
        Runtime.warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
        return func2;
      }
      function demangleAll(text) {
        var regex = /__Z[\w\d_]+/g;
        return text.replace(regex, function(x2) {
          var y2 = demangle(x2);
          return x2 === y2 ? x2 : x2 + " [" + y2 + "]";
        });
      }
      function jsStackTrace() {
        var err2 = new Error();
        if (!err2.stack) {
          try {
            throw new Error(0);
          } catch (e) {
            err2 = e;
          }
          if (!err2.stack) {
            return "(no stack trace available)";
          }
        }
        return err2.stack.toString();
      }
      function stackTrace() {
        var js = jsStackTrace();
        if (Module["extraStackTrace"])
          js += "\n" + Module["extraStackTrace"]();
        return demangleAll(js);
      }
      Module["stackTrace"] = stackTrace;
      var HEAP, buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
      function updateGlobalBufferViews() {
        Module["HEAP8"] = HEAP8 = new Int8Array(buffer);
        Module["HEAP16"] = HEAP16 = new Int16Array(buffer);
        Module["HEAP32"] = HEAP32 = new Int32Array(buffer);
        Module["HEAPU8"] = HEAPU8 = new Uint8Array(buffer);
        Module["HEAPU16"] = HEAPU16 = new Uint16Array(buffer);
        Module["HEAPU32"] = HEAPU32 = new Uint32Array(buffer);
        Module["HEAPF32"] = HEAPF32 = new Float32Array(buffer);
        Module["HEAPF64"] = HEAPF64 = new Float64Array(buffer);
      }
      var STATIC_BASE, STATICTOP, staticSealed;
      var STACK_BASE, STACKTOP, STACK_MAX;
      var DYNAMIC_BASE, DYNAMICTOP_PTR;
      STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
      staticSealed = false;
      function abortOnCannotGrowMemory() {
        abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
      }
      function enlargeMemory() {
        abortOnCannotGrowMemory();
      }
      var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
      var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 134217728;
      if (TOTAL_MEMORY < TOTAL_STACK)
        Module.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was " + TOTAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");
      if (Module["buffer"]) {
        buffer = Module["buffer"];
      } else {
        {
          buffer = new ArrayBuffer(TOTAL_MEMORY);
        }
      }
      updateGlobalBufferViews();
      function getTotalMemory() {
        return TOTAL_MEMORY;
      }
      HEAP32[0] = 1668509029;
      HEAP16[1] = 25459;
      if (HEAPU8[2] !== 115 || HEAPU8[3] !== 99)
        throw "Runtime error: expected the system to be little-endian!";
      Module["HEAP"] = HEAP;
      Module["buffer"] = buffer;
      Module["HEAP8"] = HEAP8;
      Module["HEAP16"] = HEAP16;
      Module["HEAP32"] = HEAP32;
      Module["HEAPU8"] = HEAPU8;
      Module["HEAPU16"] = HEAPU16;
      Module["HEAPU32"] = HEAPU32;
      Module["HEAPF32"] = HEAPF32;
      Module["HEAPF64"] = HEAPF64;
      function callRuntimeCallbacks(callbacks) {
        while (callbacks.length > 0) {
          var callback = callbacks.shift();
          if (typeof callback == "function") {
            callback();
            continue;
          }
          var func2 = callback.func;
          if (typeof func2 === "number") {
            if (callback.arg === void 0) {
              Module["dynCall_v"](func2);
            } else {
              Module["dynCall_vi"](func2, callback.arg);
            }
          } else {
            func2(callback.arg === void 0 ? null : callback.arg);
          }
        }
      }
      var __ATPRERUN__ = [];
      var __ATINIT__ = [];
      var __ATMAIN__ = [];
      var __ATEXIT__ = [];
      var __ATPOSTRUN__ = [];
      var runtimeInitialized = false;
      var runtimeExited = false;
      function preRun() {
        if (Module["preRun"]) {
          if (typeof Module["preRun"] == "function")
            Module["preRun"] = [Module["preRun"]];
          while (Module["preRun"].length) {
            addOnPreRun(Module["preRun"].shift());
          }
        }
        callRuntimeCallbacks(__ATPRERUN__);
      }
      function ensureInitRuntime() {
        if (runtimeInitialized)
          return;
        runtimeInitialized = true;
        callRuntimeCallbacks(__ATINIT__);
      }
      function preMain() {
        callRuntimeCallbacks(__ATMAIN__);
      }
      function exitRuntime() {
        callRuntimeCallbacks(__ATEXIT__);
        runtimeExited = true;
      }
      function postRun() {
        if (Module["postRun"]) {
          if (typeof Module["postRun"] == "function")
            Module["postRun"] = [Module["postRun"]];
          while (Module["postRun"].length) {
            addOnPostRun(Module["postRun"].shift());
          }
        }
        callRuntimeCallbacks(__ATPOSTRUN__);
      }
      function addOnPreRun(cb2) {
        __ATPRERUN__.unshift(cb2);
      }
      Module["addOnPreRun"] = addOnPreRun;
      function addOnInit(cb2) {
        __ATINIT__.unshift(cb2);
      }
      Module["addOnInit"] = addOnInit;
      function addOnPreMain(cb2) {
        __ATMAIN__.unshift(cb2);
      }
      Module["addOnPreMain"] = addOnPreMain;
      function addOnExit(cb2) {
        __ATEXIT__.unshift(cb2);
      }
      Module["addOnExit"] = addOnExit;
      function addOnPostRun(cb2) {
        __ATPOSTRUN__.unshift(cb2);
      }
      Module["addOnPostRun"] = addOnPostRun;
      function intArrayFromString(stringy, dontAddNull, length) {
        var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
        var u8array = new Array(len);
        var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
        if (dontAddNull)
          u8array.length = numBytesWritten;
        return u8array;
      }
      Module["intArrayFromString"] = intArrayFromString;
      function intArrayToString(array) {
        var ret = [];
        for (var i3 = 0; i3 < array.length; i3++) {
          var chr = array[i3];
          if (chr > 255) {
            chr &= 255;
          }
          ret.push(String.fromCharCode(chr));
        }
        return ret.join("");
      }
      Module["intArrayToString"] = intArrayToString;
      function writeStringToMemory(string, buffer2, dontAddNull) {
        Runtime.warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");
        var lastChar, end;
        if (dontAddNull) {
          end = buffer2 + lengthBytesUTF8(string);
          lastChar = HEAP8[end];
        }
        stringToUTF8(string, buffer2, Infinity);
        if (dontAddNull)
          HEAP8[end] = lastChar;
      }
      Module["writeStringToMemory"] = writeStringToMemory;
      function writeArrayToMemory(array, buffer2) {
        HEAP8.set(array, buffer2);
      }
      Module["writeArrayToMemory"] = writeArrayToMemory;
      function writeAsciiToMemory(str, buffer2, dontAddNull) {
        for (var i3 = 0; i3 < str.length; ++i3) {
          HEAP8[buffer2++ >> 0] = str.charCodeAt(i3);
        }
        if (!dontAddNull)
          HEAP8[buffer2 >> 0] = 0;
      }
      Module["writeAsciiToMemory"] = writeAsciiToMemory;
      if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5)
        Math["imul"] = function imul(a2, b2) {
          var ah = a2 >>> 16;
          var al = a2 & 65535;
          var bh = b2 >>> 16;
          var bl = b2 & 65535;
          return al * bl + (ah * bl + al * bh << 16) | 0;
        };
      Math.imul = Math["imul"];
      if (!Math["fround"]) {
        var froundBuffer = new Float32Array(1);
        Math["fround"] = function(x2) {
          froundBuffer[0] = x2;
          return froundBuffer[0];
        };
      }
      Math.fround = Math["fround"];
      if (!Math["clz32"])
        Math["clz32"] = function(x2) {
          x2 = x2 >>> 0;
          for (var i3 = 0; i3 < 32; i3++) {
            if (x2 & 1 << 31 - i3)
              return i3;
          }
          return 32;
        };
      Math.clz32 = Math["clz32"];
      if (!Math["trunc"])
        Math["trunc"] = function(x2) {
          return x2 < 0 ? Math.ceil(x2) : Math.floor(x2);
        };
      Math.trunc = Math["trunc"];
      var Math_abs = Math.abs;
      var Math_cos = Math.cos;
      var Math_sin = Math.sin;
      var Math_tan = Math.tan;
      var Math_acos = Math.acos;
      var Math_asin = Math.asin;
      var Math_atan = Math.atan;
      var Math_atan2 = Math.atan2;
      var Math_exp = Math.exp;
      var Math_log = Math.log;
      var Math_sqrt = Math.sqrt;
      var Math_ceil = Math.ceil;
      var Math_floor = Math.floor;
      var Math_pow = Math.pow;
      var Math_imul = Math.imul;
      var Math_fround = Math.fround;
      var Math_round = Math.round;
      var Math_min = Math.min;
      var Math_clz32 = Math.clz32;
      var Math_trunc = Math.trunc;
      var runDependencies = 0;
      var runDependencyWatcher = null;
      var dependenciesFulfilled = null;
      function getUniqueRunDependency(id) {
        return id;
      }
      function addRunDependency(id) {
        runDependencies++;
        if (Module["monitorRunDependencies"]) {
          Module["monitorRunDependencies"](runDependencies);
        }
      }
      Module["addRunDependency"] = addRunDependency;
      function removeRunDependency(id) {
        runDependencies--;
        if (Module["monitorRunDependencies"]) {
          Module["monitorRunDependencies"](runDependencies);
        }
        if (runDependencies == 0) {
          if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null;
          }
          if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback();
          }
        }
      }
      Module["removeRunDependency"] = removeRunDependency;
      Module["preloadedImages"] = {};
      Module["preloadedAudios"] = {};
      var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5, $6, $7) {
        return _nbind.callbackSignatureList[$0].apply(this, arguments);
      }];
      function _emscripten_asm_const_iiiiiiii(code, a0, a1, a2, a3, a4, a5, a6) {
        return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6);
      }
      function _emscripten_asm_const_iiiii(code, a0, a1, a2, a3) {
        return ASM_CONSTS[code](a0, a1, a2, a3);
      }
      function _emscripten_asm_const_iiidddddd(code, a0, a1, a2, a3, a4, a5, a6, a7) {
        return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6, a7);
      }
      function _emscripten_asm_const_iiididi(code, a0, a1, a2, a3, a4, a5) {
        return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
      }
      function _emscripten_asm_const_iiii(code, a0, a1, a2) {
        return ASM_CONSTS[code](a0, a1, a2);
      }
      function _emscripten_asm_const_iiiid(code, a0, a1, a2, a3) {
        return ASM_CONSTS[code](a0, a1, a2, a3);
      }
      function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
        return ASM_CONSTS[code](a0, a1, a2, a3, a4);
      }
      STATIC_BASE = Runtime.GLOBAL_BASE;
      STATICTOP = STATIC_BASE + 12800;
      __ATINIT__.push({ func: function() {
        __GLOBAL__sub_I_Yoga_cpp();
      } }, { func: function() {
        __GLOBAL__sub_I_nbind_cc();
      } }, { func: function() {
        __GLOBAL__sub_I_common_cc();
      } }, { func: function() {
        __GLOBAL__sub_I_Binding_cc();
      } });
      allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 192, 127, 0, 0, 192, 127, 0, 0, 192, 127, 3, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 3, 0, 0, 0, 0, 0, 192, 127, 3, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 190, 12, 0, 0, 200, 12, 0, 0, 208, 12, 0, 0, 216, 12, 0, 0, 230, 12, 0, 0, 242, 12, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 192, 127, 3, 0, 0, 0, 180, 45, 0, 0, 181, 45, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 182, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 183, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 184, 45, 0, 0, 185, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 182, 45, 0, 0, 186, 45, 0, 0, 185, 45, 0, 0, 148, 4, 0, 0, 3, 0, 0, 0, 187, 45, 0, 0, 164, 4, 0, 0, 188, 45, 0, 0, 2, 0, 0, 0, 189, 45, 0, 0, 164, 4, 0, 0, 188, 45, 0, 0, 185, 45, 0, 0, 164, 4, 0, 0, 185, 45, 0, 0, 164, 4, 0, 0, 188, 45, 0, 0, 181, 45, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 183, 45, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 190, 45, 0, 0, 190, 45, 0, 0, 182, 45, 0, 0, 182, 45, 0, 0, 185, 45, 0, 0, 181, 45, 0, 0, 185, 45, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 185, 45, 0, 0, 182, 45, 0, 0, 185, 45, 0, 0, 48, 5, 0, 0, 3, 0, 0, 0, 56, 5, 0, 0, 1, 0, 0, 0, 189, 45, 0, 0, 185, 45, 0, 0, 164, 4, 0, 0, 76, 5, 0, 0, 2, 0, 0, 0, 191, 45, 0, 0, 186, 45, 0, 0, 182, 45, 0, 0, 185, 45, 0, 0, 192, 45, 0, 0, 185, 45, 0, 0, 182, 45, 0, 0, 186, 45, 0, 0, 185, 45, 0, 0, 76, 5, 0, 0, 76, 5, 0, 0, 136, 5, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 2, 0, 0, 0, 190, 45, 0, 0, 136, 5, 0, 0, 56, 19, 0, 0, 156, 5, 0, 0, 2, 0, 0, 0, 184, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 204, 5, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 2, 0, 0, 0, 180, 45, 0, 0, 204, 5, 0, 0, 2, 0, 0, 0, 195, 45, 0, 0, 236, 5, 0, 0, 97, 19, 0, 0, 198, 45, 0, 0, 211, 45, 0, 0, 212, 45, 0, 0, 213, 45, 0, 0, 214, 45, 0, 0, 215, 45, 0, 0, 188, 45, 0, 0, 182, 45, 0, 0, 216, 45, 0, 0, 217, 45, 0, 0, 218, 45, 0, 0, 219, 45, 0, 0, 192, 45, 0, 0, 181, 45, 0, 0, 0, 0, 0, 0, 185, 45, 0, 0, 110, 19, 0, 0, 186, 45, 0, 0, 115, 19, 0, 0, 221, 45, 0, 0, 120, 19, 0, 0, 148, 4, 0, 0, 132, 19, 0, 0, 96, 6, 0, 0, 145, 19, 0, 0, 222, 45, 0, 0, 164, 19, 0, 0, 223, 45, 0, 0, 173, 19, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 104, 6, 0, 0, 1, 0, 0, 0, 187, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 13, 0, 0, 0, 185, 45, 0, 0, 224, 45, 0, 0, 164, 6, 0, 0, 188, 45, 0, 0, 172, 6, 0, 0, 180, 6, 0, 0, 2, 0, 0, 0, 188, 6, 0, 0, 7, 0, 0, 0, 224, 45, 0, 0, 7, 0, 0, 0, 164, 6, 0, 0, 1, 0, 0, 0, 213, 45, 0, 0, 185, 45, 0, 0, 224, 45, 0, 0, 172, 6, 0, 0, 185, 45, 0, 0, 224, 45, 0, 0, 164, 6, 0, 0, 185, 45, 0, 0, 224, 45, 0, 0, 211, 45, 0, 0, 211, 45, 0, 0, 222, 45, 0, 0, 211, 45, 0, 0, 224, 45, 0, 0, 222, 45, 0, 0, 211, 45, 0, 0, 224, 45, 0, 0, 172, 6, 0, 0, 222, 45, 0, 0, 211, 45, 0, 0, 224, 45, 0, 0, 188, 45, 0, 0, 222, 45, 0, 0, 211, 45, 0, 0, 40, 7, 0, 0, 188, 45, 0, 0, 2, 0, 0, 0, 224, 45, 0, 0, 185, 45, 0, 0, 188, 45, 0, 0, 188, 45, 0, 0, 188, 45, 0, 0, 188, 45, 0, 0, 222, 45, 0, 0, 224, 45, 0, 0, 148, 4, 0, 0, 185, 45, 0, 0, 148, 4, 0, 0, 148, 4, 0, 0, 148, 4, 0, 0, 148, 4, 0, 0, 148, 4, 0, 0, 185, 45, 0, 0, 164, 6, 0, 0, 148, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 148, 7, 0, 0, 2, 0, 0, 0, 225, 45, 0, 0, 183, 45, 0, 0, 188, 45, 0, 0, 168, 7, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 234, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 9, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 242, 45, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 110, 111, 100, 101, 0, 67, 97, 110, 110, 111, 116, 32, 114, 101, 115, 101, 116, 32, 97, 32, 110, 111, 100, 101, 32, 119, 104, 105, 99, 104, 32, 115, 116, 105, 108, 108, 32, 104, 97, 115, 32, 99, 104, 105, 108, 100, 114, 101, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 0, 67, 97, 110, 110, 111, 116, 32, 114, 101, 115, 101, 116, 32, 97, 32, 110, 111, 100, 101, 32, 115, 116, 105, 108, 108, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 116, 111, 32, 97, 32, 112, 97, 114, 101, 110, 116, 0, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 99, 111, 110, 102, 105, 103, 0, 67, 97, 110, 110, 111, 116, 32, 115, 101, 116, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 58, 32, 78, 111, 100, 101, 115, 32, 119, 105, 116, 104, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 99, 97, 110, 110, 111, 116, 32, 104, 97, 118, 101, 32, 99, 104, 105, 108, 100, 114, 101, 110, 46, 0, 67, 104, 105, 108, 100, 32, 97, 108, 114, 101, 97, 100, 121, 32, 104, 97, 115, 32, 97, 32, 112, 97, 114, 101, 110, 116, 44, 32, 105, 116, 32, 109, 117, 115, 116, 32, 98, 101, 32, 114, 101, 109, 111, 118, 101, 100, 32, 102, 105, 114, 115, 116, 46, 0, 67, 97, 110, 110, 111, 116, 32, 97, 100, 100, 32, 99, 104, 105, 108, 100, 58, 32, 78, 111, 100, 101, 115, 32, 119, 105, 116, 104, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 99, 97, 110, 110, 111, 116, 32, 104, 97, 118, 101, 32, 99, 104, 105, 108, 100, 114, 101, 110, 46, 0, 79, 110, 108, 121, 32, 108, 101, 97, 102, 32, 110, 111, 100, 101, 115, 32, 119, 105, 116, 104, 32, 99, 117, 115, 116, 111, 109, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 115, 104, 111, 117, 108, 100, 32, 109, 97, 110, 117, 97, 108, 108, 121, 32, 109, 97, 114, 107, 32, 116, 104, 101, 109, 115, 101, 108, 118, 101, 115, 32, 97, 115, 32, 100, 105, 114, 116, 121, 0, 67, 97, 110, 110, 111, 116, 32, 103, 101, 116, 32, 108, 97, 121, 111, 117, 116, 32, 112, 114, 111, 112, 101, 114, 116, 105, 101, 115, 32, 111, 102, 32, 109, 117, 108, 116, 105, 45, 101, 100, 103, 101, 32, 115, 104, 111, 114, 116, 104, 97, 110, 100, 115, 0, 37, 115, 37, 100, 46, 123, 91, 115, 107, 105, 112, 112, 101, 100, 93, 32, 0, 119, 109, 58, 32, 37, 115, 44, 32, 104, 109, 58, 32, 37, 115, 44, 32, 97, 119, 58, 32, 37, 102, 32, 97, 104, 58, 32, 37, 102, 32, 61, 62, 32, 100, 58, 32, 40, 37, 102, 44, 32, 37, 102, 41, 32, 37, 115, 10, 0, 37, 115, 37, 100, 46, 123, 37, 115, 0, 42, 0, 119, 109, 58, 32, 37, 115, 44, 32, 104, 109, 58, 32, 37, 115, 44, 32, 97, 119, 58, 32, 37, 102, 32, 97, 104, 58, 32, 37, 102, 32, 37, 115, 10, 0, 37, 115, 37, 100, 46, 125, 37, 115, 0, 119, 109, 58, 32, 37, 115, 44, 32, 104, 109, 58, 32, 37, 115, 44, 32, 100, 58, 32, 40, 37, 102, 44, 32, 37, 102, 41, 32, 37, 115, 10, 0, 79, 117, 116, 32, 111, 102, 32, 99, 97, 99, 104, 101, 32, 101, 110, 116, 114, 105, 101, 115, 33, 10, 0, 83, 99, 97, 108, 101, 32, 102, 97, 99, 116, 111, 114, 32, 115, 104, 111, 117, 108, 100, 32, 110, 111, 116, 32, 98, 101, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 32, 122, 101, 114, 111, 0, 105, 110, 105, 116, 105, 97, 108, 0, 37, 115, 10, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 85, 78, 68, 69, 70, 73, 78, 69, 68, 0, 69, 88, 65, 67, 84, 76, 89, 0, 65, 84, 95, 77, 79, 83, 84, 0, 76, 65, 89, 95, 85, 78, 68, 69, 70, 73, 78, 69, 68, 0, 76, 65, 89, 95, 69, 88, 65, 67, 84, 76, 89, 0, 76, 65, 89, 95, 65, 84, 95, 77, 79, 83, 84, 0, 97, 118, 97, 105, 108, 97, 98, 108, 101, 87, 105, 100, 116, 104, 32, 105, 115, 32, 105, 110, 100, 101, 102, 105, 110, 105, 116, 101, 32, 115, 111, 32, 119, 105, 100, 116, 104, 77, 101, 97, 115, 117, 114, 101, 77, 111, 100, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 89, 71, 77, 101, 97, 115, 117, 114, 101, 77, 111, 100, 101, 85, 110, 100, 101, 102, 105, 110, 101, 100, 0, 97, 118, 97, 105, 108, 97, 98, 108, 101, 72, 101, 105, 103, 104, 116, 32, 105, 115, 32, 105, 110, 100, 101, 102, 105, 110, 105, 116, 101, 32, 115, 111, 32, 104, 101, 105, 103, 104, 116, 77, 101, 97, 115, 117, 114, 101, 77, 111, 100, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 89, 71, 77, 101, 97, 115, 117, 114, 101, 77, 111, 100, 101, 85, 110, 100, 101, 102, 105, 110, 101, 100, 0, 102, 108, 101, 120, 0, 115, 116, 114, 101, 116, 99, 104, 0, 109, 117, 108, 116, 105, 108, 105, 110, 101, 45, 115, 116, 114, 101, 116, 99, 104, 0, 69, 120, 112, 101, 99, 116, 101, 100, 32, 110, 111, 100, 101, 32, 116, 111, 32, 104, 97, 118, 101, 32, 99, 117, 115, 116, 111, 109, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 0, 109, 101, 97, 115, 117, 114, 101, 0, 69, 120, 112, 101, 99, 116, 32, 99, 117, 115, 116, 111, 109, 32, 98, 97, 115, 101, 108, 105, 110, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 111, 32, 110, 111, 116, 32, 114, 101, 116, 117, 114, 110, 32, 78, 97, 78, 0, 97, 98, 115, 45, 109, 101, 97, 115, 117, 114, 101, 0, 97, 98, 115, 45, 108, 97, 121, 111, 117, 116, 0, 78, 111, 100, 101, 0, 99, 114, 101, 97, 116, 101, 68, 101, 102, 97, 117, 108, 116, 0, 99, 114, 101, 97, 116, 101, 87, 105, 116, 104, 67, 111, 110, 102, 105, 103, 0, 100, 101, 115, 116, 114, 111, 121, 0, 114, 101, 115, 101, 116, 0, 99, 111, 112, 121, 83, 116, 121, 108, 101, 0, 115, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 84, 121, 112, 101, 0, 115, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 0, 115, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 65, 108, 105, 103, 110, 67, 111, 110, 116, 101, 110, 116, 0, 115, 101, 116, 65, 108, 105, 103, 110, 73, 116, 101, 109, 115, 0, 115, 101, 116, 65, 108, 105, 103, 110, 83, 101, 108, 102, 0, 115, 101, 116, 70, 108, 101, 120, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 115, 101, 116, 70, 108, 101, 120, 87, 114, 97, 112, 0, 115, 101, 116, 74, 117, 115, 116, 105, 102, 121, 67, 111, 110, 116, 101, 110, 116, 0, 115, 101, 116, 77, 97, 114, 103, 105, 110, 0, 115, 101, 116, 77, 97, 114, 103, 105, 110, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 77, 97, 114, 103, 105, 110, 65, 117, 116, 111, 0, 115, 101, 116, 79, 118, 101, 114, 102, 108, 111, 119, 0, 115, 101, 116, 68, 105, 115, 112, 108, 97, 121, 0, 115, 101, 116, 70, 108, 101, 120, 0, 115, 101, 116, 70, 108, 101, 120, 66, 97, 115, 105, 115, 0, 115, 101, 116, 70, 108, 101, 120, 66, 97, 115, 105, 115, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 70, 108, 101, 120, 71, 114, 111, 119, 0, 115, 101, 116, 70, 108, 101, 120, 83, 104, 114, 105, 110, 107, 0, 115, 101, 116, 87, 105, 100, 116, 104, 0, 115, 101, 116, 87, 105, 100, 116, 104, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 87, 105, 100, 116, 104, 65, 117, 116, 111, 0, 115, 101, 116, 72, 101, 105, 103, 104, 116, 0, 115, 101, 116, 72, 101, 105, 103, 104, 116, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 72, 101, 105, 103, 104, 116, 65, 117, 116, 111, 0, 115, 101, 116, 77, 105, 110, 87, 105, 100, 116, 104, 0, 115, 101, 116, 77, 105, 110, 87, 105, 100, 116, 104, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 77, 105, 110, 72, 101, 105, 103, 104, 116, 0, 115, 101, 116, 77, 105, 110, 72, 101, 105, 103, 104, 116, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 77, 97, 120, 87, 105, 100, 116, 104, 0, 115, 101, 116, 77, 97, 120, 87, 105, 100, 116, 104, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 77, 97, 120, 72, 101, 105, 103, 104, 116, 0, 115, 101, 116, 77, 97, 120, 72, 101, 105, 103, 104, 116, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 65, 115, 112, 101, 99, 116, 82, 97, 116, 105, 111, 0, 115, 101, 116, 66, 111, 114, 100, 101, 114, 0, 115, 101, 116, 80, 97, 100, 100, 105, 110, 103, 0, 115, 101, 116, 80, 97, 100, 100, 105, 110, 103, 80, 101, 114, 99, 101, 110, 116, 0, 103, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 84, 121, 112, 101, 0, 103, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 0, 103, 101, 116, 65, 108, 105, 103, 110, 67, 111, 110, 116, 101, 110, 116, 0, 103, 101, 116, 65, 108, 105, 103, 110, 73, 116, 101, 109, 115, 0, 103, 101, 116, 65, 108, 105, 103, 110, 83, 101, 108, 102, 0, 103, 101, 116, 70, 108, 101, 120, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 103, 101, 116, 70, 108, 101, 120, 87, 114, 97, 112, 0, 103, 101, 116, 74, 117, 115, 116, 105, 102, 121, 67, 111, 110, 116, 101, 110, 116, 0, 103, 101, 116, 77, 97, 114, 103, 105, 110, 0, 103, 101, 116, 70, 108, 101, 120, 66, 97, 115, 105, 115, 0, 103, 101, 116, 70, 108, 101, 120, 71, 114, 111, 119, 0, 103, 101, 116, 70, 108, 101, 120, 83, 104, 114, 105, 110, 107, 0, 103, 101, 116, 87, 105, 100, 116, 104, 0, 103, 101, 116, 72, 101, 105, 103, 104, 116, 0, 103, 101, 116, 77, 105, 110, 87, 105, 100, 116, 104, 0, 103, 101, 116, 77, 105, 110, 72, 101, 105, 103, 104, 116, 0, 103, 101, 116, 77, 97, 120, 87, 105, 100, 116, 104, 0, 103, 101, 116, 77, 97, 120, 72, 101, 105, 103, 104, 116, 0, 103, 101, 116, 65, 115, 112, 101, 99, 116, 82, 97, 116, 105, 111, 0, 103, 101, 116, 66, 111, 114, 100, 101, 114, 0, 103, 101, 116, 79, 118, 101, 114, 102, 108, 111, 119, 0, 103, 101, 116, 68, 105, 115, 112, 108, 97, 121, 0, 103, 101, 116, 80, 97, 100, 100, 105, 110, 103, 0, 105, 110, 115, 101, 114, 116, 67, 104, 105, 108, 100, 0, 114, 101, 109, 111, 118, 101, 67, 104, 105, 108, 100, 0, 103, 101, 116, 67, 104, 105, 108, 100, 67, 111, 117, 110, 116, 0, 103, 101, 116, 80, 97, 114, 101, 110, 116, 0, 103, 101, 116, 67, 104, 105, 108, 100, 0, 115, 101, 116, 77, 101, 97, 115, 117, 114, 101, 70, 117, 110, 99, 0, 117, 110, 115, 101, 116, 77, 101, 97, 115, 117, 114, 101, 70, 117, 110, 99, 0, 109, 97, 114, 107, 68, 105, 114, 116, 121, 0, 105, 115, 68, 105, 114, 116, 121, 0, 99, 97, 108, 99, 117, 108, 97, 116, 101, 76, 97, 121, 111, 117, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 76, 101, 102, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 82, 105, 103, 104, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 84, 111, 112, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 66, 111, 116, 116, 111, 109, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 87, 105, 100, 116, 104, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 72, 101, 105, 103, 104, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 76, 97, 121, 111, 117, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 77, 97, 114, 103, 105, 110, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 66, 111, 114, 100, 101, 114, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 80, 97, 100, 100, 105, 110, 103, 0, 67, 111, 110, 102, 105, 103, 0, 99, 114, 101, 97, 116, 101, 0, 115, 101, 116, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 97, 108, 70, 101, 97, 116, 117, 114, 101, 69, 110, 97, 98, 108, 101, 100, 0, 115, 101, 116, 80, 111, 105, 110, 116, 83, 99, 97, 108, 101, 70, 97, 99, 116, 111, 114, 0, 105, 115, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 97, 108, 70, 101, 97, 116, 117, 114, 101, 69, 110, 97, 98, 108, 101, 100, 0, 86, 97, 108, 117, 101, 0, 76, 97, 121, 111, 117, 116, 0, 83, 105, 122, 101, 0, 103, 101, 116, 73, 110, 115, 116, 97, 110, 99, 101, 67, 111, 117, 110, 116, 0, 73, 110, 116, 54, 52, 0, 1, 1, 1, 2, 2, 4, 4, 4, 4, 8, 8, 4, 8, 118, 111, 105, 100, 0, 98, 111, 111, 108, 0, 115, 116, 100, 58, 58, 115, 116, 114, 105, 110, 103, 0, 99, 98, 70, 117, 110, 99, 116, 105, 111, 110, 32, 38, 0, 99, 111, 110, 115, 116, 32, 99, 98, 70, 117, 110, 99, 116, 105, 111, 110, 32, 38, 0, 69, 120, 116, 101, 114, 110, 97, 108, 0, 66, 117, 102, 102, 101, 114, 0, 78, 66, 105, 110, 100, 73, 68, 0, 78, 66, 105, 110, 100, 0, 98, 105, 110, 100, 95, 118, 97, 108, 117, 101, 0, 114, 101, 102, 108, 101, 99, 116, 0, 113, 117, 101, 114, 121, 84, 121, 112, 101, 0, 108, 97, 108, 108, 111, 99, 0, 108, 114, 101, 115, 101, 116, 0, 123, 114, 101, 116, 117, 114, 110, 40, 95, 110, 98, 105, 110, 100, 46, 99, 97, 108, 108, 98, 97, 99, 107, 83, 105, 103, 110, 97, 116, 117, 114, 101, 76, 105, 115, 116, 91, 36, 48, 93, 46, 97, 112, 112, 108, 121, 40, 116, 104, 105, 115, 44, 97, 114, 103, 117, 109, 101, 110, 116, 115, 41, 41, 59, 125, 0, 95, 110, 98, 105, 110, 100, 95, 110, 101, 119, 0, 17, 0, 10, 0, 17, 17, 17, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 15, 10, 17, 17, 17, 3, 10, 7, 0, 1, 19, 9, 11, 11, 0, 0, 9, 6, 11, 0, 0, 11, 0, 6, 17, 0, 0, 0, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 10, 10, 17, 17, 17, 0, 10, 0, 0, 2, 0, 9, 11, 0, 0, 0, 9, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 13, 0, 0, 0, 0, 9, 14, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 15, 0, 0, 0, 0, 9, 16, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10, 0, 0, 0, 0, 9, 11, 0, 0, 0, 0, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 45, 43, 32, 32, 32, 48, 88, 48, 120, 0, 40, 110, 117, 108, 108, 41, 0, 45, 48, 88, 43, 48, 88, 32, 48, 88, 45, 48, 120, 43, 48, 120, 32, 48, 120, 0, 105, 110, 102, 0, 73, 78, 70, 0, 110, 97, 110, 0, 78, 65, 78, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 46, 0, 84, 33, 34, 25, 13, 1, 2, 3, 17, 75, 28, 12, 16, 4, 11, 29, 18, 30, 39, 104, 110, 111, 112, 113, 98, 32, 5, 6, 15, 19, 20, 21, 26, 8, 22, 7, 40, 36, 23, 24, 9, 10, 14, 27, 31, 37, 35, 131, 130, 125, 38, 42, 43, 60, 61, 62, 63, 67, 71, 74, 77, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 114, 115, 116, 121, 122, 123, 124, 0, 73, 108, 108, 101, 103, 97, 108, 32, 98, 121, 116, 101, 32, 115, 101, 113, 117, 101, 110, 99, 101, 0, 68, 111, 109, 97, 105, 110, 32, 101, 114, 114, 111, 114, 0, 82, 101, 115, 117, 108, 116, 32, 110, 111, 116, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 98, 108, 101, 0, 78, 111, 116, 32, 97, 32, 116, 116, 121, 0, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 100, 101, 110, 105, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 110, 111, 116, 32, 112, 101, 114, 109, 105, 116, 116, 101, 100, 0, 78, 111, 32, 115, 117, 99, 104, 32, 102, 105, 108, 101, 32, 111, 114, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 78, 111, 32, 115, 117, 99, 104, 32, 112, 114, 111, 99, 101, 115, 115, 0, 70, 105, 108, 101, 32, 101, 120, 105, 115, 116, 115, 0, 86, 97, 108, 117, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 32, 102, 111, 114, 32, 100, 97, 116, 97, 32, 116, 121, 112, 101, 0, 78, 111, 32, 115, 112, 97, 99, 101, 32, 108, 101, 102, 116, 32, 111, 110, 32, 100, 101, 118, 105, 99, 101, 0, 79, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 98, 117, 115, 121, 0, 73, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 32, 115, 121, 115, 116, 101, 109, 32, 99, 97, 108, 108, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 116, 101, 109, 112, 111, 114, 97, 114, 105, 108, 121, 32, 117, 110, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 73, 110, 118, 97, 108, 105, 100, 32, 115, 101, 101, 107, 0, 67, 114, 111, 115, 115, 45, 100, 101, 118, 105, 99, 101, 32, 108, 105, 110, 107, 0, 82, 101, 97, 100, 45, 111, 110, 108, 121, 32, 102, 105, 108, 101, 32, 115, 121, 115, 116, 101, 109, 0, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 110, 111, 116, 32, 101, 109, 112, 116, 121, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 32, 98, 121, 32, 112, 101, 101, 114, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 116, 105, 109, 101, 100, 32, 111, 117, 116, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 102, 117, 115, 101, 100, 0, 72, 111, 115, 116, 32, 105, 115, 32, 100, 111, 119, 110, 0, 72, 111, 115, 116, 32, 105, 115, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 65, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 117, 115, 101, 0, 66, 114, 111, 107, 101, 110, 32, 112, 105, 112, 101, 0, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 32, 111, 114, 32, 97, 100, 100, 114, 101, 115, 115, 0, 66, 108, 111, 99, 107, 32, 100, 101, 118, 105, 99, 101, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 0, 78, 111, 116, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 73, 115, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 84, 101, 120, 116, 32, 102, 105, 108, 101, 32, 98, 117, 115, 121, 0, 69, 120, 101, 99, 32, 102, 111, 114, 109, 97, 116, 32, 101, 114, 114, 111, 114, 0, 73, 110, 118, 97, 108, 105, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 0, 65, 114, 103, 117, 109, 101, 110, 116, 32, 108, 105, 115, 116, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 83, 121, 109, 98, 111, 108, 105, 99, 32, 108, 105, 110, 107, 32, 108, 111, 111, 112, 0, 70, 105, 108, 101, 110, 97, 109, 101, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 111, 112, 101, 110, 32, 102, 105, 108, 101, 115, 32, 105, 110, 32, 115, 121, 115, 116, 101, 109, 0, 78, 111, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 66, 97, 100, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 0, 78, 111, 32, 99, 104, 105, 108, 100, 32, 112, 114, 111, 99, 101, 115, 115, 0, 66, 97, 100, 32, 97, 100, 100, 114, 101, 115, 115, 0, 70, 105, 108, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 108, 105, 110, 107, 115, 0, 78, 111, 32, 108, 111, 99, 107, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 100, 101, 97, 100, 108, 111, 99, 107, 32, 119, 111, 117, 108, 100, 32, 111, 99, 99, 117, 114, 0, 83, 116, 97, 116, 101, 32, 110, 111, 116, 32, 114, 101, 99, 111, 118, 101, 114, 97, 98, 108, 101, 0, 80, 114, 101, 118, 105, 111, 117, 115, 32, 111, 119, 110, 101, 114, 32, 100, 105, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 99, 97, 110, 99, 101, 108, 101, 100, 0, 70, 117, 110, 99, 116, 105, 111, 110, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 0, 78, 111, 32, 109, 101, 115, 115, 97, 103, 101, 32, 111, 102, 32, 100, 101, 115, 105, 114, 101, 100, 32, 116, 121, 112, 101, 0, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 114, 101, 109, 111, 118, 101, 100, 0, 68, 101, 118, 105, 99, 101, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 101, 97, 109, 0, 78, 111, 32, 100, 97, 116, 97, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 68, 101, 118, 105, 99, 101, 32, 116, 105, 109, 101, 111, 117, 116, 0, 79, 117, 116, 32, 111, 102, 32, 115, 116, 114, 101, 97, 109, 115, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 0, 76, 105, 110, 107, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 115, 101, 118, 101, 114, 101, 100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 101, 114, 114, 111, 114, 0, 66, 97, 100, 32, 109, 101, 115, 115, 97, 103, 101, 0, 70, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 32, 105, 110, 32, 98, 97, 100, 32, 115, 116, 97, 116, 101, 0, 78, 111, 116, 32, 97, 32, 115, 111, 99, 107, 101, 116, 0, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 97, 100, 100, 114, 101, 115, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 77, 101, 115, 115, 97, 103, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 119, 114, 111, 110, 103, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 115, 111, 99, 107, 101, 116, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 83, 111, 99, 107, 101, 116, 32, 116, 121, 112, 101, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 78, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 65, 100, 100, 114, 101, 115, 115, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 98, 121, 32, 112, 114, 111, 116, 111, 99, 111, 108, 0, 65, 100, 100, 114, 101, 115, 115, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 78, 101, 116, 119, 111, 114, 107, 32, 105, 115, 32, 100, 111, 119, 110, 0, 78, 101, 116, 119, 111, 114, 107, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 32, 98, 121, 32, 110, 101, 116, 119, 111, 114, 107, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 97, 98, 111, 114, 116, 101, 100, 0, 78, 111, 32, 98, 117, 102, 102, 101, 114, 32, 115, 112, 97, 99, 101, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 83, 111, 99, 107, 101, 116, 32, 105, 115, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 83, 111, 99, 107, 101, 116, 32, 110, 111, 116, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 67, 97, 110, 110, 111, 116, 32, 115, 101, 110, 100, 32, 97, 102, 116, 101, 114, 32, 115, 111, 99, 107, 101, 116, 32, 115, 104, 117, 116, 100, 111, 119, 110, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 97, 108, 114, 101, 97, 100, 121, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 83, 116, 97, 108, 101, 32, 102, 105, 108, 101, 32, 104, 97, 110, 100, 108, 101, 0, 82, 101, 109, 111, 116, 101, 32, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 81, 117, 111, 116, 97, 32, 101, 120, 99, 101, 101, 100, 101, 100, 0, 78, 111, 32, 109, 101, 100, 105, 117, 109, 32, 102, 111, 117, 110, 100, 0, 87, 114, 111, 110, 103, 32, 109, 101, 100, 105, 117, 109, 32, 116, 121, 112, 101, 0, 78, 111, 32, 101, 114, 114, 111, 114, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 0, 0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
      var tempDoublePtr = STATICTOP;
      STATICTOP += 16;
      function _atexit(func2, arg2) {
        __ATEXIT__.unshift({ func: func2, arg: arg2 });
      }
      function ___cxa_atexit() {
        return _atexit.apply(null, arguments);
      }
      function _abort() {
        Module["abort"]();
      }
      function __ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj() {
        Module["printErr"]("missing function: _ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj");
        abort(-1);
      }
      function __decorate(decorators, target, key2, desc) {
        var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key2) : desc, d2;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r2 = Reflect.decorate(decorators, target, key2, desc);
        else
          for (var i3 = decorators.length - 1; i3 >= 0; i3--)
            if (d2 = decorators[i3])
              r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key2, r2) : d2(target, key2)) || r2;
        return c2 > 3 && r2 && Object.defineProperty(target, key2, r2), r2;
      }
      function _defineHidden(value) {
        return function(target, key2) {
          Object.defineProperty(target, key2, { configurable: false, enumerable: false, value, writable: true });
        };
      }
      var _nbind = {};
      function __nbind_free_external(num2) {
        _nbind.externalList[num2].dereference(num2);
      }
      function __nbind_reference_external(num2) {
        _nbind.externalList[num2].reference();
      }
      function _llvm_stackrestore(p2) {
        var self2 = _llvm_stacksave;
        var ret = self2.LLVM_SAVEDSTACKS[p2];
        self2.LLVM_SAVEDSTACKS.splice(p2, 1);
        Runtime.stackRestore(ret);
      }
      function __nbind_register_pool(pageSize, usedPtr, rootPtr, pagePtr) {
        _nbind.Pool.pageSize = pageSize;
        _nbind.Pool.usedPtr = usedPtr / 4;
        _nbind.Pool.rootPtr = rootPtr;
        _nbind.Pool.pagePtr = pagePtr / 4;
        HEAP32[usedPtr / 4] = 16909060;
        if (HEAP8[usedPtr] == 1)
          _nbind.bigEndian = true;
        HEAP32[usedPtr / 4] = 0;
        _nbind.makeTypeKindTbl = (_a2 = {}, _a2[1024] = _nbind.PrimitiveType, _a2[64] = _nbind.Int64Type, _a2[2048] = _nbind.BindClass, _a2[3072] = _nbind.BindClassPtr, _a2[4096] = _nbind.SharedClassPtr, _a2[5120] = _nbind.ArrayType, _a2[6144] = _nbind.ArrayType, _a2[7168] = _nbind.CStringType, _a2[9216] = _nbind.CallbackType, _a2[10240] = _nbind.BindType, _a2);
        _nbind.makeTypeNameTbl = { "Buffer": _nbind.BufferType, "External": _nbind.ExternalType, "Int64": _nbind.Int64Type, "_nbind_new": _nbind.CreateValueType, "bool": _nbind.BooleanType, "cbFunction &": _nbind.CallbackType, "const cbFunction &": _nbind.CallbackType, "const std::string &": _nbind.StringType, "std::string": _nbind.StringType };
        Module["toggleLightGC"] = _nbind.toggleLightGC;
        _nbind.callUpcast = Module["dynCall_ii"];
        var globalScope = _nbind.makeType(_nbind.constructType, { flags: 2048, id: 0, name: "" });
        globalScope.proto = Module;
        _nbind.BindClass.list.push(globalScope);
        var _a2;
      }
      function _emscripten_set_main_loop_timing(mode, value) {
        Browser.mainLoop.timingMode = mode;
        Browser.mainLoop.timingValue = value;
        if (!Browser.mainLoop.func) {
          return 1;
        }
        if (mode == 0) {
          Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
            var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now()) | 0;
            setTimeout(Browser.mainLoop.runner, timeUntilNextTick);
          };
          Browser.mainLoop.method = "timeout";
        } else if (mode == 1) {
          Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
            Browser.requestAnimationFrame(Browser.mainLoop.runner);
          };
          Browser.mainLoop.method = "rAF";
        } else if (mode == 2) {
          if (!window["setImmediate"]) {
            let Browser_setImmediate_messageHandler2 = function(event) {
              if (event.source === window && event.data === emscriptenMainLoopMessageId) {
                event.stopPropagation();
                setImmediates.shift()();
              }
            };
            var Browser_setImmediate_messageHandler = Browser_setImmediate_messageHandler2;
            var setImmediates = [];
            var emscriptenMainLoopMessageId = "setimmediate";
            window.addEventListener("message", Browser_setImmediate_messageHandler2, true);
            window["setImmediate"] = function Browser_emulated_setImmediate(func2) {
              setImmediates.push(func2);
              if (ENVIRONMENT_IS_WORKER) {
                if (Module["setImmediates"] === void 0)
                  Module["setImmediates"] = [];
                Module["setImmediates"].push(func2);
                window.postMessage({ target: emscriptenMainLoopMessageId });
              } else
                window.postMessage(emscriptenMainLoopMessageId, "*");
            };
          }
          Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
            window["setImmediate"](Browser.mainLoop.runner);
          };
          Browser.mainLoop.method = "immediate";
        }
        return 0;
      }
      function _emscripten_get_now() {
        abort();
      }
      function _emscripten_set_main_loop(func2, fps, simulateInfiniteLoop, arg2, noSetTiming) {
        Module["noExitRuntime"] = true;
        assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
        Browser.mainLoop.func = func2;
        Browser.mainLoop.arg = arg2;
        var browserIterationFunc;
        if (typeof arg2 !== "undefined") {
          browserIterationFunc = function() {
            Module["dynCall_vi"](func2, arg2);
          };
        } else {
          browserIterationFunc = function() {
            Module["dynCall_v"](func2);
          };
        }
        var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
        Browser.mainLoop.runner = function Browser_mainLoop_runner() {
          if (ABORT)
            return;
          if (Browser.mainLoop.queue.length > 0) {
            var start = Date.now();
            var blocker = Browser.mainLoop.queue.shift();
            blocker.func(blocker.arg);
            if (Browser.mainLoop.remainingBlockers) {
              var remaining = Browser.mainLoop.remainingBlockers;
              var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
              if (blocker.counted) {
                Browser.mainLoop.remainingBlockers = next;
              } else {
                next = next + 0.5;
                Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
              }
            }
            console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
            Browser.mainLoop.updateStatus();
            if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop)
              return;
            setTimeout(Browser.mainLoop.runner, 0);
            return;
          }
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop)
            return;
          Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
          if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
            Browser.mainLoop.scheduler();
            return;
          } else if (Browser.mainLoop.timingMode == 0) {
            Browser.mainLoop.tickStartTime = _emscripten_get_now();
          }
          if (Browser.mainLoop.method === "timeout" && Module.ctx) {
            Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
            Browser.mainLoop.method = "";
          }
          Browser.mainLoop.runIter(browserIterationFunc);
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop)
            return;
          if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData)
            SDL.audio.queueNewAudioData();
          Browser.mainLoop.scheduler();
        };
        if (!noSetTiming) {
          if (fps && fps > 0)
            _emscripten_set_main_loop_timing(0, 1e3 / fps);
          else
            _emscripten_set_main_loop_timing(1, 1);
          Browser.mainLoop.scheduler();
        }
        if (simulateInfiniteLoop) {
          throw "SimulateInfiniteLoop";
        }
      }
      var Browser = { mainLoop: { scheduler: null, method: "", currentlyRunningMainloop: 0, func: null, arg: 0, timingMode: 0, timingValue: 0, currentFrameNumber: 0, queue: [], pause: function() {
        Browser.mainLoop.scheduler = null;
        Browser.mainLoop.currentlyRunningMainloop++;
      }, resume: function() {
        Browser.mainLoop.currentlyRunningMainloop++;
        var timingMode = Browser.mainLoop.timingMode;
        var timingValue = Browser.mainLoop.timingValue;
        var func2 = Browser.mainLoop.func;
        Browser.mainLoop.func = null;
        _emscripten_set_main_loop(func2, 0, false, Browser.mainLoop.arg, true);
        _emscripten_set_main_loop_timing(timingMode, timingValue);
        Browser.mainLoop.scheduler();
      }, updateStatus: function() {
        if (Module["setStatus"]) {
          var message = Module["statusMessage"] || "Please wait...";
          var remaining = Browser.mainLoop.remainingBlockers;
          var expected = Browser.mainLoop.expectedBlockers;
          if (remaining) {
            if (remaining < expected) {
              Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
            } else {
              Module["setStatus"](message);
            }
          } else {
            Module["setStatus"]("");
          }
        }
      }, runIter: function(func2) {
        if (ABORT)
          return;
        if (Module["preMainLoop"]) {
          var preRet = Module["preMainLoop"]();
          if (preRet === false) {
            return;
          }
        }
        try {
          func2();
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else {
            if (e && typeof e === "object" && e.stack)
              Module.printErr("exception thrown: " + [e, e.stack]);
            throw e;
          }
        }
        if (Module["postMainLoop"])
          Module["postMainLoop"]();
      } }, isFullscreen: false, pointerLock: false, moduleContextCreatedCallbacks: [], workers: [], init: function() {
        if (!Module["preloadPlugins"])
          Module["preloadPlugins"] = [];
        if (Browser.initted)
          return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch (e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
        Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : void 0;
        if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        var imagePlugin = {};
        imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b2 = null;
          if (Browser.hasBlobConstructor) {
            try {
              b2 = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b2.size !== byteArray.length) {
                b2 = new Blob([new Uint8Array(byteArray).buffer], { type: Browser.getMimetype(name) });
              }
            } catch (e) {
              Runtime.warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
            }
          }
          if (!b2) {
            var bb = new Browser.BlobBuilder();
            bb.append(new Uint8Array(byteArray).buffer);
            b2 = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b2);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, "Image " + name + " could not be decoded");
            var canvas2 = document.createElement("canvas");
            canvas2.width = img.width;
            canvas2.height = img.height;
            var ctx = canvas2.getContext("2d");
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas2;
            Browser.URLObject.revokeObjectURL(url);
            if (onload)
              onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log("Image " + url + " could not be decoded");
            if (onerror)
              onerror();
          };
          img.src = url;
        };
        Module["preloadPlugins"].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { ".ogg": 1, ".wav": 1, ".mp3": 1 };
        };
        audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio2) {
            if (done)
              return;
            done = true;
            Module["preloadedAudios"][name] = audio2;
            if (onload)
              onload(byteArray);
          }
          function fail() {
            if (done)
              return;
            done = true;
            Module["preloadedAudios"][name] = new Audio();
            if (onerror)
              onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b2 = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch (e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b2);
            var audio = new Audio();
            audio.addEventListener("canplaythrough", function() {
              finish(audio);
            }, false);
            audio.onerror = function audio_onerror(event) {
              if (done)
                return;
              console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
              function encode64(data) {
                var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                var PAD = "=";
                var ret = "";
                var leftchar = 0;
                var leftbits = 0;
                for (var i3 = 0; i3 < data.length; i3++) {
                  leftchar = leftchar << 8 | data[i3];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = leftchar >> leftbits - 6 & 63;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar & 3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar & 15) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
              finish(audio);
            };
            audio.src = url;
            Browser.safeSetTimeout(function() {
              finish(audio);
            }, 1e4);
          } else {
            return fail();
          }
        };
        Module["preloadPlugins"].push(audioPlugin);
        function pointerLockChange() {
          Browser.pointerLock = document["pointerLockElement"] === Module["canvas"] || document["mozPointerLockElement"] === Module["canvas"] || document["webkitPointerLockElement"] === Module["canvas"] || document["msPointerLockElement"] === Module["canvas"];
        }
        var canvas = Module["canvas"];
        if (canvas) {
          canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || function() {
          };
          canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || function() {
          };
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
          document.addEventListener("pointerlockchange", pointerLockChange, false);
          document.addEventListener("mozpointerlockchange", pointerLockChange, false);
          document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
          document.addEventListener("mspointerlockchange", pointerLockChange, false);
          if (Module["elementPointerLock"]) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
                Module["canvas"].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      }, createContext: function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas)
          return Module.ctx;
        var ctx;
        var contextHandle;
        if (useWebGL) {
          var contextAttributes = { antialias: false, alpha: false };
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext("2d");
        }
        if (!ctx)
          return null;
        if (setInModule) {
          if (!useWebGL)
            assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
          Module.ctx = ctx;
          if (useWebGL)
            GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) {
            callback();
          });
          Browser.init();
        }
        return ctx;
      }, destroyContext: function(canvas, useWebGL, setInModule) {
      }, fullscreenHandlersInstalled: false, lockPointer: void 0, resizeCanvas: void 0, requestFullscreen: function(lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === "undefined")
          Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === "undefined")
          Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === "undefined")
          Browser.vrDevice = null;
        var canvas = Module["canvas"];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer2 = canvas.parentNode;
          if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer2) {
            canvas.exitFullscreen = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"] || document["webkitCancelFullScreen"] || function() {
            };
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer)
              canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas)
              Browser.setFullscreenCanvasSize();
          } else {
            canvasContainer2.parentNode.insertBefore(canvas, canvasContainer2);
            canvasContainer2.parentNode.removeChild(canvasContainer2);
            if (Browser.resizeCanvas)
              Browser.setWindowedCanvasSize();
          }
          if (Module["onFullScreen"])
            Module["onFullScreen"](Browser.isFullscreen);
          if (Module["onFullscreen"])
            Module["onFullscreen"](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener("fullscreenchange", fullscreenChange, false);
          document.addEventListener("mozfullscreenchange", fullscreenChange, false);
          document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
          document.addEventListener("MSFullscreenChange", fullscreenChange, false);
        }
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? function() {
          canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]);
        } : null) || (canvasContainer["webkitRequestFullScreen"] ? function() {
          canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
        } : null);
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      }, requestFullScreen: function(lockPointer, resizeCanvas, vrDevice) {
        Module.printErr("Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.");
        Browser.requestFullScreen = function(lockPointer2, resizeCanvas2, vrDevice2) {
          return Browser.requestFullscreen(lockPointer2, resizeCanvas2, vrDevice2);
        };
        return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      }, nextRAF: 0, fakeRequestAnimationFrame: function(func2) {
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1e3 / 60;
        } else {
          while (now + 2 >= Browser.nextRAF) {
            Browser.nextRAF += 1e3 / 60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func2, delay);
      }, requestAnimationFrame: function requestAnimationFrame2(func2) {
        if (typeof window === "undefined") {
          Browser.fakeRequestAnimationFrame(func2);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func2);
        }
      }, safeCallback: function(func2) {
        return function() {
          if (!ABORT)
            return func2.apply(null, arguments);
        };
      }, allowAsyncCallbacks: true, queuedAsyncCallbacks: [], pauseAsyncCallbacks: function() {
        Browser.allowAsyncCallbacks = false;
      }, resumeAsyncCallbacks: function() {
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func2) {
            func2();
          });
        }
      }, safeRequestAnimationFrame: function(func2) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT)
            return;
          if (Browser.allowAsyncCallbacks) {
            func2();
          } else {
            Browser.queuedAsyncCallbacks.push(func2);
          }
        });
      }, safeSetTimeout: function(func2, timeout) {
        Module["noExitRuntime"] = true;
        return setTimeout(function() {
          if (ABORT)
            return;
          if (Browser.allowAsyncCallbacks) {
            func2();
          } else {
            Browser.queuedAsyncCallbacks.push(func2);
          }
        }, timeout);
      }, safeSetInterval: function(func2, timeout) {
        Module["noExitRuntime"] = true;
        return setInterval(function() {
          if (ABORT)
            return;
          if (Browser.allowAsyncCallbacks) {
            func2();
          }
        }, timeout);
      }, getMimetype: function(name) {
        return { "jpg": "image/jpeg", "jpeg": "image/jpeg", "png": "image/png", "bmp": "image/bmp", "ogg": "audio/ogg", "wav": "audio/wav", "mp3": "audio/mpeg" }[name.substr(name.lastIndexOf(".") + 1)];
      }, getUserMedia: function(func2) {
        if (!window.getUserMedia) {
          window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
        }
        window.getUserMedia(func2);
      }, getMovementX: function(event) {
        return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
      }, getMovementY: function(event) {
        return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
      }, getMouseWheelDelta: function(event) {
        var delta = 0;
        switch (event.type) {
          case "DOMMouseScroll":
            delta = event.detail;
            break;
          case "mousewheel":
            delta = event.wheelDelta;
            break;
          case "wheel":
            delta = event["deltaY"];
            break;
          default:
            throw "unrecognized mouse wheel event: " + event.type;
        }
        return delta;
      }, mouseX: 0, mouseY: 0, mouseMovementX: 0, mouseMovementY: 0, touches: {}, lastTouches: {}, calculateMouseEvent: function(event) {
        if (Browser.pointerLock) {
          if (event.type != "mousemove" && "mozMovementX" in event) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
          var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
          if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
            var touch = event.touch;
            if (touch === void 0) {
              return;
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
            var coords = { x: adjustedX, y: adjustedY };
            if (event.type === "touchstart") {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === "touchend" || event.type === "touchmove") {
              var last = Browser.touches[touch.identifier];
              if (!last)
                last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
          var x2 = event.pageX - (scrollX + rect.left);
          var y2 = event.pageY - (scrollY + rect.top);
          x2 = x2 * (cw / rect.width);
          y2 = y2 * (ch / rect.height);
          Browser.mouseMovementX = x2 - Browser.mouseX;
          Browser.mouseMovementY = y2 - Browser.mouseY;
          Browser.mouseX = x2;
          Browser.mouseY = y2;
        }
      }, asyncLoad: function(url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
        Module["readAsync"](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep)
            removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep)
          addRunDependency(dep);
      }, resizeListeners: [], updateResizeListeners: function() {
        var canvas = Module["canvas"];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      }, setCanvasSize: function(width, height, noUpdates) {
        var canvas = Module["canvas"];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates)
          Browser.updateResizeListeners();
      }, windowedWidth: 0, windowedHeight: 0, setFullscreenCanvasSize: function() {
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
          flags = flags | 8388608;
          HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
        }
        Browser.updateResizeListeners();
      }, setWindowedCanvasSize: function() {
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
          flags = flags & ~8388608;
          HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
        }
        Browser.updateResizeListeners();
      }, updateCanvasDimensions: function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w2 = wNative;
        var h2 = hNative;
        if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
          if (w2 / h2 < Module["forcedAspectRatio"]) {
            w2 = Math.round(h2 * Module["forcedAspectRatio"]);
          } else {
            h2 = Math.round(w2 / Module["forcedAspectRatio"]);
          }
        }
        if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
          var factor = Math.min(screen.width / w2, screen.height / h2);
          w2 = Math.round(w2 * factor);
          h2 = Math.round(h2 * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width != w2)
            canvas.width = w2;
          if (canvas.height != h2)
            canvas.height = h2;
          if (typeof canvas.style != "undefined") {
            canvas.style.removeProperty("width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width != wNative)
            canvas.width = wNative;
          if (canvas.height != hNative)
            canvas.height = hNative;
          if (typeof canvas.style != "undefined") {
            if (w2 != wNative || h2 != hNative) {
              canvas.style.setProperty("width", w2 + "px", "important");
              canvas.style.setProperty("height", h2 + "px", "important");
            } else {
              canvas.style.removeProperty("width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }, wgetRequests: {}, nextWgetRequestHandle: 0, getNextWgetRequestHandle: function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      } };
      var SYSCALLS = { varargs: 0, get: function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
        return ret;
      }, getStr: function() {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      }, get64: function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0)
          assert(high === 0);
        else
          assert(high === -1);
        return low;
      }, getZero: function() {
        assert(SYSCALLS.get() === 0);
      } };
      function ___syscall6(which, varargs) {
        SYSCALLS.varargs = varargs;
        try {
          var stream = SYSCALLS.getStreamFromFD();
          FS.close(stream);
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function ___syscall54(which, varargs) {
        SYSCALLS.varargs = varargs;
        try {
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function _typeModule(self2) {
        var structureList = [[0, 1, "X"], [1, 1, "const X"], [128, 1, "X *"], [256, 1, "X &"], [384, 1, "X &&"], [512, 1, "std::shared_ptr<X>"], [640, 1, "std::unique_ptr<X>"], [5120, 1, "std::vector<X>"], [6144, 2, "std::array<X, Y>"], [9216, -1, "std::function<X (Y)>"]];
        function applyStructure(outerName, outerFlags, innerName, innerFlags, param, flip) {
          if (outerFlags == 1) {
            var ref = innerFlags & 896;
            if (ref == 128 || ref == 256 || ref == 384)
              outerName = "X const";
          }
          var name;
          if (flip) {
            name = innerName.replace("X", outerName).replace("Y", param);
          } else {
            name = outerName.replace("X", innerName).replace("Y", param);
          }
          return name.replace(/([*&]) (?=[*&])/g, "$1");
        }
        function reportProblem(problem, id, kind, structureType, place) {
          throw new Error(problem + " type " + kind.replace("X", id + "?") + (structureType ? " with flag " + structureType : "") + " in " + place);
        }
        function getComplexType(id, constructType2, getType2, queryType2, place, kind, prevStructure, depth) {
          if (kind === void 0) {
            kind = "X";
          }
          if (depth === void 0) {
            depth = 1;
          }
          var result = getType2(id);
          if (result)
            return result;
          var query = queryType2(id);
          var structureType = query.placeholderFlag;
          var structure = structureList[structureType];
          if (prevStructure && structure) {
            kind = applyStructure(prevStructure[2], prevStructure[0], kind, structure[0], "?", true);
          }
          var problem;
          if (structureType == 0)
            problem = "Unbound";
          if (structureType >= 10)
            problem = "Corrupt";
          if (depth > 20)
            problem = "Deeply nested";
          if (problem)
            reportProblem(problem, id, kind, structureType, place || "?");
          var subId = query.paramList[0];
          var subType = getComplexType(subId, constructType2, getType2, queryType2, place, kind, structure, depth + 1);
          var srcSpec;
          var spec = { flags: structure[0], id, name: "", paramList: [subType] };
          var argList2 = [];
          var structureParam = "?";
          switch (query.placeholderFlag) {
            case 1:
              srcSpec = subType.spec;
              break;
            case 2:
              if ((subType.flags & 15360) == 1024 && subType.spec.ptrSize == 1) {
                spec.flags = 7168;
                break;
              }
              ;
            case 3:
            case 6:
            case 5:
              srcSpec = subType.spec;
              if ((subType.flags & 15360) != 2048) {
              }
              break;
            case 8:
              structureParam = "" + query.paramList[1];
              spec.paramList.push(query.paramList[1]);
              break;
            case 9:
              for (var _i = 0, _a2 = query.paramList[1]; _i < _a2.length; _i++) {
                var paramId = _a2[_i];
                var paramType = getComplexType(paramId, constructType2, getType2, queryType2, place, kind, structure, depth + 1);
                argList2.push(paramType.name);
                spec.paramList.push(paramType);
              }
              structureParam = argList2.join(", ");
              break;
            default:
              break;
          }
          spec.name = applyStructure(structure[2], structure[0], subType.name, subType.flags, structureParam);
          if (srcSpec) {
            for (var _b = 0, _c = Object.keys(srcSpec); _b < _c.length; _b++) {
              var key2 = _c[_b];
              spec[key2] = spec[key2] || srcSpec[key2];
            }
            spec.flags |= srcSpec.flags;
          }
          return makeType(constructType2, spec);
        }
        function makeType(constructType2, spec) {
          var flags = spec.flags;
          var refKind = flags & 896;
          var kind = flags & 15360;
          if (!spec.name && kind == 1024) {
            if (spec.ptrSize == 1) {
              spec.name = (flags & 16 ? "" : (flags & 8 ? "un" : "") + "signed ") + "char";
            } else {
              spec.name = (flags & 8 ? "u" : "") + (flags & 32 ? "float" : "int") + (spec.ptrSize * 8 + "_t");
            }
          }
          if (spec.ptrSize == 8 && !(flags & 32))
            kind = 64;
          if (kind == 2048) {
            if (refKind == 512 || refKind == 640) {
              kind = 4096;
            } else if (refKind)
              kind = 3072;
          }
          return constructType2(kind, spec);
        }
        var Type = function() {
          function Type2(spec) {
            this.id = spec.id;
            this.name = spec.name;
            this.flags = spec.flags;
            this.spec = spec;
          }
          Type2.prototype.toString = function() {
            return this.name;
          };
          return Type2;
        }();
        var output = { Type, getComplexType, makeType, structureList };
        self2.output = output;
        return self2.output || output;
      }
      function __nbind_register_type(id, namePtr) {
        var name = _nbind.readAsciiString(namePtr);
        var spec = { flags: 10240, id, name };
        _nbind.makeType(_nbind.constructType, spec);
      }
      function __nbind_register_callback_signature(typeListPtr, typeCount) {
        var typeList = _nbind.readTypeIdList(typeListPtr, typeCount);
        var num2 = _nbind.callbackSignatureList.length;
        _nbind.callbackSignatureList[num2] = _nbind.makeJSCaller(typeList);
        return num2;
      }
      function __extends(Class, Parent) {
        for (var key2 in Parent)
          if (Parent.hasOwnProperty(key2))
            Class[key2] = Parent[key2];
        function Base() {
          this.constructor = Class;
        }
        Base.prototype = Parent.prototype;
        Class.prototype = new Base();
      }
      function __nbind_register_class(idListPtr, policyListPtr, superListPtr, upcastListPtr, superCount, destructorPtr, namePtr) {
        var name = _nbind.readAsciiString(namePtr);
        var policyTbl2 = _nbind.readPolicyList(policyListPtr);
        var idList = HEAPU32.subarray(idListPtr / 4, idListPtr / 4 + 2);
        var spec = { flags: 2048 | (policyTbl2["Value"] ? 2 : 0), id: idList[0], name };
        var bindClass = _nbind.makeType(_nbind.constructType, spec);
        bindClass.ptrType = _nbind.getComplexType(idList[1], _nbind.constructType, _nbind.getType, _nbind.queryType);
        bindClass.destroy = _nbind.makeMethodCaller(bindClass.ptrType, { boundID: spec.id, flags: 0, name: "destroy", num: 0, ptr: destructorPtr, title: bindClass.name + ".free", typeList: ["void", "uint32_t", "uint32_t"] });
        if (superCount) {
          bindClass.superIdList = Array.prototype.slice.call(HEAPU32.subarray(superListPtr / 4, superListPtr / 4 + superCount));
          bindClass.upcastList = Array.prototype.slice.call(HEAPU32.subarray(upcastListPtr / 4, upcastListPtr / 4 + superCount));
        }
        Module[bindClass.name] = bindClass.makeBound(policyTbl2);
        _nbind.BindClass.list.push(bindClass);
      }
      function _removeAccessorPrefix(name) {
        var prefixMatcher = /^[Gg]et_?([A-Z]?([A-Z]?))/;
        return name.replace(prefixMatcher, function(match, initial, second) {
          return second ? initial : initial.toLowerCase();
        });
      }
      function __nbind_register_function(boundID, policyListPtr, typeListPtr, typeCount, ptr2, direct, signatureType, namePtr, num2, flags) {
        var bindClass = _nbind.getType(boundID);
        var policyTbl2 = _nbind.readPolicyList(policyListPtr);
        var typeList = _nbind.readTypeIdList(typeListPtr, typeCount);
        var specList;
        if (signatureType == 5) {
          specList = [{ direct: ptr2, name: "__nbindConstructor", ptr: 0, title: bindClass.name + " constructor", typeList: ["uint32_t"].concat(typeList.slice(1)) }, { direct, name: "__nbindValueConstructor", ptr: 0, title: bindClass.name + " value constructor", typeList: ["void", "uint32_t"].concat(typeList.slice(1)) }];
        } else {
          var name_1 = _nbind.readAsciiString(namePtr);
          var title = (bindClass.name && bindClass.name + ".") + name_1;
          if (signatureType == 3 || signatureType == 4) {
            name_1 = _removeAccessorPrefix(name_1);
          }
          specList = [{ boundID, direct, name: name_1, ptr: ptr2, title, typeList }];
        }
        for (var _i = 0, specList_1 = specList; _i < specList_1.length; _i++) {
          var spec = specList_1[_i];
          spec.signatureType = signatureType;
          spec.policyTbl = policyTbl2;
          spec.num = num2;
          spec.flags = flags;
          bindClass.addMethod(spec);
        }
      }
      function _nbind_value(name, proto) {
        if (!_nbind.typeNameTbl[name])
          _nbind.throwError("Unknown value type " + name);
        Module["NBind"].bind_value(name, proto);
        _defineHidden(_nbind.typeNameTbl[name].proto.prototype.__nbindValueConstructor)(proto.prototype, "__nbindValueConstructor");
      }
      Module["_nbind_value"] = _nbind_value;
      function __nbind_get_value_object(num2, ptr2) {
        var obj = _nbind.popValue(num2);
        if (!obj.fromJS) {
          throw new Error("Object " + obj + " has no fromJS function");
        }
        obj.fromJS(function() {
          obj.__nbindValueConstructor.apply(this, Array.prototype.concat.apply([ptr2], arguments));
        });
      }
      function _emscripten_memcpy_big(dest, src, num2) {
        HEAPU8.set(HEAPU8.subarray(src, src + num2), dest);
        return dest;
      }
      function __nbind_register_primitive(id, size, flags) {
        var spec = { flags: 1024 | flags, id, ptrSize: size };
        _nbind.makeType(_nbind.constructType, spec);
      }
      var cttz_i8 = allocate([8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0], "i8", ALLOC_STATIC);
      function ___setErrNo(value) {
        if (Module["___errno_location"])
          HEAP32[Module["___errno_location"]() >> 2] = value;
        return value;
      }
      function _llvm_stacksave() {
        var self2 = _llvm_stacksave;
        if (!self2.LLVM_SAVEDSTACKS) {
          self2.LLVM_SAVEDSTACKS = [];
        }
        self2.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
        return self2.LLVM_SAVEDSTACKS.length - 1;
      }
      function ___syscall140(which, varargs) {
        SYSCALLS.varargs = varargs;
        try {
          var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
          var offset = offset_low;
          FS.llseek(stream, offset, whence);
          HEAP32[result >> 2] = stream.position;
          if (stream.getdents && offset === 0 && whence === 0)
            stream.getdents = null;
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function ___syscall146(which, varargs) {
        SYSCALLS.varargs = varargs;
        try {
          var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
          var ret = 0;
          if (!___syscall146.buffer) {
            ___syscall146.buffers = [null, [], []];
            ___syscall146.printChar = function(stream2, curr) {
              var buffer2 = ___syscall146.buffers[stream2];
              assert(buffer2);
              if (curr === 0 || curr === 10) {
                (stream2 === 1 ? Module["print"] : Module["printErr"])(UTF8ArrayToString(buffer2, 0));
                buffer2.length = 0;
              } else {
                buffer2.push(curr);
              }
            };
          }
          for (var i3 = 0; i3 < iovcnt; i3++) {
            var ptr2 = HEAP32[iov + i3 * 8 >> 2];
            var len = HEAP32[iov + (i3 * 8 + 4) >> 2];
            for (var j2 = 0; j2 < len; j2++) {
              ___syscall146.printChar(stream, HEAPU8[ptr2 + j2]);
            }
            ret += len;
          }
          return ret;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function __nbind_finish() {
        for (var _i = 0, _a2 = _nbind.BindClass.list; _i < _a2.length; _i++) {
          var bindClass = _a2[_i];
          bindClass.finish();
        }
      }
      var ___dso_handle = STATICTOP;
      STATICTOP += 16;
      (function(_nbind) {
        var typeIdTbl = {};
        _nbind.typeNameTbl = {};
        var Pool = function() {
          function Pool2() {
          }
          Pool2.lalloc = function(size) {
            size = size + 7 & ~7;
            var used = HEAPU32[Pool2.usedPtr];
            if (size > Pool2.pageSize / 2 || size > Pool2.pageSize - used) {
              var NBind = _nbind.typeNameTbl["NBind"].proto;
              return NBind.lalloc(size);
            } else {
              HEAPU32[Pool2.usedPtr] = used + size;
              return Pool2.rootPtr + used;
            }
          };
          Pool2.lreset = function(used, page) {
            var topPage = HEAPU32[Pool2.pagePtr];
            if (topPage) {
              var NBind = _nbind.typeNameTbl["NBind"].proto;
              NBind.lreset(used, page);
            } else {
              HEAPU32[Pool2.usedPtr] = used;
            }
          };
          return Pool2;
        }();
        _nbind.Pool = Pool;
        function constructType(kind, spec) {
          var construct = kind == 10240 ? _nbind.makeTypeNameTbl[spec.name] || _nbind.BindType : _nbind.makeTypeKindTbl[kind];
          var bindType = new construct(spec);
          typeIdTbl[spec.id] = bindType;
          _nbind.typeNameTbl[spec.name] = bindType;
          return bindType;
        }
        _nbind.constructType = constructType;
        function getType(id) {
          return typeIdTbl[id];
        }
        _nbind.getType = getType;
        function queryType(id) {
          var placeholderFlag = HEAPU8[id];
          var paramCount = _nbind.structureList[placeholderFlag][1];
          id /= 4;
          if (paramCount < 0) {
            ++id;
            paramCount = HEAPU32[id] + 1;
          }
          var paramList = Array.prototype.slice.call(HEAPU32.subarray(id + 1, id + 1 + paramCount));
          if (placeholderFlag == 9) {
            paramList = [paramList[0], paramList.slice(1)];
          }
          return { paramList, placeholderFlag };
        }
        _nbind.queryType = queryType;
        function getTypes(idList, place) {
          return idList.map(function(id) {
            return typeof id == "number" ? _nbind.getComplexType(id, constructType, getType, queryType, place) : _nbind.typeNameTbl[id];
          });
        }
        _nbind.getTypes = getTypes;
        function readTypeIdList(typeListPtr, typeCount) {
          return Array.prototype.slice.call(HEAPU32, typeListPtr / 4, typeListPtr / 4 + typeCount);
        }
        _nbind.readTypeIdList = readTypeIdList;
        function readAsciiString(ptr2) {
          var endPtr = ptr2;
          while (HEAPU8[endPtr++])
            ;
          return String.fromCharCode.apply("", HEAPU8.subarray(ptr2, endPtr - 1));
        }
        _nbind.readAsciiString = readAsciiString;
        function readPolicyList(policyListPtr) {
          var policyTbl2 = {};
          if (policyListPtr) {
            while (1) {
              var namePtr = HEAPU32[policyListPtr / 4];
              if (!namePtr)
                break;
              policyTbl2[readAsciiString(namePtr)] = true;
              policyListPtr += 4;
            }
          }
          return policyTbl2;
        }
        _nbind.readPolicyList = readPolicyList;
        function getDynCall(typeList, name) {
          var mangleMap = { float32_t: "d", float64_t: "d", int64_t: "d", uint64_t: "d", "void": "v" };
          var signature = typeList.map(function(type2) {
            return mangleMap[type2.name] || "i";
          }).join("");
          var dynCall2 = Module["dynCall_" + signature];
          if (!dynCall2) {
            throw new Error("dynCall_" + signature + " not found for " + name + "(" + typeList.map(function(type2) {
              return type2.name;
            }).join(", ") + ")");
          }
          return dynCall2;
        }
        _nbind.getDynCall = getDynCall;
        function addMethod(obj, name, func2, arity) {
          var overload = obj[name];
          if (obj.hasOwnProperty(name) && overload) {
            if (overload.arity || overload.arity === 0) {
              overload = _nbind.makeOverloader(overload, overload.arity);
              obj[name] = overload;
            }
            overload.addMethod(func2, arity);
          } else {
            func2.arity = arity;
            obj[name] = func2;
          }
        }
        _nbind.addMethod = addMethod;
        function throwError(message) {
          throw new Error(message);
        }
        _nbind.throwError = throwError;
        _nbind.bigEndian = false;
        _a = _typeModule(_typeModule), _nbind.Type = _a.Type, _nbind.makeType = _a.makeType, _nbind.getComplexType = _a.getComplexType, _nbind.structureList = _a.structureList;
        var BindType = function(_super) {
          __extends(BindType2, _super);
          function BindType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.heap = HEAPU32;
            _this.ptrSize = 4;
            return _this;
          }
          BindType2.prototype.needsWireRead = function(policyTbl2) {
            return !!this.wireRead || !!this.makeWireRead;
          };
          BindType2.prototype.needsWireWrite = function(policyTbl2) {
            return !!this.wireWrite || !!this.makeWireWrite;
          };
          return BindType2;
        }(_nbind.Type);
        _nbind.BindType = BindType;
        var PrimitiveType = function(_super) {
          __extends(PrimitiveType2, _super);
          function PrimitiveType2(spec) {
            var _this = _super.call(this, spec) || this;
            var heapTbl = spec.flags & 32 ? { 32: HEAPF32, 64: HEAPF64 } : spec.flags & 8 ? { 8: HEAPU8, 16: HEAPU16, 32: HEAPU32 } : { 8: HEAP8, 16: HEAP16, 32: HEAP32 };
            _this.heap = heapTbl[spec.ptrSize * 8];
            _this.ptrSize = spec.ptrSize;
            return _this;
          }
          PrimitiveType2.prototype.needsWireWrite = function(policyTbl2) {
            return !!policyTbl2 && !!policyTbl2["Strict"];
          };
          PrimitiveType2.prototype.makeWireWrite = function(expr, policyTbl2) {
            return policyTbl2 && policyTbl2["Strict"] && function(arg2) {
              if (typeof arg2 == "number")
                return arg2;
              throw new Error("Type mismatch");
            };
          };
          return PrimitiveType2;
        }(BindType);
        _nbind.PrimitiveType = PrimitiveType;
        function pushCString(str, policyTbl2) {
          if (str === null || str === void 0) {
            if (policyTbl2 && policyTbl2["Nullable"]) {
              return 0;
            } else
              throw new Error("Type mismatch");
          }
          if (policyTbl2 && policyTbl2["Strict"]) {
            if (typeof str != "string")
              throw new Error("Type mismatch");
          } else
            str = str.toString();
          var length = Module.lengthBytesUTF8(str) + 1;
          var result = _nbind.Pool.lalloc(length);
          Module.stringToUTF8Array(str, HEAPU8, result, length);
          return result;
        }
        _nbind.pushCString = pushCString;
        function popCString(ptr2) {
          if (ptr2 === 0)
            return null;
          return Module.Pointer_stringify(ptr2);
        }
        _nbind.popCString = popCString;
        var CStringType = function(_super) {
          __extends(CStringType2, _super);
          function CStringType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireRead = popCString;
            _this.wireWrite = pushCString;
            _this.readResources = [_nbind.resources.pool];
            _this.writeResources = [_nbind.resources.pool];
            return _this;
          }
          CStringType2.prototype.makeWireWrite = function(expr, policyTbl2) {
            return function(arg2) {
              return pushCString(arg2, policyTbl2);
            };
          };
          return CStringType2;
        }(BindType);
        _nbind.CStringType = CStringType;
        var BooleanType = function(_super) {
          __extends(BooleanType2, _super);
          function BooleanType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireRead = function(arg2) {
              return !!arg2;
            };
            return _this;
          }
          BooleanType2.prototype.needsWireWrite = function(policyTbl2) {
            return !!policyTbl2 && !!policyTbl2["Strict"];
          };
          BooleanType2.prototype.makeWireRead = function(expr) {
            return "!!(" + expr + ")";
          };
          BooleanType2.prototype.makeWireWrite = function(expr, policyTbl2) {
            return policyTbl2 && policyTbl2["Strict"] && function(arg2) {
              if (typeof arg2 == "boolean")
                return arg2;
              throw new Error("Type mismatch");
            } || expr;
          };
          return BooleanType2;
        }(BindType);
        _nbind.BooleanType = BooleanType;
        var Wrapper = function() {
          function Wrapper2() {
          }
          Wrapper2.prototype.persist = function() {
            this.__nbindState |= 1;
          };
          return Wrapper2;
        }();
        _nbind.Wrapper = Wrapper;
        function makeBound(policyTbl2, bindClass) {
          var Bound = function(_super) {
            __extends(Bound2, _super);
            function Bound2(marker, flags, ptr2, shared) {
              var _this = _super.call(this) || this;
              if (!(_this instanceof Bound2)) {
                return new (Function.prototype.bind.apply(Bound2, Array.prototype.concat.apply([null], arguments)))();
              }
              var nbindFlags = flags;
              var nbindPtr = ptr2;
              var nbindShared = shared;
              if (marker !== _nbind.ptrMarker) {
                var wirePtr = _this.__nbindConstructor.apply(_this, arguments);
                nbindFlags = 4096 | 512;
                nbindShared = HEAPU32[wirePtr / 4];
                nbindPtr = HEAPU32[wirePtr / 4 + 1];
              }
              var spec = { configurable: true, enumerable: false, value: null, writable: false };
              var propTbl = { "__nbindFlags": nbindFlags, "__nbindPtr": nbindPtr };
              if (nbindShared) {
                propTbl["__nbindShared"] = nbindShared;
                _nbind.mark(_this);
              }
              for (var _i = 0, _a2 = Object.keys(propTbl); _i < _a2.length; _i++) {
                var key2 = _a2[_i];
                spec.value = propTbl[key2];
                Object.defineProperty(_this, key2, spec);
              }
              _defineHidden(0)(_this, "__nbindState");
              return _this;
            }
            Bound2.prototype.free = function() {
              bindClass.destroy.call(this, this.__nbindShared, this.__nbindFlags);
              this.__nbindState |= 2;
              disableMember(this, "__nbindShared");
              disableMember(this, "__nbindPtr");
            };
            return Bound2;
          }(Wrapper);
          __decorate([_defineHidden()], Bound.prototype, "__nbindConstructor", void 0);
          __decorate([_defineHidden()], Bound.prototype, "__nbindValueConstructor", void 0);
          __decorate([_defineHidden(policyTbl2)], Bound.prototype, "__nbindPolicies", void 0);
          return Bound;
        }
        _nbind.makeBound = makeBound;
        function disableMember(obj, name) {
          function die() {
            throw new Error("Accessing deleted object");
          }
          Object.defineProperty(obj, name, { configurable: false, enumerable: false, get: die, set: die });
        }
        _nbind.ptrMarker = {};
        var BindClass = function(_super) {
          __extends(BindClass2, _super);
          function BindClass2(spec) {
            var _this = _super.call(this, spec) || this;
            _this.wireRead = function(arg2) {
              return _nbind.popValue(arg2, _this.ptrType);
            };
            _this.wireWrite = function(arg2) {
              return pushPointer(arg2, _this.ptrType, true);
            };
            _this.pendingSuperCount = 0;
            _this.ready = false;
            _this.methodTbl = {};
            if (spec.paramList) {
              _this.classType = spec.paramList[0].classType;
              _this.proto = _this.classType.proto;
            } else
              _this.classType = _this;
            return _this;
          }
          BindClass2.prototype.makeBound = function(policyTbl2) {
            var Bound = _nbind.makeBound(policyTbl2, this);
            this.proto = Bound;
            this.ptrType.proto = Bound;
            return Bound;
          };
          BindClass2.prototype.addMethod = function(spec) {
            var overloadList = this.methodTbl[spec.name] || [];
            overloadList.push(spec);
            this.methodTbl[spec.name] = overloadList;
          };
          BindClass2.prototype.registerMethods = function(src, staticOnly) {
            var setter;
            for (var _i = 0, _a2 = Object.keys(src.methodTbl); _i < _a2.length; _i++) {
              var name_1 = _a2[_i];
              var overloadList = src.methodTbl[name_1];
              for (var _b = 0, overloadList_1 = overloadList; _b < overloadList_1.length; _b++) {
                var spec = overloadList_1[_b];
                var target = void 0;
                var caller = void 0;
                target = this.proto.prototype;
                if (staticOnly && spec.signatureType != 1)
                  continue;
                switch (spec.signatureType) {
                  case 1:
                    target = this.proto;
                  case 5:
                    caller = _nbind.makeCaller(spec);
                    _nbind.addMethod(target, spec.name, caller, spec.typeList.length - 1);
                    break;
                  case 4:
                    setter = _nbind.makeMethodCaller(src.ptrType, spec);
                    break;
                  case 3:
                    Object.defineProperty(target, spec.name, { configurable: true, enumerable: false, get: _nbind.makeMethodCaller(src.ptrType, spec), set: setter });
                    break;
                  case 2:
                    caller = _nbind.makeMethodCaller(src.ptrType, spec);
                    _nbind.addMethod(target, spec.name, caller, spec.typeList.length - 1);
                    break;
                  default:
                    break;
                }
              }
            }
          };
          BindClass2.prototype.registerSuperMethods = function(src, firstSuper, visitTbl) {
            if (visitTbl[src.name])
              return;
            visitTbl[src.name] = true;
            var superNum = 0;
            var nextFirst;
            for (var _i = 0, _a2 = src.superIdList || []; _i < _a2.length; _i++) {
              var superId = _a2[_i];
              var superClass = _nbind.getType(superId);
              if (superNum++ < firstSuper || firstSuper < 0) {
                nextFirst = -1;
              } else {
                nextFirst = 0;
              }
              this.registerSuperMethods(superClass, nextFirst, visitTbl);
            }
            this.registerMethods(src, firstSuper < 0);
          };
          BindClass2.prototype.finish = function() {
            if (this.ready)
              return this;
            this.ready = true;
            this.superList = (this.superIdList || []).map(function(superId) {
              return _nbind.getType(superId).finish();
            });
            var Bound = this.proto;
            if (this.superList.length) {
              var Proto = function() {
                this.constructor = Bound;
              };
              Proto.prototype = this.superList[0].proto.prototype;
              Bound.prototype = new Proto();
            }
            if (Bound != Module)
              Bound.prototype.__nbindType = this;
            this.registerSuperMethods(this, 1, {});
            return this;
          };
          BindClass2.prototype.upcastStep = function(dst, ptr2) {
            if (dst == this)
              return ptr2;
            for (var i3 = 0; i3 < this.superList.length; ++i3) {
              var superPtr = this.superList[i3].upcastStep(dst, _nbind.callUpcast(this.upcastList[i3], ptr2));
              if (superPtr)
                return superPtr;
            }
            return 0;
          };
          return BindClass2;
        }(_nbind.BindType);
        BindClass.list = [];
        _nbind.BindClass = BindClass;
        function popPointer(ptr2, type2) {
          return ptr2 ? new type2.proto(_nbind.ptrMarker, type2.flags, ptr2) : null;
        }
        _nbind.popPointer = popPointer;
        function pushPointer(obj, type2, tryValue) {
          if (!(obj instanceof _nbind.Wrapper)) {
            if (tryValue) {
              return _nbind.pushValue(obj);
            } else
              throw new Error("Type mismatch");
          }
          var ptr2 = obj.__nbindPtr;
          var objType = obj.__nbindType.classType;
          var classType = type2.classType;
          if (obj instanceof type2.proto) {
            while (objType != classType) {
              ptr2 = _nbind.callUpcast(objType.upcastList[0], ptr2);
              objType = objType.superList[0];
            }
          } else {
            ptr2 = objType.upcastStep(classType, ptr2);
            if (!ptr2)
              throw new Error("Type mismatch");
          }
          return ptr2;
        }
        _nbind.pushPointer = pushPointer;
        function pushMutablePointer(obj, type2) {
          var ptr2 = pushPointer(obj, type2);
          if (obj.__nbindFlags & 1) {
            throw new Error("Passing a const value as a non-const argument");
          }
          return ptr2;
        }
        var BindClassPtr = function(_super) {
          __extends(BindClassPtr2, _super);
          function BindClassPtr2(spec) {
            var _this = _super.call(this, spec) || this;
            _this.classType = spec.paramList[0].classType;
            _this.proto = _this.classType.proto;
            var isConst = spec.flags & 1;
            var isValue = (_this.flags & 896) == 256 && spec.flags & 2;
            var push = isConst ? pushPointer : pushMutablePointer;
            var pop = isValue ? _nbind.popValue : popPointer;
            _this.makeWireWrite = function(expr, policyTbl2) {
              return policyTbl2["Nullable"] ? function(arg2) {
                return arg2 ? push(arg2, _this) : 0;
              } : function(arg2) {
                return push(arg2, _this);
              };
            };
            _this.wireRead = function(arg2) {
              return pop(arg2, _this);
            };
            _this.wireWrite = function(arg2) {
              return push(arg2, _this);
            };
            return _this;
          }
          return BindClassPtr2;
        }(_nbind.BindType);
        _nbind.BindClassPtr = BindClassPtr;
        function popShared(ptr2, type2) {
          var shared = HEAPU32[ptr2 / 4];
          var unsafe = HEAPU32[ptr2 / 4 + 1];
          return unsafe ? new type2.proto(_nbind.ptrMarker, type2.flags, unsafe, shared) : null;
        }
        _nbind.popShared = popShared;
        function pushShared(obj, type2) {
          if (!(obj instanceof type2.proto))
            throw new Error("Type mismatch");
          return obj.__nbindShared;
        }
        function pushMutableShared(obj, type2) {
          if (!(obj instanceof type2.proto))
            throw new Error("Type mismatch");
          if (obj.__nbindFlags & 1) {
            throw new Error("Passing a const value as a non-const argument");
          }
          return obj.__nbindShared;
        }
        var SharedClassPtr = function(_super) {
          __extends(SharedClassPtr2, _super);
          function SharedClassPtr2(spec) {
            var _this = _super.call(this, spec) || this;
            _this.readResources = [_nbind.resources.pool];
            _this.classType = spec.paramList[0].classType;
            _this.proto = _this.classType.proto;
            var isConst = spec.flags & 1;
            var push = isConst ? pushShared : pushMutableShared;
            _this.wireRead = function(arg2) {
              return popShared(arg2, _this);
            };
            _this.wireWrite = function(arg2) {
              return push(arg2, _this);
            };
            return _this;
          }
          return SharedClassPtr2;
        }(_nbind.BindType);
        _nbind.SharedClassPtr = SharedClassPtr;
        _nbind.externalList = [0];
        var firstFreeExternal = 0;
        var External = function() {
          function External2(data) {
            this.refCount = 1;
            this.data = data;
          }
          External2.prototype.register = function() {
            var num2 = firstFreeExternal;
            if (num2) {
              firstFreeExternal = _nbind.externalList[num2];
            } else
              num2 = _nbind.externalList.length;
            _nbind.externalList[num2] = this;
            return num2;
          };
          External2.prototype.reference = function() {
            ++this.refCount;
          };
          External2.prototype.dereference = function(num2) {
            if (--this.refCount == 0) {
              if (this.free)
                this.free();
              _nbind.externalList[num2] = firstFreeExternal;
              firstFreeExternal = num2;
            }
          };
          return External2;
        }();
        _nbind.External = External;
        function popExternal(num2) {
          var obj = _nbind.externalList[num2];
          obj.dereference(num2);
          return obj.data;
        }
        function pushExternal(obj) {
          var external = new External(obj);
          external.reference();
          return external.register();
        }
        var ExternalType = function(_super) {
          __extends(ExternalType2, _super);
          function ExternalType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireRead = popExternal;
            _this.wireWrite = pushExternal;
            return _this;
          }
          return ExternalType2;
        }(_nbind.BindType);
        _nbind.ExternalType = ExternalType;
        _nbind.callbackSignatureList = [];
        var CallbackType = function(_super) {
          __extends(CallbackType2, _super);
          function CallbackType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireWrite = function(func2) {
              if (typeof func2 != "function")
                _nbind.throwError("Type mismatch");
              return new _nbind.External(func2).register();
            };
            return _this;
          }
          return CallbackType2;
        }(_nbind.BindType);
        _nbind.CallbackType = CallbackType;
        _nbind.valueList = [0];
        var firstFreeValue = 0;
        function pushValue(value) {
          var num2 = firstFreeValue;
          if (num2) {
            firstFreeValue = _nbind.valueList[num2];
          } else
            num2 = _nbind.valueList.length;
          _nbind.valueList[num2] = value;
          return num2 * 2 + 1;
        }
        _nbind.pushValue = pushValue;
        function popValue(num2, type2) {
          if (!num2)
            _nbind.throwError("Value type JavaScript class is missing or not registered");
          if (num2 & 1) {
            num2 >>= 1;
            var obj = _nbind.valueList[num2];
            _nbind.valueList[num2] = firstFreeValue;
            firstFreeValue = num2;
            return obj;
          } else if (type2) {
            return _nbind.popShared(num2, type2);
          } else
            throw new Error("Invalid value slot " + num2);
        }
        _nbind.popValue = popValue;
        var valueBase = 18446744073709552e3;
        function push64(num2) {
          if (typeof num2 == "number")
            return num2;
          return pushValue(num2) * 4096 + valueBase;
        }
        function pop64(num2) {
          if (num2 < valueBase)
            return num2;
          return popValue((num2 - valueBase) / 4096);
        }
        var CreateValueType = function(_super) {
          __extends(CreateValueType2, _super);
          function CreateValueType2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          CreateValueType2.prototype.makeWireWrite = function(expr) {
            return "(_nbind.pushValue(new " + expr + "))";
          };
          return CreateValueType2;
        }(_nbind.BindType);
        _nbind.CreateValueType = CreateValueType;
        var Int64Type = function(_super) {
          __extends(Int64Type2, _super);
          function Int64Type2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireWrite = push64;
            _this.wireRead = pop64;
            return _this;
          }
          return Int64Type2;
        }(_nbind.BindType);
        _nbind.Int64Type = Int64Type;
        function pushArray(arr, type2) {
          if (!arr)
            return 0;
          var length = arr.length;
          if ((type2.size || type2.size === 0) && length < type2.size) {
            throw new Error("Type mismatch");
          }
          var ptrSize = type2.memberType.ptrSize;
          var result = _nbind.Pool.lalloc(4 + length * ptrSize);
          HEAPU32[result / 4] = length;
          var heap = type2.memberType.heap;
          var ptr2 = (result + 4) / ptrSize;
          var wireWrite = type2.memberType.wireWrite;
          var num2 = 0;
          if (wireWrite) {
            while (num2 < length) {
              heap[ptr2++] = wireWrite(arr[num2++]);
            }
          } else {
            while (num2 < length) {
              heap[ptr2++] = arr[num2++];
            }
          }
          return result;
        }
        _nbind.pushArray = pushArray;
        function popArray(ptr2, type2) {
          if (ptr2 === 0)
            return null;
          var length = HEAPU32[ptr2 / 4];
          var arr = new Array(length);
          var heap = type2.memberType.heap;
          ptr2 = (ptr2 + 4) / type2.memberType.ptrSize;
          var wireRead = type2.memberType.wireRead;
          var num2 = 0;
          if (wireRead) {
            while (num2 < length) {
              arr[num2++] = wireRead(heap[ptr2++]);
            }
          } else {
            while (num2 < length) {
              arr[num2++] = heap[ptr2++];
            }
          }
          return arr;
        }
        _nbind.popArray = popArray;
        var ArrayType = function(_super) {
          __extends(ArrayType2, _super);
          function ArrayType2(spec) {
            var _this = _super.call(this, spec) || this;
            _this.wireRead = function(arg2) {
              return popArray(arg2, _this);
            };
            _this.wireWrite = function(arg2) {
              return pushArray(arg2, _this);
            };
            _this.readResources = [_nbind.resources.pool];
            _this.writeResources = [_nbind.resources.pool];
            _this.memberType = spec.paramList[0];
            if (spec.paramList[1])
              _this.size = spec.paramList[1];
            return _this;
          }
          return ArrayType2;
        }(_nbind.BindType);
        _nbind.ArrayType = ArrayType;
        function pushString(str, policyTbl2) {
          if (str === null || str === void 0) {
            if (policyTbl2 && policyTbl2["Nullable"]) {
              str = "";
            } else
              throw new Error("Type mismatch");
          }
          if (policyTbl2 && policyTbl2["Strict"]) {
            if (typeof str != "string")
              throw new Error("Type mismatch");
          } else
            str = str.toString();
          var length = Module.lengthBytesUTF8(str);
          var result = _nbind.Pool.lalloc(4 + length + 1);
          HEAPU32[result / 4] = length;
          Module.stringToUTF8Array(str, HEAPU8, result + 4, length + 1);
          return result;
        }
        _nbind.pushString = pushString;
        function popString(ptr2) {
          if (ptr2 === 0)
            return null;
          var length = HEAPU32[ptr2 / 4];
          return Module.Pointer_stringify(ptr2 + 4, length);
        }
        _nbind.popString = popString;
        var StringType = function(_super) {
          __extends(StringType2, _super);
          function StringType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireRead = popString;
            _this.wireWrite = pushString;
            _this.readResources = [_nbind.resources.pool];
            _this.writeResources = [_nbind.resources.pool];
            return _this;
          }
          StringType2.prototype.makeWireWrite = function(expr, policyTbl2) {
            return function(arg2) {
              return pushString(arg2, policyTbl2);
            };
          };
          return StringType2;
        }(_nbind.BindType);
        _nbind.StringType = StringType;
        function makeArgList(argCount) {
          return Array.apply(null, Array(argCount)).map(function(dummy, num2) {
            return "a" + (num2 + 1);
          });
        }
        function anyNeedsWireWrite(typeList, policyTbl2) {
          return typeList.reduce(function(result, type2) {
            return result || type2.needsWireWrite(policyTbl2);
          }, false);
        }
        function anyNeedsWireRead(typeList, policyTbl2) {
          return typeList.reduce(function(result, type2) {
            return result || !!type2.needsWireRead(policyTbl2);
          }, false);
        }
        function makeWireRead(convertParamList2, policyTbl2, type2, expr) {
          var paramNum = convertParamList2.length;
          if (type2.makeWireRead) {
            return type2.makeWireRead(expr, convertParamList2, paramNum);
          } else if (type2.wireRead) {
            convertParamList2[paramNum] = type2.wireRead;
            return "(convertParamList[" + paramNum + "](" + expr + "))";
          } else
            return expr;
        }
        function makeWireWrite(convertParamList2, policyTbl2, type2, expr) {
          var wireWrite;
          var paramNum = convertParamList2.length;
          if (type2.makeWireWrite) {
            wireWrite = type2.makeWireWrite(expr, policyTbl2, convertParamList2, paramNum);
          } else
            wireWrite = type2.wireWrite;
          if (wireWrite) {
            if (typeof wireWrite == "string") {
              return wireWrite;
            } else {
              convertParamList2[paramNum] = wireWrite;
              return "(convertParamList[" + paramNum + "](" + expr + "))";
            }
          } else
            return expr;
        }
        function buildCallerFunction(dynCall, ptrType, ptr, num, policyTbl, needsWireWrite, prefix, returnType, argTypeList, mask, err) {
          var argList = makeArgList(argTypeList.length);
          var convertParamList = [];
          var callExpression = makeWireRead(convertParamList, policyTbl, returnType, "dynCall(" + [prefix].concat(argList.map(function(name, index) {
            return makeWireWrite(convertParamList, policyTbl, argTypeList[index], name);
          })).join(",") + ")");
          var resourceSet = _nbind.listResources([returnType], argTypeList);
          var sourceCode = "function(" + argList.join(",") + "){" + (mask ? "this.__nbindFlags&mask&&err();" : "") + resourceSet.makeOpen() + "var r=" + callExpression + ";" + resourceSet.makeClose() + "return r;}";
          return eval("(" + sourceCode + ")");
        }
        function buildJSCallerFunction(returnType, argTypeList) {
          var argList = makeArgList(argTypeList.length);
          var convertParamList = [];
          var callExpression = makeWireWrite(convertParamList, null, returnType, "_nbind.externalList[num].data(" + argList.map(function(name, index) {
            return makeWireRead(convertParamList, null, argTypeList[index], name);
          }).join(",") + ")");
          var resourceSet = _nbind.listResources(argTypeList, [returnType]);
          resourceSet.remove(_nbind.resources.pool);
          var sourceCode = "function(" + ["dummy", "num"].concat(argList).join(",") + "){" + resourceSet.makeOpen() + "var r=" + callExpression + ";" + resourceSet.makeClose() + "return r;}";
          return eval("(" + sourceCode + ")");
        }
        _nbind.buildJSCallerFunction = buildJSCallerFunction;
        function makeJSCaller(idList) {
          var argCount = idList.length - 1;
          var typeList = _nbind.getTypes(idList, "callback");
          var returnType2 = typeList[0];
          var argTypeList2 = typeList.slice(1);
          var needsWireRead = anyNeedsWireRead(argTypeList2, null);
          var needsWireWrite2 = returnType2.needsWireWrite(null);
          if (!needsWireWrite2 && !needsWireRead) {
            switch (argCount) {
              case 0:
                return function(dummy, num2) {
                  return _nbind.externalList[num2].data();
                };
              case 1:
                return function(dummy, num2, a1) {
                  return _nbind.externalList[num2].data(a1);
                };
              case 2:
                return function(dummy, num2, a1, a2) {
                  return _nbind.externalList[num2].data(a1, a2);
                };
              case 3:
                return function(dummy, num2, a1, a2, a3) {
                  return _nbind.externalList[num2].data(a1, a2, a3);
                };
              default:
                break;
            }
          }
          return buildJSCallerFunction(returnType2, argTypeList2);
        }
        _nbind.makeJSCaller = makeJSCaller;
        function makeMethodCaller(ptrType2, spec) {
          var argCount = spec.typeList.length - 1;
          var typeIdList = spec.typeList.slice(0);
          typeIdList.splice(1, 0, "uint32_t", spec.boundID);
          var typeList = _nbind.getTypes(typeIdList, spec.title);
          var returnType2 = typeList[0];
          var argTypeList2 = typeList.slice(3);
          var needsWireRead = returnType2.needsWireRead(spec.policyTbl);
          var needsWireWrite2 = anyNeedsWireWrite(argTypeList2, spec.policyTbl);
          var ptr2 = spec.ptr;
          var num2 = spec.num;
          var dynCall2 = _nbind.getDynCall(typeList, spec.title);
          var mask2 = ~spec.flags & 1;
          function err2() {
            throw new Error("Calling a non-const method on a const object");
          }
          if (!needsWireRead && !needsWireWrite2) {
            switch (argCount) {
              case 0:
                return function() {
                  return this.__nbindFlags & mask2 ? err2() : dynCall2(ptr2, num2, _nbind.pushPointer(this, ptrType2));
                };
              case 1:
                return function(a1) {
                  return this.__nbindFlags & mask2 ? err2() : dynCall2(ptr2, num2, _nbind.pushPointer(this, ptrType2), a1);
                };
              case 2:
                return function(a1, a2) {
                  return this.__nbindFlags & mask2 ? err2() : dynCall2(ptr2, num2, _nbind.pushPointer(this, ptrType2), a1, a2);
                };
              case 3:
                return function(a1, a2, a3) {
                  return this.__nbindFlags & mask2 ? err2() : dynCall2(ptr2, num2, _nbind.pushPointer(this, ptrType2), a1, a2, a3);
                };
              default:
                break;
            }
          }
          return buildCallerFunction(dynCall2, ptrType2, ptr2, num2, spec.policyTbl, needsWireWrite2, "ptr,num,pushPointer(this,ptrType)", returnType2, argTypeList2, mask2, err2);
        }
        _nbind.makeMethodCaller = makeMethodCaller;
        function makeCaller(spec) {
          var argCount = spec.typeList.length - 1;
          var typeList = _nbind.getTypes(spec.typeList, spec.title);
          var returnType2 = typeList[0];
          var argTypeList2 = typeList.slice(1);
          var needsWireRead = returnType2.needsWireRead(spec.policyTbl);
          var needsWireWrite2 = anyNeedsWireWrite(argTypeList2, spec.policyTbl);
          var direct = spec.direct;
          var ptr2 = spec.ptr;
          if (spec.direct && !needsWireRead && !needsWireWrite2) {
            var dynCall_1 = _nbind.getDynCall(typeList, spec.title);
            switch (argCount) {
              case 0:
                return function() {
                  return dynCall_1(direct);
                };
              case 1:
                return function(a1) {
                  return dynCall_1(direct, a1);
                };
              case 2:
                return function(a1, a2) {
                  return dynCall_1(direct, a1, a2);
                };
              case 3:
                return function(a1, a2, a3) {
                  return dynCall_1(direct, a1, a2, a3);
                };
              default:
                break;
            }
            ptr2 = 0;
          }
          var prefix2;
          if (ptr2) {
            var typeIdList = spec.typeList.slice(0);
            typeIdList.splice(1, 0, "uint32_t");
            typeList = _nbind.getTypes(typeIdList, spec.title);
            prefix2 = "ptr,num";
          } else {
            ptr2 = direct;
            prefix2 = "ptr";
          }
          var dynCall2 = _nbind.getDynCall(typeList, spec.title);
          return buildCallerFunction(dynCall2, null, ptr2, spec.num, spec.policyTbl, needsWireWrite2, prefix2, returnType2, argTypeList2);
        }
        _nbind.makeCaller = makeCaller;
        function makeOverloader(func2, arity) {
          var callerList = [];
          function call() {
            return callerList[arguments.length].apply(this, arguments);
          }
          call.addMethod = function(_func, _arity) {
            callerList[_arity] = _func;
          };
          call.addMethod(func2, arity);
          return call;
        }
        _nbind.makeOverloader = makeOverloader;
        var Resource = function() {
          function Resource2(open, close) {
            var _this = this;
            this.makeOpen = function() {
              return Object.keys(_this.openTbl).join("");
            };
            this.makeClose = function() {
              return Object.keys(_this.closeTbl).join("");
            };
            this.openTbl = {};
            this.closeTbl = {};
            if (open)
              this.openTbl[open] = true;
            if (close)
              this.closeTbl[close] = true;
          }
          Resource2.prototype.add = function(other) {
            for (var _i = 0, _a2 = Object.keys(other.openTbl); _i < _a2.length; _i++) {
              var key2 = _a2[_i];
              this.openTbl[key2] = true;
            }
            for (var _b = 0, _c = Object.keys(other.closeTbl); _b < _c.length; _b++) {
              var key2 = _c[_b];
              this.closeTbl[key2] = true;
            }
          };
          Resource2.prototype.remove = function(other) {
            for (var _i = 0, _a2 = Object.keys(other.openTbl); _i < _a2.length; _i++) {
              var key2 = _a2[_i];
              delete this.openTbl[key2];
            }
            for (var _b = 0, _c = Object.keys(other.closeTbl); _b < _c.length; _b++) {
              var key2 = _c[_b];
              delete this.closeTbl[key2];
            }
          };
          return Resource2;
        }();
        _nbind.Resource = Resource;
        function listResources(readList, writeList) {
          var result = new Resource();
          for (var _i = 0, readList_1 = readList; _i < readList_1.length; _i++) {
            var bindType = readList_1[_i];
            for (var _a2 = 0, _b = bindType.readResources || []; _a2 < _b.length; _a2++) {
              var resource = _b[_a2];
              result.add(resource);
            }
          }
          for (var _c = 0, writeList_1 = writeList; _c < writeList_1.length; _c++) {
            var bindType = writeList_1[_c];
            for (var _d = 0, _e = bindType.writeResources || []; _d < _e.length; _d++) {
              var resource = _e[_d];
              result.add(resource);
            }
          }
          return result;
        }
        _nbind.listResources = listResources;
        _nbind.resources = { pool: new Resource("var used=HEAPU32[_nbind.Pool.usedPtr],page=HEAPU32[_nbind.Pool.pagePtr];", "_nbind.Pool.lreset(used,page);") };
        var ExternalBuffer = function(_super) {
          __extends(ExternalBuffer2, _super);
          function ExternalBuffer2(buf, ptr2) {
            var _this = _super.call(this, buf) || this;
            _this.ptr = ptr2;
            return _this;
          }
          ExternalBuffer2.prototype.free = function() {
            _free(this.ptr);
          };
          return ExternalBuffer2;
        }(_nbind.External);
        function getBuffer(buf) {
          if (buf instanceof ArrayBuffer) {
            return new Uint8Array(buf);
          } else if (buf instanceof DataView) {
            return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
          } else
            return buf;
        }
        function pushBuffer(buf, policyTbl2) {
          if (buf === null || buf === void 0) {
            if (policyTbl2 && policyTbl2["Nullable"])
              buf = [];
          }
          if (typeof buf != "object")
            throw new Error("Type mismatch");
          var b2 = buf;
          var length = b2.byteLength || b2.length;
          if (!length && length !== 0 && b2.byteLength !== 0)
            throw new Error("Type mismatch");
          var result = _nbind.Pool.lalloc(8);
          var data = _malloc(length);
          var ptr2 = result / 4;
          HEAPU32[ptr2++] = length;
          HEAPU32[ptr2++] = data;
          HEAPU32[ptr2++] = new ExternalBuffer(buf, data).register();
          HEAPU8.set(getBuffer(buf), data);
          return result;
        }
        var BufferType = function(_super) {
          __extends(BufferType2, _super);
          function BufferType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireWrite = pushBuffer;
            _this.readResources = [_nbind.resources.pool];
            _this.writeResources = [_nbind.resources.pool];
            return _this;
          }
          BufferType2.prototype.makeWireWrite = function(expr, policyTbl2) {
            return function(arg2) {
              return pushBuffer(arg2, policyTbl2);
            };
          };
          return BufferType2;
        }(_nbind.BindType);
        _nbind.BufferType = BufferType;
        function commitBuffer(num2, data, length) {
          var buf = _nbind.externalList[num2].data;
          var NodeBuffer = Buffer;
          if (typeof Buffer != "function")
            NodeBuffer = function() {
            };
          if (buf instanceof Array) {
          } else {
            var src = HEAPU8.subarray(data, data + length);
            if (buf instanceof NodeBuffer) {
              var srcBuf = void 0;
              if (typeof Buffer.from == "function" && Buffer.from.length >= 3) {
                srcBuf = Buffer.from(src);
              } else
                srcBuf = new Buffer(src);
              srcBuf.copy(buf);
            } else
              getBuffer(buf).set(src);
          }
        }
        _nbind.commitBuffer = commitBuffer;
        var dirtyList = [];
        var gcTimer = 0;
        function sweep() {
          for (var _i = 0, dirtyList_1 = dirtyList; _i < dirtyList_1.length; _i++) {
            var obj = dirtyList_1[_i];
            if (!(obj.__nbindState & (1 | 2))) {
              obj.free();
            }
          }
          dirtyList = [];
          gcTimer = 0;
        }
        _nbind.mark = function(obj) {
        };
        function toggleLightGC(enable) {
          if (enable) {
            _nbind.mark = function(obj) {
              dirtyList.push(obj);
              if (!gcTimer)
                gcTimer = setTimeout(sweep, 0);
            };
          } else {
            _nbind.mark = function(obj) {
            };
          }
        }
        _nbind.toggleLightGC = toggleLightGC;
      })(_nbind);
      Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) {
        Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead.");
        Module["requestFullScreen"] = Module["requestFullscreen"];
        Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice);
      };
      Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) {
        Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      };
      Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func2) {
        Browser.requestAnimationFrame(func2);
      };
      Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
        Browser.setCanvasSize(width, height, noUpdates);
      };
      Module["pauseMainLoop"] = function Module_pauseMainLoop() {
        Browser.mainLoop.pause();
      };
      Module["resumeMainLoop"] = function Module_resumeMainLoop() {
        Browser.mainLoop.resume();
      };
      Module["getUserMedia"] = function Module_getUserMedia() {
        Browser.getUserMedia();
      };
      Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
        return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);
      };
      if (ENVIRONMENT_IS_NODE) {
        _emscripten_get_now = function _emscripten_get_now_actual() {
          var t2 = process["hrtime"]();
          return t2[0] * 1e3 + t2[1] / 1e6;
        };
      } else if (typeof dateNow !== "undefined") {
        _emscripten_get_now = dateNow;
      } else if (typeof self === "object" && self["performance"] && typeof self["performance"]["now"] === "function") {
        _emscripten_get_now = function() {
          return self["performance"]["now"]();
        };
      } else if (typeof performance === "object" && typeof performance["now"] === "function") {
        _emscripten_get_now = function() {
          return performance["now"]();
        };
      } else {
        _emscripten_get_now = Date.now;
      }
      __ATEXIT__.push(function() {
        var fflush = Module["_fflush"];
        if (fflush)
          fflush(0);
        var printChar = ___syscall146.printChar;
        if (!printChar)
          return;
        var buffers = ___syscall146.buffers;
        if (buffers[1].length)
          printChar(1, 10);
        if (buffers[2].length)
          printChar(2, 10);
      });
      DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);
      STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
      STACK_MAX = STACK_BASE + TOTAL_STACK;
      DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);
      HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
      staticSealed = true;
      function invoke_viiiii(index, a1, a2, a3, a4, a5) {
        try {
          Module["dynCall_viiiii"](index, a1, a2, a3, a4, a5);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_vif(index, a1, a2) {
        try {
          Module["dynCall_vif"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_vid(index, a1, a2) {
        try {
          Module["dynCall_vid"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_fiff(index, a1, a2, a3) {
        try {
          return Module["dynCall_fiff"](index, a1, a2, a3);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_vi(index, a1) {
        try {
          Module["dynCall_vi"](index, a1);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_vii(index, a1, a2) {
        try {
          Module["dynCall_vii"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_ii(index, a1) {
        try {
          return Module["dynCall_ii"](index, a1);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viddi(index, a1, a2, a3, a4) {
        try {
          Module["dynCall_viddi"](index, a1, a2, a3, a4);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_vidd(index, a1, a2, a3) {
        try {
          Module["dynCall_vidd"](index, a1, a2, a3);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_iiii(index, a1, a2, a3) {
        try {
          return Module["dynCall_iiii"](index, a1, a2, a3);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_diii(index, a1, a2, a3) {
        try {
          return Module["dynCall_diii"](index, a1, a2, a3);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_di(index, a1) {
        try {
          return Module["dynCall_di"](index, a1);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_iid(index, a1, a2) {
        try {
          return Module["dynCall_iid"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_iii(index, a1, a2) {
        try {
          return Module["dynCall_iii"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viiddi(index, a1, a2, a3, a4, a5) {
        try {
          Module["dynCall_viiddi"](index, a1, a2, a3, a4, a5);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
        try {
          Module["dynCall_viiiiii"](index, a1, a2, a3, a4, a5, a6);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_dii(index, a1, a2) {
        try {
          return Module["dynCall_dii"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_i(index) {
        try {
          return Module["dynCall_i"](index);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
        try {
          return Module["dynCall_iiiiii"](index, a1, a2, a3, a4, a5);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viiid(index, a1, a2, a3, a4) {
        try {
          Module["dynCall_viiid"](index, a1, a2, a3, a4);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viififi(index, a1, a2, a3, a4, a5, a6) {
        try {
          Module["dynCall_viififi"](index, a1, a2, a3, a4, a5, a6);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viii(index, a1, a2, a3) {
        try {
          Module["dynCall_viii"](index, a1, a2, a3);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_v(index) {
        try {
          Module["dynCall_v"](index);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viid(index, a1, a2, a3) {
        try {
          Module["dynCall_viid"](index, a1, a2, a3);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_idd(index, a1, a2) {
        try {
          return Module["dynCall_idd"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viiii(index, a1, a2, a3, a4) {
        try {
          Module["dynCall_viiii"](index, a1, a2, a3, a4);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
      Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_viiiii": invoke_viiiii, "invoke_vif": invoke_vif, "invoke_vid": invoke_vid, "invoke_fiff": invoke_fiff, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viddi": invoke_viddi, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_diii": invoke_diii, "invoke_di": invoke_di, "invoke_iid": invoke_iid, "invoke_iii": invoke_iii, "invoke_viiddi": invoke_viiddi, "invoke_viiiiii": invoke_viiiiii, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_iiiiii": invoke_iiiiii, "invoke_viiid": invoke_viiid, "invoke_viififi": invoke_viififi, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_idd": invoke_idd, "invoke_viiii": invoke_viiii, "_emscripten_asm_const_iiiii": _emscripten_asm_const_iiiii, "_emscripten_asm_const_iiidddddd": _emscripten_asm_const_iiidddddd, "_emscripten_asm_const_iiiid": _emscripten_asm_const_iiiid, "__nbind_reference_external": __nbind_reference_external, "_emscripten_asm_const_iiiiiiii": _emscripten_asm_const_iiiiiiii, "_removeAccessorPrefix": _removeAccessorPrefix, "_typeModule": _typeModule, "__nbind_register_pool": __nbind_register_pool, "__decorate": __decorate, "_llvm_stackrestore": _llvm_stackrestore, "___cxa_atexit": ___cxa_atexit, "__extends": __extends, "__nbind_get_value_object": __nbind_get_value_object, "__ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj": __ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "__nbind_register_primitive": __nbind_register_primitive, "__nbind_register_type": __nbind_register_type, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__nbind_register_function": __nbind_register_function, "___setErrNo": ___setErrNo, "__nbind_register_class": __nbind_register_class, "__nbind_finish": __nbind_finish, "_abort": _abort, "_nbind_value": _nbind_value, "_llvm_stacksave": _llvm_stacksave, "___syscall54": ___syscall54, "_defineHidden": _defineHidden, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_get_now": _emscripten_get_now, "__nbind_register_callback_signature": __nbind_register_callback_signature, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "__nbind_free_external": __nbind_free_external, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiididi": _emscripten_asm_const_iiididi, "___syscall6": ___syscall6, "_atexit": _atexit, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
      var asm = function(global2, env, buffer2) {
        ;
        var a2 = new global2.Int8Array(buffer2);
        var b2 = new global2.Int16Array(buffer2);
        var c2 = new global2.Int32Array(buffer2);
        var d2 = new global2.Uint8Array(buffer2);
        var e = new global2.Uint16Array(buffer2);
        var f2 = new global2.Uint32Array(buffer2);
        var g2 = new global2.Float32Array(buffer2);
        var h2 = new global2.Float64Array(buffer2);
        var i3 = env.DYNAMICTOP_PTR | 0;
        var j2 = env.tempDoublePtr | 0;
        var k2 = env.ABORT | 0;
        var l2 = env.STACKTOP | 0;
        var m2 = env.STACK_MAX | 0;
        var n2 = env.cttz_i8 | 0;
        var o2 = env.___dso_handle | 0;
        var p2 = 0;
        var q2 = 0;
        var r2 = 0;
        var s2 = 0;
        var t2 = global2.NaN, u2 = global2.Infinity;
        var v2 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0;
        var A2 = 0;
        var B2 = global2.Math.floor;
        var C2 = global2.Math.abs;
        var D2 = global2.Math.sqrt;
        var E2 = global2.Math.pow;
        var F2 = global2.Math.cos;
        var G2 = global2.Math.sin;
        var H2 = global2.Math.tan;
        var I2 = global2.Math.acos;
        var J = global2.Math.asin;
        var K = global2.Math.atan;
        var L2 = global2.Math.atan2;
        var M2 = global2.Math.exp;
        var N = global2.Math.log;
        var O2 = global2.Math.ceil;
        var P2 = global2.Math.imul;
        var Q2 = global2.Math.min;
        var R2 = global2.Math.max;
        var S2 = global2.Math.clz32;
        var T2 = global2.Math.fround;
        var U2 = env.abort;
        var V2 = env.assert;
        var W2 = env.enlargeMemory;
        var X2 = env.getTotalMemory;
        var Y2 = env.abortOnCannotGrowMemory;
        var Z2 = env.invoke_viiiii;
        var _2 = env.invoke_vif;
        var $ = env.invoke_vid;
        var aa = env.invoke_fiff;
        var ba = env.invoke_vi;
        var ca = env.invoke_vii;
        var da = env.invoke_ii;
        var ea = env.invoke_viddi;
        var fa = env.invoke_vidd;
        var ga = env.invoke_iiii;
        var ha = env.invoke_diii;
        var ia = env.invoke_di;
        var ja = env.invoke_iid;
        var ka = env.invoke_iii;
        var la = env.invoke_viiddi;
        var ma = env.invoke_viiiiii;
        var na = env.invoke_dii;
        var oa = env.invoke_i;
        var pa = env.invoke_iiiiii;
        var qa = env.invoke_viiid;
        var ra = env.invoke_viififi;
        var sa = env.invoke_viii;
        var ta = env.invoke_v;
        var ua = env.invoke_viid;
        var va = env.invoke_idd;
        var wa = env.invoke_viiii;
        var xa = env._emscripten_asm_const_iiiii;
        var ya = env._emscripten_asm_const_iiidddddd;
        var za = env._emscripten_asm_const_iiiid;
        var Aa = env.__nbind_reference_external;
        var Ba = env._emscripten_asm_const_iiiiiiii;
        var Ca = env._removeAccessorPrefix;
        var Da = env._typeModule;
        var Ea = env.__nbind_register_pool;
        var Fa = env.__decorate;
        var Ga = env._llvm_stackrestore;
        var Ha = env.___cxa_atexit;
        var Ia = env.__extends;
        var Ja = env.__nbind_get_value_object;
        var Ka = env.__ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj;
        var La = env._emscripten_set_main_loop_timing;
        var Ma = env.__nbind_register_primitive;
        var Na = env.__nbind_register_type;
        var Oa = env._emscripten_memcpy_big;
        var Pa = env.__nbind_register_function;
        var Qa = env.___setErrNo;
        var Ra = env.__nbind_register_class;
        var Sa = env.__nbind_finish;
        var Ta = env._abort;
        var Ua = env._nbind_value;
        var Va = env._llvm_stacksave;
        var Wa = env.___syscall54;
        var Xa = env._defineHidden;
        var Ya = env._emscripten_set_main_loop;
        var Za = env._emscripten_get_now;
        var _a2 = env.__nbind_register_callback_signature;
        var $a = env._emscripten_asm_const_iiiiii;
        var ab = env.__nbind_free_external;
        var bb = env._emscripten_asm_const_iiii;
        var cb2 = env._emscripten_asm_const_iiididi;
        var db = env.___syscall6;
        var eb = env._atexit;
        var fb = env.___syscall140;
        var gb = env.___syscall146;
        var hb = T2(0);
        const ib = T2(0);
        function Jb(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = l2;
          l2 = l2 + a3 | 0;
          l2 = l2 + 15 & -16;
          return b3 | 0;
        }
        function Kb() {
          return l2 | 0;
        }
        function Lb(a3) {
          a3 = a3 | 0;
          l2 = a3;
        }
        function Mb(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          l2 = a3;
          m2 = b3;
        }
        function Nb(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          if (!p2) {
            p2 = a3;
            q2 = b3;
          }
        }
        function Ob(a3) {
          a3 = a3 | 0;
          A2 = a3;
        }
        function Pb() {
          return A2 | 0;
        }
        function Qb() {
          var b3 = 0, d3 = 0;
          BC(8104, 8, 400) | 0;
          BC(8504, 408, 540) | 0;
          b3 = 9044;
          d3 = b3 + 44 | 0;
          do {
            c2[b3 >> 2] = 0;
            b3 = b3 + 4 | 0;
          } while ((b3 | 0) < (d3 | 0));
          a2[9088] = 0;
          a2[9089] = 1;
          c2[2273] = 0;
          c2[2274] = 948;
          c2[2275] = 948;
          Ha(17, 8104, o2 | 0) | 0;
          return;
        }
        function Rb(a3) {
          a3 = a3 | 0;
          oc(a3 + 948 | 0);
          return;
        }
        function Sb(a3) {
          a3 = T2(a3);
          return ((af(a3) | 0) & 2147483647) >>> 0 > 2139095040 | 0;
        }
        function Tb(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          a:
            do
              if (!(c2[a3 + (b3 << 3) + 4 >> 2] | 0)) {
                if ((b3 | 2 | 0) == 3 ? c2[a3 + 60 >> 2] | 0 : 0) {
                  a3 = a3 + 56 | 0;
                  break;
                }
                switch (b3 | 0) {
                  case 0:
                  case 2:
                  case 4:
                  case 5: {
                    if (c2[a3 + 52 >> 2] | 0) {
                      a3 = a3 + 48 | 0;
                      break a;
                    }
                    break;
                  }
                  default: {
                  }
                }
                if (!(c2[a3 + 68 >> 2] | 0)) {
                  a3 = (b3 | 1 | 0) == 5 ? 948 : d3;
                  break;
                } else {
                  a3 = a3 + 64 | 0;
                  break;
                }
              } else
                a3 = a3 + (b3 << 3) | 0;
            while (0);
          return a3 | 0;
        }
        function Ub(b3) {
          b3 = b3 | 0;
          var d3 = 0;
          d3 = oB(1e3) | 0;
          Vb(b3, (d3 | 0) != 0, 2456);
          c2[2276] = (c2[2276] | 0) + 1;
          BC(d3 | 0, 8104, 1e3) | 0;
          if (a2[b3 + 2 >> 0] | 0) {
            c2[d3 + 4 >> 2] = 2;
            c2[d3 + 12 >> 2] = 4;
          }
          c2[d3 + 976 >> 2] = b3;
          return d3 | 0;
        }
        function Vb(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0;
          f3 = l2;
          l2 = l2 + 16 | 0;
          e2 = f3;
          if (!b3) {
            c2[e2 >> 2] = d3;
            fe(a3, 5, 3197, e2);
          }
          l2 = f3;
          return;
        }
        function Wb() {
          return Ub(956) | 0;
        }
        function Xb(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = qC(1e3) | 0;
          Yb(b3, a3);
          Vb(c2[a3 + 976 >> 2] | 0, 1, 2456);
          c2[2276] = (c2[2276] | 0) + 1;
          c2[b3 + 944 >> 2] = 0;
          return b3 | 0;
        }
        function Yb(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          BC(a3 | 0, b3 | 0, 948) | 0;
          ie(a3 + 948 | 0, b3 + 948 | 0);
          d3 = a3 + 960 | 0;
          a3 = b3 + 960 | 0;
          b3 = d3 + 40 | 0;
          do {
            c2[d3 >> 2] = c2[a3 >> 2];
            d3 = d3 + 4 | 0;
            a3 = a3 + 4 | 0;
          } while ((d3 | 0) < (b3 | 0));
          return;
        }
        function Zb(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0, f3 = 0;
          b3 = a3 + 944 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 | 0) {
            _b(d3 + 948 | 0, a3) | 0;
            c2[b3 >> 2] = 0;
          }
          d3 = $b(a3) | 0;
          if (d3 | 0) {
            b3 = 0;
            do {
              c2[(ac(a3, b3) | 0) + 944 >> 2] = 0;
              b3 = b3 + 1 | 0;
            } while ((b3 | 0) != (d3 | 0));
          }
          d3 = a3 + 948 | 0;
          e2 = c2[d3 >> 2] | 0;
          f3 = a3 + 952 | 0;
          b3 = c2[f3 >> 2] | 0;
          if ((b3 | 0) != (e2 | 0))
            c2[f3 >> 2] = b3 + (~((b3 + -4 - e2 | 0) >>> 2) << 2);
          bc(d3);
          pB(a3);
          c2[2276] = (c2[2276] | 0) + -1;
          return;
        }
        function _b(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = c2[a3 >> 2] | 0;
          i4 = a3 + 4 | 0;
          d3 = c2[i4 >> 2] | 0;
          g3 = d3;
          a:
            do
              if ((e2 | 0) == (d3 | 0)) {
                f3 = e2;
                h3 = 4;
              } else {
                a3 = e2;
                while (1) {
                  if ((c2[a3 >> 2] | 0) == (b3 | 0)) {
                    f3 = a3;
                    h3 = 4;
                    break a;
                  }
                  a3 = a3 + 4 | 0;
                  if ((a3 | 0) == (d3 | 0)) {
                    a3 = 0;
                    break;
                  }
                }
              }
            while (0);
          if ((h3 | 0) == 4)
            if ((f3 | 0) != (d3 | 0)) {
              e2 = f3 + 4 | 0;
              a3 = g3 - e2 | 0;
              b3 = a3 >> 2;
              if (b3) {
                GC(f3 | 0, e2 | 0, a3 | 0) | 0;
                d3 = c2[i4 >> 2] | 0;
              }
              a3 = f3 + (b3 << 2) | 0;
              if ((d3 | 0) == (a3 | 0))
                a3 = 1;
              else {
                c2[i4 >> 2] = d3 + (~((d3 + -4 - a3 | 0) >>> 2) << 2);
                a3 = 1;
              }
            } else
              a3 = 0;
          return a3 | 0;
        }
        function $b(a3) {
          a3 = a3 | 0;
          return (c2[a3 + 952 >> 2] | 0) - (c2[a3 + 948 >> 2] | 0) >> 2 | 0;
        }
        function ac(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = c2[a3 + 948 >> 2] | 0;
          if ((c2[a3 + 952 >> 2] | 0) - d3 >> 2 >>> 0 > b3 >>> 0)
            a3 = c2[d3 + (b3 << 2) >> 2] | 0;
          else
            a3 = 0;
          return a3 | 0;
        }
        function bc(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0, f3 = 0;
          e2 = l2;
          l2 = l2 + 32 | 0;
          b3 = e2;
          f3 = c2[a3 >> 2] | 0;
          d3 = (c2[a3 + 4 >> 2] | 0) - f3 | 0;
          if (((c2[a3 + 8 >> 2] | 0) - f3 | 0) >>> 0 > d3 >>> 0) {
            f3 = d3 >> 2;
            bf(b3, f3, f3, a3 + 8 | 0);
            cf(a3, b3);
            df(b3);
          }
          l2 = e2;
          return;
        }
        function cc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0;
          k3 = $b(a3) | 0;
          do
            if (k3 | 0) {
              if ((c2[(ac(a3, 0) | 0) + 944 >> 2] | 0) == (a3 | 0)) {
                if (!(_b(a3 + 948 | 0, b3) | 0))
                  break;
                BC(b3 + 400 | 0, 8504, 540) | 0;
                c2[b3 + 944 >> 2] = 0;
                nc(a3);
                break;
              }
              h3 = c2[(c2[a3 + 976 >> 2] | 0) + 12 >> 2] | 0;
              i4 = a3 + 948 | 0;
              j3 = (h3 | 0) == 0;
              d3 = 0;
              g3 = 0;
              do {
                e2 = c2[(c2[i4 >> 2] | 0) + (g3 << 2) >> 2] | 0;
                if ((e2 | 0) == (b3 | 0))
                  nc(a3);
                else {
                  f3 = Xb(e2) | 0;
                  c2[(c2[i4 >> 2] | 0) + (d3 << 2) >> 2] = f3;
                  c2[f3 + 944 >> 2] = a3;
                  if (!j3)
                    Ib[h3 & 15](e2, f3, a3, d3);
                  d3 = d3 + 1 | 0;
                }
                g3 = g3 + 1 | 0;
              } while ((g3 | 0) != (k3 | 0));
              if (d3 >>> 0 < k3 >>> 0) {
                j3 = a3 + 948 | 0;
                i4 = a3 + 952 | 0;
                h3 = d3;
                d3 = c2[i4 >> 2] | 0;
                do {
                  g3 = (c2[j3 >> 2] | 0) + (h3 << 2) | 0;
                  e2 = g3 + 4 | 0;
                  f3 = d3 - e2 | 0;
                  b3 = f3 >> 2;
                  if (!b3)
                    f3 = d3;
                  else {
                    GC(g3 | 0, e2 | 0, f3 | 0) | 0;
                    d3 = c2[i4 >> 2] | 0;
                    f3 = d3;
                  }
                  e2 = g3 + (b3 << 2) | 0;
                  if ((f3 | 0) != (e2 | 0)) {
                    d3 = f3 + (~((f3 + -4 - e2 | 0) >>> 2) << 2) | 0;
                    c2[i4 >> 2] = d3;
                  }
                  h3 = h3 + 1 | 0;
                } while ((h3 | 0) != (k3 | 0));
              }
            }
          while (0);
          return;
        }
        function dc(b3) {
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0;
          ec(b3, ($b(b3) | 0) == 0, 2491);
          ec(b3, (c2[b3 + 944 >> 2] | 0) == 0, 2545);
          d3 = b3 + 948 | 0;
          e2 = c2[d3 >> 2] | 0;
          f3 = b3 + 952 | 0;
          g3 = c2[f3 >> 2] | 0;
          if ((g3 | 0) != (e2 | 0))
            c2[f3 >> 2] = g3 + (~((g3 + -4 - e2 | 0) >>> 2) << 2);
          bc(d3);
          d3 = b3 + 976 | 0;
          e2 = c2[d3 >> 2] | 0;
          BC(b3 | 0, 8104, 1e3) | 0;
          if (a2[e2 + 2 >> 0] | 0) {
            c2[b3 + 4 >> 2] = 2;
            c2[b3 + 12 >> 2] = 4;
          }
          c2[d3 >> 2] = e2;
          return;
        }
        function ec(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0;
          f3 = l2;
          l2 = l2 + 16 | 0;
          e2 = f3;
          if (!b3) {
            c2[e2 >> 2] = d3;
            Vd(a3, 5, 3197, e2);
          }
          l2 = f3;
          return;
        }
        function fc() {
          return c2[2276] | 0;
        }
        function gc() {
          var a3 = 0;
          a3 = oB(20) | 0;
          hc((a3 | 0) != 0, 2592);
          c2[2277] = (c2[2277] | 0) + 1;
          c2[a3 >> 2] = c2[239];
          c2[a3 + 4 >> 2] = c2[240];
          c2[a3 + 8 >> 2] = c2[241];
          c2[a3 + 12 >> 2] = c2[242];
          c2[a3 + 16 >> 2] = c2[243];
          return a3 | 0;
        }
        function hc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          d3 = e2;
          if (!a3) {
            c2[d3 >> 2] = b3;
            Vd(0, 5, 3197, d3);
          }
          l2 = e2;
          return;
        }
        function ic(a3) {
          a3 = a3 | 0;
          pB(a3);
          c2[2277] = (c2[2277] | 0) + -1;
          return;
        }
        function jc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          if (!b3) {
            d3 = 0;
            b3 = 0;
          } else {
            ec(a3, ($b(a3) | 0) == 0, 2629);
            d3 = 1;
          }
          c2[a3 + 964 >> 2] = b3;
          c2[a3 + 988 >> 2] = d3;
          return;
        }
        function kc(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          g3 = e2 + 8 | 0;
          f3 = e2 + 4 | 0;
          h3 = e2;
          c2[f3 >> 2] = b3;
          ec(a3, (c2[b3 + 944 >> 2] | 0) == 0, 2709);
          ec(a3, (c2[a3 + 964 >> 2] | 0) == 0, 2763);
          lc(a3);
          b3 = a3 + 948 | 0;
          c2[h3 >> 2] = (c2[b3 >> 2] | 0) + (d3 << 2);
          c2[g3 >> 2] = c2[h3 >> 2];
          mc(b3, g3, f3) | 0;
          c2[(c2[f3 >> 2] | 0) + 944 >> 2] = a3;
          nc(a3);
          l2 = e2;
          return;
        }
        function lc(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          d3 = $b(a3) | 0;
          if (d3 | 0 ? (c2[(ac(a3, 0) | 0) + 944 >> 2] | 0) != (a3 | 0) : 0) {
            e2 = c2[(c2[a3 + 976 >> 2] | 0) + 12 >> 2] | 0;
            f3 = a3 + 948 | 0;
            g3 = (e2 | 0) == 0;
            b3 = 0;
            do {
              h3 = c2[(c2[f3 >> 2] | 0) + (b3 << 2) >> 2] | 0;
              i4 = Xb(h3) | 0;
              c2[(c2[f3 >> 2] | 0) + (b3 << 2) >> 2] = i4;
              c2[i4 + 944 >> 2] = a3;
              if (!g3)
                Ib[e2 & 15](h3, i4, a3, b3);
              b3 = b3 + 1 | 0;
            } while ((b3 | 0) != (d3 | 0));
          }
          return;
        }
        function mc(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0;
          s3 = l2;
          l2 = l2 + 64 | 0;
          n3 = s3 + 52 | 0;
          i4 = s3 + 48 | 0;
          o3 = s3 + 28 | 0;
          p3 = s3 + 24 | 0;
          q3 = s3 + 20 | 0;
          r3 = s3;
          e2 = c2[a3 >> 2] | 0;
          g3 = e2;
          b3 = e2 + ((c2[b3 >> 2] | 0) - g3 >> 2 << 2) | 0;
          e2 = a3 + 4 | 0;
          f3 = c2[e2 >> 2] | 0;
          h3 = a3 + 8 | 0;
          do
            if (f3 >>> 0 < (c2[h3 >> 2] | 0) >>> 0) {
              if ((b3 | 0) == (f3 | 0)) {
                c2[b3 >> 2] = c2[d3 >> 2];
                c2[e2 >> 2] = (c2[e2 >> 2] | 0) + 4;
                break;
              }
              ef(a3, b3, f3, b3 + 4 | 0);
              if (b3 >>> 0 <= d3 >>> 0)
                d3 = (c2[e2 >> 2] | 0) >>> 0 > d3 >>> 0 ? d3 + 4 | 0 : d3;
              c2[b3 >> 2] = c2[d3 >> 2];
            } else {
              e2 = (f3 - g3 >> 2) + 1 | 0;
              f3 = le(a3) | 0;
              if (f3 >>> 0 < e2 >>> 0)
                jC(a3);
              m3 = c2[a3 >> 2] | 0;
              k3 = (c2[h3 >> 2] | 0) - m3 | 0;
              g3 = k3 >> 1;
              bf(r3, k3 >> 2 >>> 0 < f3 >>> 1 >>> 0 ? g3 >>> 0 < e2 >>> 0 ? e2 : g3 : f3, b3 - m3 >> 2, a3 + 8 | 0);
              m3 = r3 + 8 | 0;
              e2 = c2[m3 >> 2] | 0;
              g3 = r3 + 12 | 0;
              k3 = c2[g3 >> 2] | 0;
              h3 = k3;
              j3 = e2;
              do
                if ((e2 | 0) == (k3 | 0)) {
                  k3 = r3 + 4 | 0;
                  e2 = c2[k3 >> 2] | 0;
                  t3 = c2[r3 >> 2] | 0;
                  f3 = t3;
                  if (e2 >>> 0 <= t3 >>> 0) {
                    e2 = h3 - f3 >> 1;
                    e2 = (e2 | 0) == 0 ? 1 : e2;
                    bf(o3, e2, e2 >>> 2, c2[r3 + 16 >> 2] | 0);
                    c2[p3 >> 2] = c2[k3 >> 2];
                    c2[q3 >> 2] = c2[m3 >> 2];
                    c2[i4 >> 2] = c2[p3 >> 2];
                    c2[n3 >> 2] = c2[q3 >> 2];
                    gf(o3, i4, n3);
                    e2 = c2[r3 >> 2] | 0;
                    c2[r3 >> 2] = c2[o3 >> 2];
                    c2[o3 >> 2] = e2;
                    e2 = o3 + 4 | 0;
                    t3 = c2[k3 >> 2] | 0;
                    c2[k3 >> 2] = c2[e2 >> 2];
                    c2[e2 >> 2] = t3;
                    e2 = o3 + 8 | 0;
                    t3 = c2[m3 >> 2] | 0;
                    c2[m3 >> 2] = c2[e2 >> 2];
                    c2[e2 >> 2] = t3;
                    e2 = o3 + 12 | 0;
                    t3 = c2[g3 >> 2] | 0;
                    c2[g3 >> 2] = c2[e2 >> 2];
                    c2[e2 >> 2] = t3;
                    df(o3);
                    e2 = c2[m3 >> 2] | 0;
                    break;
                  }
                  g3 = e2;
                  h3 = ((g3 - f3 >> 2) + 1 | 0) / -2 | 0;
                  i4 = e2 + (h3 << 2) | 0;
                  f3 = j3 - g3 | 0;
                  g3 = f3 >> 2;
                  if (g3) {
                    GC(i4 | 0, e2 | 0, f3 | 0) | 0;
                    e2 = c2[k3 >> 2] | 0;
                  }
                  t3 = i4 + (g3 << 2) | 0;
                  c2[m3 >> 2] = t3;
                  c2[k3 >> 2] = e2 + (h3 << 2);
                  e2 = t3;
                }
              while (0);
              c2[e2 >> 2] = c2[d3 >> 2];
              c2[m3 >> 2] = (c2[m3 >> 2] | 0) + 4;
              b3 = ff(a3, r3, b3) | 0;
              df(r3);
            }
          while (0);
          l2 = s3;
          return b3 | 0;
        }
        function nc(b3) {
          b3 = b3 | 0;
          var d3 = 0;
          do {
            d3 = b3 + 984 | 0;
            if (a2[d3 >> 0] | 0)
              break;
            a2[d3 >> 0] = 1;
            g2[b3 + 504 >> 2] = T2(t2);
            b3 = c2[b3 + 944 >> 2] | 0;
          } while ((b3 | 0) != 0);
          return;
        }
        function oc(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -4 - e2 | 0) >>> 2) << 2);
            sC(d3);
          }
          return;
        }
        function pc(a3) {
          a3 = a3 | 0;
          return c2[a3 + 944 >> 2] | 0;
        }
        function qc(a3) {
          a3 = a3 | 0;
          ec(a3, (c2[a3 + 964 >> 2] | 0) != 0, 2832);
          nc(a3);
          return;
        }
        function rc(b3) {
          b3 = b3 | 0;
          return (a2[b3 + 984 >> 0] | 0) != 0 | 0;
        }
        function sc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          if (BB(a3, b3, 400) | 0) {
            BC(a3 | 0, b3 | 0, 400) | 0;
            nc(a3);
          }
          return;
        }
        function tc(a3) {
          a3 = a3 | 0;
          var b3 = ib;
          b3 = T2(g2[a3 + 44 >> 2]);
          a3 = Sb(b3) | 0;
          return T2(a3 ? T2(0) : b3);
        }
        function uc(b3) {
          b3 = b3 | 0;
          var d3 = ib;
          d3 = T2(g2[b3 + 48 >> 2]);
          if (Sb(d3) | 0)
            d3 = a2[(c2[b3 + 976 >> 2] | 0) + 2 >> 0] | 0 ? T2(1) : T2(0);
          return T2(d3);
        }
        function vc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 + 980 >> 2] = b3;
          return;
        }
        function wc(a3) {
          a3 = a3 | 0;
          return c2[a3 + 980 >> 2] | 0;
        }
        function xc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = a3 + 4 | 0;
          if ((c2[d3 >> 2] | 0) != (b3 | 0)) {
            c2[d3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function yc(a3) {
          a3 = a3 | 0;
          return c2[a3 + 4 >> 2] | 0;
        }
        function zc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = a3 + 8 | 0;
          if ((c2[d3 >> 2] | 0) != (b3 | 0)) {
            c2[d3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function Ac(a3) {
          a3 = a3 | 0;
          return c2[a3 + 8 >> 2] | 0;
        }
        function Bc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = a3 + 12 | 0;
          if ((c2[d3 >> 2] | 0) != (b3 | 0)) {
            c2[d3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function Cc(a3) {
          a3 = a3 | 0;
          return c2[a3 + 12 >> 2] | 0;
        }
        function Dc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = a3 + 16 | 0;
          if ((c2[d3 >> 2] | 0) != (b3 | 0)) {
            c2[d3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function Ec(a3) {
          a3 = a3 | 0;
          return c2[a3 + 16 >> 2] | 0;
        }
        function Fc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = a3 + 20 | 0;
          if ((c2[d3 >> 2] | 0) != (b3 | 0)) {
            c2[d3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function Gc(a3) {
          a3 = a3 | 0;
          return c2[a3 + 20 >> 2] | 0;
        }
        function Hc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = a3 + 24 | 0;
          if ((c2[d3 >> 2] | 0) != (b3 | 0)) {
            c2[d3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function Ic(a3) {
          a3 = a3 | 0;
          return c2[a3 + 24 >> 2] | 0;
        }
        function Jc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = a3 + 28 | 0;
          if ((c2[d3 >> 2] | 0) != (b3 | 0)) {
            c2[d3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function Kc(a3) {
          a3 = a3 | 0;
          return c2[a3 + 28 >> 2] | 0;
        }
        function Lc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = a3 + 32 | 0;
          if ((c2[d3 >> 2] | 0) != (b3 | 0)) {
            c2[d3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function Mc(a3) {
          a3 = a3 | 0;
          return c2[a3 + 32 >> 2] | 0;
        }
        function Nc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = a3 + 36 | 0;
          if ((c2[d3 >> 2] | 0) != (b3 | 0)) {
            c2[d3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function Oc(a3) {
          a3 = a3 | 0;
          return c2[a3 + 36 >> 2] | 0;
        }
        function Pc(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var c3 = 0;
          c3 = a3 + 40 | 0;
          if (T2(g2[c3 >> 2]) != b3) {
            g2[c3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function Qc(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var c3 = 0;
          c3 = a3 + 44 | 0;
          if (T2(g2[c3 >> 2]) != b3) {
            g2[c3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function Rc(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var c3 = 0;
          c3 = a3 + 48 | 0;
          if (T2(g2[c3 >> 2]) != b3) {
            g2[c3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function Sc(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(b3) | 0;
          d3 = (h3 ^ 1) & 1;
          e2 = a3 + 52 | 0;
          f3 = a3 + 56 | 0;
          if (!(h3 | T2(g2[e2 >> 2]) == b3 ? (c2[f3 >> 2] | 0) == (d3 | 0) : 0)) {
            g2[e2 >> 2] = b3;
            c2[f3 >> 2] = d3;
            nc(a3);
          }
          return;
        }
        function Tc(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0;
          e2 = a3 + 52 | 0;
          d3 = a3 + 56 | 0;
          if (!(!(T2(g2[e2 >> 2]) != b3) ? (c2[d3 >> 2] | 0) == 2 : 0)) {
            g2[e2 >> 2] = b3;
            e2 = Sb(b3) | 0;
            c2[d3 >> 2] = e2 ? 3 : 2;
            nc(a3);
          }
          return;
        }
        function Uc(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          e2 = b3 + 52 | 0;
          d3 = c2[e2 + 4 >> 2] | 0;
          b3 = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          c2[b3 + 4 >> 2] = d3;
          return;
        }
        function Vc(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(d3) | 0;
          e2 = (h3 ^ 1) & 1;
          f3 = a3 + 132 + (b3 << 3) | 0;
          b3 = a3 + 132 + (b3 << 3) + 4 | 0;
          if (!(h3 | T2(g2[f3 >> 2]) == d3 ? (c2[b3 >> 2] | 0) == (e2 | 0) : 0)) {
            g2[f3 >> 2] = d3;
            c2[b3 >> 2] = e2;
            nc(a3);
          }
          return;
        }
        function Wc(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(d3) | 0;
          e2 = h3 ? 0 : 2;
          f3 = a3 + 132 + (b3 << 3) | 0;
          b3 = a3 + 132 + (b3 << 3) + 4 | 0;
          if (!(h3 | T2(g2[f3 >> 2]) == d3 ? (c2[b3 >> 2] | 0) == (e2 | 0) : 0)) {
            g2[f3 >> 2] = d3;
            c2[b3 >> 2] = e2;
            nc(a3);
          }
          return;
        }
        function Xc(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = b3 + 132 + (d3 << 3) | 0;
          b3 = c2[e2 + 4 >> 2] | 0;
          d3 = a3;
          c2[d3 >> 2] = c2[e2 >> 2];
          c2[d3 + 4 >> 2] = b3;
          return;
        }
        function Yc(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(d3) | 0;
          e2 = (h3 ^ 1) & 1;
          f3 = a3 + 60 + (b3 << 3) | 0;
          b3 = a3 + 60 + (b3 << 3) + 4 | 0;
          if (!(h3 | T2(g2[f3 >> 2]) == d3 ? (c2[b3 >> 2] | 0) == (e2 | 0) : 0)) {
            g2[f3 >> 2] = d3;
            c2[b3 >> 2] = e2;
            nc(a3);
          }
          return;
        }
        function Zc(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(d3) | 0;
          e2 = h3 ? 0 : 2;
          f3 = a3 + 60 + (b3 << 3) | 0;
          b3 = a3 + 60 + (b3 << 3) + 4 | 0;
          if (!(h3 | T2(g2[f3 >> 2]) == d3 ? (c2[b3 >> 2] | 0) == (e2 | 0) : 0)) {
            g2[f3 >> 2] = d3;
            c2[b3 >> 2] = e2;
            nc(a3);
          }
          return;
        }
        function _c(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = b3 + 60 + (d3 << 3) | 0;
          b3 = c2[e2 + 4 >> 2] | 0;
          d3 = a3;
          c2[d3 >> 2] = c2[e2 >> 2];
          c2[d3 + 4 >> 2] = b3;
          return;
        }
        function $c(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = a3 + 60 + (b3 << 3) + 4 | 0;
          if ((c2[d3 >> 2] | 0) != 3) {
            g2[a3 + 60 + (b3 << 3) >> 2] = T2(t2);
            c2[d3 >> 2] = 3;
            nc(a3);
          }
          return;
        }
        function ad(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(d3) | 0;
          e2 = (h3 ^ 1) & 1;
          f3 = a3 + 204 + (b3 << 3) | 0;
          b3 = a3 + 204 + (b3 << 3) + 4 | 0;
          if (!(h3 | T2(g2[f3 >> 2]) == d3 ? (c2[b3 >> 2] | 0) == (e2 | 0) : 0)) {
            g2[f3 >> 2] = d3;
            c2[b3 >> 2] = e2;
            nc(a3);
          }
          return;
        }
        function bd(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(d3) | 0;
          e2 = h3 ? 0 : 2;
          f3 = a3 + 204 + (b3 << 3) | 0;
          b3 = a3 + 204 + (b3 << 3) + 4 | 0;
          if (!(h3 | T2(g2[f3 >> 2]) == d3 ? (c2[b3 >> 2] | 0) == (e2 | 0) : 0)) {
            g2[f3 >> 2] = d3;
            c2[b3 >> 2] = e2;
            nc(a3);
          }
          return;
        }
        function cd(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = b3 + 204 + (d3 << 3) | 0;
          b3 = c2[e2 + 4 >> 2] | 0;
          d3 = a3;
          c2[d3 >> 2] = c2[e2 >> 2];
          c2[d3 + 4 >> 2] = b3;
          return;
        }
        function dd(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(d3) | 0;
          e2 = (h3 ^ 1) & 1;
          f3 = a3 + 276 + (b3 << 3) | 0;
          b3 = a3 + 276 + (b3 << 3) + 4 | 0;
          if (!(h3 | T2(g2[f3 >> 2]) == d3 ? (c2[b3 >> 2] | 0) == (e2 | 0) : 0)) {
            g2[f3 >> 2] = d3;
            c2[b3 >> 2] = e2;
            nc(a3);
          }
          return;
        }
        function ed(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return T2(g2[a3 + 276 + (b3 << 3) >> 2]);
        }
        function fd(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(b3) | 0;
          d3 = (h3 ^ 1) & 1;
          e2 = a3 + 348 | 0;
          f3 = a3 + 352 | 0;
          if (!(h3 | T2(g2[e2 >> 2]) == b3 ? (c2[f3 >> 2] | 0) == (d3 | 0) : 0)) {
            g2[e2 >> 2] = b3;
            c2[f3 >> 2] = d3;
            nc(a3);
          }
          return;
        }
        function gd(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0;
          e2 = a3 + 348 | 0;
          d3 = a3 + 352 | 0;
          if (!(!(T2(g2[e2 >> 2]) != b3) ? (c2[d3 >> 2] | 0) == 2 : 0)) {
            g2[e2 >> 2] = b3;
            e2 = Sb(b3) | 0;
            c2[d3 >> 2] = e2 ? 3 : 2;
            nc(a3);
          }
          return;
        }
        function hd(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = a3 + 352 | 0;
          if ((c2[b3 >> 2] | 0) != 3) {
            g2[a3 + 348 >> 2] = T2(t2);
            c2[b3 >> 2] = 3;
            nc(a3);
          }
          return;
        }
        function id(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          e2 = b3 + 348 | 0;
          d3 = c2[e2 + 4 >> 2] | 0;
          b3 = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          c2[b3 + 4 >> 2] = d3;
          return;
        }
        function jd(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(b3) | 0;
          d3 = (h3 ^ 1) & 1;
          e2 = a3 + 356 | 0;
          f3 = a3 + 360 | 0;
          if (!(h3 | T2(g2[e2 >> 2]) == b3 ? (c2[f3 >> 2] | 0) == (d3 | 0) : 0)) {
            g2[e2 >> 2] = b3;
            c2[f3 >> 2] = d3;
            nc(a3);
          }
          return;
        }
        function kd(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0;
          e2 = a3 + 356 | 0;
          d3 = a3 + 360 | 0;
          if (!(!(T2(g2[e2 >> 2]) != b3) ? (c2[d3 >> 2] | 0) == 2 : 0)) {
            g2[e2 >> 2] = b3;
            e2 = Sb(b3) | 0;
            c2[d3 >> 2] = e2 ? 3 : 2;
            nc(a3);
          }
          return;
        }
        function ld(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = a3 + 360 | 0;
          if ((c2[b3 >> 2] | 0) != 3) {
            g2[a3 + 356 >> 2] = T2(t2);
            c2[b3 >> 2] = 3;
            nc(a3);
          }
          return;
        }
        function md(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          e2 = b3 + 356 | 0;
          d3 = c2[e2 + 4 >> 2] | 0;
          b3 = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          c2[b3 + 4 >> 2] = d3;
          return;
        }
        function nd(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(b3) | 0;
          d3 = (h3 ^ 1) & 1;
          e2 = a3 + 364 | 0;
          f3 = a3 + 368 | 0;
          if (!(h3 | T2(g2[e2 >> 2]) == b3 ? (c2[f3 >> 2] | 0) == (d3 | 0) : 0)) {
            g2[e2 >> 2] = b3;
            c2[f3 >> 2] = d3;
            nc(a3);
          }
          return;
        }
        function od(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(b3) | 0;
          d3 = h3 ? 0 : 2;
          e2 = a3 + 364 | 0;
          f3 = a3 + 368 | 0;
          if (!(h3 | T2(g2[e2 >> 2]) == b3 ? (c2[f3 >> 2] | 0) == (d3 | 0) : 0)) {
            g2[e2 >> 2] = b3;
            c2[f3 >> 2] = d3;
            nc(a3);
          }
          return;
        }
        function pd(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          e2 = b3 + 364 | 0;
          d3 = c2[e2 + 4 >> 2] | 0;
          b3 = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          c2[b3 + 4 >> 2] = d3;
          return;
        }
        function qd(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(b3) | 0;
          d3 = (h3 ^ 1) & 1;
          e2 = a3 + 372 | 0;
          f3 = a3 + 376 | 0;
          if (!(h3 | T2(g2[e2 >> 2]) == b3 ? (c2[f3 >> 2] | 0) == (d3 | 0) : 0)) {
            g2[e2 >> 2] = b3;
            c2[f3 >> 2] = d3;
            nc(a3);
          }
          return;
        }
        function rd(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(b3) | 0;
          d3 = h3 ? 0 : 2;
          e2 = a3 + 372 | 0;
          f3 = a3 + 376 | 0;
          if (!(h3 | T2(g2[e2 >> 2]) == b3 ? (c2[f3 >> 2] | 0) == (d3 | 0) : 0)) {
            g2[e2 >> 2] = b3;
            c2[f3 >> 2] = d3;
            nc(a3);
          }
          return;
        }
        function sd(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          e2 = b3 + 372 | 0;
          d3 = c2[e2 + 4 >> 2] | 0;
          b3 = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          c2[b3 + 4 >> 2] = d3;
          return;
        }
        function td(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(b3) | 0;
          d3 = (h3 ^ 1) & 1;
          e2 = a3 + 380 | 0;
          f3 = a3 + 384 | 0;
          if (!(h3 | T2(g2[e2 >> 2]) == b3 ? (c2[f3 >> 2] | 0) == (d3 | 0) : 0)) {
            g2[e2 >> 2] = b3;
            c2[f3 >> 2] = d3;
            nc(a3);
          }
          return;
        }
        function ud(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(b3) | 0;
          d3 = h3 ? 0 : 2;
          e2 = a3 + 380 | 0;
          f3 = a3 + 384 | 0;
          if (!(h3 | T2(g2[e2 >> 2]) == b3 ? (c2[f3 >> 2] | 0) == (d3 | 0) : 0)) {
            g2[e2 >> 2] = b3;
            c2[f3 >> 2] = d3;
            nc(a3);
          }
          return;
        }
        function vd(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          e2 = b3 + 380 | 0;
          d3 = c2[e2 + 4 >> 2] | 0;
          b3 = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          c2[b3 + 4 >> 2] = d3;
          return;
        }
        function wd(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(b3) | 0;
          d3 = (h3 ^ 1) & 1;
          e2 = a3 + 388 | 0;
          f3 = a3 + 392 | 0;
          if (!(h3 | T2(g2[e2 >> 2]) == b3 ? (c2[f3 >> 2] | 0) == (d3 | 0) : 0)) {
            g2[e2 >> 2] = b3;
            c2[f3 >> 2] = d3;
            nc(a3);
          }
          return;
        }
        function xd(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var d3 = 0, e2 = 0, f3 = 0, h3 = 0;
          h3 = Sb(b3) | 0;
          d3 = h3 ? 0 : 2;
          e2 = a3 + 388 | 0;
          f3 = a3 + 392 | 0;
          if (!(h3 | T2(g2[e2 >> 2]) == b3 ? (c2[f3 >> 2] | 0) == (d3 | 0) : 0)) {
            g2[e2 >> 2] = b3;
            c2[f3 >> 2] = d3;
            nc(a3);
          }
          return;
        }
        function yd(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          e2 = b3 + 388 | 0;
          d3 = c2[e2 + 4 >> 2] | 0;
          b3 = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          c2[b3 + 4 >> 2] = d3;
          return;
        }
        function zd(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var c3 = 0;
          c3 = a3 + 396 | 0;
          if (T2(g2[c3 >> 2]) != b3) {
            g2[c3 >> 2] = b3;
            nc(a3);
          }
          return;
        }
        function Ad(a3) {
          a3 = a3 | 0;
          return T2(g2[a3 + 396 >> 2]);
        }
        function Bd(a3) {
          a3 = a3 | 0;
          return T2(g2[a3 + 400 >> 2]);
        }
        function Cd(a3) {
          a3 = a3 | 0;
          return T2(g2[a3 + 404 >> 2]);
        }
        function Dd(a3) {
          a3 = a3 | 0;
          return T2(g2[a3 + 408 >> 2]);
        }
        function Ed(a3) {
          a3 = a3 | 0;
          return T2(g2[a3 + 412 >> 2]);
        }
        function Fd(a3) {
          a3 = a3 | 0;
          return T2(g2[a3 + 416 >> 2]);
        }
        function Gd(a3) {
          a3 = a3 | 0;
          return T2(g2[a3 + 420 >> 2]);
        }
        function Hd(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          ec(a3, (b3 | 0) < 6, 2918);
          switch (b3 | 0) {
            case 0: {
              b3 = (c2[a3 + 496 >> 2] | 0) == 2 ? 5 : 4;
              break;
            }
            case 2: {
              b3 = (c2[a3 + 496 >> 2] | 0) == 2 ? 4 : 5;
              break;
            }
            default: {
            }
          }
          return T2(g2[a3 + 424 + (b3 << 2) >> 2]);
        }
        function Id(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          ec(a3, (b3 | 0) < 6, 2918);
          switch (b3 | 0) {
            case 0: {
              b3 = (c2[a3 + 496 >> 2] | 0) == 2 ? 5 : 4;
              break;
            }
            case 2: {
              b3 = (c2[a3 + 496 >> 2] | 0) == 2 ? 4 : 5;
              break;
            }
            default: {
            }
          }
          return T2(g2[a3 + 448 + (b3 << 2) >> 2]);
        }
        function Jd(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          ec(a3, (b3 | 0) < 6, 2918);
          switch (b3 | 0) {
            case 0: {
              b3 = (c2[a3 + 496 >> 2] | 0) == 2 ? 5 : 4;
              break;
            }
            case 2: {
              b3 = (c2[a3 + 496 >> 2] | 0) == 2 ? 4 : 5;
              break;
            }
            default: {
            }
          }
          return T2(g2[a3 + 472 + (b3 << 2) >> 2]);
        }
        function Kd(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = ib;
          d3 = c2[a3 + 4 >> 2] | 0;
          if ((d3 | 0) == (c2[b3 + 4 >> 2] | 0)) {
            if (!d3)
              a3 = 1;
            else {
              e2 = T2(g2[a3 >> 2]);
              a3 = T2(C2(T2(e2 - T2(g2[b3 >> 2])))) < T2(999999974e-13);
            }
          } else
            a3 = 0;
          return a3 | 0;
        }
        function Ld(a3, b3) {
          a3 = T2(a3);
          b3 = T2(b3);
          var c3 = 0;
          if (Sb(a3) | 0)
            c3 = Sb(b3) | 0;
          else
            c3 = T2(C2(T2(a3 - b3))) < T2(999999974e-13);
          return c3 | 0;
        }
        function Md(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          Nd(a3, b3);
          return;
        }
        function Nd(b3, d3) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 4 | 0;
          c2[f3 >> 2] = 0;
          c2[f3 + 4 >> 2] = 0;
          c2[f3 + 8 >> 2] = 0;
          Ka(f3 | 0, b3 | 0, d3 | 0, 0);
          Vd(b3, 3, (a2[f3 + 11 >> 0] | 0) < 0 ? c2[f3 >> 2] | 0 : f3, e2);
          tC(f3);
          l2 = e2;
          return;
        }
        function Od(a3, b3, c3, d3) {
          a3 = T2(a3);
          b3 = T2(b3);
          c3 = c3 | 0;
          d3 = d3 | 0;
          var e2 = ib;
          a3 = T2(a3 * b3);
          e2 = T2(gC(a3, T2(1)));
          do
            if (!(Ld(e2, T2(0)) | 0)) {
              a3 = T2(a3 - e2);
              if (Ld(e2, T2(1)) | 0) {
                a3 = T2(a3 + T2(1));
                break;
              }
              if (c3) {
                a3 = T2(a3 + T2(1));
                break;
              }
              if (!d3) {
                if (e2 > T2(0.5))
                  e2 = T2(1);
                else {
                  d3 = Ld(e2, T2(0.5)) | 0;
                  e2 = d3 ? T2(1) : T2(0);
                }
                a3 = T2(a3 + e2);
              }
            } else
              a3 = T2(a3 - e2);
          while (0);
          return T2(a3 / b3);
        }
        function Pd(a3, b3, c3, d3, e2, f3, h3, i4, j3, k3, l3, m3, n3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          c3 = c3 | 0;
          d3 = T2(d3);
          e2 = e2 | 0;
          f3 = T2(f3);
          h3 = h3 | 0;
          i4 = T2(i4);
          j3 = T2(j3);
          k3 = T2(k3);
          l3 = T2(l3);
          m3 = T2(m3);
          n3 = n3 | 0;
          var o3 = 0, p3 = ib, q3 = ib, r3 = ib, s3 = ib, t3 = ib, u3 = ib;
          if (j3 < T2(0) | k3 < T2(0))
            n3 = 0;
          else {
            if ((n3 | 0) != 0 ? (p3 = T2(g2[n3 + 4 >> 2]), p3 != T2(0)) : 0) {
              r3 = T2(Od(b3, p3, 0, 0));
              s3 = T2(Od(d3, p3, 0, 0));
              q3 = T2(Od(f3, p3, 0, 0));
              p3 = T2(Od(i4, p3, 0, 0));
            } else {
              q3 = f3;
              r3 = b3;
              p3 = i4;
              s3 = d3;
            }
            if ((e2 | 0) == (a3 | 0))
              o3 = Ld(q3, r3) | 0;
            else
              o3 = 0;
            if ((h3 | 0) == (c3 | 0))
              n3 = Ld(p3, s3) | 0;
            else
              n3 = 0;
            if ((!o3 ? (t3 = T2(b3 - l3), !(Qd(a3, t3, j3) | 0)) : 0) ? !(Rd(a3, t3, e2, j3) | 0) : 0)
              o3 = Sd(a3, t3, e2, f3, j3) | 0;
            else
              o3 = 1;
            if ((!n3 ? (u3 = T2(d3 - m3), !(Qd(c3, u3, k3) | 0)) : 0) ? !(Rd(c3, u3, h3, k3) | 0) : 0)
              n3 = Sd(c3, u3, h3, i4, k3) | 0;
            else
              n3 = 1;
            n3 = o3 & n3;
          }
          return n3 | 0;
        }
        function Qd(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          c3 = T2(c3);
          if ((a3 | 0) == 1)
            a3 = Ld(b3, c3) | 0;
          else
            a3 = 0;
          return a3 | 0;
        }
        function Rd(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          c3 = c3 | 0;
          d3 = T2(d3);
          if ((a3 | 0) == 2 & (c3 | 0) == 0) {
            if (!(b3 >= d3))
              a3 = Ld(b3, d3) | 0;
            else
              a3 = 1;
          } else
            a3 = 0;
          return a3 | 0;
        }
        function Sd(a3, b3, c3, d3, e2) {
          a3 = a3 | 0;
          b3 = T2(b3);
          c3 = c3 | 0;
          d3 = T2(d3);
          e2 = T2(e2);
          if ((a3 | 0) == 2 & (c3 | 0) == 2 & d3 > b3) {
            if (!(e2 <= b3))
              a3 = Ld(b3, e2) | 0;
            else
              a3 = 1;
          } else
            a3 = 0;
          return a3 | 0;
        }
        function Td(b3, d3, e2, f3, i4, j3, k3, m3, n3, o3, p3) {
          b3 = b3 | 0;
          d3 = T2(d3);
          e2 = T2(e2);
          f3 = f3 | 0;
          i4 = i4 | 0;
          j3 = j3 | 0;
          k3 = T2(k3);
          m3 = T2(m3);
          n3 = n3 | 0;
          o3 = o3 | 0;
          p3 = p3 | 0;
          var q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = ib, v3 = ib, w3 = 0, x3 = 0, y3 = 0, z3 = 0, A3 = 0, B3 = 0, C3 = 0, D3 = 0, E3 = 0, F3 = 0, G3 = 0, H3 = ib, I3 = ib, J2 = ib, K2 = 0, L3 = 0;
          G3 = l2;
          l2 = l2 + 160 | 0;
          D3 = G3 + 152 | 0;
          C3 = G3 + 120 | 0;
          B3 = G3 + 104 | 0;
          y3 = G3 + 72 | 0;
          t3 = G3 + 56 | 0;
          A3 = G3 + 8 | 0;
          x3 = G3;
          z3 = (c2[2279] | 0) + 1 | 0;
          c2[2279] = z3;
          E3 = b3 + 984 | 0;
          if ((a2[E3 >> 0] | 0) != 0 ? (c2[b3 + 512 >> 2] | 0) != (c2[2278] | 0) : 0)
            w3 = 4;
          else if ((c2[b3 + 516 >> 2] | 0) == (f3 | 0))
            F3 = 0;
          else
            w3 = 4;
          if ((w3 | 0) == 4) {
            c2[b3 + 520 >> 2] = 0;
            c2[b3 + 924 >> 2] = -1;
            c2[b3 + 928 >> 2] = -1;
            g2[b3 + 932 >> 2] = T2(-1);
            g2[b3 + 936 >> 2] = T2(-1);
            F3 = 1;
          }
          a:
            do
              if (!(c2[b3 + 964 >> 2] | 0)) {
                if (n3) {
                  q3 = b3 + 916 | 0;
                  if (!(Ld(T2(g2[q3 >> 2]), d3) | 0)) {
                    w3 = 21;
                    break;
                  }
                  if (!(Ld(T2(g2[b3 + 920 >> 2]), e2) | 0)) {
                    w3 = 21;
                    break;
                  }
                  if ((c2[b3 + 924 >> 2] | 0) != (i4 | 0)) {
                    w3 = 21;
                    break;
                  }
                  q3 = (c2[b3 + 928 >> 2] | 0) == (j3 | 0) ? q3 : 0;
                  w3 = 22;
                  break;
                }
                s3 = c2[b3 + 520 >> 2] | 0;
                if (!s3)
                  w3 = 21;
                else {
                  r3 = 0;
                  while (1) {
                    q3 = b3 + 524 + (r3 * 24 | 0) | 0;
                    if (((Ld(T2(g2[q3 >> 2]), d3) | 0 ? Ld(T2(g2[b3 + 524 + (r3 * 24 | 0) + 4 >> 2]), e2) | 0 : 0) ? (c2[b3 + 524 + (r3 * 24 | 0) + 8 >> 2] | 0) == (i4 | 0) : 0) ? (c2[b3 + 524 + (r3 * 24 | 0) + 12 >> 2] | 0) == (j3 | 0) : 0) {
                      w3 = 22;
                      break a;
                    }
                    r3 = r3 + 1 | 0;
                    if (r3 >>> 0 >= s3 >>> 0) {
                      w3 = 21;
                      break;
                    }
                  }
                }
              } else {
                u3 = T2(Ud(b3, 2, k3));
                v3 = T2(Ud(b3, 0, k3));
                q3 = b3 + 916 | 0;
                J2 = T2(g2[q3 >> 2]);
                I3 = T2(g2[b3 + 920 >> 2]);
                H3 = T2(g2[b3 + 932 >> 2]);
                if (!(Pd(i4, d3, j3, e2, c2[b3 + 924 >> 2] | 0, J2, c2[b3 + 928 >> 2] | 0, I3, H3, T2(g2[b3 + 936 >> 2]), u3, v3, p3) | 0)) {
                  s3 = c2[b3 + 520 >> 2] | 0;
                  if (!s3)
                    w3 = 21;
                  else {
                    r3 = 0;
                    while (1) {
                      q3 = b3 + 524 + (r3 * 24 | 0) | 0;
                      H3 = T2(g2[q3 >> 2]);
                      I3 = T2(g2[b3 + 524 + (r3 * 24 | 0) + 4 >> 2]);
                      J2 = T2(g2[b3 + 524 + (r3 * 24 | 0) + 16 >> 2]);
                      if (Pd(i4, d3, j3, e2, c2[b3 + 524 + (r3 * 24 | 0) + 8 >> 2] | 0, H3, c2[b3 + 524 + (r3 * 24 | 0) + 12 >> 2] | 0, I3, J2, T2(g2[b3 + 524 + (r3 * 24 | 0) + 20 >> 2]), u3, v3, p3) | 0) {
                        w3 = 22;
                        break a;
                      }
                      r3 = r3 + 1 | 0;
                      if (r3 >>> 0 >= s3 >>> 0) {
                        w3 = 21;
                        break;
                      }
                    }
                  }
                } else
                  w3 = 22;
              }
            while (0);
          do
            if ((w3 | 0) == 21) {
              if (!(a2[11697] | 0)) {
                q3 = 0;
                w3 = 31;
              } else {
                q3 = 0;
                w3 = 28;
              }
            } else if ((w3 | 0) == 22) {
              r3 = (a2[11697] | 0) != 0;
              if (!((q3 | 0) != 0 & (F3 ^ 1)))
                if (r3) {
                  w3 = 28;
                  break;
                } else {
                  w3 = 31;
                  break;
                }
              t3 = q3 + 16 | 0;
              c2[b3 + 908 >> 2] = c2[t3 >> 2];
              s3 = q3 + 20 | 0;
              c2[b3 + 912 >> 2] = c2[s3 >> 2];
              if (!((a2[11698] | 0) == 0 | r3 ^ 1)) {
                c2[x3 >> 2] = Wd(z3) | 0;
                c2[x3 + 4 >> 2] = z3;
                Vd(b3, 4, 2972, x3);
                r3 = c2[b3 + 972 >> 2] | 0;
                if (r3 | 0)
                  nb[r3 & 127](b3);
                i4 = Xd(i4, n3) | 0;
                j3 = Xd(j3, n3) | 0;
                L3 = +T2(g2[t3 >> 2]);
                K2 = +T2(g2[s3 >> 2]);
                c2[A3 >> 2] = i4;
                c2[A3 + 4 >> 2] = j3;
                h2[A3 + 8 >> 3] = +d3;
                h2[A3 + 16 >> 3] = +e2;
                h2[A3 + 24 >> 3] = L3;
                h2[A3 + 32 >> 3] = K2;
                c2[A3 + 40 >> 2] = o3;
                Vd(b3, 4, 2989, A3);
              }
            }
          while (0);
          if ((w3 | 0) == 28) {
            r3 = Wd(z3) | 0;
            c2[t3 >> 2] = r3;
            c2[t3 + 4 >> 2] = z3;
            c2[t3 + 8 >> 2] = F3 ? 3047 : 11699;
            Vd(b3, 4, 3038, t3);
            r3 = c2[b3 + 972 >> 2] | 0;
            if (r3 | 0)
              nb[r3 & 127](b3);
            A3 = Xd(i4, n3) | 0;
            w3 = Xd(j3, n3) | 0;
            c2[y3 >> 2] = A3;
            c2[y3 + 4 >> 2] = w3;
            h2[y3 + 8 >> 3] = +d3;
            h2[y3 + 16 >> 3] = +e2;
            c2[y3 + 24 >> 2] = o3;
            Vd(b3, 4, 3049, y3);
            w3 = 31;
          }
          if ((w3 | 0) == 31) {
            Yd(b3, d3, e2, f3, i4, j3, k3, m3, n3, p3);
            if (a2[11697] | 0) {
              r3 = c2[2279] | 0;
              A3 = Wd(r3) | 0;
              c2[B3 >> 2] = A3;
              c2[B3 + 4 >> 2] = r3;
              c2[B3 + 8 >> 2] = F3 ? 3047 : 11699;
              Vd(b3, 4, 3083, B3);
              r3 = c2[b3 + 972 >> 2] | 0;
              if (r3 | 0)
                nb[r3 & 127](b3);
              A3 = Xd(i4, n3) | 0;
              B3 = Xd(j3, n3) | 0;
              K2 = +T2(g2[b3 + 908 >> 2]);
              L3 = +T2(g2[b3 + 912 >> 2]);
              c2[C3 >> 2] = A3;
              c2[C3 + 4 >> 2] = B3;
              h2[C3 + 8 >> 3] = K2;
              h2[C3 + 16 >> 3] = L3;
              c2[C3 + 24 >> 2] = o3;
              Vd(b3, 4, 3092, C3);
            }
            c2[b3 + 516 >> 2] = f3;
            if (!q3) {
              r3 = b3 + 520 | 0;
              q3 = c2[r3 >> 2] | 0;
              if ((q3 | 0) == 16) {
                if (a2[11697] | 0)
                  Vd(b3, 4, 3124, D3);
                c2[r3 >> 2] = 0;
                q3 = 0;
              }
              if (n3)
                q3 = b3 + 916 | 0;
              else {
                c2[r3 >> 2] = q3 + 1;
                q3 = b3 + 524 + (q3 * 24 | 0) | 0;
              }
              g2[q3 >> 2] = d3;
              g2[q3 + 4 >> 2] = e2;
              c2[q3 + 8 >> 2] = i4;
              c2[q3 + 12 >> 2] = j3;
              c2[q3 + 16 >> 2] = c2[b3 + 908 >> 2];
              c2[q3 + 20 >> 2] = c2[b3 + 912 >> 2];
              q3 = 0;
            }
          }
          if (n3) {
            c2[b3 + 416 >> 2] = c2[b3 + 908 >> 2];
            c2[b3 + 420 >> 2] = c2[b3 + 912 >> 2];
            a2[b3 + 985 >> 0] = 1;
            a2[E3 >> 0] = 0;
          }
          c2[2279] = (c2[2279] | 0) + -1;
          c2[b3 + 512 >> 2] = c2[2278];
          l2 = G3;
          return F3 | (q3 | 0) == 0 | 0;
        }
        function Ud(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = T2(c3);
          var d3 = ib;
          d3 = T2(me(a3, b3, c3));
          return T2(d3 + T2(ne(a3, b3, c3)));
        }
        function Vd(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          f3 = g3;
          c2[f3 >> 2] = e2;
          if (!a3)
            e2 = 0;
          else
            e2 = c2[a3 + 976 >> 2] | 0;
          ge(e2, a3, b3, d3, f3);
          l2 = g3;
          return;
        }
        function Wd(a3) {
          a3 = a3 | 0;
          return (a3 >>> 0 > 60 ? 3201 : 3201 + (60 - a3) | 0) | 0;
        }
        function Xd(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          d3 = f3 + 12 | 0;
          e2 = f3;
          c2[d3 >> 2] = c2[254];
          c2[d3 + 4 >> 2] = c2[255];
          c2[d3 + 8 >> 2] = c2[256];
          c2[e2 >> 2] = c2[257];
          c2[e2 + 4 >> 2] = c2[258];
          c2[e2 + 8 >> 2] = c2[259];
          if ((a3 | 0) > 2)
            a3 = 11699;
          else
            a3 = c2[(b3 ? e2 : d3) + (a3 << 2) >> 2] | 0;
          l2 = f3;
          return a3 | 0;
        }
        function Yd(b3, e2, f3, h3, i4, k3, m3, n3, o3, p3) {
          b3 = b3 | 0;
          e2 = T2(e2);
          f3 = T2(f3);
          h3 = h3 | 0;
          i4 = i4 | 0;
          k3 = k3 | 0;
          m3 = T2(m3);
          n3 = T2(n3);
          o3 = o3 | 0;
          p3 = p3 | 0;
          var q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = ib, v3 = ib, w3 = ib, x3 = ib, y3 = ib, z3 = ib, A3 = ib, B3 = 0, C3 = 0, D3 = 0, E3 = ib, F3 = ib, G3 = 0, H3 = ib, I3 = 0, J2 = 0, K2 = 0, L3 = 0, M3 = 0, N2 = 0, O3 = 0, P3 = 0, Q3 = 0, R3 = 0, S3 = 0, U3 = 0, V3 = 0, W3 = 0, X3 = 0, Y3 = 0, Z3 = 0, _3 = 0, $2 = ib, aa2 = ib, ba2 = ib, ca2 = ib, da2 = ib, ea2 = 0, fa2 = 0, ga2 = 0, ha2 = 0, ia2 = 0, ja2 = ib, ka2 = ib, la2 = ib, ma2 = ib, na2 = ib, oa2 = ib, pa2 = 0, qa2 = ib, ra2 = ib, sa2 = ib, ta2 = ib, ua2 = ib, va2 = ib, wa2 = 0, xa2 = 0, ya2 = ib, za2 = ib, Aa2 = 0, Ba2 = 0, Ca2 = 0, Da2 = 0, Ea2 = ib, Fa2 = 0, Ga2 = 0, Ha2 = 0, Ia2 = 0, Ja2 = 0, Ka2 = 0, La2 = 0, Ma2 = ib, Na2 = 0, Oa2 = 0;
          La2 = l2;
          l2 = l2 + 16 | 0;
          ea2 = La2 + 12 | 0;
          fa2 = La2 + 8 | 0;
          ga2 = La2 + 4 | 0;
          ha2 = La2;
          ec(b3, (i4 | 0) == 0 | (Sb(e2) | 0) ^ 1, 3326);
          ec(b3, (k3 | 0) == 0 | (Sb(f3) | 0) ^ 1, 3406);
          Ga2 = qe(b3, h3) | 0;
          c2[b3 + 496 >> 2] = Ga2;
          Ja2 = re(2, Ga2) | 0;
          Ka2 = re(0, Ga2) | 0;
          g2[b3 + 440 >> 2] = T2(me(b3, Ja2, m3));
          g2[b3 + 444 >> 2] = T2(ne(b3, Ja2, m3));
          g2[b3 + 428 >> 2] = T2(me(b3, Ka2, m3));
          g2[b3 + 436 >> 2] = T2(ne(b3, Ka2, m3));
          g2[b3 + 464 >> 2] = T2(se(b3, Ja2));
          g2[b3 + 468 >> 2] = T2(te(b3, Ja2));
          g2[b3 + 452 >> 2] = T2(se(b3, Ka2));
          g2[b3 + 460 >> 2] = T2(te(b3, Ka2));
          g2[b3 + 488 >> 2] = T2(ue(b3, Ja2, m3));
          g2[b3 + 492 >> 2] = T2(ve(b3, Ja2, m3));
          g2[b3 + 476 >> 2] = T2(ue(b3, Ka2, m3));
          g2[b3 + 484 >> 2] = T2(ve(b3, Ka2, m3));
          do
            if (!(c2[b3 + 964 >> 2] | 0)) {
              Ha2 = b3 + 948 | 0;
              Ia2 = (c2[b3 + 952 >> 2] | 0) - (c2[Ha2 >> 2] | 0) >> 2;
              if (!Ia2) {
                xe(b3, e2, f3, i4, k3, m3, n3);
                break;
              }
              if (!o3 ? ye(b3, e2, f3, i4, k3, m3, n3) | 0 : 0)
                break;
              lc(b3);
              Y3 = b3 + 508 | 0;
              a2[Y3 >> 0] = 0;
              Ja2 = re(c2[b3 + 4 >> 2] | 0, Ga2) | 0;
              Ka2 = ze(Ja2, Ga2) | 0;
              Fa2 = oe(Ja2) | 0;
              Z3 = c2[b3 + 8 >> 2] | 0;
              Ba2 = b3 + 28 | 0;
              _3 = (c2[Ba2 >> 2] | 0) != 0;
              ua2 = Fa2 ? m3 : n3;
              ya2 = Fa2 ? n3 : m3;
              $2 = T2(Ae(b3, Ja2, m3));
              aa2 = T2(Be(b3, Ja2, m3));
              u3 = T2(Ae(b3, Ka2, m3));
              va2 = T2(Ce(b3, Ja2, m3));
              za2 = T2(Ce(b3, Ka2, m3));
              D3 = Fa2 ? i4 : k3;
              Aa2 = Fa2 ? k3 : i4;
              Ea2 = Fa2 ? va2 : za2;
              y3 = Fa2 ? za2 : va2;
              ta2 = T2(Ud(b3, 2, m3));
              x3 = T2(Ud(b3, 0, m3));
              v3 = T2(T2(be(b3 + 364 | 0, m3)) - Ea2);
              w3 = T2(T2(be(b3 + 380 | 0, m3)) - Ea2);
              z3 = T2(T2(be(b3 + 372 | 0, n3)) - y3);
              A3 = T2(T2(be(b3 + 388 | 0, n3)) - y3);
              ba2 = Fa2 ? v3 : z3;
              ca2 = Fa2 ? w3 : A3;
              ta2 = T2(e2 - ta2);
              e2 = T2(ta2 - Ea2);
              if (Sb(e2) | 0)
                Ea2 = e2;
              else
                Ea2 = T2(cC(T2(eC(e2, w3)), v3));
              ra2 = T2(f3 - x3);
              e2 = T2(ra2 - y3);
              if (Sb(e2) | 0)
                sa2 = e2;
              else
                sa2 = T2(cC(T2(eC(e2, A3)), z3));
              v3 = Fa2 ? Ea2 : sa2;
              qa2 = Fa2 ? sa2 : Ea2;
              a:
                do
                  if ((D3 | 0) == 1) {
                    h3 = 0;
                    r3 = 0;
                    while (1) {
                      q3 = ac(b3, r3) | 0;
                      if (!h3) {
                        if (T2(Ee(q3)) > T2(0) ? T2(Fe(q3)) > T2(0) : 0)
                          h3 = q3;
                        else
                          h3 = 0;
                      } else if (De(q3) | 0) {
                        t3 = 0;
                        break a;
                      }
                      r3 = r3 + 1 | 0;
                      if (r3 >>> 0 >= Ia2 >>> 0) {
                        t3 = h3;
                        break;
                      }
                    }
                  } else
                    t3 = 0;
                while (0);
              B3 = t3 + 500 | 0;
              C3 = t3 + 504 | 0;
              h3 = 0;
              q3 = 0;
              e2 = T2(0);
              s3 = 0;
              do {
                r3 = c2[(c2[Ha2 >> 2] | 0) + (s3 << 2) >> 2] | 0;
                if ((c2[r3 + 36 >> 2] | 0) == 1) {
                  Ge(r3);
                  a2[r3 + 985 >> 0] = 1;
                  a2[r3 + 984 >> 0] = 0;
                } else {
                  $d(r3);
                  if (o3)
                    ce(r3, qe(r3, Ga2) | 0, v3, qa2, Ea2);
                  do
                    if ((c2[r3 + 24 >> 2] | 0) != 1) {
                      if ((r3 | 0) == (t3 | 0)) {
                        c2[B3 >> 2] = c2[2278];
                        g2[C3 >> 2] = T2(0);
                        break;
                      } else {
                        He(b3, r3, Ea2, i4, sa2, Ea2, sa2, k3, Ga2, p3);
                        break;
                      }
                    } else {
                      if (q3 | 0)
                        c2[q3 + 960 >> 2] = r3;
                      c2[r3 + 960 >> 2] = 0;
                      q3 = r3;
                      h3 = (h3 | 0) == 0 ? r3 : h3;
                    }
                  while (0);
                  oa2 = T2(g2[r3 + 504 >> 2]);
                  e2 = T2(e2 + T2(oa2 + T2(Ud(r3, Ja2, Ea2))));
                }
                s3 = s3 + 1 | 0;
              } while ((s3 | 0) != (Ia2 | 0));
              K2 = e2 > v3;
              pa2 = _3 & ((D3 | 0) == 2 & K2) ? 1 : D3;
              I3 = (Aa2 | 0) == 1;
              M3 = I3 & (o3 ^ 1);
              N2 = (pa2 | 0) == 1;
              O3 = (pa2 | 0) == 2;
              P3 = 976 + (Ja2 << 2) | 0;
              Q3 = (Aa2 | 2 | 0) == 2;
              W3 = I3 & (_3 ^ 1);
              R3 = 1040 + (Ka2 << 2) | 0;
              S3 = 1040 + (Ja2 << 2) | 0;
              U3 = 976 + (Ka2 << 2) | 0;
              V3 = (Aa2 | 0) != 1;
              K2 = _3 & ((D3 | 0) != 0 & K2);
              J2 = b3 + 976 | 0;
              I3 = I3 ^ 1;
              e2 = v3;
              G3 = 0;
              L3 = 0;
              oa2 = T2(0);
              da2 = T2(0);
              while (1) {
                b:
                  do
                    if (G3 >>> 0 < Ia2 >>> 0) {
                      C3 = c2[Ha2 >> 2] | 0;
                      s3 = 0;
                      A3 = T2(0);
                      z3 = T2(0);
                      w3 = T2(0);
                      v3 = T2(0);
                      r3 = 0;
                      q3 = 0;
                      t3 = G3;
                      while (1) {
                        B3 = c2[C3 + (t3 << 2) >> 2] | 0;
                        if ((c2[B3 + 36 >> 2] | 0) != 1 ? (c2[B3 + 940 >> 2] = L3, (c2[B3 + 24 >> 2] | 0) != 1) : 0) {
                          x3 = T2(Ud(B3, Ja2, Ea2));
                          X3 = c2[P3 >> 2] | 0;
                          f3 = T2(be(B3 + 380 + (X3 << 3) | 0, ua2));
                          y3 = T2(g2[B3 + 504 >> 2]);
                          f3 = T2(eC(f3, y3));
                          f3 = T2(cC(T2(be(B3 + 364 + (X3 << 3) | 0, ua2)), f3));
                          if (_3 & (s3 | 0) != 0 & T2(x3 + T2(z3 + f3)) > e2) {
                            k3 = s3;
                            x3 = A3;
                            D3 = t3;
                            break b;
                          }
                          x3 = T2(x3 + f3);
                          f3 = T2(z3 + x3);
                          x3 = T2(A3 + x3);
                          if (De(B3) | 0) {
                            w3 = T2(w3 + T2(Ee(B3)));
                            v3 = T2(v3 - T2(y3 * T2(Fe(B3))));
                          }
                          if (q3 | 0)
                            c2[q3 + 960 >> 2] = B3;
                          c2[B3 + 960 >> 2] = 0;
                          s3 = s3 + 1 | 0;
                          q3 = B3;
                          r3 = (r3 | 0) == 0 ? B3 : r3;
                        } else {
                          x3 = A3;
                          f3 = z3;
                        }
                        t3 = t3 + 1 | 0;
                        if (t3 >>> 0 < Ia2 >>> 0) {
                          A3 = x3;
                          z3 = f3;
                        } else {
                          k3 = s3;
                          D3 = t3;
                          break;
                        }
                      }
                    } else {
                      k3 = 0;
                      x3 = T2(0);
                      w3 = T2(0);
                      v3 = T2(0);
                      r3 = 0;
                      D3 = G3;
                    }
                  while (0);
                X3 = w3 > T2(0) & w3 < T2(1);
                E3 = X3 ? T2(1) : w3;
                X3 = v3 > T2(0) & v3 < T2(1);
                A3 = X3 ? T2(1) : v3;
                do
                  if (!N2) {
                    if (!(x3 < ba2 & ((Sb(ba2) | 0) ^ 1))) {
                      if (!(x3 > ca2 & ((Sb(ca2) | 0) ^ 1))) {
                        if (!(a2[(c2[J2 >> 2] | 0) + 3 >> 0] | 0)) {
                          if (!(E3 == T2(0)) ? !(T2(Ee(b3)) == T2(0)) : 0) {
                            X3 = 53;
                            break;
                          }
                          e2 = x3;
                          X3 = 53;
                        } else
                          X3 = 51;
                      } else {
                        e2 = ca2;
                        X3 = 51;
                      }
                    } else {
                      e2 = ba2;
                      X3 = 51;
                    }
                  } else
                    X3 = 51;
                while (0);
                if ((X3 | 0) == 51) {
                  X3 = 0;
                  if (Sb(e2) | 0)
                    X3 = 53;
                  else {
                    F3 = T2(e2 - x3);
                    H3 = e2;
                  }
                }
                if ((X3 | 0) == 53) {
                  X3 = 0;
                  if (x3 < T2(0)) {
                    F3 = T2(-x3);
                    H3 = e2;
                  } else {
                    F3 = T2(0);
                    H3 = e2;
                  }
                }
                if (!M3 ? (ia2 = (r3 | 0) == 0, !ia2) : 0) {
                  s3 = c2[P3 >> 2] | 0;
                  t3 = F3 < T2(0);
                  y3 = T2(F3 / A3);
                  B3 = F3 > T2(0);
                  z3 = T2(F3 / E3);
                  w3 = T2(0);
                  x3 = T2(0);
                  e2 = T2(0);
                  q3 = r3;
                  do {
                    f3 = T2(be(q3 + 380 + (s3 << 3) | 0, ua2));
                    v3 = T2(be(q3 + 364 + (s3 << 3) | 0, ua2));
                    v3 = T2(eC(f3, T2(cC(v3, T2(g2[q3 + 504 >> 2])))));
                    if (t3) {
                      f3 = T2(v3 * T2(Fe(q3)));
                      if (f3 != T2(-0) ? (Ma2 = T2(v3 - T2(y3 * f3)), ja2 = T2(Ie(q3, Ja2, Ma2, H3, Ea2)), Ma2 != ja2) : 0) {
                        w3 = T2(w3 - T2(ja2 - v3));
                        e2 = T2(e2 + f3);
                      }
                    } else if ((B3 ? (ka2 = T2(Ee(q3)), ka2 != T2(0)) : 0) ? (Ma2 = T2(v3 + T2(z3 * ka2)), la2 = T2(Ie(q3, Ja2, Ma2, H3, Ea2)), Ma2 != la2) : 0) {
                      w3 = T2(w3 - T2(la2 - v3));
                      x3 = T2(x3 - ka2);
                    }
                    q3 = c2[q3 + 960 >> 2] | 0;
                  } while ((q3 | 0) != 0);
                  e2 = T2(A3 + e2);
                  v3 = T2(F3 + w3);
                  if (!ia2) {
                    y3 = T2(E3 + x3);
                    t3 = c2[P3 >> 2] | 0;
                    B3 = v3 < T2(0);
                    C3 = e2 == T2(0);
                    z3 = T2(v3 / e2);
                    s3 = v3 > T2(0);
                    y3 = T2(v3 / y3);
                    e2 = T2(0);
                    do {
                      Ma2 = T2(be(r3 + 380 + (t3 << 3) | 0, ua2));
                      w3 = T2(be(r3 + 364 + (t3 << 3) | 0, ua2));
                      w3 = T2(eC(Ma2, T2(cC(w3, T2(g2[r3 + 504 >> 2])))));
                      if (B3) {
                        Ma2 = T2(w3 * T2(Fe(r3)));
                        v3 = T2(-Ma2);
                        if (Ma2 != T2(-0)) {
                          Ma2 = T2(z3 * v3);
                          v3 = T2(Ie(r3, Ja2, T2(w3 + (C3 ? v3 : Ma2)), H3, Ea2));
                        } else
                          v3 = w3;
                      } else if (s3 ? (ma2 = T2(Ee(r3)), ma2 != T2(0)) : 0)
                        v3 = T2(Ie(r3, Ja2, T2(w3 + T2(y3 * ma2)), H3, Ea2));
                      else
                        v3 = w3;
                      e2 = T2(e2 - T2(v3 - w3));
                      x3 = T2(Ud(r3, Ja2, Ea2));
                      f3 = T2(Ud(r3, Ka2, Ea2));
                      v3 = T2(v3 + x3);
                      g2[fa2 >> 2] = v3;
                      c2[ha2 >> 2] = 1;
                      w3 = T2(g2[r3 + 396 >> 2]);
                      c:
                        do
                          if (Sb(w3) | 0) {
                            q3 = Sb(qa2) | 0;
                            do
                              if (!q3) {
                                if (K2 | (ae(r3, Ka2, qa2) | 0 | I3))
                                  break;
                                if ((Je(b3, r3) | 0) != 4)
                                  break;
                                if ((c2[(Ke(r3, Ka2) | 0) + 4 >> 2] | 0) == 3)
                                  break;
                                if ((c2[(Le(r3, Ka2) | 0) + 4 >> 2] | 0) == 3)
                                  break;
                                g2[ea2 >> 2] = qa2;
                                c2[ga2 >> 2] = 1;
                                break c;
                              }
                            while (0);
                            if (ae(r3, Ka2, qa2) | 0) {
                              q3 = c2[r3 + 992 + (c2[U3 >> 2] << 2) >> 2] | 0;
                              Ma2 = T2(f3 + T2(be(q3, qa2)));
                              g2[ea2 >> 2] = Ma2;
                              q3 = V3 & (c2[q3 + 4 >> 2] | 0) == 2;
                              c2[ga2 >> 2] = ((Sb(Ma2) | 0 | q3) ^ 1) & 1;
                              break;
                            } else {
                              g2[ea2 >> 2] = qa2;
                              c2[ga2 >> 2] = q3 ? 0 : 2;
                              break;
                            }
                          } else {
                            Ma2 = T2(v3 - x3);
                            E3 = T2(Ma2 / w3);
                            Ma2 = T2(w3 * Ma2);
                            c2[ga2 >> 2] = 1;
                            g2[ea2 >> 2] = T2(f3 + (Fa2 ? E3 : Ma2));
                          }
                        while (0);
                      Me(r3, Ja2, H3, Ea2, ha2, fa2);
                      Me(r3, Ka2, qa2, Ea2, ga2, ea2);
                      do
                        if (!(ae(r3, Ka2, qa2) | 0) ? (Je(b3, r3) | 0) == 4 : 0) {
                          if ((c2[(Ke(r3, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                            q3 = 0;
                            break;
                          }
                          q3 = (c2[(Le(r3, Ka2) | 0) + 4 >> 2] | 0) != 3;
                        } else
                          q3 = 0;
                      while (0);
                      Ma2 = T2(g2[fa2 >> 2]);
                      E3 = T2(g2[ea2 >> 2]);
                      Na2 = c2[ha2 >> 2] | 0;
                      Oa2 = c2[ga2 >> 2] | 0;
                      Td(r3, Fa2 ? Ma2 : E3, Fa2 ? E3 : Ma2, Ga2, Fa2 ? Na2 : Oa2, Fa2 ? Oa2 : Na2, Ea2, sa2, o3 & (q3 ^ 1), 3488, p3) | 0;
                      a2[Y3 >> 0] = a2[Y3 >> 0] | a2[r3 + 508 >> 0];
                      r3 = c2[r3 + 960 >> 2] | 0;
                    } while ((r3 | 0) != 0);
                  } else
                    e2 = T2(0);
                } else
                  e2 = T2(0);
                e2 = T2(F3 + e2);
                Oa2 = e2 < T2(0) & 1;
                a2[Y3 >> 0] = Oa2 | d2[Y3 >> 0];
                if (O3 & e2 > T2(0)) {
                  q3 = c2[P3 >> 2] | 0;
                  if ((c2[b3 + 364 + (q3 << 3) + 4 >> 2] | 0) != 0 ? (na2 = T2(be(b3 + 364 + (q3 << 3) | 0, ua2)), na2 >= T2(0)) : 0)
                    v3 = T2(cC(T2(0), T2(na2 - T2(H3 - e2))));
                  else
                    v3 = T2(0);
                } else
                  v3 = e2;
                B3 = G3 >>> 0 < D3 >>> 0;
                if (B3) {
                  t3 = c2[Ha2 >> 2] | 0;
                  s3 = G3;
                  q3 = 0;
                  do {
                    r3 = c2[t3 + (s3 << 2) >> 2] | 0;
                    if (!(c2[r3 + 24 >> 2] | 0)) {
                      q3 = ((c2[(Ke(r3, Ja2) | 0) + 4 >> 2] | 0) == 3 & 1) + q3 | 0;
                      q3 = q3 + ((c2[(Le(r3, Ja2) | 0) + 4 >> 2] | 0) == 3 & 1) | 0;
                    }
                    s3 = s3 + 1 | 0;
                  } while ((s3 | 0) != (D3 | 0));
                  if (q3) {
                    x3 = T2(0);
                    f3 = T2(0);
                  } else
                    X3 = 101;
                } else
                  X3 = 101;
                d:
                  do
                    if ((X3 | 0) == 101) {
                      X3 = 0;
                      switch (Z3 | 0) {
                        case 1: {
                          q3 = 0;
                          x3 = T2(v3 * T2(0.5));
                          f3 = T2(0);
                          break d;
                        }
                        case 2: {
                          q3 = 0;
                          x3 = v3;
                          f3 = T2(0);
                          break d;
                        }
                        case 3: {
                          if (k3 >>> 0 <= 1) {
                            q3 = 0;
                            x3 = T2(0);
                            f3 = T2(0);
                            break d;
                          }
                          f3 = T2((k3 + -1 | 0) >>> 0);
                          q3 = 0;
                          x3 = T2(0);
                          f3 = T2(T2(cC(v3, T2(0))) / f3);
                          break d;
                        }
                        case 5: {
                          f3 = T2(v3 / T2((k3 + 1 | 0) >>> 0));
                          q3 = 0;
                          x3 = f3;
                          break d;
                        }
                        case 4: {
                          f3 = T2(v3 / T2(k3 >>> 0));
                          q3 = 0;
                          x3 = T2(f3 * T2(0.5));
                          break d;
                        }
                        default: {
                          q3 = 0;
                          x3 = T2(0);
                          f3 = T2(0);
                          break d;
                        }
                      }
                    }
                  while (0);
                e2 = T2($2 + x3);
                if (B3) {
                  w3 = T2(v3 / T2(q3 | 0));
                  s3 = c2[Ha2 >> 2] | 0;
                  r3 = G3;
                  v3 = T2(0);
                  do {
                    q3 = c2[s3 + (r3 << 2) >> 2] | 0;
                    e:
                      do
                        if ((c2[q3 + 36 >> 2] | 0) != 1) {
                          switch (c2[q3 + 24 >> 2] | 0) {
                            case 1: {
                              if (Ne(q3, Ja2) | 0) {
                                if (!o3)
                                  break e;
                                Ma2 = T2(Oe(q3, Ja2, H3));
                                Ma2 = T2(Ma2 + T2(se(b3, Ja2)));
                                Ma2 = T2(Ma2 + T2(me(q3, Ja2, Ea2)));
                                g2[q3 + 400 + (c2[S3 >> 2] << 2) >> 2] = Ma2;
                                break e;
                              }
                              break;
                            }
                            case 0: {
                              Oa2 = (c2[(Ke(q3, Ja2) | 0) + 4 >> 2] | 0) == 3;
                              Ma2 = T2(w3 + e2);
                              e2 = Oa2 ? Ma2 : e2;
                              if (o3) {
                                Oa2 = q3 + 400 + (c2[S3 >> 2] << 2) | 0;
                                g2[Oa2 >> 2] = T2(e2 + T2(g2[Oa2 >> 2]));
                              }
                              Oa2 = (c2[(Le(q3, Ja2) | 0) + 4 >> 2] | 0) == 3;
                              Ma2 = T2(w3 + e2);
                              e2 = Oa2 ? Ma2 : e2;
                              if (M3) {
                                Ma2 = T2(f3 + T2(Ud(q3, Ja2, Ea2)));
                                v3 = qa2;
                                e2 = T2(e2 + T2(Ma2 + T2(g2[q3 + 504 >> 2])));
                                break e;
                              } else {
                                e2 = T2(e2 + T2(f3 + T2(Pe(q3, Ja2, Ea2))));
                                v3 = T2(cC(v3, T2(Pe(q3, Ka2, Ea2))));
                                break e;
                              }
                            }
                            default: {
                            }
                          }
                          if (o3) {
                            Ma2 = T2(x3 + T2(se(b3, Ja2)));
                            Oa2 = q3 + 400 + (c2[S3 >> 2] << 2) | 0;
                            g2[Oa2 >> 2] = T2(Ma2 + T2(g2[Oa2 >> 2]));
                          }
                        }
                      while (0);
                    r3 = r3 + 1 | 0;
                  } while ((r3 | 0) != (D3 | 0));
                } else
                  v3 = T2(0);
                f3 = T2(aa2 + e2);
                if (Q3)
                  x3 = T2(T2(Ie(b3, Ka2, T2(za2 + v3), ya2, m3)) - za2);
                else
                  x3 = qa2;
                w3 = T2(T2(Ie(b3, Ka2, T2(za2 + (W3 ? qa2 : v3)), ya2, m3)) - za2);
                if (B3 & o3) {
                  r3 = G3;
                  do {
                    s3 = c2[(c2[Ha2 >> 2] | 0) + (r3 << 2) >> 2] | 0;
                    do
                      if ((c2[s3 + 36 >> 2] | 0) != 1) {
                        if ((c2[s3 + 24 >> 2] | 0) == 1) {
                          if (Ne(s3, Ka2) | 0) {
                            Ma2 = T2(Oe(s3, Ka2, qa2));
                            Ma2 = T2(Ma2 + T2(se(b3, Ka2)));
                            Ma2 = T2(Ma2 + T2(me(s3, Ka2, Ea2)));
                            q3 = c2[R3 >> 2] | 0;
                            g2[s3 + 400 + (q3 << 2) >> 2] = Ma2;
                            if (!(Sb(Ma2) | 0))
                              break;
                          } else
                            q3 = c2[R3 >> 2] | 0;
                          Ma2 = T2(se(b3, Ka2));
                          g2[s3 + 400 + (q3 << 2) >> 2] = T2(Ma2 + T2(me(s3, Ka2, Ea2)));
                          break;
                        }
                        q3 = Je(b3, s3) | 0;
                        do
                          if ((q3 | 0) == 4) {
                            if ((c2[(Ke(s3, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                              X3 = 139;
                              break;
                            }
                            if ((c2[(Le(s3, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                              X3 = 139;
                              break;
                            }
                            if (ae(s3, Ka2, qa2) | 0) {
                              e2 = u3;
                              break;
                            }
                            Na2 = c2[s3 + 908 + (c2[P3 >> 2] << 2) >> 2] | 0;
                            c2[ea2 >> 2] = Na2;
                            e2 = T2(g2[s3 + 396 >> 2]);
                            Oa2 = Sb(e2) | 0;
                            v3 = (c2[j2 >> 2] = Na2, T2(g2[j2 >> 2]));
                            if (Oa2)
                              e2 = w3;
                            else {
                              F3 = T2(Ud(s3, Ka2, Ea2));
                              Ma2 = T2(v3 / e2);
                              e2 = T2(e2 * v3);
                              e2 = T2(F3 + (Fa2 ? Ma2 : e2));
                            }
                            g2[fa2 >> 2] = e2;
                            g2[ea2 >> 2] = T2(T2(Ud(s3, Ja2, Ea2)) + v3);
                            c2[ga2 >> 2] = 1;
                            c2[ha2 >> 2] = 1;
                            Me(s3, Ja2, H3, Ea2, ga2, ea2);
                            Me(s3, Ka2, qa2, Ea2, ha2, fa2);
                            e2 = T2(g2[ea2 >> 2]);
                            F3 = T2(g2[fa2 >> 2]);
                            Ma2 = Fa2 ? e2 : F3;
                            e2 = Fa2 ? F3 : e2;
                            Oa2 = ((Sb(Ma2) | 0) ^ 1) & 1;
                            Td(s3, Ma2, e2, Ga2, Oa2, ((Sb(e2) | 0) ^ 1) & 1, Ea2, sa2, 1, 3493, p3) | 0;
                            e2 = u3;
                          } else
                            X3 = 139;
                        while (0);
                        f:
                          do
                            if ((X3 | 0) == 139) {
                              X3 = 0;
                              e2 = T2(x3 - T2(Pe(s3, Ka2, Ea2)));
                              do
                                if ((c2[(Ke(s3, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                                  if ((c2[(Le(s3, Ka2) | 0) + 4 >> 2] | 0) != 3)
                                    break;
                                  e2 = T2(u3 + T2(cC(T2(0), T2(e2 * T2(0.5)))));
                                  break f;
                                }
                              while (0);
                              if ((c2[(Le(s3, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                                e2 = u3;
                                break;
                              }
                              if ((c2[(Ke(s3, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                                e2 = T2(u3 + T2(cC(T2(0), e2)));
                                break;
                              }
                              switch (q3 | 0) {
                                case 1: {
                                  e2 = u3;
                                  break f;
                                }
                                case 2: {
                                  e2 = T2(u3 + T2(e2 * T2(0.5)));
                                  break f;
                                }
                                default: {
                                  e2 = T2(u3 + e2);
                                  break f;
                                }
                              }
                            }
                          while (0);
                        Ma2 = T2(oa2 + e2);
                        Oa2 = s3 + 400 + (c2[R3 >> 2] << 2) | 0;
                        g2[Oa2 >> 2] = T2(Ma2 + T2(g2[Oa2 >> 2]));
                      }
                    while (0);
                    r3 = r3 + 1 | 0;
                  } while ((r3 | 0) != (D3 | 0));
                }
                oa2 = T2(oa2 + w3);
                da2 = T2(cC(da2, f3));
                k3 = L3 + 1 | 0;
                if (D3 >>> 0 >= Ia2 >>> 0)
                  break;
                else {
                  e2 = H3;
                  G3 = D3;
                  L3 = k3;
                }
              }
              do
                if (o3) {
                  q3 = k3 >>> 0 > 1;
                  if (!q3 ? !(Qe(b3) | 0) : 0)
                    break;
                  if (!(Sb(qa2) | 0)) {
                    e2 = T2(qa2 - oa2);
                    g:
                      do
                        switch (c2[b3 + 12 >> 2] | 0) {
                          case 3: {
                            u3 = T2(u3 + e2);
                            z3 = T2(0);
                            break;
                          }
                          case 2: {
                            u3 = T2(u3 + T2(e2 * T2(0.5)));
                            z3 = T2(0);
                            break;
                          }
                          case 4: {
                            if (qa2 > oa2)
                              z3 = T2(e2 / T2(k3 >>> 0));
                            else
                              z3 = T2(0);
                            break;
                          }
                          case 7:
                            if (qa2 > oa2) {
                              u3 = T2(u3 + T2(e2 / T2(k3 << 1 >>> 0)));
                              z3 = T2(e2 / T2(k3 >>> 0));
                              z3 = q3 ? z3 : T2(0);
                              break g;
                            } else {
                              u3 = T2(u3 + T2(e2 * T2(0.5)));
                              z3 = T2(0);
                              break g;
                            }
                          case 6: {
                            z3 = T2(e2 / T2(L3 >>> 0));
                            z3 = qa2 > oa2 & q3 ? z3 : T2(0);
                            break;
                          }
                          default:
                            z3 = T2(0);
                        }
                      while (0);
                    if (k3 | 0) {
                      B3 = 1040 + (Ka2 << 2) | 0;
                      C3 = 976 + (Ka2 << 2) | 0;
                      t3 = 0;
                      r3 = 0;
                      while (1) {
                        h:
                          do
                            if (r3 >>> 0 < Ia2 >>> 0) {
                              v3 = T2(0);
                              w3 = T2(0);
                              e2 = T2(0);
                              s3 = r3;
                              while (1) {
                                q3 = c2[(c2[Ha2 >> 2] | 0) + (s3 << 2) >> 2] | 0;
                                do
                                  if ((c2[q3 + 36 >> 2] | 0) != 1 ? (c2[q3 + 24 >> 2] | 0) == 0 : 0) {
                                    if ((c2[q3 + 940 >> 2] | 0) != (t3 | 0))
                                      break h;
                                    if (Re(q3, Ka2) | 0) {
                                      Ma2 = T2(g2[q3 + 908 + (c2[C3 >> 2] << 2) >> 2]);
                                      e2 = T2(cC(e2, T2(Ma2 + T2(Ud(q3, Ka2, Ea2)))));
                                    }
                                    if ((Je(b3, q3) | 0) != 5)
                                      break;
                                    na2 = T2(Se(q3));
                                    na2 = T2(na2 + T2(me(q3, 0, Ea2)));
                                    Ma2 = T2(g2[q3 + 912 >> 2]);
                                    Ma2 = T2(T2(Ma2 + T2(Ud(q3, 0, Ea2))) - na2);
                                    na2 = T2(cC(w3, na2));
                                    Ma2 = T2(cC(v3, Ma2));
                                    v3 = Ma2;
                                    w3 = na2;
                                    e2 = T2(cC(e2, T2(na2 + Ma2)));
                                  }
                                while (0);
                                q3 = s3 + 1 | 0;
                                if (q3 >>> 0 < Ia2 >>> 0)
                                  s3 = q3;
                                else {
                                  s3 = q3;
                                  break;
                                }
                              }
                            } else {
                              w3 = T2(0);
                              e2 = T2(0);
                              s3 = r3;
                            }
                          while (0);
                        y3 = T2(z3 + e2);
                        f3 = u3;
                        u3 = T2(u3 + y3);
                        if (r3 >>> 0 < s3 >>> 0) {
                          x3 = T2(f3 + w3);
                          q3 = r3;
                          do {
                            r3 = c2[(c2[Ha2 >> 2] | 0) + (q3 << 2) >> 2] | 0;
                            i:
                              do
                                if ((c2[r3 + 36 >> 2] | 0) != 1 ? (c2[r3 + 24 >> 2] | 0) == 0 : 0)
                                  switch (Je(b3, r3) | 0) {
                                    case 1: {
                                      Ma2 = T2(f3 + T2(me(r3, Ka2, Ea2)));
                                      g2[r3 + 400 + (c2[B3 >> 2] << 2) >> 2] = Ma2;
                                      break i;
                                    }
                                    case 3: {
                                      Ma2 = T2(T2(u3 - T2(ne(r3, Ka2, Ea2))) - T2(g2[r3 + 908 + (c2[C3 >> 2] << 2) >> 2]));
                                      g2[r3 + 400 + (c2[B3 >> 2] << 2) >> 2] = Ma2;
                                      break i;
                                    }
                                    case 2: {
                                      Ma2 = T2(f3 + T2(T2(y3 - T2(g2[r3 + 908 + (c2[C3 >> 2] << 2) >> 2])) * T2(0.5)));
                                      g2[r3 + 400 + (c2[B3 >> 2] << 2) >> 2] = Ma2;
                                      break i;
                                    }
                                    case 4: {
                                      Ma2 = T2(f3 + T2(me(r3, Ka2, Ea2)));
                                      g2[r3 + 400 + (c2[B3 >> 2] << 2) >> 2] = Ma2;
                                      if (ae(r3, Ka2, qa2) | 0)
                                        break i;
                                      if (Fa2) {
                                        v3 = T2(g2[r3 + 908 >> 2]);
                                        e2 = T2(v3 + T2(Ud(r3, Ja2, Ea2)));
                                        w3 = y3;
                                      } else {
                                        w3 = T2(g2[r3 + 912 >> 2]);
                                        w3 = T2(w3 + T2(Ud(r3, Ka2, Ea2)));
                                        e2 = y3;
                                        v3 = T2(g2[r3 + 908 >> 2]);
                                      }
                                      if (Ld(e2, v3) | 0 ? Ld(w3, T2(g2[r3 + 912 >> 2])) | 0 : 0)
                                        break i;
                                      Td(r3, e2, w3, Ga2, 1, 1, Ea2, sa2, 1, 3501, p3) | 0;
                                      break i;
                                    }
                                    case 5: {
                                      g2[r3 + 404 >> 2] = T2(T2(x3 - T2(Se(r3))) + T2(Oe(r3, 0, qa2)));
                                      break i;
                                    }
                                    default:
                                      break i;
                                  }
                              while (0);
                            q3 = q3 + 1 | 0;
                          } while ((q3 | 0) != (s3 | 0));
                        }
                        t3 = t3 + 1 | 0;
                        if ((t3 | 0) == (k3 | 0))
                          break;
                        else
                          r3 = s3;
                      }
                    }
                  }
                }
              while (0);
              g2[b3 + 908 >> 2] = T2(Ie(b3, 2, ta2, m3, m3));
              g2[b3 + 912 >> 2] = T2(Ie(b3, 0, ra2, n3, m3));
              if ((pa2 | 0) != 0 ? (wa2 = c2[b3 + 32 >> 2] | 0, xa2 = (pa2 | 0) == 2, !(xa2 & (wa2 | 0) != 2)) : 0) {
                if (xa2 & (wa2 | 0) == 2) {
                  e2 = T2(va2 + H3);
                  e2 = T2(cC(T2(eC(e2, T2(Te(b3, Ja2, da2, ua2)))), va2));
                  X3 = 198;
                }
              } else {
                e2 = T2(Ie(b3, Ja2, da2, ua2, m3));
                X3 = 198;
              }
              if ((X3 | 0) == 198)
                g2[b3 + 908 + (c2[976 + (Ja2 << 2) >> 2] << 2) >> 2] = e2;
              if ((Aa2 | 0) != 0 ? (Ca2 = c2[b3 + 32 >> 2] | 0, Da2 = (Aa2 | 0) == 2, !(Da2 & (Ca2 | 0) != 2)) : 0) {
                if (Da2 & (Ca2 | 0) == 2) {
                  e2 = T2(za2 + qa2);
                  e2 = T2(cC(T2(eC(e2, T2(Te(b3, Ka2, T2(za2 + oa2), ya2)))), za2));
                  X3 = 204;
                }
              } else {
                e2 = T2(Ie(b3, Ka2, T2(za2 + oa2), ya2, m3));
                X3 = 204;
              }
              if ((X3 | 0) == 204)
                g2[b3 + 908 + (c2[976 + (Ka2 << 2) >> 2] << 2) >> 2] = e2;
              if (o3) {
                if ((c2[Ba2 >> 2] | 0) == 2) {
                  r3 = 976 + (Ka2 << 2) | 0;
                  s3 = 1040 + (Ka2 << 2) | 0;
                  q3 = 0;
                  do {
                    t3 = ac(b3, q3) | 0;
                    if (!(c2[t3 + 24 >> 2] | 0)) {
                      Na2 = c2[r3 >> 2] | 0;
                      Ma2 = T2(g2[b3 + 908 + (Na2 << 2) >> 2]);
                      Oa2 = t3 + 400 + (c2[s3 >> 2] << 2) | 0;
                      Ma2 = T2(Ma2 - T2(g2[Oa2 >> 2]));
                      g2[Oa2 >> 2] = T2(Ma2 - T2(g2[t3 + 908 + (Na2 << 2) >> 2]));
                    }
                    q3 = q3 + 1 | 0;
                  } while ((q3 | 0) != (Ia2 | 0));
                }
                if (h3 | 0) {
                  q3 = Fa2 ? pa2 : i4;
                  do {
                    Ue(b3, h3, Ea2, q3, sa2, Ga2, p3);
                    h3 = c2[h3 + 960 >> 2] | 0;
                  } while ((h3 | 0) != 0);
                }
                q3 = (Ja2 | 2 | 0) == 3;
                r3 = (Ka2 | 2 | 0) == 3;
                if (q3 | r3) {
                  h3 = 0;
                  do {
                    s3 = c2[(c2[Ha2 >> 2] | 0) + (h3 << 2) >> 2] | 0;
                    if ((c2[s3 + 36 >> 2] | 0) != 1) {
                      if (q3)
                        Ve(b3, s3, Ja2);
                      if (r3)
                        Ve(b3, s3, Ka2);
                    }
                    h3 = h3 + 1 | 0;
                  } while ((h3 | 0) != (Ia2 | 0));
                }
              }
            } else
              we(b3, e2, f3, i4, k3, m3, n3);
          while (0);
          l2 = La2;
          return;
        }
        function Zd(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          var c3 = 0;
          Vb(a3, b3 >= T2(0), 3147);
          c3 = b3 == T2(0);
          g2[a3 + 4 >> 2] = c3 ? T2(0) : b3;
          return;
        }
        function _d(b3, d3, e2, f3) {
          b3 = b3 | 0;
          d3 = T2(d3);
          e2 = T2(e2);
          f3 = f3 | 0;
          var h3 = ib, i4 = ib, j3 = 0, k3 = 0, l3 = 0;
          c2[2278] = (c2[2278] | 0) + 1;
          $d(b3);
          if (!(ae(b3, 2, d3) | 0)) {
            h3 = T2(be(b3 + 380 | 0, d3));
            if (!(h3 >= T2(0))) {
              l3 = ((Sb(d3) | 0) ^ 1) & 1;
              h3 = d3;
            } else
              l3 = 2;
          } else {
            h3 = T2(be(c2[b3 + 992 >> 2] | 0, d3));
            l3 = 1;
            h3 = T2(h3 + T2(Ud(b3, 2, d3)));
          }
          if (!(ae(b3, 0, e2) | 0)) {
            i4 = T2(be(b3 + 388 | 0, e2));
            if (!(i4 >= T2(0))) {
              k3 = ((Sb(e2) | 0) ^ 1) & 1;
              i4 = e2;
            } else
              k3 = 2;
          } else {
            i4 = T2(be(c2[b3 + 996 >> 2] | 0, e2));
            k3 = 1;
            i4 = T2(i4 + T2(Ud(b3, 0, d3)));
          }
          j3 = b3 + 976 | 0;
          if (Td(b3, h3, i4, f3, l3, k3, d3, e2, 1, 3189, c2[j3 >> 2] | 0) | 0 ? (ce(b3, c2[b3 + 496 >> 2] | 0, d3, e2, d3), de(b3, T2(g2[(c2[j3 >> 2] | 0) + 4 >> 2]), T2(0), T2(0)), a2[11696] | 0) : 0)
            Md(b3, 7);
          return;
        }
        function $d(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          h3 = i4 + 24 | 0;
          g3 = i4 + 16 | 0;
          e2 = i4 + 8 | 0;
          f3 = i4;
          d3 = 0;
          do {
            b3 = a3 + 380 + (d3 << 3) | 0;
            if (!((c2[a3 + 380 + (d3 << 3) + 4 >> 2] | 0) != 0 ? (j3 = b3, k3 = c2[j3 + 4 >> 2] | 0, m3 = e2, c2[m3 >> 2] = c2[j3 >> 2], c2[m3 + 4 >> 2] = k3, m3 = a3 + 364 + (d3 << 3) | 0, k3 = c2[m3 + 4 >> 2] | 0, j3 = f3, c2[j3 >> 2] = c2[m3 >> 2], c2[j3 + 4 >> 2] = k3, c2[g3 >> 2] = c2[e2 >> 2], c2[g3 + 4 >> 2] = c2[e2 + 4 >> 2], c2[h3 >> 2] = c2[f3 >> 2], c2[h3 + 4 >> 2] = c2[f3 + 4 >> 2], Kd(g3, h3) | 0) : 0))
              b3 = a3 + 348 + (d3 << 3) | 0;
            c2[a3 + 992 + (d3 << 2) >> 2] = b3;
            d3 = d3 + 1 | 0;
          } while ((d3 | 0) != 2);
          l2 = i4;
          return;
        }
        function ae(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = 0;
          a3 = c2[a3 + 992 + (c2[976 + (b3 << 2) >> 2] << 2) >> 2] | 0;
          switch (c2[a3 + 4 >> 2] | 0) {
            case 0:
            case 3: {
              a3 = 0;
              break;
            }
            case 1: {
              if (T2(g2[a3 >> 2]) < T2(0))
                a3 = 0;
              else
                e2 = 5;
              break;
            }
            case 2: {
              if (T2(g2[a3 >> 2]) < T2(0))
                a3 = 0;
              else
                a3 = (Sb(d3) | 0) ^ 1;
              break;
            }
            default:
              e2 = 5;
          }
          if ((e2 | 0) == 5)
            a3 = 1;
          return a3 | 0;
        }
        function be(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          switch (c2[a3 + 4 >> 2] | 0) {
            case 2: {
              b3 = T2(T2(T2(g2[a3 >> 2]) * b3) / T2(100));
              break;
            }
            case 1: {
              b3 = T2(g2[a3 >> 2]);
              break;
            }
            default:
              b3 = T2(t2);
          }
          return T2(b3);
        }
        function ce(a3, b3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          e2 = T2(e2);
          f3 = T2(f3);
          var h3 = 0, i4 = ib;
          b3 = c2[a3 + 944 >> 2] | 0 ? b3 : 1;
          h3 = re(c2[a3 + 4 >> 2] | 0, b3) | 0;
          b3 = ze(h3, b3) | 0;
          d3 = T2($e(a3, h3, d3));
          e2 = T2($e(a3, b3, e2));
          i4 = T2(d3 + T2(me(a3, h3, f3)));
          g2[a3 + 400 + (c2[1040 + (h3 << 2) >> 2] << 2) >> 2] = i4;
          d3 = T2(d3 + T2(ne(a3, h3, f3)));
          g2[a3 + 400 + (c2[1e3 + (h3 << 2) >> 2] << 2) >> 2] = d3;
          d3 = T2(e2 + T2(me(a3, b3, f3)));
          g2[a3 + 400 + (c2[1040 + (b3 << 2) >> 2] << 2) >> 2] = d3;
          f3 = T2(e2 + T2(ne(a3, b3, f3)));
          g2[a3 + 400 + (c2[1e3 + (b3 << 2) >> 2] << 2) >> 2] = f3;
          return;
        }
        function de(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = T2(b3);
          d3 = T2(d3);
          e2 = T2(e2);
          var f3 = 0, h3 = 0, i4 = ib, j3 = ib, k3 = 0, l3 = 0, m3 = ib, n3 = 0, o3 = ib, p3 = ib, q3 = ib, r3 = ib;
          if (!(b3 == T2(0))) {
            f3 = a3 + 400 | 0;
            r3 = T2(g2[f3 >> 2]);
            h3 = a3 + 404 | 0;
            q3 = T2(g2[h3 >> 2]);
            n3 = a3 + 416 | 0;
            p3 = T2(g2[n3 >> 2]);
            l3 = a3 + 420 | 0;
            i4 = T2(g2[l3 >> 2]);
            o3 = T2(r3 + d3);
            m3 = T2(q3 + e2);
            e2 = T2(o3 + p3);
            j3 = T2(m3 + i4);
            k3 = (c2[a3 + 988 >> 2] | 0) == 1;
            g2[f3 >> 2] = T2(Od(r3, b3, 0, k3));
            g2[h3 >> 2] = T2(Od(q3, b3, 0, k3));
            d3 = T2(gC(T2(p3 * b3), T2(1)));
            if (Ld(d3, T2(0)) | 0)
              h3 = 0;
            else
              h3 = (Ld(d3, T2(1)) | 0) ^ 1;
            d3 = T2(gC(T2(i4 * b3), T2(1)));
            if (Ld(d3, T2(0)) | 0)
              f3 = 0;
            else
              f3 = (Ld(d3, T2(1)) | 0) ^ 1;
            r3 = T2(Od(e2, b3, k3 & h3, k3 & (h3 ^ 1)));
            g2[n3 >> 2] = T2(r3 - T2(Od(o3, b3, 0, k3)));
            r3 = T2(Od(j3, b3, k3 & f3, k3 & (f3 ^ 1)));
            g2[l3 >> 2] = T2(r3 - T2(Od(m3, b3, 0, k3)));
            h3 = (c2[a3 + 952 >> 2] | 0) - (c2[a3 + 948 >> 2] | 0) >> 2;
            if (h3 | 0) {
              f3 = 0;
              do {
                de(ac(a3, f3) | 0, b3, o3, m3);
                f3 = f3 + 1 | 0;
              } while ((f3 | 0) != (h3 | 0));
            }
          }
          return;
        }
        function ee(a3, b3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          switch (d3 | 0) {
            case 5:
            case 0: {
              a3 = CB(c2[489] | 0, e2, f3) | 0;
              break;
            }
            default:
              a3 = iC(e2, f3) | 0;
          }
          return a3 | 0;
        }
        function fe(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          f3 = l2;
          l2 = l2 + 16 | 0;
          g3 = f3;
          c2[g3 >> 2] = e2;
          ge(a3, 0, b3, d3, g3);
          l2 = f3;
          return;
        }
        function ge(a3, b3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          a3 = a3 | 0 ? a3 : 956;
          Bb[c2[a3 + 8 >> 2] & 1](a3, b3, d3, e2, f3) | 0;
          if ((d3 | 0) == 5)
            Ta();
          else
            return;
        }
        function he(b3, c3, d3) {
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          a2[b3 + c3 >> 0] = d3 & 1;
          return;
        }
        function ie(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          c2[a3 >> 2] = 0;
          c2[a3 + 4 >> 2] = 0;
          c2[a3 + 8 >> 2] = 0;
          d3 = b3 + 4 | 0;
          e2 = (c2[d3 >> 2] | 0) - (c2[b3 >> 2] | 0) >> 2;
          if (e2 | 0) {
            je(a3, e2);
            ke(a3, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0, e2);
          }
          return;
        }
        function je(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          if ((le(a3) | 0) >>> 0 < b3 >>> 0)
            jC(a3);
          if (b3 >>> 0 > 1073741823)
            Ta();
          else {
            d3 = qC(b3 << 2) | 0;
            c2[a3 + 4 >> 2] = d3;
            c2[a3 >> 2] = d3;
            c2[a3 + 8 >> 2] = d3 + (b3 << 2);
            return;
          }
        }
        function ke(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          e2 = a3 + 4 | 0;
          a3 = d3 - b3 | 0;
          if ((a3 | 0) > 0) {
            BC(c2[e2 >> 2] | 0, b3 | 0, a3 | 0) | 0;
            c2[e2 >> 2] = (c2[e2 >> 2] | 0) + (a3 >>> 2 << 2);
          }
          return;
        }
        function le(a3) {
          a3 = a3 | 0;
          return 1073741823;
        }
        function me(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          if (oe(b3) | 0 ? (c2[a3 + 96 >> 2] | 0) != 0 : 0)
            a3 = a3 + 92 | 0;
          else
            a3 = Tb(a3 + 60 | 0, c2[1040 + (b3 << 2) >> 2] | 0, 992) | 0;
          return T2(pe(a3, d3));
        }
        function ne(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          if (oe(b3) | 0 ? (c2[a3 + 104 >> 2] | 0) != 0 : 0)
            a3 = a3 + 100 | 0;
          else
            a3 = Tb(a3 + 60 | 0, c2[1e3 + (b3 << 2) >> 2] | 0, 992) | 0;
          return T2(pe(a3, d3));
        }
        function oe(a3) {
          a3 = a3 | 0;
          return (a3 | 1 | 0) == 3 | 0;
        }
        function pe(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          if ((c2[a3 + 4 >> 2] | 0) == 3)
            b3 = T2(0);
          else
            b3 = T2(be(a3, b3));
          return T2(b3);
        }
        function qe(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          a3 = c2[a3 >> 2] | 0;
          return ((a3 | 0) == 0 ? (b3 | 0) > 1 ? b3 : 1 : a3) | 0;
        }
        function re(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var c3 = 0;
          a:
            do
              if ((b3 | 0) == 2) {
                switch (a3 | 0) {
                  case 2: {
                    a3 = 3;
                    break a;
                  }
                  case 3:
                    break;
                  default: {
                    c3 = 4;
                    break a;
                  }
                }
                a3 = 2;
              } else
                c3 = 4;
            while (0);
          return a3 | 0;
        }
        function se(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = ib;
          if (!((oe(b3) | 0 ? (c2[a3 + 312 >> 2] | 0) != 0 : 0) ? (d3 = T2(g2[a3 + 308 >> 2]), d3 >= T2(0)) : 0))
            d3 = T2(cC(T2(g2[(Tb(a3 + 276 | 0, c2[1040 + (b3 << 2) >> 2] | 0, 992) | 0) >> 2]), T2(0)));
          return T2(d3);
        }
        function te(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = ib;
          if (!((oe(b3) | 0 ? (c2[a3 + 320 >> 2] | 0) != 0 : 0) ? (d3 = T2(g2[a3 + 316 >> 2]), d3 >= T2(0)) : 0))
            d3 = T2(cC(T2(g2[(Tb(a3 + 276 | 0, c2[1e3 + (b3 << 2) >> 2] | 0, 992) | 0) >> 2]), T2(0)));
          return T2(d3);
        }
        function ue(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = ib;
          if (!((oe(b3) | 0 ? (c2[a3 + 240 >> 2] | 0) != 0 : 0) ? (e2 = T2(be(a3 + 236 | 0, d3)), e2 >= T2(0)) : 0))
            e2 = T2(cC(T2(be(Tb(a3 + 204 | 0, c2[1040 + (b3 << 2) >> 2] | 0, 992) | 0, d3)), T2(0)));
          return T2(e2);
        }
        function ve(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = ib;
          if (!((oe(b3) | 0 ? (c2[a3 + 248 >> 2] | 0) != 0 : 0) ? (e2 = T2(be(a3 + 244 | 0, d3)), e2 >= T2(0)) : 0))
            e2 = T2(cC(T2(be(Tb(a3 + 204 | 0, c2[1e3 + (b3 << 2) >> 2] | 0, 992) | 0, d3)), T2(0)));
          return T2(e2);
        }
        function we(a3, b3, d3, e2, f3, h3, i4) {
          a3 = a3 | 0;
          b3 = T2(b3);
          d3 = T2(d3);
          e2 = e2 | 0;
          f3 = f3 | 0;
          h3 = T2(h3);
          i4 = T2(i4);
          var j3 = ib, k3 = ib, m3 = ib, n3 = ib, o3 = ib, p3 = ib, q3 = 0, r3 = 0, s3 = 0;
          s3 = l2;
          l2 = l2 + 16 | 0;
          q3 = s3;
          r3 = a3 + 964 | 0;
          ec(a3, (c2[r3 >> 2] | 0) != 0, 3519);
          j3 = T2(Ce(a3, 2, b3));
          k3 = T2(Ce(a3, 0, b3));
          m3 = T2(Ud(a3, 2, b3));
          n3 = T2(Ud(a3, 0, b3));
          if (Sb(b3) | 0)
            o3 = b3;
          else
            o3 = T2(cC(T2(0), T2(T2(b3 - m3) - j3)));
          if (Sb(d3) | 0)
            p3 = d3;
          else
            p3 = T2(cC(T2(0), T2(T2(d3 - n3) - k3)));
          if ((e2 | 0) == 1 & (f3 | 0) == 1) {
            g2[a3 + 908 >> 2] = T2(Ie(a3, 2, T2(b3 - m3), h3, h3));
            b3 = T2(Ie(a3, 0, T2(d3 - n3), i4, h3));
          } else {
            Db[c2[r3 >> 2] & 1](q3, a3, o3, e2, p3, f3);
            o3 = T2(j3 + T2(g2[q3 >> 2]));
            p3 = T2(b3 - m3);
            g2[a3 + 908 >> 2] = T2(Ie(a3, 2, (e2 | 2 | 0) == 2 ? o3 : p3, h3, h3));
            p3 = T2(k3 + T2(g2[q3 + 4 >> 2]));
            b3 = T2(d3 - n3);
            b3 = T2(Ie(a3, 0, (f3 | 2 | 0) == 2 ? p3 : b3, i4, h3));
          }
          g2[a3 + 912 >> 2] = b3;
          l2 = s3;
          return;
        }
        function xe(a3, b3, c3, d3, e2, f3, h3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          c3 = T2(c3);
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = T2(f3);
          h3 = T2(h3);
          var i4 = ib, j3 = ib, k3 = ib, l3 = ib;
          k3 = T2(Ce(a3, 2, f3));
          i4 = T2(Ce(a3, 0, f3));
          l3 = T2(Ud(a3, 2, f3));
          j3 = T2(Ud(a3, 0, f3));
          b3 = T2(b3 - l3);
          g2[a3 + 908 >> 2] = T2(Ie(a3, 2, (d3 | 2 | 0) == 2 ? k3 : b3, f3, f3));
          c3 = T2(c3 - j3);
          g2[a3 + 912 >> 2] = T2(Ie(a3, 0, (e2 | 2 | 0) == 2 ? i4 : c3, h3, f3));
          return;
        }
        function ye(a3, b3, c3, d3, e2, f3, h3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          c3 = T2(c3);
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = T2(f3);
          h3 = T2(h3);
          var i4 = 0, j3 = ib, k3 = ib;
          i4 = (d3 | 0) == 2;
          if ((!(b3 <= T2(0) & i4) ? !(c3 <= T2(0) & (e2 | 0) == 2) : 0) ? !((d3 | 0) == 1 & (e2 | 0) == 1) : 0)
            a3 = 0;
          else {
            j3 = T2(Ud(a3, 0, f3));
            k3 = T2(Ud(a3, 2, f3));
            i4 = b3 < T2(0) & i4 | (Sb(b3) | 0);
            b3 = T2(b3 - k3);
            g2[a3 + 908 >> 2] = T2(Ie(a3, 2, i4 ? T2(0) : b3, f3, f3));
            b3 = T2(c3 - j3);
            i4 = c3 < T2(0) & (e2 | 0) == 2 | (Sb(c3) | 0);
            g2[a3 + 912 >> 2] = T2(Ie(a3, 0, i4 ? T2(0) : b3, h3, f3));
            a3 = 1;
          }
          return a3 | 0;
        }
        function ze(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          if (We(a3) | 0)
            a3 = re(2, b3) | 0;
          else
            a3 = 0;
          return a3 | 0;
        }
        function Ae(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = T2(c3);
          c3 = T2(ue(a3, b3, c3));
          return T2(c3 + T2(se(a3, b3)));
        }
        function Be(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = T2(c3);
          c3 = T2(ve(a3, b3, c3));
          return T2(c3 + T2(te(a3, b3)));
        }
        function Ce(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = T2(c3);
          var d3 = ib;
          d3 = T2(Ae(a3, b3, c3));
          return T2(d3 + T2(Be(a3, b3, c3)));
        }
        function De(a3) {
          a3 = a3 | 0;
          if (!(c2[a3 + 24 >> 2] | 0)) {
            if (T2(Ee(a3)) != T2(0))
              a3 = 1;
            else
              a3 = T2(Fe(a3)) != T2(0);
          } else
            a3 = 0;
          return a3 | 0;
        }
        function Ee(a3) {
          a3 = a3 | 0;
          var b3 = ib;
          if (c2[a3 + 944 >> 2] | 0) {
            b3 = T2(g2[a3 + 44 >> 2]);
            if (Sb(b3) | 0) {
              b3 = T2(g2[a3 + 40 >> 2]);
              a3 = b3 > T2(0) & ((Sb(b3) | 0) ^ 1);
              return T2(a3 ? b3 : T2(0));
            }
          } else
            b3 = T2(0);
          return T2(b3);
        }
        function Fe(b3) {
          b3 = b3 | 0;
          var d3 = ib, e2 = 0, f3 = ib;
          do
            if (c2[b3 + 944 >> 2] | 0) {
              d3 = T2(g2[b3 + 48 >> 2]);
              if (Sb(d3) | 0) {
                e2 = a2[(c2[b3 + 976 >> 2] | 0) + 2 >> 0] | 0;
                if (e2 << 24 >> 24 == 0 ? (f3 = T2(g2[b3 + 40 >> 2]), f3 < T2(0) & ((Sb(f3) | 0) ^ 1)) : 0) {
                  d3 = T2(-f3);
                  break;
                }
                d3 = e2 << 24 >> 24 ? T2(1) : T2(0);
              }
            } else
              d3 = T2(0);
          while (0);
          return T2(d3);
        }
        function Ge(b3) {
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          yC(b3 + 400 | 0, 0, 540) | 0;
          a2[b3 + 985 >> 0] = 1;
          lc(b3);
          e2 = $b(b3) | 0;
          if (e2 | 0) {
            d3 = b3 + 948 | 0;
            b3 = 0;
            do {
              Ge(c2[(c2[d3 >> 2] | 0) + (b3 << 2) >> 2] | 0);
              b3 = b3 + 1 | 0;
            } while ((b3 | 0) != (e2 | 0));
          }
          return;
        }
        function He(a3, b3, d3, e2, f3, h3, i4, j3, k3, m3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          e2 = e2 | 0;
          f3 = T2(f3);
          h3 = T2(h3);
          i4 = T2(i4);
          j3 = j3 | 0;
          k3 = k3 | 0;
          m3 = m3 | 0;
          var n3 = 0, o3 = ib, p3 = 0, q3 = 0, r3 = ib, s3 = ib, u3 = 0, v3 = ib, w3 = 0, x3 = ib, y3 = 0, z3 = 0, A3 = 0, B3 = 0, C3 = 0, D3 = 0, E3 = 0, F3 = 0, G3 = 0, H3 = 0;
          G3 = l2;
          l2 = l2 + 16 | 0;
          A3 = G3 + 12 | 0;
          B3 = G3 + 8 | 0;
          C3 = G3 + 4 | 0;
          D3 = G3;
          F3 = re(c2[a3 + 4 >> 2] | 0, k3) | 0;
          y3 = oe(F3) | 0;
          o3 = T2(be(Xe(b3) | 0, y3 ? h3 : i4));
          z3 = ae(b3, 2, h3) | 0;
          E3 = ae(b3, 0, i4) | 0;
          do
            if (!(Sb(o3) | 0) ? !(Sb(y3 ? d3 : f3) | 0) : 0) {
              n3 = b3 + 504 | 0;
              if (!(Sb(T2(g2[n3 >> 2])) | 0)) {
                if (!(Ye(c2[b3 + 976 >> 2] | 0, 0) | 0))
                  break;
                if ((c2[b3 + 500 >> 2] | 0) == (c2[2278] | 0))
                  break;
              }
              g2[n3 >> 2] = T2(cC(o3, T2(Ce(b3, F3, h3))));
            } else
              p3 = 7;
          while (0);
          do
            if ((p3 | 0) == 7) {
              w3 = y3 ^ 1;
              if (!(w3 | z3 ^ 1)) {
                i4 = T2(be(c2[b3 + 992 >> 2] | 0, h3));
                g2[b3 + 504 >> 2] = T2(cC(i4, T2(Ce(b3, 2, h3))));
                break;
              }
              if (!(y3 | E3 ^ 1)) {
                i4 = T2(be(c2[b3 + 996 >> 2] | 0, i4));
                g2[b3 + 504 >> 2] = T2(cC(i4, T2(Ce(b3, 0, h3))));
                break;
              }
              g2[A3 >> 2] = T2(t2);
              g2[B3 >> 2] = T2(t2);
              c2[C3 >> 2] = 0;
              c2[D3 >> 2] = 0;
              v3 = T2(Ud(b3, 2, h3));
              x3 = T2(Ud(b3, 0, h3));
              if (z3) {
                r3 = T2(v3 + T2(be(c2[b3 + 992 >> 2] | 0, h3)));
                g2[A3 >> 2] = r3;
                c2[C3 >> 2] = 1;
                q3 = 1;
              } else {
                q3 = 0;
                r3 = T2(t2);
              }
              if (E3) {
                o3 = T2(x3 + T2(be(c2[b3 + 996 >> 2] | 0, i4)));
                g2[B3 >> 2] = o3;
                c2[D3 >> 2] = 1;
                n3 = 1;
              } else {
                n3 = 0;
                o3 = T2(t2);
              }
              p3 = c2[a3 + 32 >> 2] | 0;
              if (!(y3 & (p3 | 0) == 2)) {
                if (Sb(r3) | 0 ? !(Sb(d3) | 0) : 0) {
                  g2[A3 >> 2] = d3;
                  c2[C3 >> 2] = 2;
                  q3 = 2;
                  r3 = d3;
                }
              } else
                p3 = 2;
              if ((!((p3 | 0) == 2 & w3) ? Sb(o3) | 0 : 0) ? !(Sb(f3) | 0) : 0) {
                g2[B3 >> 2] = f3;
                c2[D3 >> 2] = 2;
                n3 = 2;
                o3 = f3;
              }
              s3 = T2(g2[b3 + 396 >> 2]);
              u3 = Sb(s3) | 0;
              do
                if (!u3) {
                  if ((q3 | 0) == 1 & w3) {
                    g2[B3 >> 2] = T2(T2(r3 - v3) / s3);
                    c2[D3 >> 2] = 1;
                    n3 = 1;
                    p3 = 1;
                    break;
                  }
                  if (y3 & (n3 | 0) == 1) {
                    g2[A3 >> 2] = T2(s3 * T2(o3 - x3));
                    c2[C3 >> 2] = 1;
                    n3 = 1;
                    p3 = 1;
                  } else
                    p3 = q3;
                } else
                  p3 = q3;
              while (0);
              H3 = Sb(d3) | 0;
              q3 = (Je(a3, b3) | 0) != 4;
              if (!(y3 | z3 | ((e2 | 0) != 1 | H3) | (q3 | (p3 | 0) == 1)) ? (g2[A3 >> 2] = d3, c2[C3 >> 2] = 1, !u3) : 0) {
                g2[B3 >> 2] = T2(T2(d3 - v3) / s3);
                c2[D3 >> 2] = 1;
                n3 = 1;
              }
              if (!(E3 | w3 | ((j3 | 0) != 1 | (Sb(f3) | 0)) | (q3 | (n3 | 0) == 1)) ? (g2[B3 >> 2] = f3, c2[D3 >> 2] = 1, !u3) : 0) {
                g2[A3 >> 2] = T2(s3 * T2(f3 - x3));
                c2[C3 >> 2] = 1;
              }
              Me(b3, 2, h3, h3, C3, A3);
              Me(b3, 0, i4, h3, D3, B3);
              d3 = T2(g2[A3 >> 2]);
              f3 = T2(g2[B3 >> 2]);
              Td(b3, d3, f3, k3, c2[C3 >> 2] | 0, c2[D3 >> 2] | 0, h3, i4, 0, 3565, m3) | 0;
              i4 = T2(g2[b3 + 908 + (c2[976 + (F3 << 2) >> 2] << 2) >> 2]);
              g2[b3 + 504 >> 2] = T2(cC(i4, T2(Ce(b3, F3, h3))));
            }
          while (0);
          c2[b3 + 500 >> 2] = c2[2278];
          l2 = G3;
          return;
        }
        function Ie(a3, b3, c3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = T2(c3);
          d3 = T2(d3);
          e2 = T2(e2);
          d3 = T2(Te(a3, b3, c3, d3));
          return T2(cC(d3, T2(Ce(a3, b3, e2))));
        }
        function Je(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          b3 = b3 + 20 | 0;
          b3 = c2[((c2[b3 >> 2] | 0) == 0 ? a3 + 16 | 0 : b3) >> 2] | 0;
          if ((b3 | 0) == 5 ? We(c2[a3 + 4 >> 2] | 0) | 0 : 0)
            b3 = 1;
          return b3 | 0;
        }
        function Ke(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          if (oe(b3) | 0 ? (c2[a3 + 96 >> 2] | 0) != 0 : 0)
            b3 = 4;
          else
            b3 = c2[1040 + (b3 << 2) >> 2] | 0;
          return a3 + 60 + (b3 << 3) | 0;
        }
        function Le(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          if (oe(b3) | 0 ? (c2[a3 + 104 >> 2] | 0) != 0 : 0)
            b3 = 5;
          else
            b3 = c2[1e3 + (b3 << 2) >> 2] | 0;
          return a3 + 60 + (b3 << 3) | 0;
        }
        function Me(a3, b3, d3, e2, f3, h3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          e2 = T2(e2);
          f3 = f3 | 0;
          h3 = h3 | 0;
          d3 = T2(be(a3 + 380 + (c2[976 + (b3 << 2) >> 2] << 3) | 0, d3));
          d3 = T2(d3 + T2(Ud(a3, b3, e2)));
          switch (c2[f3 >> 2] | 0) {
            case 2:
            case 1: {
              f3 = Sb(d3) | 0;
              e2 = T2(g2[h3 >> 2]);
              g2[h3 >> 2] = f3 | e2 < d3 ? e2 : d3;
              break;
            }
            case 0: {
              if (!(Sb(d3) | 0)) {
                c2[f3 >> 2] = 2;
                g2[h3 >> 2] = d3;
              }
              break;
            }
            default: {
            }
          }
          return;
        }
        function Ne(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          a3 = a3 + 132 | 0;
          if (oe(b3) | 0 ? (c2[(Tb(a3, 4, 948) | 0) + 4 >> 2] | 0) != 0 : 0)
            a3 = 1;
          else
            a3 = (c2[(Tb(a3, c2[1040 + (b3 << 2) >> 2] | 0, 948) | 0) + 4 >> 2] | 0) != 0;
          return a3 | 0;
        }
        function Oe(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = 0, f3 = 0;
          a3 = a3 + 132 | 0;
          if (oe(b3) | 0 ? (e2 = Tb(a3, 4, 948) | 0, (c2[e2 + 4 >> 2] | 0) != 0) : 0)
            f3 = 4;
          else {
            e2 = Tb(a3, c2[1040 + (b3 << 2) >> 2] | 0, 948) | 0;
            if (!(c2[e2 + 4 >> 2] | 0))
              d3 = T2(0);
            else
              f3 = 4;
          }
          if ((f3 | 0) == 4)
            d3 = T2(be(e2, d3));
          return T2(d3);
        }
        function Pe(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = ib;
          e2 = T2(g2[a3 + 908 + (c2[976 + (b3 << 2) >> 2] << 2) >> 2]);
          e2 = T2(e2 + T2(me(a3, b3, d3)));
          return T2(e2 + T2(ne(a3, b3, d3)));
        }
        function Qe(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          a:
            do
              if (!(We(c2[a3 + 4 >> 2] | 0) | 0)) {
                if ((c2[a3 + 16 >> 2] | 0) != 5) {
                  d3 = $b(a3) | 0;
                  if (!d3)
                    b3 = 0;
                  else {
                    b3 = 0;
                    while (1) {
                      e2 = ac(a3, b3) | 0;
                      if ((c2[e2 + 24 >> 2] | 0) == 0 ? (c2[e2 + 20 >> 2] | 0) == 5 : 0) {
                        b3 = 1;
                        break a;
                      }
                      b3 = b3 + 1 | 0;
                      if (b3 >>> 0 >= d3 >>> 0) {
                        b3 = 0;
                        break;
                      }
                    }
                  }
                } else
                  b3 = 1;
              } else
                b3 = 0;
            while (0);
          return b3 | 0;
        }
        function Re(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = ib;
          d3 = T2(g2[a3 + 908 + (c2[976 + (b3 << 2) >> 2] << 2) >> 2]);
          return d3 >= T2(0) & ((Sb(d3) | 0) ^ 1) | 0;
        }
        function Se(a3) {
          a3 = a3 | 0;
          var b3 = ib, d3 = 0, e2 = 0, f3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = ib;
          d3 = c2[a3 + 968 >> 2] | 0;
          if (!d3) {
            h3 = $b(a3) | 0;
            do
              if (h3 | 0) {
                d3 = 0;
                f3 = 0;
                while (1) {
                  e2 = ac(a3, f3) | 0;
                  if (c2[e2 + 940 >> 2] | 0) {
                    i4 = 8;
                    break;
                  }
                  if ((c2[e2 + 24 >> 2] | 0) != 1) {
                    j3 = (Je(a3, e2) | 0) == 5;
                    if (j3) {
                      d3 = e2;
                      break;
                    } else
                      d3 = (d3 | 0) == 0 ? e2 : d3;
                  }
                  f3 = f3 + 1 | 0;
                  if (f3 >>> 0 >= h3 >>> 0) {
                    i4 = 8;
                    break;
                  }
                }
                if ((i4 | 0) == 8) {
                  if (!d3)
                    break;
                }
                b3 = T2(Se(d3));
                return T2(b3 + T2(g2[d3 + 404 >> 2]));
              }
            while (0);
            b3 = T2(g2[a3 + 912 >> 2]);
          } else {
            k3 = T2(g2[a3 + 908 >> 2]);
            b3 = T2(g2[a3 + 912 >> 2]);
            b3 = T2(mb[d3 & 0](a3, k3, b3));
            ec(a3, (Sb(b3) | 0) ^ 1, 3573);
          }
          return T2(b3);
        }
        function Te(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = T2(c3);
          d3 = T2(d3);
          var e2 = ib, f3 = 0;
          if (!(We(b3) | 0)) {
            if (oe(b3) | 0) {
              b3 = 0;
              f3 = 3;
            } else {
              d3 = T2(t2);
              e2 = T2(t2);
            }
          } else {
            b3 = 1;
            f3 = 3;
          }
          if ((f3 | 0) == 3) {
            e2 = T2(be(a3 + 364 + (b3 << 3) | 0, d3));
            d3 = T2(be(a3 + 380 + (b3 << 3) | 0, d3));
          }
          f3 = d3 < c3 & (d3 >= T2(0) & ((Sb(d3) | 0) ^ 1));
          c3 = f3 ? d3 : c3;
          f3 = e2 >= T2(0) & ((Sb(e2) | 0) ^ 1) & c3 < e2;
          return T2(f3 ? e2 : c3);
        }
        function Ue(a3, b3, d3, e2, f3, h3, i4) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          e2 = e2 | 0;
          f3 = T2(f3);
          h3 = h3 | 0;
          i4 = i4 | 0;
          var j3 = ib, k3 = ib, l3 = 0, m3 = 0, n3 = ib, o3 = ib, p3 = ib, q3 = 0, r3 = 0, s3 = 0, u3 = 0, v3 = ib, w3 = 0;
          s3 = re(c2[a3 + 4 >> 2] | 0, h3) | 0;
          q3 = ze(s3, h3) | 0;
          r3 = oe(s3) | 0;
          n3 = T2(Ud(b3, 2, d3));
          o3 = T2(Ud(b3, 0, d3));
          if (!(ae(b3, 2, d3) | 0)) {
            if (Ne(b3, 2) | 0 ? Ze(b3, 2) | 0 : 0) {
              j3 = T2(g2[a3 + 908 >> 2]);
              k3 = T2(se(a3, 2));
              k3 = T2(j3 - T2(k3 + T2(te(a3, 2))));
              j3 = T2(Oe(b3, 2, d3));
              j3 = T2(Ie(b3, 2, T2(k3 - T2(j3 + T2(_e(b3, 2, d3)))), d3, d3));
            } else
              j3 = T2(t2);
          } else
            j3 = T2(n3 + T2(be(c2[b3 + 992 >> 2] | 0, d3)));
          if (!(ae(b3, 0, f3) | 0)) {
            if (Ne(b3, 0) | 0 ? Ze(b3, 0) | 0 : 0) {
              k3 = T2(g2[a3 + 912 >> 2]);
              v3 = T2(se(a3, 0));
              v3 = T2(k3 - T2(v3 + T2(te(a3, 0))));
              k3 = T2(Oe(b3, 0, f3));
              k3 = T2(Ie(b3, 0, T2(v3 - T2(k3 + T2(_e(b3, 0, f3)))), f3, d3));
            } else
              k3 = T2(t2);
          } else
            k3 = T2(o3 + T2(be(c2[b3 + 996 >> 2] | 0, f3)));
          l3 = Sb(j3) | 0;
          m3 = Sb(k3) | 0;
          do
            if (l3 ^ m3 ? (p3 = T2(g2[b3 + 396 >> 2]), !(Sb(p3) | 0)) : 0)
              if (l3) {
                j3 = T2(n3 + T2(T2(k3 - o3) * p3));
                break;
              } else {
                v3 = T2(o3 + T2(T2(j3 - n3) / p3));
                k3 = m3 ? v3 : k3;
                break;
              }
          while (0);
          m3 = Sb(j3) | 0;
          l3 = Sb(k3) | 0;
          if (m3 | l3) {
            w3 = (m3 ^ 1) & 1;
            e2 = d3 > T2(0) & ((e2 | 0) != 0 & m3);
            j3 = r3 ? j3 : e2 ? d3 : j3;
            Td(b3, j3, k3, h3, r3 ? w3 : e2 ? 2 : w3, m3 & (l3 ^ 1) & 1, j3, k3, 0, 3623, i4) | 0;
            j3 = T2(g2[b3 + 908 >> 2]);
            j3 = T2(j3 + T2(Ud(b3, 2, d3)));
            k3 = T2(g2[b3 + 912 >> 2]);
            k3 = T2(k3 + T2(Ud(b3, 0, d3)));
          }
          Td(b3, j3, k3, h3, 1, 1, j3, k3, 1, 3635, i4) | 0;
          if (Ze(b3, s3) | 0 ? !(Ne(b3, s3) | 0) : 0) {
            w3 = c2[976 + (s3 << 2) >> 2] | 0;
            v3 = T2(g2[a3 + 908 + (w3 << 2) >> 2]);
            v3 = T2(v3 - T2(g2[b3 + 908 + (w3 << 2) >> 2]));
            v3 = T2(v3 - T2(te(a3, s3)));
            v3 = T2(v3 - T2(ne(b3, s3, d3)));
            v3 = T2(v3 - T2(_e(b3, s3, r3 ? d3 : f3)));
            g2[b3 + 400 + (c2[1040 + (s3 << 2) >> 2] << 2) >> 2] = v3;
          } else
            u3 = 21;
          do
            if ((u3 | 0) == 21) {
              if (!(Ne(b3, s3) | 0) ? (c2[a3 + 8 >> 2] | 0) == 1 : 0) {
                w3 = c2[976 + (s3 << 2) >> 2] | 0;
                v3 = T2(g2[a3 + 908 + (w3 << 2) >> 2]);
                v3 = T2(T2(v3 - T2(g2[b3 + 908 + (w3 << 2) >> 2])) * T2(0.5));
                g2[b3 + 400 + (c2[1040 + (s3 << 2) >> 2] << 2) >> 2] = v3;
                break;
              }
              if (!(Ne(b3, s3) | 0) ? (c2[a3 + 8 >> 2] | 0) == 2 : 0) {
                w3 = c2[976 + (s3 << 2) >> 2] | 0;
                v3 = T2(g2[a3 + 908 + (w3 << 2) >> 2]);
                v3 = T2(v3 - T2(g2[b3 + 908 + (w3 << 2) >> 2]));
                g2[b3 + 400 + (c2[1040 + (s3 << 2) >> 2] << 2) >> 2] = v3;
              }
            }
          while (0);
          if (Ze(b3, q3) | 0 ? !(Ne(b3, q3) | 0) : 0) {
            w3 = c2[976 + (q3 << 2) >> 2] | 0;
            v3 = T2(g2[a3 + 908 + (w3 << 2) >> 2]);
            v3 = T2(v3 - T2(g2[b3 + 908 + (w3 << 2) >> 2]));
            v3 = T2(v3 - T2(te(a3, q3)));
            v3 = T2(v3 - T2(ne(b3, q3, d3)));
            v3 = T2(v3 - T2(_e(b3, q3, r3 ? f3 : d3)));
            g2[b3 + 400 + (c2[1040 + (q3 << 2) >> 2] << 2) >> 2] = v3;
          } else
            u3 = 30;
          do
            if ((u3 | 0) == 30 ? !(Ne(b3, q3) | 0) : 0) {
              if ((Je(a3, b3) | 0) == 2) {
                w3 = c2[976 + (q3 << 2) >> 2] | 0;
                v3 = T2(g2[a3 + 908 + (w3 << 2) >> 2]);
                v3 = T2(T2(v3 - T2(g2[b3 + 908 + (w3 << 2) >> 2])) * T2(0.5));
                g2[b3 + 400 + (c2[1040 + (q3 << 2) >> 2] << 2) >> 2] = v3;
                break;
              }
              w3 = (Je(a3, b3) | 0) == 3;
              if (w3 ^ (c2[a3 + 28 >> 2] | 0) == 2) {
                w3 = c2[976 + (q3 << 2) >> 2] | 0;
                v3 = T2(g2[a3 + 908 + (w3 << 2) >> 2]);
                v3 = T2(v3 - T2(g2[b3 + 908 + (w3 << 2) >> 2]));
                g2[b3 + 400 + (c2[1040 + (q3 << 2) >> 2] << 2) >> 2] = v3;
              }
            }
          while (0);
          return;
        }
        function Ve(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = ib, f3 = 0;
          f3 = c2[976 + (d3 << 2) >> 2] | 0;
          e2 = T2(g2[b3 + 908 + (f3 << 2) >> 2]);
          e2 = T2(T2(g2[a3 + 908 + (f3 << 2) >> 2]) - e2);
          e2 = T2(e2 - T2(g2[b3 + 400 + (c2[1040 + (d3 << 2) >> 2] << 2) >> 2]));
          g2[b3 + 400 + (c2[1e3 + (d3 << 2) >> 2] << 2) >> 2] = e2;
          return;
        }
        function We(a3) {
          a3 = a3 | 0;
          return (a3 | 1 | 0) == 1 | 0;
        }
        function Xe(b3) {
          b3 = b3 | 0;
          var d3 = ib;
          switch (c2[b3 + 56 >> 2] | 0) {
            case 0:
            case 3: {
              d3 = T2(g2[b3 + 40 >> 2]);
              if (d3 > T2(0) & ((Sb(d3) | 0) ^ 1))
                b3 = a2[(c2[b3 + 976 >> 2] | 0) + 2 >> 0] | 0 ? 1056 : 992;
              else
                b3 = 1056;
              break;
            }
            default:
              b3 = b3 + 52 | 0;
          }
          return b3 | 0;
        }
        function Ye(b3, c3) {
          b3 = b3 | 0;
          c3 = c3 | 0;
          return (a2[b3 + c3 >> 0] | 0) != 0 | 0;
        }
        function Ze(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          a3 = a3 + 132 | 0;
          if (oe(b3) | 0 ? (c2[(Tb(a3, 5, 948) | 0) + 4 >> 2] | 0) != 0 : 0)
            a3 = 1;
          else
            a3 = (c2[(Tb(a3, c2[1e3 + (b3 << 2) >> 2] | 0, 948) | 0) + 4 >> 2] | 0) != 0;
          return a3 | 0;
        }
        function _e(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = T2(d3);
          var e2 = 0, f3 = 0;
          a3 = a3 + 132 | 0;
          if (oe(b3) | 0 ? (e2 = Tb(a3, 5, 948) | 0, (c2[e2 + 4 >> 2] | 0) != 0) : 0)
            f3 = 4;
          else {
            e2 = Tb(a3, c2[1e3 + (b3 << 2) >> 2] | 0, 948) | 0;
            if (!(c2[e2 + 4 >> 2] | 0))
              d3 = T2(0);
            else
              f3 = 4;
          }
          if ((f3 | 0) == 4)
            d3 = T2(be(e2, d3));
          return T2(d3);
        }
        function $e(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = T2(c3);
          if (Ne(a3, b3) | 0)
            c3 = T2(Oe(a3, b3, c3));
          else
            c3 = T2(-T2(_e(a3, b3, c3)));
          return T2(c3);
        }
        function af(a3) {
          a3 = T2(a3);
          return (g2[j2 >> 2] = a3, c2[j2 >> 2] | 0) | 0;
        }
        function bf(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 1073741823)
                Ta();
              else {
                f3 = qC(b3 << 2) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 2) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 2);
          return;
        }
        function cf(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 2) << 2) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function df(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -4 - b3 | 0) >>> 2) << 2);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function ef(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          h3 = a3 + 4 | 0;
          i4 = c2[h3 >> 2] | 0;
          f3 = i4 - e2 | 0;
          g3 = f3 >> 2;
          a3 = b3 + (g3 << 2) | 0;
          if (a3 >>> 0 < d3 >>> 0) {
            e2 = i4;
            do {
              c2[e2 >> 2] = c2[a3 >> 2];
              a3 = a3 + 4 | 0;
              e2 = (c2[h3 >> 2] | 0) + 4 | 0;
              c2[h3 >> 2] = e2;
            } while (a3 >>> 0 < d3 >>> 0);
          }
          if (g3 | 0)
            GC(i4 + (0 - g3 << 2) | 0, b3 | 0, f3 | 0) | 0;
          return;
        }
        function ff(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          i4 = b3 + 4 | 0;
          j3 = c2[i4 >> 2] | 0;
          f3 = c2[a3 >> 2] | 0;
          h3 = d3;
          g3 = h3 - f3 | 0;
          e2 = j3 + (0 - (g3 >> 2) << 2) | 0;
          c2[i4 >> 2] = e2;
          if ((g3 | 0) > 0)
            BC(e2 | 0, f3 | 0, g3 | 0) | 0;
          f3 = a3 + 4 | 0;
          g3 = b3 + 8 | 0;
          e2 = (c2[f3 >> 2] | 0) - h3 | 0;
          if ((e2 | 0) > 0) {
            BC(c2[g3 >> 2] | 0, d3 | 0, e2 | 0) | 0;
            c2[g3 >> 2] = (c2[g3 >> 2] | 0) + (e2 >>> 2 << 2);
          }
          h3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = c2[i4 >> 2];
          c2[i4 >> 2] = h3;
          h3 = c2[f3 >> 2] | 0;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = h3;
          h3 = a3 + 8 | 0;
          d3 = b3 + 12 | 0;
          a3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[d3 >> 2];
          c2[d3 >> 2] = a3;
          c2[b3 >> 2] = c2[i4 >> 2];
          return j3 | 0;
        }
        function gf(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          h3 = c2[b3 >> 2] | 0;
          g3 = c2[d3 >> 2] | 0;
          if ((h3 | 0) != (g3 | 0)) {
            f3 = a3 + 8 | 0;
            d3 = ((g3 + -4 - h3 | 0) >>> 2) + 1 | 0;
            a3 = h3;
            e2 = c2[f3 >> 2] | 0;
            do {
              c2[e2 >> 2] = c2[a3 >> 2];
              e2 = (c2[f3 >> 2] | 0) + 4 | 0;
              c2[f3 >> 2] = e2;
              a3 = a3 + 4 | 0;
            } while ((a3 | 0) != (g3 | 0));
            c2[b3 >> 2] = h3 + (d3 << 2);
          }
          return;
        }
        function hf() {
          Qb();
          return;
        }
        function jf() {
          var a3 = 0;
          a3 = qC(4) | 0;
          kf(a3);
          return a3 | 0;
        }
        function kf(a3) {
          a3 = a3 | 0;
          c2[a3 >> 2] = gc() | 0;
          return;
        }
        function lf(a3) {
          a3 = a3 | 0;
          if (a3 | 0) {
            mf(a3);
            sC(a3);
          }
          return;
        }
        function mf(a3) {
          a3 = a3 | 0;
          ic(c2[a3 >> 2] | 0);
          return;
        }
        function nf(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          he(c2[a3 >> 2] | 0, b3, d3);
          return;
        }
        function of(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          Zd(c2[a3 >> 2] | 0, b3);
          return;
        }
        function pf(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return Ye(c2[a3 >> 2] | 0, b3) | 0;
        }
        function qf() {
          var a3 = 0;
          a3 = qC(8) | 0;
          rf(a3, 0);
          return a3 | 0;
        }
        function rf(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          if (!b3)
            b3 = Wb() | 0;
          else
            b3 = Ub(c2[b3 >> 2] | 0) | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = 0;
          vc(b3, a3);
          return;
        }
        function sf(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = qC(8) | 0;
          rf(b3, a3);
          return b3 | 0;
        }
        function tf(a3) {
          a3 = a3 | 0;
          if (a3 | 0) {
            uf(a3);
            sC(a3);
          }
          return;
        }
        function uf(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          Zb(c2[a3 >> 2] | 0);
          b3 = a3 + 4 | 0;
          a3 = c2[b3 >> 2] | 0;
          c2[b3 >> 2] = 0;
          if (a3 | 0) {
            vf(a3);
            sC(a3);
          }
          return;
        }
        function vf(a3) {
          a3 = a3 | 0;
          wf(a3);
          return;
        }
        function wf(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            ab(a3 | 0);
          return;
        }
        function xf(a3) {
          a3 = a3 | 0;
          return wc(a3) | 0;
        }
        function yf(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0;
          d3 = a3 + 4 | 0;
          b3 = c2[d3 >> 2] | 0;
          c2[d3 >> 2] = 0;
          if (b3 | 0) {
            vf(b3);
            sC(b3);
          }
          dc(c2[a3 >> 2] | 0);
          return;
        }
        function zf(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          sc(c2[a3 >> 2] | 0, c2[b3 >> 2] | 0);
          return;
        }
        function Af(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          Hc(c2[a3 >> 2] | 0, b3);
          return;
        }
        function Bf(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          Vc(c2[a3 >> 2] | 0, b3, T2(d3));
          return;
        }
        function Cf(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          Wc(c2[a3 >> 2] | 0, b3, T2(d3));
          return;
        }
        function Df(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          Bc(c2[a3 >> 2] | 0, b3);
          return;
        }
        function Ef(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          Dc(c2[a3 >> 2] | 0, b3);
          return;
        }
        function Ff(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          Fc(c2[a3 >> 2] | 0, b3);
          return;
        }
        function Gf(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          xc(c2[a3 >> 2] | 0, b3);
          return;
        }
        function Hf(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          Jc(c2[a3 >> 2] | 0, b3);
          return;
        }
        function If(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          zc(c2[a3 >> 2] | 0, b3);
          return;
        }
        function Jf(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          Yc(c2[a3 >> 2] | 0, b3, T2(d3));
          return;
        }
        function Kf(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          Zc(c2[a3 >> 2] | 0, b3, T2(d3));
          return;
        }
        function Lf(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          $c(c2[a3 >> 2] | 0, b3);
          return;
        }
        function Mf(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          Lc(c2[a3 >> 2] | 0, b3);
          return;
        }
        function Nf(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          Nc(c2[a3 >> 2] | 0, b3);
          return;
        }
        function Of(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          Pc(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function Pf(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          Sc(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function Qf(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          Tc(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function Rf(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          Qc(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function Sf(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          Rc(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function Tf(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          fd(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function Uf(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          gd(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function Vf(a3) {
          a3 = a3 | 0;
          hd(c2[a3 >> 2] | 0);
          return;
        }
        function Wf(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          jd(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function Xf(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          kd(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function Yf(a3) {
          a3 = a3 | 0;
          ld(c2[a3 >> 2] | 0);
          return;
        }
        function Zf(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          nd(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function _f(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          od(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function $f(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          qd(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function ag(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          rd(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function bg(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          td(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function cg(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          ud(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function dg(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          wd(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function eg(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          xd(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function fg(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          zd(c2[a3 >> 2] | 0, T2(b3));
          return;
        }
        function gg(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          dd(c2[a3 >> 2] | 0, b3, T2(d3));
          return;
        }
        function hg(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          ad(c2[a3 >> 2] | 0, b3, T2(d3));
          return;
        }
        function ig(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          bd(c2[a3 >> 2] | 0, b3, T2(d3));
          return;
        }
        function jg(a3) {
          a3 = a3 | 0;
          return Ic(c2[a3 >> 2] | 0) | 0;
        }
        function kg(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2;
          Xc(f3, c2[b3 >> 2] | 0, d3);
          lg(a3, f3);
          l2 = e2;
          return;
        }
        function lg(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          mg(a3, c2[b3 + 4 >> 2] | 0, +T2(g2[b3 >> 2]));
          return;
        }
        function mg(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          c2[a3 >> 2] = b3;
          h2[a3 + 8 >> 3] = d3;
          return;
        }
        function ng(a3) {
          a3 = a3 | 0;
          return Cc(c2[a3 >> 2] | 0) | 0;
        }
        function og(a3) {
          a3 = a3 | 0;
          return Ec(c2[a3 >> 2] | 0) | 0;
        }
        function pg(a3) {
          a3 = a3 | 0;
          return Gc(c2[a3 >> 2] | 0) | 0;
        }
        function qg(a3) {
          a3 = a3 | 0;
          return yc(c2[a3 >> 2] | 0) | 0;
        }
        function rg(a3) {
          a3 = a3 | 0;
          return Kc(c2[a3 >> 2] | 0) | 0;
        }
        function sg(a3) {
          a3 = a3 | 0;
          return Ac(c2[a3 >> 2] | 0) | 0;
        }
        function tg(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2;
          _c(f3, c2[b3 >> 2] | 0, d3);
          lg(a3, f3);
          l2 = e2;
          return;
        }
        function ug(a3) {
          a3 = a3 | 0;
          return Mc(c2[a3 >> 2] | 0) | 0;
        }
        function vg(a3) {
          a3 = a3 | 0;
          return Oc(c2[a3 >> 2] | 0) | 0;
        }
        function wg(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3;
          Uc(e2, c2[b3 >> 2] | 0);
          lg(a3, e2);
          l2 = d3;
          return;
        }
        function xg(a3) {
          a3 = a3 | 0;
          return + +T2(tc(c2[a3 >> 2] | 0));
        }
        function yg(a3) {
          a3 = a3 | 0;
          return + +T2(uc(c2[a3 >> 2] | 0));
        }
        function zg(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3;
          id(e2, c2[b3 >> 2] | 0);
          lg(a3, e2);
          l2 = d3;
          return;
        }
        function Ag(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3;
          md(e2, c2[b3 >> 2] | 0);
          lg(a3, e2);
          l2 = d3;
          return;
        }
        function Bg(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3;
          pd(e2, c2[b3 >> 2] | 0);
          lg(a3, e2);
          l2 = d3;
          return;
        }
        function Cg(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3;
          sd(e2, c2[b3 >> 2] | 0);
          lg(a3, e2);
          l2 = d3;
          return;
        }
        function Dg(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3;
          vd(e2, c2[b3 >> 2] | 0);
          lg(a3, e2);
          l2 = d3;
          return;
        }
        function Eg(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3;
          yd(e2, c2[b3 >> 2] | 0);
          lg(a3, e2);
          l2 = d3;
          return;
        }
        function Fg(a3) {
          a3 = a3 | 0;
          return + +T2(Ad(c2[a3 >> 2] | 0));
        }
        function Gg(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return + +T2(ed(c2[a3 >> 2] | 0, b3));
        }
        function Hg(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2;
          cd(f3, c2[b3 >> 2] | 0, d3);
          lg(a3, f3);
          l2 = e2;
          return;
        }
        function Ig(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          kc(c2[a3 >> 2] | 0, c2[b3 >> 2] | 0, d3);
          return;
        }
        function Jg(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          cc(c2[a3 >> 2] | 0, c2[b3 >> 2] | 0);
          return;
        }
        function Kg(a3) {
          a3 = a3 | 0;
          return $b(c2[a3 >> 2] | 0) | 0;
        }
        function Lg(a3) {
          a3 = a3 | 0;
          a3 = pc(c2[a3 >> 2] | 0) | 0;
          if (!a3)
            a3 = 0;
          else
            a3 = xf(a3) | 0;
          return a3 | 0;
        }
        function Mg(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          a3 = ac(c2[a3 >> 2] | 0, b3) | 0;
          if (!a3)
            a3 = 0;
          else
            a3 = xf(a3) | 0;
          return a3 | 0;
        }
        function Ng(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          e2 = qC(4) | 0;
          Og(e2, b3);
          d3 = a3 + 4 | 0;
          b3 = c2[d3 >> 2] | 0;
          c2[d3 >> 2] = e2;
          if (b3 | 0) {
            vf(b3);
            sC(b3);
          }
          jc(c2[a3 >> 2] | 0, 1);
          return;
        }
        function Og(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          gh(a3, b3);
          return;
        }
        function Pg(a3, b3, c3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = T2(c3);
          d3 = d3 | 0;
          e2 = T2(e2);
          f3 = f3 | 0;
          var i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          j3 = i4;
          Qg(j3, wc(b3) | 0, +c3, d3, +e2, f3);
          g2[a3 >> 2] = T2(+h2[j3 >> 3]);
          g2[a3 + 4 >> 2] = T2(+h2[j3 + 8 >> 3]);
          l2 = i4;
          return;
        }
        function Qg(a3, b3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          e2 = e2 | 0;
          f3 = +f3;
          g3 = g3 | 0;
          var i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          n3 = i4 + 8 | 0;
          m3 = i4 + 20 | 0;
          k3 = i4;
          j3 = i4 + 16 | 0;
          h2[n3 >> 3] = d3;
          c2[m3 >> 2] = e2;
          h2[k3 >> 3] = f3;
          c2[j3 >> 2] = g3;
          Rg(a3, c2[b3 + 4 >> 2] | 0, n3, m3, k3, j3);
          l2 = i4;
          return;
        }
        function Rg(a3, b3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          var i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          j3 = i4;
          UA(j3);
          b3 = Sg(b3) | 0;
          Tg(a3, b3, +h2[d3 >> 3], c2[e2 >> 2] | 0, +h2[f3 >> 3], c2[g3 >> 2] | 0);
          WA(j3);
          l2 = i4;
          return;
        }
        function Sg(a3) {
          a3 = a3 | 0;
          return c2[a3 >> 2] | 0;
        }
        function Tg(a3, b3, c3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = +c3;
          d3 = d3 | 0;
          e2 = +e2;
          f3 = f3 | 0;
          var g3 = 0;
          g3 = Vg(Ug() | 0) | 0;
          c3 = +Wg(c3);
          d3 = Xg(d3) | 0;
          e2 = +Wg(e2);
          Yg(a3, cb2(0, g3 | 0, b3 | 0, +c3, d3 | 0, +e2, Xg(f3) | 0) | 0);
          return;
        }
        function Ug() {
          var b3 = 0;
          if (!(a2[7608] | 0)) {
            dh(9120);
            b3 = 7608;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 9120;
        }
        function Vg(a3) {
          a3 = a3 | 0;
          return c2[a3 + 8 >> 2] | 0;
        }
        function Wg(a3) {
          a3 = +a3;
          return + +ch(a3);
        }
        function Xg(a3) {
          a3 = a3 | 0;
          return bh(a3) | 0;
        }
        function Yg(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          d3 = f3;
          e2 = b3;
          if (!(e2 & 1)) {
            c2[a3 >> 2] = c2[b3 >> 2];
            c2[a3 + 4 >> 2] = c2[b3 + 4 >> 2];
            c2[a3 + 8 >> 2] = c2[b3 + 8 >> 2];
            c2[a3 + 12 >> 2] = c2[b3 + 12 >> 2];
          } else {
            Zg(d3, 0);
            Ja(e2 | 0, d3 | 0) | 0;
            _g(a3, d3);
            $g(d3);
          }
          l2 = f3;
          return;
        }
        function Zg(b3, d3) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          ah(b3, d3);
          c2[b3 + 8 >> 2] = 0;
          a2[b3 + 24 >> 0] = 0;
          return;
        }
        function _g(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          b3 = b3 + 8 | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = c2[b3 + 4 >> 2];
          c2[a3 + 8 >> 2] = c2[b3 + 8 >> 2];
          c2[a3 + 12 >> 2] = c2[b3 + 12 >> 2];
          return;
        }
        function $g(b3) {
          b3 = b3 | 0;
          a2[b3 + 24 >> 0] = 0;
          return;
        }
        function ah(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = b3;
          return;
        }
        function bh(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function ch(a3) {
          a3 = +a3;
          return +a3;
        }
        function dh(a3) {
          a3 = a3 | 0;
          fh(a3, eh() | 0, 4);
          return;
        }
        function eh() {
          return 1064;
        }
        function fh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          c2[a3 + 8 >> 2] = _a2(b3 | 0, d3 + 1 | 0) | 0;
          return;
        }
        function gh(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          b3 = c2[b3 >> 2] | 0;
          c2[a3 >> 2] = b3;
          Aa(b3 | 0);
          return;
        }
        function hh(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0;
          d3 = a3 + 4 | 0;
          b3 = c2[d3 >> 2] | 0;
          c2[d3 >> 2] = 0;
          if (b3 | 0) {
            vf(b3);
            sC(b3);
          }
          jc(c2[a3 >> 2] | 0, 0);
          return;
        }
        function ih(a3) {
          a3 = a3 | 0;
          qc(c2[a3 >> 2] | 0);
          return;
        }
        function jh(a3) {
          a3 = a3 | 0;
          return rc(c2[a3 >> 2] | 0) | 0;
        }
        function kh(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = +b3;
          d3 = +d3;
          e2 = e2 | 0;
          _d(c2[a3 >> 2] | 0, T2(b3), T2(d3), e2);
          return;
        }
        function lh(a3) {
          a3 = a3 | 0;
          return + +T2(Bd(c2[a3 >> 2] | 0));
        }
        function mh(a3) {
          a3 = a3 | 0;
          return + +T2(Dd(c2[a3 >> 2] | 0));
        }
        function nh(a3) {
          a3 = a3 | 0;
          return + +T2(Cd(c2[a3 >> 2] | 0));
        }
        function oh(a3) {
          a3 = a3 | 0;
          return + +T2(Ed(c2[a3 >> 2] | 0));
        }
        function ph(a3) {
          a3 = a3 | 0;
          return + +T2(Fd(c2[a3 >> 2] | 0));
        }
        function qh(a3) {
          a3 = a3 | 0;
          return + +T2(Gd(c2[a3 >> 2] | 0));
        }
        function rh(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          h2[a3 >> 3] = +T2(Bd(c2[b3 >> 2] | 0));
          h2[a3 + 8 >> 3] = +T2(Dd(c2[b3 >> 2] | 0));
          h2[a3 + 16 >> 3] = +T2(Cd(c2[b3 >> 2] | 0));
          h2[a3 + 24 >> 3] = +T2(Ed(c2[b3 >> 2] | 0));
          h2[a3 + 32 >> 3] = +T2(Fd(c2[b3 >> 2] | 0));
          h2[a3 + 40 >> 3] = +T2(Gd(c2[b3 >> 2] | 0));
          return;
        }
        function sh(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return + +T2(Hd(c2[a3 >> 2] | 0, b3));
        }
        function th(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return + +T2(Id(c2[a3 >> 2] | 0, b3));
        }
        function uh(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return + +T2(Jd(c2[a3 >> 2] | 0, b3));
        }
        function vh() {
          return fc() | 0;
        }
        function wh() {
          xh();
          yh();
          zh();
          Ah();
          Bh();
          Ch();
          return;
        }
        function xh() {
          kv(11713, 4938, 1);
          return;
        }
        function yh() {
          yu(10448);
          return;
        }
        function zh() {
          eu(10408);
          return;
        }
        function Ah() {
          vt(10324);
          return;
        }
        function Bh() {
          or(10096);
          return;
        }
        function Ch() {
          Dh(9132);
          return;
        }
        function Dh(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w3 = 0, x3 = 0, y3 = 0, z3 = 0, A3 = 0, B3 = 0, C3 = 0, D3 = 0, E3 = 0, F3 = 0, G3 = 0, H3 = 0, I3 = 0, J2 = 0, K2 = 0, L3 = 0, M3 = 0, N2 = 0, O3 = 0, P3 = 0, Q3 = 0, R3 = 0, S3 = 0, T3 = 0, U3 = 0, V3 = 0, W3 = 0, X3 = 0, Y3 = 0, Z3 = 0, _3 = 0, $2 = 0, aa2 = 0, ba2 = 0, ca2 = 0, da2 = 0, ea2 = 0, fa2 = 0, ga2 = 0, ha2 = 0, ia2 = 0, ja2 = 0, ka2 = 0, la2 = 0, ma2 = 0, na2 = 0, oa2 = 0, pa2 = 0, qa2 = 0, ra2 = 0, sa2 = 0, ta2 = 0, ua2 = 0, va2 = 0, wa2 = 0, xa2 = 0, ya2 = 0, za2 = 0, Aa2 = 0, Ba2 = 0, Ca2 = 0, Da2 = 0, Ea2 = 0, Fa2 = 0, Ga2 = 0;
          b3 = l2;
          l2 = l2 + 672 | 0;
          d3 = b3 + 656 | 0;
          Ga2 = b3 + 648 | 0;
          Fa2 = b3 + 640 | 0;
          Ea2 = b3 + 632 | 0;
          Da2 = b3 + 624 | 0;
          Ca2 = b3 + 616 | 0;
          Ba2 = b3 + 608 | 0;
          Aa2 = b3 + 600 | 0;
          za2 = b3 + 592 | 0;
          ya2 = b3 + 584 | 0;
          xa2 = b3 + 576 | 0;
          wa2 = b3 + 568 | 0;
          va2 = b3 + 560 | 0;
          ua2 = b3 + 552 | 0;
          ta2 = b3 + 544 | 0;
          sa2 = b3 + 536 | 0;
          ra2 = b3 + 528 | 0;
          qa2 = b3 + 520 | 0;
          pa2 = b3 + 512 | 0;
          oa2 = b3 + 504 | 0;
          na2 = b3 + 496 | 0;
          ma2 = b3 + 488 | 0;
          la2 = b3 + 480 | 0;
          ka2 = b3 + 472 | 0;
          ja2 = b3 + 464 | 0;
          ia2 = b3 + 456 | 0;
          ha2 = b3 + 448 | 0;
          ga2 = b3 + 440 | 0;
          fa2 = b3 + 432 | 0;
          ea2 = b3 + 424 | 0;
          da2 = b3 + 416 | 0;
          ca2 = b3 + 408 | 0;
          ba2 = b3 + 400 | 0;
          aa2 = b3 + 392 | 0;
          $2 = b3 + 384 | 0;
          _3 = b3 + 376 | 0;
          Z3 = b3 + 368 | 0;
          Y3 = b3 + 360 | 0;
          X3 = b3 + 352 | 0;
          W3 = b3 + 344 | 0;
          V3 = b3 + 336 | 0;
          U3 = b3 + 328 | 0;
          T3 = b3 + 320 | 0;
          S3 = b3 + 312 | 0;
          R3 = b3 + 304 | 0;
          Q3 = b3 + 296 | 0;
          P3 = b3 + 288 | 0;
          O3 = b3 + 280 | 0;
          N2 = b3 + 272 | 0;
          M3 = b3 + 264 | 0;
          L3 = b3 + 256 | 0;
          K2 = b3 + 248 | 0;
          J2 = b3 + 240 | 0;
          I3 = b3 + 232 | 0;
          H3 = b3 + 224 | 0;
          G3 = b3 + 216 | 0;
          F3 = b3 + 208 | 0;
          E3 = b3 + 200 | 0;
          D3 = b3 + 192 | 0;
          C3 = b3 + 184 | 0;
          B3 = b3 + 176 | 0;
          A3 = b3 + 168 | 0;
          z3 = b3 + 160 | 0;
          y3 = b3 + 152 | 0;
          x3 = b3 + 144 | 0;
          w3 = b3 + 136 | 0;
          v3 = b3 + 128 | 0;
          u3 = b3 + 120 | 0;
          t3 = b3 + 112 | 0;
          s3 = b3 + 104 | 0;
          r3 = b3 + 96 | 0;
          q3 = b3 + 88 | 0;
          p3 = b3 + 80 | 0;
          o3 = b3 + 72 | 0;
          n3 = b3 + 64 | 0;
          m3 = b3 + 56 | 0;
          k3 = b3 + 48 | 0;
          j3 = b3 + 40 | 0;
          i4 = b3 + 32 | 0;
          h3 = b3 + 24 | 0;
          g3 = b3 + 16 | 0;
          f3 = b3 + 8 | 0;
          e2 = b3;
          Eh(a3, 3646);
          Fh(a3, 3651, 2) | 0;
          Gh(a3, 3665, 2) | 0;
          Hh(a3, 3682, 18) | 0;
          c2[Ga2 >> 2] = 19;
          c2[Ga2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[Ga2 >> 2];
          c2[d3 + 4 >> 2] = c2[Ga2 + 4 >> 2];
          Ih(a3, 3690, d3) | 0;
          c2[Fa2 >> 2] = 1;
          c2[Fa2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[Fa2 >> 2];
          c2[d3 + 4 >> 2] = c2[Fa2 + 4 >> 2];
          Jh(a3, 3696, d3) | 0;
          c2[Ea2 >> 2] = 2;
          c2[Ea2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[Ea2 >> 2];
          c2[d3 + 4 >> 2] = c2[Ea2 + 4 >> 2];
          Kh(a3, 3706, d3) | 0;
          c2[Da2 >> 2] = 1;
          c2[Da2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[Da2 >> 2];
          c2[d3 + 4 >> 2] = c2[Da2 + 4 >> 2];
          Lh(a3, 3722, d3) | 0;
          c2[Ca2 >> 2] = 2;
          c2[Ca2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[Ca2 >> 2];
          c2[d3 + 4 >> 2] = c2[Ca2 + 4 >> 2];
          Lh(a3, 3734, d3) | 0;
          c2[Ba2 >> 2] = 3;
          c2[Ba2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[Ba2 >> 2];
          c2[d3 + 4 >> 2] = c2[Ba2 + 4 >> 2];
          Kh(a3, 3753, d3) | 0;
          c2[Aa2 >> 2] = 4;
          c2[Aa2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[Aa2 >> 2];
          c2[d3 + 4 >> 2] = c2[Aa2 + 4 >> 2];
          Kh(a3, 3769, d3) | 0;
          c2[za2 >> 2] = 5;
          c2[za2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[za2 >> 2];
          c2[d3 + 4 >> 2] = c2[za2 + 4 >> 2];
          Kh(a3, 3783, d3) | 0;
          c2[ya2 >> 2] = 6;
          c2[ya2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ya2 >> 2];
          c2[d3 + 4 >> 2] = c2[ya2 + 4 >> 2];
          Kh(a3, 3796, d3) | 0;
          c2[xa2 >> 2] = 7;
          c2[xa2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[xa2 >> 2];
          c2[d3 + 4 >> 2] = c2[xa2 + 4 >> 2];
          Kh(a3, 3813, d3) | 0;
          c2[wa2 >> 2] = 8;
          c2[wa2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[wa2 >> 2];
          c2[d3 + 4 >> 2] = c2[wa2 + 4 >> 2];
          Kh(a3, 3825, d3) | 0;
          c2[va2 >> 2] = 3;
          c2[va2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[va2 >> 2];
          c2[d3 + 4 >> 2] = c2[va2 + 4 >> 2];
          Lh(a3, 3843, d3) | 0;
          c2[ua2 >> 2] = 4;
          c2[ua2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ua2 >> 2];
          c2[d3 + 4 >> 2] = c2[ua2 + 4 >> 2];
          Lh(a3, 3853, d3) | 0;
          c2[ta2 >> 2] = 9;
          c2[ta2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ta2 >> 2];
          c2[d3 + 4 >> 2] = c2[ta2 + 4 >> 2];
          Kh(a3, 3870, d3) | 0;
          c2[sa2 >> 2] = 10;
          c2[sa2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[sa2 >> 2];
          c2[d3 + 4 >> 2] = c2[sa2 + 4 >> 2];
          Kh(a3, 3884, d3) | 0;
          c2[ra2 >> 2] = 11;
          c2[ra2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ra2 >> 2];
          c2[d3 + 4 >> 2] = c2[ra2 + 4 >> 2];
          Kh(a3, 3896, d3) | 0;
          c2[qa2 >> 2] = 1;
          c2[qa2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[qa2 >> 2];
          c2[d3 + 4 >> 2] = c2[qa2 + 4 >> 2];
          Mh(a3, 3907, d3) | 0;
          c2[pa2 >> 2] = 2;
          c2[pa2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[pa2 >> 2];
          c2[d3 + 4 >> 2] = c2[pa2 + 4 >> 2];
          Mh(a3, 3915, d3) | 0;
          c2[oa2 >> 2] = 3;
          c2[oa2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[oa2 >> 2];
          c2[d3 + 4 >> 2] = c2[oa2 + 4 >> 2];
          Mh(a3, 3928, d3) | 0;
          c2[na2 >> 2] = 4;
          c2[na2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[na2 >> 2];
          c2[d3 + 4 >> 2] = c2[na2 + 4 >> 2];
          Mh(a3, 3948, d3) | 0;
          c2[ma2 >> 2] = 5;
          c2[ma2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ma2 >> 2];
          c2[d3 + 4 >> 2] = c2[ma2 + 4 >> 2];
          Mh(a3, 3960, d3) | 0;
          c2[la2 >> 2] = 6;
          c2[la2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[la2 >> 2];
          c2[d3 + 4 >> 2] = c2[la2 + 4 >> 2];
          Mh(a3, 3974, d3) | 0;
          c2[ka2 >> 2] = 7;
          c2[ka2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ka2 >> 2];
          c2[d3 + 4 >> 2] = c2[ka2 + 4 >> 2];
          Mh(a3, 3983, d3) | 0;
          c2[ja2 >> 2] = 20;
          c2[ja2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ja2 >> 2];
          c2[d3 + 4 >> 2] = c2[ja2 + 4 >> 2];
          Ih(a3, 3999, d3) | 0;
          c2[ia2 >> 2] = 8;
          c2[ia2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ia2 >> 2];
          c2[d3 + 4 >> 2] = c2[ia2 + 4 >> 2];
          Mh(a3, 4012, d3) | 0;
          c2[ha2 >> 2] = 9;
          c2[ha2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ha2 >> 2];
          c2[d3 + 4 >> 2] = c2[ha2 + 4 >> 2];
          Mh(a3, 4022, d3) | 0;
          c2[ga2 >> 2] = 21;
          c2[ga2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ga2 >> 2];
          c2[d3 + 4 >> 2] = c2[ga2 + 4 >> 2];
          Ih(a3, 4039, d3) | 0;
          c2[fa2 >> 2] = 10;
          c2[fa2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[fa2 >> 2];
          c2[d3 + 4 >> 2] = c2[fa2 + 4 >> 2];
          Mh(a3, 4053, d3) | 0;
          c2[ea2 >> 2] = 11;
          c2[ea2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ea2 >> 2];
          c2[d3 + 4 >> 2] = c2[ea2 + 4 >> 2];
          Mh(a3, 4065, d3) | 0;
          c2[da2 >> 2] = 12;
          c2[da2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[da2 >> 2];
          c2[d3 + 4 >> 2] = c2[da2 + 4 >> 2];
          Mh(a3, 4084, d3) | 0;
          c2[ca2 >> 2] = 13;
          c2[ca2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ca2 >> 2];
          c2[d3 + 4 >> 2] = c2[ca2 + 4 >> 2];
          Mh(a3, 4097, d3) | 0;
          c2[ba2 >> 2] = 14;
          c2[ba2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[ba2 >> 2];
          c2[d3 + 4 >> 2] = c2[ba2 + 4 >> 2];
          Mh(a3, 4117, d3) | 0;
          c2[aa2 >> 2] = 15;
          c2[aa2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[aa2 >> 2];
          c2[d3 + 4 >> 2] = c2[aa2 + 4 >> 2];
          Mh(a3, 4129, d3) | 0;
          c2[$2 >> 2] = 16;
          c2[$2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[$2 >> 2];
          c2[d3 + 4 >> 2] = c2[$2 + 4 >> 2];
          Mh(a3, 4148, d3) | 0;
          c2[_3 >> 2] = 17;
          c2[_3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[_3 >> 2];
          c2[d3 + 4 >> 2] = c2[_3 + 4 >> 2];
          Mh(a3, 4161, d3) | 0;
          c2[Z3 >> 2] = 18;
          c2[Z3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[Z3 >> 2];
          c2[d3 + 4 >> 2] = c2[Z3 + 4 >> 2];
          Mh(a3, 4181, d3) | 0;
          c2[Y3 >> 2] = 5;
          c2[Y3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[Y3 >> 2];
          c2[d3 + 4 >> 2] = c2[Y3 + 4 >> 2];
          Lh(a3, 4196, d3) | 0;
          c2[X3 >> 2] = 6;
          c2[X3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[X3 >> 2];
          c2[d3 + 4 >> 2] = c2[X3 + 4 >> 2];
          Lh(a3, 4206, d3) | 0;
          c2[W3 >> 2] = 7;
          c2[W3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[W3 >> 2];
          c2[d3 + 4 >> 2] = c2[W3 + 4 >> 2];
          Lh(a3, 4217, d3) | 0;
          c2[V3 >> 2] = 3;
          c2[V3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[V3 >> 2];
          c2[d3 + 4 >> 2] = c2[V3 + 4 >> 2];
          Nh(a3, 4235, d3) | 0;
          c2[U3 >> 2] = 1;
          c2[U3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[U3 >> 2];
          c2[d3 + 4 >> 2] = c2[U3 + 4 >> 2];
          Oh(a3, 4251, d3) | 0;
          c2[T3 >> 2] = 4;
          c2[T3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[T3 >> 2];
          c2[d3 + 4 >> 2] = c2[T3 + 4 >> 2];
          Nh(a3, 4263, d3) | 0;
          c2[S3 >> 2] = 5;
          c2[S3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[S3 >> 2];
          c2[d3 + 4 >> 2] = c2[S3 + 4 >> 2];
          Nh(a3, 4279, d3) | 0;
          c2[R3 >> 2] = 6;
          c2[R3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[R3 >> 2];
          c2[d3 + 4 >> 2] = c2[R3 + 4 >> 2];
          Nh(a3, 4293, d3) | 0;
          c2[Q3 >> 2] = 7;
          c2[Q3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[Q3 >> 2];
          c2[d3 + 4 >> 2] = c2[Q3 + 4 >> 2];
          Nh(a3, 4306, d3) | 0;
          c2[P3 >> 2] = 8;
          c2[P3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[P3 >> 2];
          c2[d3 + 4 >> 2] = c2[P3 + 4 >> 2];
          Nh(a3, 4323, d3) | 0;
          c2[O3 >> 2] = 9;
          c2[O3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[O3 >> 2];
          c2[d3 + 4 >> 2] = c2[O3 + 4 >> 2];
          Nh(a3, 4335, d3) | 0;
          c2[N2 >> 2] = 2;
          c2[N2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[N2 >> 2];
          c2[d3 + 4 >> 2] = c2[N2 + 4 >> 2];
          Oh(a3, 4353, d3) | 0;
          c2[M3 >> 2] = 12;
          c2[M3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[M3 >> 2];
          c2[d3 + 4 >> 2] = c2[M3 + 4 >> 2];
          Ph(a3, 4363, d3) | 0;
          c2[L3 >> 2] = 1;
          c2[L3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[L3 >> 2];
          c2[d3 + 4 >> 2] = c2[L3 + 4 >> 2];
          Qh(a3, 4376, d3) | 0;
          c2[K2 >> 2] = 2;
          c2[K2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[K2 >> 2];
          c2[d3 + 4 >> 2] = c2[K2 + 4 >> 2];
          Qh(a3, 4388, d3) | 0;
          c2[J2 >> 2] = 13;
          c2[J2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[J2 >> 2];
          c2[d3 + 4 >> 2] = c2[J2 + 4 >> 2];
          Ph(a3, 4402, d3) | 0;
          c2[I3 >> 2] = 14;
          c2[I3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[I3 >> 2];
          c2[d3 + 4 >> 2] = c2[I3 + 4 >> 2];
          Ph(a3, 4411, d3) | 0;
          c2[H3 >> 2] = 15;
          c2[H3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[H3 >> 2];
          c2[d3 + 4 >> 2] = c2[H3 + 4 >> 2];
          Ph(a3, 4421, d3) | 0;
          c2[G3 >> 2] = 16;
          c2[G3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[G3 >> 2];
          c2[d3 + 4 >> 2] = c2[G3 + 4 >> 2];
          Ph(a3, 4433, d3) | 0;
          c2[F3 >> 2] = 17;
          c2[F3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[F3 >> 2];
          c2[d3 + 4 >> 2] = c2[F3 + 4 >> 2];
          Ph(a3, 4446, d3) | 0;
          c2[E3 >> 2] = 18;
          c2[E3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[E3 >> 2];
          c2[d3 + 4 >> 2] = c2[E3 + 4 >> 2];
          Ph(a3, 4458, d3) | 0;
          c2[D3 >> 2] = 3;
          c2[D3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[D3 >> 2];
          c2[d3 + 4 >> 2] = c2[D3 + 4 >> 2];
          Qh(a3, 4471, d3) | 0;
          c2[C3 >> 2] = 1;
          c2[C3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[C3 >> 2];
          c2[d3 + 4 >> 2] = c2[C3 + 4 >> 2];
          Rh(a3, 4486, d3) | 0;
          c2[B3 >> 2] = 10;
          c2[B3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[B3 >> 2];
          c2[d3 + 4 >> 2] = c2[B3 + 4 >> 2];
          Nh(a3, 4496, d3) | 0;
          c2[A3 >> 2] = 11;
          c2[A3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[A3 >> 2];
          c2[d3 + 4 >> 2] = c2[A3 + 4 >> 2];
          Nh(a3, 4508, d3) | 0;
          c2[z3 >> 2] = 3;
          c2[z3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[z3 >> 2];
          c2[d3 + 4 >> 2] = c2[z3 + 4 >> 2];
          Oh(a3, 4519, d3) | 0;
          c2[y3 >> 2] = 4;
          c2[y3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[y3 >> 2];
          c2[d3 + 4 >> 2] = c2[y3 + 4 >> 2];
          Sh(a3, 4530, d3) | 0;
          c2[x3 >> 2] = 19;
          c2[x3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[x3 >> 2];
          c2[d3 + 4 >> 2] = c2[x3 + 4 >> 2];
          Th(a3, 4542, d3) | 0;
          c2[w3 >> 2] = 12;
          c2[w3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[w3 >> 2];
          c2[d3 + 4 >> 2] = c2[w3 + 4 >> 2];
          Uh(a3, 4554, d3) | 0;
          c2[v3 >> 2] = 13;
          c2[v3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[v3 >> 2];
          c2[d3 + 4 >> 2] = c2[v3 + 4 >> 2];
          Vh(a3, 4568, d3) | 0;
          c2[u3 >> 2] = 2;
          c2[u3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[u3 >> 2];
          c2[d3 + 4 >> 2] = c2[u3 + 4 >> 2];
          Wh(a3, 4578, d3) | 0;
          c2[t3 >> 2] = 20;
          c2[t3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[t3 >> 2];
          c2[d3 + 4 >> 2] = c2[t3 + 4 >> 2];
          Xh(a3, 4587, d3) | 0;
          c2[s3 >> 2] = 22;
          c2[s3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[s3 >> 2];
          c2[d3 + 4 >> 2] = c2[s3 + 4 >> 2];
          Ih(a3, 4602, d3) | 0;
          c2[r3 >> 2] = 23;
          c2[r3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[r3 >> 2];
          c2[d3 + 4 >> 2] = c2[r3 + 4 >> 2];
          Ih(a3, 4619, d3) | 0;
          c2[q3 >> 2] = 14;
          c2[q3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[q3 >> 2];
          c2[d3 + 4 >> 2] = c2[q3 + 4 >> 2];
          Yh(a3, 4629, d3) | 0;
          c2[p3 >> 2] = 1;
          c2[p3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[p3 >> 2];
          c2[d3 + 4 >> 2] = c2[p3 + 4 >> 2];
          Zh(a3, 4637, d3) | 0;
          c2[o3 >> 2] = 4;
          c2[o3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[o3 >> 2];
          c2[d3 + 4 >> 2] = c2[o3 + 4 >> 2];
          Qh(a3, 4653, d3) | 0;
          c2[n3 >> 2] = 5;
          c2[n3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[n3 >> 2];
          c2[d3 + 4 >> 2] = c2[n3 + 4 >> 2];
          Qh(a3, 4669, d3) | 0;
          c2[m3 >> 2] = 6;
          c2[m3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[m3 >> 2];
          c2[d3 + 4 >> 2] = c2[m3 + 4 >> 2];
          Qh(a3, 4686, d3) | 0;
          c2[k3 >> 2] = 7;
          c2[k3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[k3 >> 2];
          c2[d3 + 4 >> 2] = c2[k3 + 4 >> 2];
          Qh(a3, 4701, d3) | 0;
          c2[j3 >> 2] = 8;
          c2[j3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[j3 >> 2];
          c2[d3 + 4 >> 2] = c2[j3 + 4 >> 2];
          Qh(a3, 4719, d3) | 0;
          c2[i4 >> 2] = 9;
          c2[i4 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[i4 >> 2];
          c2[d3 + 4 >> 2] = c2[i4 + 4 >> 2];
          Qh(a3, 4736, d3) | 0;
          c2[h3 >> 2] = 21;
          c2[h3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[h3 >> 2];
          c2[d3 + 4 >> 2] = c2[h3 + 4 >> 2];
          _h(a3, 4754, d3) | 0;
          c2[g3 >> 2] = 2;
          c2[g3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[g3 >> 2];
          c2[d3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Rh(a3, 4772, d3) | 0;
          c2[f3 >> 2] = 3;
          c2[f3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[f3 >> 2];
          c2[d3 + 4 >> 2] = c2[f3 + 4 >> 2];
          Rh(a3, 4790, d3) | 0;
          c2[e2 >> 2] = 4;
          c2[e2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[e2 >> 2];
          c2[d3 + 4 >> 2] = c2[e2 + 4 >> 2];
          Rh(a3, 4808, d3) | 0;
          l2 = b3;
          return;
        }
        function Eh(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = dr() | 0;
          c2[a3 >> 2] = d3;
          er(d3, b3);
          Hv(c2[a3 >> 2] | 0);
          return;
        }
        function Fh(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          Oq(a3, ai(b3) | 0, c3, 0);
          return a3 | 0;
        }
        function Gh(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          tq(a3, ai(b3) | 0, c3, 0);
          return a3 | 0;
        }
        function Hh(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          cq(a3, ai(b3) | 0, c3, 0);
          return a3 | 0;
        }
        function Ih(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Lp(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Jh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          pp(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Kh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Yo(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Lh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Fo(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Mh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          mo(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Nh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Un(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Oh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Bn(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Ph(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Um(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Qh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Bm(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Rh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          im(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Sh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Rl(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Th(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          vl(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Uh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          bl(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Vh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Kk(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Wh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          nk(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Xh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Rj(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Yh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          xj(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function Zh(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          _i(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function _h(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          $h(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function $h(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          bi(a3, d3, f3, 1);
          l2 = e2;
          return;
        }
        function ai(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function bi(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = ci() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = di(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, ei(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function ci() {
          var b3 = 0, d3 = 0;
          if (!(a2[7616] | 0)) {
            qi(9136);
            Ha(24, 9136, o2 | 0) | 0;
            d3 = 7616;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9136) | 0)) {
            b3 = 9136;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            qi(9136);
          }
          return 9136;
        }
        function di(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function ei(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = ci() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            ki(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            li(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function fi(a3, b3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          var h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0;
          h3 = l2;
          l2 = l2 + 32 | 0;
          o3 = h3 + 24 | 0;
          n3 = h3 + 20 | 0;
          j3 = h3 + 16 | 0;
          m3 = h3 + 12 | 0;
          k3 = h3 + 8 | 0;
          i4 = h3 + 4 | 0;
          p3 = h3;
          c2[n3 >> 2] = b3;
          c2[j3 >> 2] = d3;
          c2[m3 >> 2] = e2;
          c2[k3 >> 2] = f3;
          c2[i4 >> 2] = g3;
          g3 = a3 + 28 | 0;
          c2[p3 >> 2] = c2[g3 >> 2];
          c2[o3 >> 2] = c2[p3 >> 2];
          gi(a3 + 24 | 0, o3, n3, m3, k3, j3, i4) | 0;
          c2[g3 >> 2] = c2[c2[g3 >> 2] >> 2];
          l2 = h3;
          return;
        }
        function gi(a3, b3, d3, e2, f3, g3, h3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          h3 = h3 | 0;
          a3 = hi(b3) | 0;
          b3 = qC(24) | 0;
          ii(b3 + 4 | 0, c2[d3 >> 2] | 0, c2[e2 >> 2] | 0, c2[f3 >> 2] | 0, c2[g3 >> 2] | 0, c2[h3 >> 2] | 0);
          c2[b3 >> 2] = c2[a3 >> 2];
          c2[a3 >> 2] = b3;
          return b3 | 0;
        }
        function hi(a3) {
          a3 = a3 | 0;
          return c2[a3 >> 2] | 0;
        }
        function ii(a3, b3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3;
          c2[a3 + 16 >> 2] = g3;
          return;
        }
        function ji(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return b3 | a3 | 0;
        }
        function ki(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function li(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = mi(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            ni(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            ki(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            oi(a3, i4);
            pi(i4);
            l2 = k3;
            return;
          }
        }
        function mi(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function ni(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function oi(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function pi(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function qi(a3) {
          a3 = a3 | 0;
          ui(a3);
          return;
        }
        function ri(a3) {
          a3 = a3 | 0;
          ti(a3 + 24 | 0);
          return;
        }
        function si(a3) {
          a3 = a3 | 0;
          return c2[a3 >> 2] | 0;
        }
        function ti(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function ui(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 3, b3, wi() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function vi() {
          return 9228;
        }
        function wi() {
          return 1140;
        }
        function xi(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3 + 8 | 0;
          f3 = d3;
          g3 = zi(a3) | 0;
          a3 = c2[g3 + 4 >> 2] | 0;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = a3;
          c2[e2 >> 2] = c2[f3 >> 2];
          c2[e2 + 4 >> 2] = c2[f3 + 4 >> 2];
          b3 = Ai(b3, e2) | 0;
          l2 = d3;
          return b3 | 0;
        }
        function yi(a3, b3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3;
          c2[a3 + 16 >> 2] = g3;
          return;
        }
        function zi(a3) {
          a3 = a3 | 0;
          return (c2[(ci() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function Ai(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0;
          f3 = l2;
          l2 = l2 + 48 | 0;
          e2 = f3;
          d3 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            d3 = c2[(c2[a3 >> 2] | 0) + d3 >> 2] | 0;
          ob[d3 & 31](e2, a3);
          e2 = Bi(e2) | 0;
          l2 = f3;
          return e2 | 0;
        }
        function Bi(a3) {
          a3 = a3 | 0;
          var b3 = 0, c3 = 0, d3 = 0, e2 = 0;
          e2 = l2;
          l2 = l2 + 32 | 0;
          b3 = e2 + 12 | 0;
          c3 = e2;
          d3 = Di(Ci() | 0) | 0;
          if (!d3)
            a3 = Ii(a3) | 0;
          else {
            Ei(b3, d3);
            Fi(c3, b3);
            Gi(a3, c3);
            a3 = Hi(b3) | 0;
          }
          l2 = e2;
          return a3 | 0;
        }
        function Ci() {
          var b3 = 0;
          if (!(a2[7632] | 0)) {
            Ti(9184);
            Ha(25, 9184, o2 | 0) | 0;
            b3 = 7632;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 9184;
        }
        function Di(a3) {
          a3 = a3 | 0;
          return c2[a3 + 36 >> 2] | 0;
        }
        function Ei(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = a3;
          c2[a3 + 8 >> 2] = 0;
          return;
        }
        function Fi(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = c2[b3 + 4 >> 2];
          c2[a3 + 8 >> 2] = 0;
          return;
        }
        function Gi(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          Ni(b3, a3, a3 + 8 | 0, a3 + 16 | 0, a3 + 24 | 0, a3 + 32 | 0, a3 + 40 | 0) | 0;
          return;
        }
        function Hi(a3) {
          a3 = a3 | 0;
          return c2[(c2[a3 + 4 >> 2] | 0) + 8 >> 2] | 0;
        }
        function Ii(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          j3 = l2;
          l2 = l2 + 16 | 0;
          d3 = j3 + 4 | 0;
          e2 = j3;
          f3 = jy(8) | 0;
          g3 = f3;
          h3 = qC(48) | 0;
          i4 = h3;
          b3 = i4 + 48 | 0;
          do {
            c2[i4 >> 2] = c2[a3 >> 2];
            i4 = i4 + 4 | 0;
            a3 = a3 + 4 | 0;
          } while ((i4 | 0) < (b3 | 0));
          b3 = g3 + 4 | 0;
          c2[b3 >> 2] = h3;
          i4 = qC(8) | 0;
          h3 = c2[b3 >> 2] | 0;
          c2[e2 >> 2] = 0;
          c2[d3 >> 2] = c2[e2 >> 2];
          Ji(i4, h3, d3);
          c2[f3 >> 2] = i4;
          l2 = j3;
          return g3 | 0;
        }
        function Ji(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          d3 = qC(16) | 0;
          c2[d3 + 4 >> 2] = 0;
          c2[d3 + 8 >> 2] = 0;
          c2[d3 >> 2] = 1092;
          c2[d3 + 12 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function Ki(a3) {
          a3 = a3 | 0;
          kC(a3);
          sC(a3);
          return;
        }
        function Li(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 12 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Mi(a3) {
          a3 = a3 | 0;
          sC(a3);
          return;
        }
        function Ni(a3, b3, d3, e2, f3, g3, h3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          h3 = h3 | 0;
          g3 = Oi(c2[a3 >> 2] | 0, b3, d3, e2, f3, g3, h3) | 0;
          h3 = a3 + 4 | 0;
          c2[(c2[h3 >> 2] | 0) + 8 >> 2] = g3;
          return c2[(c2[h3 >> 2] | 0) + 8 >> 2] | 0;
        }
        function Oi(a3, b3, c3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          var i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          j3 = i4;
          UA(j3);
          a3 = Sg(a3) | 0;
          g3 = Pi(a3, +h2[b3 >> 3], +h2[c3 >> 3], +h2[d3 >> 3], +h2[e2 >> 3], +h2[f3 >> 3], +h2[g3 >> 3]) | 0;
          WA(j3);
          l2 = i4;
          return g3 | 0;
        }
        function Pi(a3, b3, c3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = +b3;
          c3 = +c3;
          d3 = +d3;
          e2 = +e2;
          f3 = +f3;
          g3 = +g3;
          var h3 = 0;
          h3 = Vg(Qi() | 0) | 0;
          b3 = +Wg(b3);
          c3 = +Wg(c3);
          d3 = +Wg(d3);
          e2 = +Wg(e2);
          f3 = +Wg(f3);
          return ya(0, h3 | 0, a3 | 0, +b3, +c3, +d3, +e2, +f3, + +Wg(g3)) | 0;
        }
        function Qi() {
          var b3 = 0;
          if (!(a2[7624] | 0)) {
            Ri(9172);
            b3 = 7624;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 9172;
        }
        function Ri(a3) {
          a3 = a3 | 0;
          fh(a3, Si() | 0, 6);
          return;
        }
        function Si() {
          return 1112;
        }
        function Ti(a3) {
          a3 = a3 | 0;
          Zi(a3);
          return;
        }
        function Ui(a3) {
          a3 = a3 | 0;
          Vi(a3 + 24 | 0);
          Wi(a3 + 16 | 0);
          return;
        }
        function Vi(a3) {
          a3 = a3 | 0;
          Yi(a3);
          return;
        }
        function Wi(a3) {
          a3 = a3 | 0;
          Xi(a3);
          return;
        }
        function Xi(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0;
          b3 = c2[a3 >> 2] | 0;
          if (b3 | 0)
            do {
              d3 = b3;
              b3 = c2[b3 >> 2] | 0;
              sC(d3);
            } while ((b3 | 0) != 0);
          c2[a3 >> 2] = 0;
          return;
        }
        function Yi(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0;
          b3 = c2[a3 >> 2] | 0;
          if (b3 | 0)
            do {
              d3 = b3;
              b3 = c2[b3 >> 2] | 0;
              sC(d3);
            } while ((b3 | 0) != 0);
          c2[a3 >> 2] = 0;
          return;
        }
        function Zi(b3) {
          b3 = b3 | 0;
          var d3 = 0;
          c2[b3 + 16 >> 2] = 0;
          c2[b3 + 20 >> 2] = 0;
          d3 = b3 + 24 | 0;
          c2[d3 >> 2] = 0;
          c2[b3 + 28 >> 2] = d3;
          c2[b3 + 36 >> 2] = 0;
          a2[b3 + 40 >> 0] = 0;
          a2[b3 + 41 >> 0] = 0;
          return;
        }
        function _i(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          $i(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function $i(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = aj() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = bj(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, cj(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function aj() {
          var b3 = 0, d3 = 0;
          if (!(a2[7640] | 0)) {
            jj(9232);
            Ha(26, 9232, o2 | 0) | 0;
            d3 = 7640;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9232) | 0)) {
            b3 = 9232;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            jj(9232);
          }
          return 9232;
        }
        function bj(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function cj(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = aj() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            dj(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            ej(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function dj(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function ej(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = fj(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            gj(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            dj(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            hj(a3, i4);
            ij(i4);
            l2 = k3;
            return;
          }
        }
        function fj(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function gj(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function hj(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function ij(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function jj(a3) {
          a3 = a3 | 0;
          mj(a3);
          return;
        }
        function kj(a3) {
          a3 = a3 | 0;
          lj(a3 + 24 | 0);
          return;
        }
        function lj(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function mj(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 1, b3, nj() | 0, 3);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function nj() {
          return 1144;
        }
        function oj(a3, b3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          e2 = +e2;
          f3 = f3 | 0;
          var g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          h3 = g3 + 8 | 0;
          i4 = g3;
          j3 = pj(a3) | 0;
          a3 = c2[j3 + 4 >> 2] | 0;
          c2[i4 >> 2] = c2[j3 >> 2];
          c2[i4 + 4 >> 2] = a3;
          c2[h3 >> 2] = c2[i4 >> 2];
          c2[h3 + 4 >> 2] = c2[i4 + 4 >> 2];
          qj(b3, h3, d3, e2, f3);
          l2 = g3;
          return;
        }
        function pj(a3) {
          a3 = a3 | 0;
          return (c2[(aj() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function qj(a3, b3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          e2 = +e2;
          f3 = f3 | 0;
          var g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0;
          k3 = l2;
          l2 = l2 + 16 | 0;
          h3 = k3 + 2 | 0;
          i4 = k3 + 1 | 0;
          j3 = k3;
          g3 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            g3 = c2[(c2[a3 >> 2] | 0) + g3 >> 2] | 0;
          rj(h3, d3);
          d3 = +sj(h3, d3);
          rj(i4, e2);
          e2 = +sj(i4, e2);
          tj(j3, f3);
          j3 = uj(j3, f3) | 0;
          qb[g3 & 1](a3, d3, e2, j3);
          l2 = k3;
          return;
        }
        function rj(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          return;
        }
        function sj(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          return + +wj(b3);
        }
        function tj(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return;
        }
        function uj(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return vj(b3) | 0;
        }
        function vj(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function wj(a3) {
          a3 = +a3;
          return +a3;
        }
        function xj(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          yj(a3, d3, f3, 1);
          l2 = e2;
          return;
        }
        function yj(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = zj() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = Aj(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, Bj(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function zj() {
          var b3 = 0, d3 = 0;
          if (!(a2[7648] | 0)) {
            Ij(9268);
            Ha(27, 9268, o2 | 0) | 0;
            d3 = 7648;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9268) | 0)) {
            b3 = 9268;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Ij(9268);
          }
          return 9268;
        }
        function Aj(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function Bj(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = zj() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Cj(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            Dj(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Cj(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function Dj(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = Ej(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            Fj(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Cj(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            Gj(a3, i4);
            Hj(i4);
            l2 = k3;
            return;
          }
        }
        function Ej(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function Fj(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function Gj(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Hj(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Ij(a3) {
          a3 = a3 | 0;
          Lj(a3);
          return;
        }
        function Jj(a3) {
          a3 = a3 | 0;
          Kj(a3 + 24 | 0);
          return;
        }
        function Kj(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function Lj(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 4, b3, Mj() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Mj() {
          return 1160;
        }
        function Nj(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3 + 8 | 0;
          f3 = d3;
          g3 = Oj(a3) | 0;
          a3 = c2[g3 + 4 >> 2] | 0;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = a3;
          c2[e2 >> 2] = c2[f3 >> 2];
          c2[e2 + 4 >> 2] = c2[f3 + 4 >> 2];
          b3 = Pj(b3, e2) | 0;
          l2 = d3;
          return b3 | 0;
        }
        function Oj(a3) {
          a3 = a3 | 0;
          return (c2[(zj() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function Pj(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            d3 = c2[(c2[a3 >> 2] | 0) + d3 >> 2] | 0;
          return Qj(pb[d3 & 31](a3) | 0) | 0;
        }
        function Qj(a3) {
          a3 = a3 | 0;
          return a3 & 1 | 0;
        }
        function Rj(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Sj(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function Sj(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = Tj() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = Uj(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, Vj(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function Tj() {
          var b3 = 0, d3 = 0;
          if (!(a2[7656] | 0)) {
            ak(9304);
            Ha(28, 9304, o2 | 0) | 0;
            d3 = 7656;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9304) | 0)) {
            b3 = 9304;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            ak(9304);
          }
          return 9304;
        }
        function Uj(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function Vj(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = Tj() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Wj(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            Xj(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Wj(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function Xj(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = Yj(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            Zj(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Wj(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            _j(a3, i4);
            $j(i4);
            l2 = k3;
            return;
          }
        }
        function Yj(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function Zj(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function _j(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function $j(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function ak(a3) {
          a3 = a3 | 0;
          dk(a3);
          return;
        }
        function bk(a3) {
          a3 = a3 | 0;
          ck(a3 + 24 | 0);
          return;
        }
        function ck(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function dk(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 5, b3, ek() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function ek() {
          return 1164;
        }
        function fk(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = gk(a3) | 0;
          a3 = c2[h3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = a3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          hk(b3, f3, d3);
          l2 = e2;
          return;
        }
        function gk(a3) {
          a3 = a3 | 0;
          return (c2[(Tj() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function hk(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          f3 = g3;
          e2 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            e2 = c2[(c2[a3 >> 2] | 0) + e2 >> 2] | 0;
          ik(f3, d3);
          d3 = jk(f3, d3) | 0;
          ob[e2 & 31](a3, d3);
          kk(f3);
          l2 = g3;
          return;
        }
        function ik(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          lk(a3, b3);
          return;
        }
        function jk(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return a3 | 0;
        }
        function kk(a3) {
          a3 = a3 | 0;
          vf(a3);
          return;
        }
        function lk(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          mk(a3, b3);
          return;
        }
        function mk(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = b3;
          return;
        }
        function nk(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          ok(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function ok(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = pk() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = qk(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, rk(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function pk() {
          var b3 = 0, d3 = 0;
          if (!(a2[7664] | 0)) {
            yk(9340);
            Ha(29, 9340, o2 | 0) | 0;
            d3 = 7664;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9340) | 0)) {
            b3 = 9340;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            yk(9340);
          }
          return 9340;
        }
        function qk(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function rk(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = pk() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            sk(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            tk(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function sk(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function tk(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = uk(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            vk(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            sk(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            wk(a3, i4);
            xk(i4);
            l2 = k3;
            return;
          }
        }
        function uk(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function vk(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function wk(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function xk(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function yk(a3) {
          a3 = a3 | 0;
          Bk(a3);
          return;
        }
        function zk(a3) {
          a3 = a3 | 0;
          Ak(a3 + 24 | 0);
          return;
        }
        function Ak(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function Bk(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 4, b3, Ck() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Ck() {
          return 1180;
        }
        function Dk(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = Ek(a3) | 0;
          a3 = c2[h3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = a3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          d3 = Fk(b3, f3, d3) | 0;
          l2 = e2;
          return d3 | 0;
        }
        function Ek(a3) {
          a3 = a3 | 0;
          return (c2[(pk() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function Fk(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          f3 = g3;
          e2 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            e2 = c2[(c2[a3 >> 2] | 0) + e2 >> 2] | 0;
          Gk(f3, d3);
          f3 = Hk(f3, d3) | 0;
          f3 = Ik(wb[e2 & 15](a3, f3) | 0) | 0;
          l2 = g3;
          return f3 | 0;
        }
        function Gk(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return;
        }
        function Hk(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return Jk(b3) | 0;
        }
        function Ik(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function Jk(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function Kk(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Lk(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function Lk(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = Mk() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = Nk(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, Ok(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function Mk() {
          var b3 = 0, d3 = 0;
          if (!(a2[7672] | 0)) {
            Vk(9376);
            Ha(30, 9376, o2 | 0) | 0;
            d3 = 7672;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9376) | 0)) {
            b3 = 9376;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Vk(9376);
          }
          return 9376;
        }
        function Nk(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function Ok(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = Mk() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Pk(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            Qk(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Pk(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function Qk(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = Rk(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            Sk(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Pk(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            Tk(a3, i4);
            Uk(i4);
            l2 = k3;
            return;
          }
        }
        function Rk(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function Sk(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function Tk(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Uk(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Vk(a3) {
          a3 = a3 | 0;
          Yk(a3);
          return;
        }
        function Wk(a3) {
          a3 = a3 | 0;
          Xk(a3 + 24 | 0);
          return;
        }
        function Xk(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function Yk(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 5, b3, Zk() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Zk() {
          return 1196;
        }
        function _k(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3 + 8 | 0;
          f3 = d3;
          g3 = $k(a3) | 0;
          a3 = c2[g3 + 4 >> 2] | 0;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = a3;
          c2[e2 >> 2] = c2[f3 >> 2];
          c2[e2 + 4 >> 2] = c2[f3 + 4 >> 2];
          b3 = al(b3, e2) | 0;
          l2 = d3;
          return b3 | 0;
        }
        function $k(a3) {
          a3 = a3 | 0;
          return (c2[(Mk() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function al(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            d3 = c2[(c2[a3 >> 2] | 0) + d3 >> 2] | 0;
          return Ik(pb[d3 & 31](a3) | 0) | 0;
        }
        function bl(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          cl(a3, d3, f3, 1);
          l2 = e2;
          return;
        }
        function cl(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = dl() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = el(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, fl(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function dl() {
          var b3 = 0, d3 = 0;
          if (!(a2[7680] | 0)) {
            ml(9412);
            Ha(31, 9412, o2 | 0) | 0;
            d3 = 7680;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9412) | 0)) {
            b3 = 9412;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            ml(9412);
          }
          return 9412;
        }
        function el(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function fl(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = dl() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            gl(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            hl(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function gl(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function hl(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = il(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            jl(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            gl(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            kl(a3, i4);
            ll(i4);
            l2 = k3;
            return;
          }
        }
        function il(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function jl(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function kl(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function ll(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function ml(a3) {
          a3 = a3 | 0;
          pl(a3);
          return;
        }
        function nl(a3) {
          a3 = a3 | 0;
          ol(a3 + 24 | 0);
          return;
        }
        function ol(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function pl(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 6, b3, ql() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function ql() {
          return 1200;
        }
        function rl(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3 + 8 | 0;
          f3 = d3;
          g3 = sl(a3) | 0;
          a3 = c2[g3 + 4 >> 2] | 0;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = a3;
          c2[e2 >> 2] = c2[f3 >> 2];
          c2[e2 + 4 >> 2] = c2[f3 + 4 >> 2];
          b3 = tl(b3, e2) | 0;
          l2 = d3;
          return b3 | 0;
        }
        function sl(a3) {
          a3 = a3 | 0;
          return (c2[(dl() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function tl(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            d3 = c2[(c2[a3 >> 2] | 0) + d3 >> 2] | 0;
          return ul(pb[d3 & 31](a3) | 0) | 0;
        }
        function ul(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function vl(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          wl(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function wl(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = xl() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = yl(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, zl(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function xl() {
          var b3 = 0, d3 = 0;
          if (!(a2[7688] | 0)) {
            Gl(9448);
            Ha(32, 9448, o2 | 0) | 0;
            d3 = 7688;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9448) | 0)) {
            b3 = 9448;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Gl(9448);
          }
          return 9448;
        }
        function yl(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function zl(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = xl() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Al(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            Bl(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Al(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function Bl(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = Cl(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            Dl(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Al(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            El(a3, i4);
            Fl(i4);
            l2 = k3;
            return;
          }
        }
        function Cl(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function Dl(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function El(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Fl(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Gl(a3) {
          a3 = a3 | 0;
          Jl(a3);
          return;
        }
        function Hl(a3) {
          a3 = a3 | 0;
          Il(a3 + 24 | 0);
          return;
        }
        function Il(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function Jl(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 6, b3, Kl() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Kl() {
          return 1204;
        }
        function Ll(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = Ml(a3) | 0;
          a3 = c2[h3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = a3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Nl(b3, f3, d3);
          l2 = e2;
          return;
        }
        function Ml(a3) {
          a3 = a3 | 0;
          return (c2[(xl() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function Nl(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          f3 = g3;
          e2 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            e2 = c2[(c2[a3 >> 2] | 0) + e2 >> 2] | 0;
          Ol(f3, d3);
          f3 = Pl(f3, d3) | 0;
          ob[e2 & 31](a3, f3);
          l2 = g3;
          return;
        }
        function Ol(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return;
        }
        function Pl(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return Ql(b3) | 0;
        }
        function Ql(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function Rl(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Sl(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function Sl(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = Tl() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = Ul(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, Vl(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function Tl() {
          var b3 = 0, d3 = 0;
          if (!(a2[7696] | 0)) {
            am(9484);
            Ha(33, 9484, o2 | 0) | 0;
            d3 = 7696;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9484) | 0)) {
            b3 = 9484;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            am(9484);
          }
          return 9484;
        }
        function Ul(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function Vl(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = Tl() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Wl(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            Xl(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Wl(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function Xl(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = Yl(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            Zl(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Wl(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            _l(a3, i4);
            $l(i4);
            l2 = k3;
            return;
          }
        }
        function Yl(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function Zl(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function _l(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function $l(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function am(a3) {
          a3 = a3 | 0;
          dm(a3);
          return;
        }
        function bm(a3) {
          a3 = a3 | 0;
          cm(a3 + 24 | 0);
          return;
        }
        function cm(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function dm(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 1, b3, em() | 0, 2);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function em() {
          return 1212;
        }
        function fm(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          f3 = l2;
          l2 = l2 + 16 | 0;
          g3 = f3 + 8 | 0;
          h3 = f3;
          i4 = gm(a3) | 0;
          a3 = c2[i4 + 4 >> 2] | 0;
          c2[h3 >> 2] = c2[i4 >> 2];
          c2[h3 + 4 >> 2] = a3;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = c2[h3 + 4 >> 2];
          hm(b3, g3, d3, e2);
          l2 = f3;
          return;
        }
        function gm(a3) {
          a3 = a3 | 0;
          return (c2[(Tl() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function hm(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          g3 = i4 + 1 | 0;
          h3 = i4;
          f3 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            f3 = c2[(c2[a3 >> 2] | 0) + f3 >> 2] | 0;
          Ol(g3, d3);
          g3 = Pl(g3, d3) | 0;
          Gk(h3, e2);
          h3 = Hk(h3, e2) | 0;
          Eb[f3 & 15](a3, g3, h3);
          l2 = i4;
          return;
        }
        function im(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          jm(a3, d3, f3, 1);
          l2 = e2;
          return;
        }
        function jm(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = km() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = lm(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, mm(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function km() {
          var b3 = 0, d3 = 0;
          if (!(a2[7704] | 0)) {
            tm(9520);
            Ha(34, 9520, o2 | 0) | 0;
            d3 = 7704;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9520) | 0)) {
            b3 = 9520;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            tm(9520);
          }
          return 9520;
        }
        function lm(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function mm(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = km() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            nm(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            om(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function nm(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function om(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = pm(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            qm(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            nm(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            rm(a3, i4);
            sm(i4);
            l2 = k3;
            return;
          }
        }
        function pm(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function qm(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function rm(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function sm(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function tm(a3) {
          a3 = a3 | 0;
          wm(a3);
          return;
        }
        function um(a3) {
          a3 = a3 | 0;
          vm(a3 + 24 | 0);
          return;
        }
        function vm(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function wm(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 1, b3, xm() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function xm() {
          return 1224;
        }
        function ym(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          f3 = l2;
          l2 = l2 + 16 | 0;
          g3 = f3 + 8 | 0;
          h3 = f3;
          i4 = zm(a3) | 0;
          a3 = c2[i4 + 4 >> 2] | 0;
          c2[h3 >> 2] = c2[i4 >> 2];
          c2[h3 + 4 >> 2] = a3;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = c2[h3 + 4 >> 2];
          e2 = +Am(b3, g3, d3);
          l2 = f3;
          return +e2;
        }
        function zm(a3) {
          a3 = a3 | 0;
          return (c2[(km() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function Am(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          f3 = g3;
          e2 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            e2 = c2[(c2[a3 >> 2] | 0) + e2 >> 2] | 0;
          tj(f3, d3);
          f3 = uj(f3, d3) | 0;
          h3 = +ch(+zb[e2 & 7](a3, f3));
          l2 = g3;
          return +h3;
        }
        function Bm(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Cm(a3, d3, f3, 1);
          l2 = e2;
          return;
        }
        function Cm(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = Dm() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = Em(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, Fm(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function Dm() {
          var b3 = 0, d3 = 0;
          if (!(a2[7712] | 0)) {
            Mm(9556);
            Ha(35, 9556, o2 | 0) | 0;
            d3 = 7712;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9556) | 0)) {
            b3 = 9556;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Mm(9556);
          }
          return 9556;
        }
        function Em(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function Fm(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = Dm() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Gm(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            Hm(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Gm(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function Hm(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = Im(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            Jm(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Gm(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            Km(a3, i4);
            Lm(i4);
            l2 = k3;
            return;
          }
        }
        function Im(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function Jm(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function Km(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Lm(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Mm(a3) {
          a3 = a3 | 0;
          Pm(a3);
          return;
        }
        function Nm(a3) {
          a3 = a3 | 0;
          Om(a3 + 24 | 0);
          return;
        }
        function Om(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function Pm(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 5, b3, Qm() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Qm() {
          return 1232;
        }
        function Rm(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = Sm(a3) | 0;
          a3 = c2[h3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = a3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          d3 = +Tm(b3, f3);
          l2 = e2;
          return +d3;
        }
        function Sm(a3) {
          a3 = a3 | 0;
          return (c2[(Dm() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function Tm(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            d3 = c2[(c2[a3 >> 2] | 0) + d3 >> 2] | 0;
          return + +ch(+ub[d3 & 15](a3));
        }
        function Um(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Vm(a3, d3, f3, 1);
          l2 = e2;
          return;
        }
        function Vm(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = Wm() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = Xm(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, Ym(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function Wm() {
          var b3 = 0, d3 = 0;
          if (!(a2[7720] | 0)) {
            dn2(9592);
            Ha(36, 9592, o2 | 0) | 0;
            d3 = 7720;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9592) | 0)) {
            b3 = 9592;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            dn2(9592);
          }
          return 9592;
        }
        function Xm(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function Ym(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = Wm() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Zm(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            _m(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Zm(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function _m(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = $m(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            an2(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Zm(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            bn(a3, i4);
            cn2(i4);
            l2 = k3;
            return;
          }
        }
        function $m(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function an2(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function bn(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function cn2(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function dn2(a3) {
          a3 = a3 | 0;
          gn(a3);
          return;
        }
        function en2(a3) {
          a3 = a3 | 0;
          fn2(a3 + 24 | 0);
          return;
        }
        function fn2(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function gn(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 7, b3, hn() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function hn() {
          return 1276;
        }
        function jn(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3 + 8 | 0;
          f3 = d3;
          g3 = kn(a3) | 0;
          a3 = c2[g3 + 4 >> 2] | 0;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = a3;
          c2[e2 >> 2] = c2[f3 >> 2];
          c2[e2 + 4 >> 2] = c2[f3 + 4 >> 2];
          b3 = ln2(b3, e2) | 0;
          l2 = d3;
          return b3 | 0;
        }
        function kn(a3) {
          a3 = a3 | 0;
          return (c2[(Wm() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function ln2(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0;
          f3 = l2;
          l2 = l2 + 16 | 0;
          e2 = f3;
          d3 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            d3 = c2[(c2[a3 >> 2] | 0) + d3 >> 2] | 0;
          ob[d3 & 31](e2, a3);
          e2 = mn(e2) | 0;
          l2 = f3;
          return e2 | 0;
        }
        function mn(a3) {
          a3 = a3 | 0;
          var b3 = 0, c3 = 0, d3 = 0, e2 = 0;
          e2 = l2;
          l2 = l2 + 32 | 0;
          b3 = e2 + 12 | 0;
          c3 = e2;
          d3 = Di(nn2() | 0) | 0;
          if (!d3)
            a3 = pn2(a3) | 0;
          else {
            Ei(b3, d3);
            Fi(c3, b3);
            on2(a3, c3);
            a3 = Hi(b3) | 0;
          }
          l2 = e2;
          return a3 | 0;
        }
        function nn2() {
          var b3 = 0;
          if (!(a2[7736] | 0)) {
            An(9640);
            Ha(25, 9640, o2 | 0) | 0;
            b3 = 7736;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 9640;
        }
        function on2(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          un2(b3, a3, a3 + 8 | 0) | 0;
          return;
        }
        function pn2(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          f3 = d3 + 4 | 0;
          h3 = d3;
          e2 = jy(8) | 0;
          b3 = e2;
          i4 = qC(16) | 0;
          c2[i4 >> 2] = c2[a3 >> 2];
          c2[i4 + 4 >> 2] = c2[a3 + 4 >> 2];
          c2[i4 + 8 >> 2] = c2[a3 + 8 >> 2];
          c2[i4 + 12 >> 2] = c2[a3 + 12 >> 2];
          g3 = b3 + 4 | 0;
          c2[g3 >> 2] = i4;
          a3 = qC(8) | 0;
          g3 = c2[g3 >> 2] | 0;
          c2[h3 >> 2] = 0;
          c2[f3 >> 2] = c2[h3 >> 2];
          qn(a3, g3, f3);
          c2[e2 >> 2] = a3;
          l2 = d3;
          return b3 | 0;
        }
        function qn(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          d3 = qC(16) | 0;
          c2[d3 + 4 >> 2] = 0;
          c2[d3 + 8 >> 2] = 0;
          c2[d3 >> 2] = 1244;
          c2[d3 + 12 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function rn2(a3) {
          a3 = a3 | 0;
          kC(a3);
          sC(a3);
          return;
        }
        function sn2(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 12 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function tn2(a3) {
          a3 = a3 | 0;
          sC(a3);
          return;
        }
        function un2(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          b3 = vn2(c2[a3 >> 2] | 0, b3, d3) | 0;
          d3 = a3 + 4 | 0;
          c2[(c2[d3 >> 2] | 0) + 8 >> 2] = b3;
          return c2[(c2[d3 >> 2] | 0) + 8 >> 2] | 0;
        }
        function vn2(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2;
          UA(f3);
          a3 = Sg(a3) | 0;
          d3 = wn(a3, c2[b3 >> 2] | 0, +h2[d3 >> 3]) | 0;
          WA(f3);
          l2 = e2;
          return d3 | 0;
        }
        function wn(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = +c3;
          var d3 = 0;
          d3 = Vg(xn() | 0) | 0;
          b3 = Xg(b3) | 0;
          return za(0, d3 | 0, a3 | 0, b3 | 0, + +Wg(c3)) | 0;
        }
        function xn() {
          var b3 = 0;
          if (!(a2[7728] | 0)) {
            yn(9628);
            b3 = 7728;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 9628;
        }
        function yn(a3) {
          a3 = a3 | 0;
          fh(a3, zn() | 0, 2);
          return;
        }
        function zn() {
          return 1264;
        }
        function An(a3) {
          a3 = a3 | 0;
          Zi(a3);
          return;
        }
        function Bn(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Cn(a3, d3, f3, 1);
          l2 = e2;
          return;
        }
        function Cn(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = Dn() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = En(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, Fn(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function Dn() {
          var b3 = 0, d3 = 0;
          if (!(a2[7744] | 0)) {
            Mn(9684);
            Ha(37, 9684, o2 | 0) | 0;
            d3 = 7744;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9684) | 0)) {
            b3 = 9684;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Mn(9684);
          }
          return 9684;
        }
        function En(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function Fn(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = Dn() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Gn(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            Hn(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Gn(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function Hn(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = In(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            Jn(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Gn(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            Kn(a3, i4);
            Ln(i4);
            l2 = k3;
            return;
          }
        }
        function In(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function Jn(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function Kn(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Ln(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Mn(a3) {
          a3 = a3 | 0;
          Pn(a3);
          return;
        }
        function Nn(a3) {
          a3 = a3 | 0;
          On(a3 + 24 | 0);
          return;
        }
        function On(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function Pn(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 5, b3, Qn() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Qn() {
          return 1280;
        }
        function Rn(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = Sn(a3) | 0;
          a3 = c2[h3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = a3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          d3 = Tn(b3, f3, d3) | 0;
          l2 = e2;
          return d3 | 0;
        }
        function Sn(a3) {
          a3 = a3 | 0;
          return (c2[(Dn() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function Tn(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          h3 = l2;
          l2 = l2 + 32 | 0;
          f3 = h3;
          g3 = h3 + 16 | 0;
          e2 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            e2 = c2[(c2[a3 >> 2] | 0) + e2 >> 2] | 0;
          tj(g3, d3);
          g3 = uj(g3, d3) | 0;
          Eb[e2 & 15](f3, a3, g3);
          g3 = mn(f3) | 0;
          l2 = h3;
          return g3 | 0;
        }
        function Un(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Vn(a3, d3, f3, 1);
          l2 = e2;
          return;
        }
        function Vn(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = Wn() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = Xn(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, Yn(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function Wn() {
          var b3 = 0, d3 = 0;
          if (!(a2[7752] | 0)) {
            eo(9720);
            Ha(38, 9720, o2 | 0) | 0;
            d3 = 7752;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9720) | 0)) {
            b3 = 9720;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            eo(9720);
          }
          return 9720;
        }
        function Xn(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function Yn(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = Wn() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Zn(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            _n(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Zn(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function _n(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = $n(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            ao(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Zn(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            bo(a3, i4);
            co(i4);
            l2 = k3;
            return;
          }
        }
        function $n(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function ao(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function bo(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function co(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function eo(a3) {
          a3 = a3 | 0;
          ho(a3);
          return;
        }
        function fo(a3) {
          a3 = a3 | 0;
          go(a3 + 24 | 0);
          return;
        }
        function go(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function ho(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 8, b3, io() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function io() {
          return 1288;
        }
        function jo(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3 + 8 | 0;
          f3 = d3;
          g3 = ko(a3) | 0;
          a3 = c2[g3 + 4 >> 2] | 0;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = a3;
          c2[e2 >> 2] = c2[f3 >> 2];
          c2[e2 + 4 >> 2] = c2[f3 + 4 >> 2];
          b3 = lo(b3, e2) | 0;
          l2 = d3;
          return b3 | 0;
        }
        function ko(a3) {
          a3 = a3 | 0;
          return (c2[(Wn() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function lo(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            d3 = c2[(c2[a3 >> 2] | 0) + d3 >> 2] | 0;
          return bh(pb[d3 & 31](a3) | 0) | 0;
        }
        function mo(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          no(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function no(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = oo() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = po(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, qo(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function oo() {
          var b3 = 0, d3 = 0;
          if (!(a2[7760] | 0)) {
            xo(9756);
            Ha(39, 9756, o2 | 0) | 0;
            d3 = 7760;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9756) | 0)) {
            b3 = 9756;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            xo(9756);
          }
          return 9756;
        }
        function po(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function qo(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = oo() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            ro(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            so(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function ro(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function so(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = to(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            uo(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            ro(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            vo(a3, i4);
            wo(i4);
            l2 = k3;
            return;
          }
        }
        function to(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function uo(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function vo(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function wo(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function xo(a3) {
          a3 = a3 | 0;
          Ao(a3);
          return;
        }
        function yo(a3) {
          a3 = a3 | 0;
          zo(a3 + 24 | 0);
          return;
        }
        function zo(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function Ao(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 8, b3, Bo() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Bo() {
          return 1292;
        }
        function Co(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = Do(a3) | 0;
          a3 = c2[h3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = a3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Eo(b3, f3, d3);
          l2 = e2;
          return;
        }
        function Do(a3) {
          a3 = a3 | 0;
          return (c2[(oo() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function Eo(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          var e2 = 0, f3 = 0, g3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          f3 = g3;
          e2 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            e2 = c2[(c2[a3 >> 2] | 0) + e2 >> 2] | 0;
          rj(f3, d3);
          d3 = +sj(f3, d3);
          lb[e2 & 31](a3, d3);
          l2 = g3;
          return;
        }
        function Fo(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Go(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function Go(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = Ho() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = Io(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, Jo(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function Ho() {
          var b3 = 0, d3 = 0;
          if (!(a2[7768] | 0)) {
            Qo(9792);
            Ha(40, 9792, o2 | 0) | 0;
            d3 = 7768;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9792) | 0)) {
            b3 = 9792;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Qo(9792);
          }
          return 9792;
        }
        function Io(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function Jo(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = Ho() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Ko(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            Lo(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Ko(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function Lo(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = Mo(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            No(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Ko(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            Oo(a3, i4);
            Po(i4);
            l2 = k3;
            return;
          }
        }
        function Mo(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function No(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function Oo(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Po(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Qo(a3) {
          a3 = a3 | 0;
          To(a3);
          return;
        }
        function Ro(a3) {
          a3 = a3 | 0;
          So(a3 + 24 | 0);
          return;
        }
        function So(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function To(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 1, b3, Uo() | 0, 2);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Uo() {
          return 1300;
        }
        function Vo(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = +e2;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          f3 = l2;
          l2 = l2 + 16 | 0;
          g3 = f3 + 8 | 0;
          h3 = f3;
          i4 = Wo(a3) | 0;
          a3 = c2[i4 + 4 >> 2] | 0;
          c2[h3 >> 2] = c2[i4 >> 2];
          c2[h3 + 4 >> 2] = a3;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = c2[h3 + 4 >> 2];
          Xo(b3, g3, d3, e2);
          l2 = f3;
          return;
        }
        function Wo(a3) {
          a3 = a3 | 0;
          return (c2[(Ho() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function Xo(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = +e2;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          g3 = i4 + 1 | 0;
          h3 = i4;
          f3 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            f3 = c2[(c2[a3 >> 2] | 0) + f3 >> 2] | 0;
          tj(g3, d3);
          g3 = uj(g3, d3) | 0;
          rj(h3, e2);
          e2 = +sj(h3, e2);
          Gb[f3 & 15](a3, g3, e2);
          l2 = i4;
          return;
        }
        function Yo(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Zo(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function Zo(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = _o() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = $o(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, ap(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function _o() {
          var b3 = 0, d3 = 0;
          if (!(a2[7776] | 0)) {
            hp(9828);
            Ha(41, 9828, o2 | 0) | 0;
            d3 = 7776;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9828) | 0)) {
            b3 = 9828;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            hp(9828);
          }
          return 9828;
        }
        function $o(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function ap(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = _o() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            bp(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            cp(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function bp(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function cp(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = dp(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            ep(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            bp(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            fp(a3, i4);
            gp(i4);
            l2 = k3;
            return;
          }
        }
        function dp(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function ep(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function fp(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function gp(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function hp(a3) {
          a3 = a3 | 0;
          kp(a3);
          return;
        }
        function ip(a3) {
          a3 = a3 | 0;
          jp(a3 + 24 | 0);
          return;
        }
        function jp(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function kp(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 7, b3, lp() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function lp() {
          return 1312;
        }
        function mp(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = np(a3) | 0;
          a3 = c2[h3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = a3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          op(b3, f3, d3);
          l2 = e2;
          return;
        }
        function np(a3) {
          a3 = a3 | 0;
          return (c2[(_o() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function op(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          f3 = g3;
          e2 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            e2 = c2[(c2[a3 >> 2] | 0) + e2 >> 2] | 0;
          tj(f3, d3);
          f3 = uj(f3, d3) | 0;
          ob[e2 & 31](a3, f3);
          l2 = g3;
          return;
        }
        function pp(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          qp(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function qp(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = rp() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = sp(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, tp(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function rp() {
          var b3 = 0, d3 = 0;
          if (!(a2[7784] | 0)) {
            Ap(9864);
            Ha(42, 9864, o2 | 0) | 0;
            d3 = 7784;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9864) | 0)) {
            b3 = 9864;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Ap(9864);
          }
          return 9864;
        }
        function sp(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function tp(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = rp() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            up(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            vp(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function up(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function vp(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = wp(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            xp(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            up(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            yp(a3, i4);
            zp(i4);
            l2 = k3;
            return;
          }
        }
        function wp(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function xp(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function yp(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function zp(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Ap(a3) {
          a3 = a3 | 0;
          Dp(a3);
          return;
        }
        function Bp(a3) {
          a3 = a3 | 0;
          Cp(a3 + 24 | 0);
          return;
        }
        function Cp(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function Dp(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 8, b3, Ep() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Ep() {
          return 1320;
        }
        function Fp(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = Gp(a3) | 0;
          a3 = c2[h3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = a3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Hp(b3, f3, d3);
          l2 = e2;
          return;
        }
        function Gp(a3) {
          a3 = a3 | 0;
          return (c2[(rp() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function Hp(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          f3 = g3;
          e2 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            e2 = c2[(c2[a3 >> 2] | 0) + e2 >> 2] | 0;
          Ip(f3, d3);
          f3 = Jp(f3, d3) | 0;
          ob[e2 & 31](a3, f3);
          l2 = g3;
          return;
        }
        function Ip(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return;
        }
        function Jp(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return Kp(b3) | 0;
        }
        function Kp(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function Lp(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Mp(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function Mp(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = Np() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = Op(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, Pp(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function Np() {
          var b3 = 0, d3 = 0;
          if (!(a2[7792] | 0)) {
            Wp(9900);
            Ha(43, 9900, o2 | 0) | 0;
            d3 = 7792;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9900) | 0)) {
            b3 = 9900;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Wp(9900);
          }
          return 9900;
        }
        function Op(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function Pp(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = Np() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Qp(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            Rp(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Qp(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function Rp(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = Sp(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            Tp(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Qp(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            Up(a3, i4);
            Vp(i4);
            l2 = k3;
            return;
          }
        }
        function Sp(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function Tp(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function Up(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Vp(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Wp(a3) {
          a3 = a3 | 0;
          Zp(a3);
          return;
        }
        function Xp(a3) {
          a3 = a3 | 0;
          Yp(a3 + 24 | 0);
          return;
        }
        function Yp(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function Zp(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 22, b3, _p() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function _p() {
          return 1344;
        }
        function $p(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3 + 8 | 0;
          f3 = d3;
          g3 = aq(a3) | 0;
          a3 = c2[g3 + 4 >> 2] | 0;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = a3;
          c2[e2 >> 2] = c2[f3 >> 2];
          c2[e2 + 4 >> 2] = c2[f3 + 4 >> 2];
          bq(b3, e2);
          l2 = d3;
          return;
        }
        function aq(a3) {
          a3 = a3 | 0;
          return (c2[(Np() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function bq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            d3 = c2[(c2[a3 >> 2] | 0) + d3 >> 2] | 0;
          nb[d3 & 127](a3);
          return;
        }
        function cq(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = c2[a3 >> 2] | 0;
          f3 = dq() | 0;
          a3 = eq(d3) | 0;
          fi(g3, b3, f3, a3, fq(d3, e2) | 0, e2);
          return;
        }
        function dq() {
          var b3 = 0, d3 = 0;
          if (!(a2[7800] | 0)) {
            mq(9936);
            Ha(44, 9936, o2 | 0) | 0;
            d3 = 7800;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9936) | 0)) {
            b3 = 9936;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            mq(9936);
          }
          return 9936;
        }
        function eq(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function fq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          f3 = i4;
          g3 = i4 + 4 | 0;
          c2[f3 >> 2] = a3;
          j3 = dq() | 0;
          h3 = j3 + 24 | 0;
          b3 = ji(b3, 4) | 0;
          c2[g3 >> 2] = b3;
          d3 = j3 + 28 | 0;
          e2 = c2[d3 >> 2] | 0;
          if (e2 >>> 0 < (c2[j3 + 32 >> 2] | 0) >>> 0) {
            gq(e2, a3, b3);
            b3 = (c2[d3 >> 2] | 0) + 8 | 0;
            c2[d3 >> 2] = b3;
          } else {
            hq(h3, f3, g3);
            b3 = c2[d3 >> 2] | 0;
          }
          l2 = i4;
          return (b3 - (c2[h3 >> 2] | 0) >> 3) + -1 | 0;
        }
        function gq(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function hq(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          f3 = i4;
          g3 = a3 + 4 | 0;
          h3 = ((c2[g3 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 3) + 1 | 0;
          e2 = iq(a3) | 0;
          if (e2 >>> 0 < h3 >>> 0)
            jC(a3);
          else {
            j3 = c2[a3 >> 2] | 0;
            m3 = (c2[a3 + 8 >> 2] | 0) - j3 | 0;
            k3 = m3 >> 2;
            jq(f3, m3 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k3 >>> 0 < h3 >>> 0 ? h3 : k3 : e2, (c2[g3 >> 2] | 0) - j3 >> 3, a3 + 8 | 0);
            h3 = f3 + 8 | 0;
            gq(c2[h3 >> 2] | 0, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0);
            c2[h3 >> 2] = (c2[h3 >> 2] | 0) + 8;
            kq(a3, f3);
            lq(f3);
            l2 = i4;
            return;
          }
        }
        function iq(a3) {
          a3 = a3 | 0;
          return 536870911;
        }
        function jq(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 536870911)
                Ta();
              else {
                f3 = qC(b3 << 3) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 3) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 3);
          return;
        }
        function kq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 3) << 3) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function lq(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -8 - b3 | 0) >>> 3) << 3);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function mq(a3) {
          a3 = a3 | 0;
          pq(a3);
          return;
        }
        function nq(a3) {
          a3 = a3 | 0;
          oq(a3 + 24 | 0);
          return;
        }
        function oq(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function pq(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 1, 23, b3, Kl() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function qq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          sq(c2[(rq(a3) | 0) >> 2] | 0, b3);
          return;
        }
        function rq(a3) {
          a3 = a3 | 0;
          return (c2[(dq() | 0) + 24 >> 2] | 0) + (a3 << 3) | 0;
        }
        function sq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var c3 = 0, d3 = 0;
          c3 = l2;
          l2 = l2 + 16 | 0;
          d3 = c3;
          Ol(d3, b3);
          b3 = Pl(d3, b3) | 0;
          nb[a3 & 127](b3);
          l2 = c3;
          return;
        }
        function tq(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = c2[a3 >> 2] | 0;
          f3 = uq() | 0;
          a3 = vq(d3) | 0;
          fi(g3, b3, f3, a3, wq(d3, e2) | 0, e2);
          return;
        }
        function uq() {
          var b3 = 0, d3 = 0;
          if (!(a2[7808] | 0)) {
            Dq(9972);
            Ha(45, 9972, o2 | 0) | 0;
            d3 = 7808;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(9972) | 0)) {
            b3 = 9972;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Dq(9972);
          }
          return 9972;
        }
        function vq(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function wq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          f3 = i4;
          g3 = i4 + 4 | 0;
          c2[f3 >> 2] = a3;
          j3 = uq() | 0;
          h3 = j3 + 24 | 0;
          b3 = ji(b3, 4) | 0;
          c2[g3 >> 2] = b3;
          d3 = j3 + 28 | 0;
          e2 = c2[d3 >> 2] | 0;
          if (e2 >>> 0 < (c2[j3 + 32 >> 2] | 0) >>> 0) {
            xq(e2, a3, b3);
            b3 = (c2[d3 >> 2] | 0) + 8 | 0;
            c2[d3 >> 2] = b3;
          } else {
            yq(h3, f3, g3);
            b3 = c2[d3 >> 2] | 0;
          }
          l2 = i4;
          return (b3 - (c2[h3 >> 2] | 0) >> 3) + -1 | 0;
        }
        function xq(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function yq(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          f3 = i4;
          g3 = a3 + 4 | 0;
          h3 = ((c2[g3 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 3) + 1 | 0;
          e2 = zq(a3) | 0;
          if (e2 >>> 0 < h3 >>> 0)
            jC(a3);
          else {
            j3 = c2[a3 >> 2] | 0;
            m3 = (c2[a3 + 8 >> 2] | 0) - j3 | 0;
            k3 = m3 >> 2;
            Aq(f3, m3 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k3 >>> 0 < h3 >>> 0 ? h3 : k3 : e2, (c2[g3 >> 2] | 0) - j3 >> 3, a3 + 8 | 0);
            h3 = f3 + 8 | 0;
            xq(c2[h3 >> 2] | 0, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0);
            c2[h3 >> 2] = (c2[h3 >> 2] | 0) + 8;
            Bq(a3, f3);
            Cq(f3);
            l2 = i4;
            return;
          }
        }
        function zq(a3) {
          a3 = a3 | 0;
          return 536870911;
        }
        function Aq(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 536870911)
                Ta();
              else {
                f3 = qC(b3 << 3) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 3) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 3);
          return;
        }
        function Bq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 3) << 3) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Cq(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -8 - b3 | 0) >>> 3) << 3);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Dq(a3) {
          a3 = a3 | 0;
          Gq(a3);
          return;
        }
        function Eq(a3) {
          a3 = a3 | 0;
          Fq(a3 + 24 | 0);
          return;
        }
        function Fq(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function Gq(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 1, 9, b3, Hq() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Hq() {
          return 1348;
        }
        function Iq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return Kq(c2[(Jq(a3) | 0) >> 2] | 0, b3) | 0;
        }
        function Jq(a3) {
          a3 = a3 | 0;
          return (c2[(uq() | 0) + 24 >> 2] | 0) + (a3 << 3) | 0;
        }
        function Kq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var c3 = 0, d3 = 0;
          c3 = l2;
          l2 = l2 + 16 | 0;
          d3 = c3;
          Lq(d3, b3);
          b3 = Mq(d3, b3) | 0;
          b3 = Ik(pb[a3 & 31](b3) | 0) | 0;
          l2 = c3;
          return b3 | 0;
        }
        function Lq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return;
        }
        function Mq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return Nq(b3) | 0;
        }
        function Nq(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function Oq(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = c2[a3 >> 2] | 0;
          f3 = Pq() | 0;
          a3 = Qq(d3) | 0;
          fi(g3, b3, f3, a3, Rq(d3, e2) | 0, e2);
          return;
        }
        function Pq() {
          var b3 = 0, d3 = 0;
          if (!(a2[7816] | 0)) {
            Yq(10008);
            Ha(46, 10008, o2 | 0) | 0;
            d3 = 7816;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(10008) | 0)) {
            b3 = 10008;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Yq(10008);
          }
          return 10008;
        }
        function Qq(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function Rq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          f3 = i4;
          g3 = i4 + 4 | 0;
          c2[f3 >> 2] = a3;
          j3 = Pq() | 0;
          h3 = j3 + 24 | 0;
          b3 = ji(b3, 4) | 0;
          c2[g3 >> 2] = b3;
          d3 = j3 + 28 | 0;
          e2 = c2[d3 >> 2] | 0;
          if (e2 >>> 0 < (c2[j3 + 32 >> 2] | 0) >>> 0) {
            Sq(e2, a3, b3);
            b3 = (c2[d3 >> 2] | 0) + 8 | 0;
            c2[d3 >> 2] = b3;
          } else {
            Tq(h3, f3, g3);
            b3 = c2[d3 >> 2] | 0;
          }
          l2 = i4;
          return (b3 - (c2[h3 >> 2] | 0) >> 3) + -1 | 0;
        }
        function Sq(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function Tq(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          f3 = i4;
          g3 = a3 + 4 | 0;
          h3 = ((c2[g3 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 3) + 1 | 0;
          e2 = Uq(a3) | 0;
          if (e2 >>> 0 < h3 >>> 0)
            jC(a3);
          else {
            j3 = c2[a3 >> 2] | 0;
            m3 = (c2[a3 + 8 >> 2] | 0) - j3 | 0;
            k3 = m3 >> 2;
            Vq(f3, m3 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k3 >>> 0 < h3 >>> 0 ? h3 : k3 : e2, (c2[g3 >> 2] | 0) - j3 >> 3, a3 + 8 | 0);
            h3 = f3 + 8 | 0;
            Sq(c2[h3 >> 2] | 0, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0);
            c2[h3 >> 2] = (c2[h3 >> 2] | 0) + 8;
            Wq(a3, f3);
            Xq(f3);
            l2 = i4;
            return;
          }
        }
        function Uq(a3) {
          a3 = a3 | 0;
          return 536870911;
        }
        function Vq(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 536870911)
                Ta();
              else {
                f3 = qC(b3 << 3) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 3) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 3);
          return;
        }
        function Wq(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 3) << 3) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Xq(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -8 - b3 | 0) >>> 3) << 3);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Yq(a3) {
          a3 = a3 | 0;
          $q(a3);
          return;
        }
        function Zq(a3) {
          a3 = a3 | 0;
          _q(a3 + 24 | 0);
          return;
        }
        function _q(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function $q(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 1, 15, b3, Zk() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function ar(a3) {
          a3 = a3 | 0;
          return cr(c2[(br(a3) | 0) >> 2] | 0) | 0;
        }
        function br(a3) {
          a3 = a3 | 0;
          return (c2[(Pq() | 0) + 24 >> 2] | 0) + (a3 << 3) | 0;
        }
        function cr(a3) {
          a3 = a3 | 0;
          return Ik(Ab[a3 & 7]() | 0) | 0;
        }
        function dr() {
          var b3 = 0;
          if (!(a2[7832] | 0)) {
            nr(10052);
            Ha(25, 10052, o2 | 0) | 0;
            b3 = 7832;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10052;
        }
        function er(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = fr() | 0;
          c2[a3 + 4 >> 2] = gr() | 0;
          c2[a3 + 12 >> 2] = b3;
          c2[a3 + 8 >> 2] = hr() | 0;
          c2[a3 + 32 >> 2] = 2;
          return;
        }
        function fr() {
          return 11709;
        }
        function gr() {
          return 1188;
        }
        function hr() {
          return lr() | 0;
        }
        function ir(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          if ((jr(d3, 896) | 0) == 512) {
            if (c3 | 0) {
              kr(c3);
              sC(c3);
            }
          } else if (b3 | 0) {
            uf(b3);
            sC(b3);
          }
          return;
        }
        function jr(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return b3 & a3 | 0;
        }
        function kr(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 4 >> 2] | 0;
          if (a3 | 0)
            oC(a3);
          return;
        }
        function lr() {
          var b3 = 0;
          if (!(a2[7824] | 0)) {
            c2[2511] = mr() | 0;
            c2[2512] = 0;
            b3 = 7824;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10044;
        }
        function mr() {
          return 0;
        }
        function nr(a3) {
          a3 = a3 | 0;
          Zi(a3);
          return;
        }
        function or(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0;
          b3 = l2;
          l2 = l2 + 32 | 0;
          d3 = b3 + 24 | 0;
          g3 = b3 + 16 | 0;
          f3 = b3 + 8 | 0;
          e2 = b3;
          pr(a3, 4827);
          qr(a3, 4834, 3) | 0;
          rr(a3, 3682, 47) | 0;
          c2[g3 >> 2] = 9;
          c2[g3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[g3 >> 2];
          c2[d3 + 4 >> 2] = c2[g3 + 4 >> 2];
          sr(a3, 4841, d3) | 0;
          c2[f3 >> 2] = 1;
          c2[f3 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[f3 >> 2];
          c2[d3 + 4 >> 2] = c2[f3 + 4 >> 2];
          tr(a3, 4871, d3) | 0;
          c2[e2 >> 2] = 10;
          c2[e2 + 4 >> 2] = 0;
          c2[d3 >> 2] = c2[e2 >> 2];
          c2[d3 + 4 >> 2] = c2[e2 + 4 >> 2];
          ur(a3, 4891, d3) | 0;
          l2 = b3;
          return;
        }
        function pr(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = nt() | 0;
          c2[a3 >> 2] = d3;
          ot(d3, b3);
          Hv(c2[a3 >> 2] | 0);
          return;
        }
        function qr(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          Ws(a3, ai(b3) | 0, c3, 0);
          return a3 | 0;
        }
        function rr(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          Es(a3, ai(b3) | 0, c3, 0);
          return a3 | 0;
        }
        function sr(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          is(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function tr(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Or(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function ur(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = c2[d3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[d3 >> 2];
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          vr(a3, b3, f3);
          l2 = e2;
          return a3 | 0;
        }
        function vr(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          wr(a3, d3, f3, 1);
          l2 = e2;
          return;
        }
        function wr(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = xr() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = yr(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, zr(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function xr() {
          var b3 = 0, d3 = 0;
          if (!(a2[7840] | 0)) {
            Gr(10100);
            Ha(48, 10100, o2 | 0) | 0;
            d3 = 7840;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(10100) | 0)) {
            b3 = 10100;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Gr(10100);
          }
          return 10100;
        }
        function yr(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function zr(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = xr() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Ar(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            Br(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Ar(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function Br(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = Cr(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            Dr(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Ar(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            Er(a3, i4);
            Fr(i4);
            l2 = k3;
            return;
          }
        }
        function Cr(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function Dr(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function Er(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Fr(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Gr(a3) {
          a3 = a3 | 0;
          Jr(a3);
          return;
        }
        function Hr(a3) {
          a3 = a3 | 0;
          Ir(a3 + 24 | 0);
          return;
        }
        function Ir(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function Jr(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 6, b3, Kr() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Kr() {
          return 1364;
        }
        function Lr(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = Mr(a3) | 0;
          a3 = c2[h3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = a3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          d3 = Nr(b3, f3, d3) | 0;
          l2 = e2;
          return d3 | 0;
        }
        function Mr(a3) {
          a3 = a3 | 0;
          return (c2[(xr() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function Nr(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          f3 = g3;
          e2 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            e2 = c2[(c2[a3 >> 2] | 0) + e2 >> 2] | 0;
          tj(f3, d3);
          f3 = uj(f3, d3) | 0;
          f3 = Qj(wb[e2 & 15](a3, f3) | 0) | 0;
          l2 = g3;
          return f3 | 0;
        }
        function Or(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          Pr(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function Pr(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = Qr() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = Rr(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, Sr(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function Qr() {
          var b3 = 0, d3 = 0;
          if (!(a2[7848] | 0)) {
            Zr(10136);
            Ha(49, 10136, o2 | 0) | 0;
            d3 = 7848;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(10136) | 0)) {
            b3 = 10136;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Zr(10136);
          }
          return 10136;
        }
        function Rr(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function Sr(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = Qr() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            Tr(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            Ur(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Tr(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function Ur(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = Vr(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            Wr(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            Tr(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            Xr(a3, i4);
            Yr(i4);
            l2 = k3;
            return;
          }
        }
        function Vr(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function Wr(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function Xr(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Yr(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Zr(a3) {
          a3 = a3 | 0;
          as(a3);
          return;
        }
        function _r(a3) {
          a3 = a3 | 0;
          $r(a3 + 24 | 0);
          return;
        }
        function $r(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function as(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 9, b3, bs() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function bs() {
          return 1372;
        }
        function cs(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          h3 = ds(a3) | 0;
          a3 = c2[h3 + 4 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = a3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          es(b3, f3, d3);
          l2 = e2;
          return;
        }
        function ds(a3) {
          a3 = a3 | 0;
          return (c2[(Qr() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function es(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          var e2 = 0, f3 = 0, g3 = 0, h3 = ib;
          g3 = l2;
          l2 = l2 + 16 | 0;
          f3 = g3;
          e2 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            e2 = c2[(c2[a3 >> 2] | 0) + e2 >> 2] | 0;
          fs(f3, d3);
          h3 = T2(gs(f3, d3));
          kb[e2 & 1](a3, h3);
          l2 = g3;
          return;
        }
        function fs(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          return;
        }
        function gs(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          return T2(hs(b3));
        }
        function hs(a3) {
          a3 = +a3;
          return T2(a3);
        }
        function is(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2 + 8 | 0;
          g3 = e2;
          i4 = c2[d3 >> 2] | 0;
          h3 = c2[d3 + 4 >> 2] | 0;
          d3 = ai(b3) | 0;
          c2[g3 >> 2] = i4;
          c2[g3 + 4 >> 2] = h3;
          c2[f3 >> 2] = c2[g3 >> 2];
          c2[f3 + 4 >> 2] = c2[g3 + 4 >> 2];
          js(a3, d3, f3, 0);
          l2 = e2;
          return;
        }
        function js(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3 + 16 | 0;
          m3 = f3 + 8 | 0;
          i4 = f3;
          k3 = c2[d3 >> 2] | 0;
          j3 = c2[d3 + 4 >> 2] | 0;
          h3 = c2[a3 >> 2] | 0;
          a3 = ks() | 0;
          c2[m3 >> 2] = k3;
          c2[m3 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[m3 >> 2];
          c2[g3 + 4 >> 2] = c2[m3 + 4 >> 2];
          d3 = ls(g3) | 0;
          c2[i4 >> 2] = k3;
          c2[i4 + 4 >> 2] = j3;
          c2[g3 >> 2] = c2[i4 >> 2];
          c2[g3 + 4 >> 2] = c2[i4 + 4 >> 2];
          fi(h3, b3, a3, d3, ms(g3, e2) | 0, e2);
          l2 = f3;
          return;
        }
        function ks() {
          var b3 = 0, d3 = 0;
          if (!(a2[7856] | 0)) {
            ts(10172);
            Ha(50, 10172, o2 | 0) | 0;
            d3 = 7856;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(10172) | 0)) {
            b3 = 10172;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            ts(10172);
          }
          return 10172;
        }
        function ls(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function ms(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          m3 = l2;
          l2 = l2 + 32 | 0;
          f3 = m3 + 24 | 0;
          h3 = m3 + 16 | 0;
          i4 = m3;
          j3 = m3 + 8 | 0;
          g3 = c2[a3 >> 2] | 0;
          e2 = c2[a3 + 4 >> 2] | 0;
          c2[i4 >> 2] = g3;
          c2[i4 + 4 >> 2] = e2;
          n3 = ks() | 0;
          k3 = n3 + 24 | 0;
          a3 = ji(b3, 4) | 0;
          c2[j3 >> 2] = a3;
          b3 = n3 + 28 | 0;
          d3 = c2[b3 >> 2] | 0;
          if (d3 >>> 0 < (c2[n3 + 32 >> 2] | 0) >>> 0) {
            c2[h3 >> 2] = g3;
            c2[h3 + 4 >> 2] = e2;
            c2[f3 >> 2] = c2[h3 >> 2];
            c2[f3 + 4 >> 2] = c2[h3 + 4 >> 2];
            ns(d3, f3, a3);
            a3 = (c2[b3 >> 2] | 0) + 12 | 0;
            c2[b3 >> 2] = a3;
          } else {
            os(k3, i4, j3);
            a3 = c2[b3 >> 2] | 0;
          }
          l2 = m3;
          return ((a3 - (c2[k3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function ns(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          e2 = c2[b3 + 4 >> 2] | 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 8 >> 2] = d3;
          return;
        }
        function os(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0;
          k3 = l2;
          l2 = l2 + 48 | 0;
          e2 = k3 + 32 | 0;
          h3 = k3 + 24 | 0;
          i4 = k3;
          j3 = a3 + 4 | 0;
          f3 = (((c2[j3 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g3 = ps(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            m3 = c2[a3 >> 2] | 0;
            o3 = ((c2[a3 + 8 >> 2] | 0) - m3 | 0) / 12 | 0;
            n3 = o3 << 1;
            qs(i4, o3 >>> 0 < g3 >>> 1 >>> 0 ? n3 >>> 0 < f3 >>> 0 ? f3 : n3 : g3, ((c2[j3 >> 2] | 0) - m3 | 0) / 12 | 0, a3 + 8 | 0);
            j3 = i4 + 8 | 0;
            g3 = c2[j3 >> 2] | 0;
            f3 = c2[b3 + 4 >> 2] | 0;
            d3 = c2[d3 >> 2] | 0;
            c2[h3 >> 2] = c2[b3 >> 2];
            c2[h3 + 4 >> 2] = f3;
            c2[e2 >> 2] = c2[h3 >> 2];
            c2[e2 + 4 >> 2] = c2[h3 + 4 >> 2];
            ns(g3, e2, d3);
            c2[j3 >> 2] = (c2[j3 >> 2] | 0) + 12;
            rs(a3, i4);
            ss(i4);
            l2 = k3;
            return;
          }
        }
        function ps(a3) {
          a3 = a3 | 0;
          return 357913941;
        }
        function qs(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 357913941)
                Ta();
              else {
                f3 = qC(b3 * 12 | 0) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 * 12 | 0) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 * 12 | 0);
          return;
        }
        function rs(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (((f3 | 0) / -12 | 0) * 12 | 0) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function ss(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~(((e2 + -12 - b3 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function ts(a3) {
          a3 = a3 | 0;
          ws(a3);
          return;
        }
        function us(a3) {
          a3 = a3 | 0;
          vs(a3 + 24 | 0);
          return;
        }
        function vs(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~(((b3 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d3);
          }
          return;
        }
        function ws(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 2, 3, b3, xs() | 0, 2);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function xs() {
          return 1380;
        }
        function ys(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          f3 = l2;
          l2 = l2 + 16 | 0;
          g3 = f3 + 8 | 0;
          h3 = f3;
          i4 = zs(a3) | 0;
          a3 = c2[i4 + 4 >> 2] | 0;
          c2[h3 >> 2] = c2[i4 >> 2];
          c2[h3 + 4 >> 2] = a3;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = c2[h3 + 4 >> 2];
          As(b3, g3, d3, e2);
          l2 = f3;
          return;
        }
        function zs(a3) {
          a3 = a3 | 0;
          return (c2[(ks() | 0) + 24 >> 2] | 0) + (a3 * 12 | 0) | 0;
        }
        function As(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          g3 = i4 + 1 | 0;
          h3 = i4;
          f3 = c2[b3 >> 2] | 0;
          b3 = c2[b3 + 4 >> 2] | 0;
          a3 = a3 + (b3 >> 1) | 0;
          if (b3 & 1)
            f3 = c2[(c2[a3 >> 2] | 0) + f3 >> 2] | 0;
          tj(g3, d3);
          g3 = uj(g3, d3) | 0;
          Bs(h3, e2);
          h3 = Cs(h3, e2) | 0;
          Eb[f3 & 15](a3, g3, h3);
          l2 = i4;
          return;
        }
        function Bs(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return;
        }
        function Cs(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return Ds(b3) | 0;
        }
        function Ds(a3) {
          a3 = a3 | 0;
          return (a3 | 0) != 0 | 0;
        }
        function Es(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = c2[a3 >> 2] | 0;
          f3 = Fs() | 0;
          a3 = Gs(d3) | 0;
          fi(g3, b3, f3, a3, Hs(d3, e2) | 0, e2);
          return;
        }
        function Fs() {
          var b3 = 0, d3 = 0;
          if (!(a2[7864] | 0)) {
            Os(10208);
            Ha(51, 10208, o2 | 0) | 0;
            d3 = 7864;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(10208) | 0)) {
            b3 = 10208;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Os(10208);
          }
          return 10208;
        }
        function Gs(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function Hs(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          f3 = i4;
          g3 = i4 + 4 | 0;
          c2[f3 >> 2] = a3;
          j3 = Fs() | 0;
          h3 = j3 + 24 | 0;
          b3 = ji(b3, 4) | 0;
          c2[g3 >> 2] = b3;
          d3 = j3 + 28 | 0;
          e2 = c2[d3 >> 2] | 0;
          if (e2 >>> 0 < (c2[j3 + 32 >> 2] | 0) >>> 0) {
            Is(e2, a3, b3);
            b3 = (c2[d3 >> 2] | 0) + 8 | 0;
            c2[d3 >> 2] = b3;
          } else {
            Js(h3, f3, g3);
            b3 = c2[d3 >> 2] | 0;
          }
          l2 = i4;
          return (b3 - (c2[h3 >> 2] | 0) >> 3) + -1 | 0;
        }
        function Is(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function Js(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          f3 = i4;
          g3 = a3 + 4 | 0;
          h3 = ((c2[g3 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 3) + 1 | 0;
          e2 = Ks(a3) | 0;
          if (e2 >>> 0 < h3 >>> 0)
            jC(a3);
          else {
            j3 = c2[a3 >> 2] | 0;
            m3 = (c2[a3 + 8 >> 2] | 0) - j3 | 0;
            k3 = m3 >> 2;
            Ls(f3, m3 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k3 >>> 0 < h3 >>> 0 ? h3 : k3 : e2, (c2[g3 >> 2] | 0) - j3 >> 3, a3 + 8 | 0);
            h3 = f3 + 8 | 0;
            Is(c2[h3 >> 2] | 0, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0);
            c2[h3 >> 2] = (c2[h3 >> 2] | 0) + 8;
            Ms(a3, f3);
            Ns(f3);
            l2 = i4;
            return;
          }
        }
        function Ks(a3) {
          a3 = a3 | 0;
          return 536870911;
        }
        function Ls(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 536870911)
                Ta();
              else {
                f3 = qC(b3 << 3) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 3) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 3);
          return;
        }
        function Ms(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 3) << 3) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Ns(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -8 - b3 | 0) >>> 3) << 3);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Os(a3) {
          a3 = a3 | 0;
          Rs(a3);
          return;
        }
        function Ps(a3) {
          a3 = a3 | 0;
          Qs(a3 + 24 | 0);
          return;
        }
        function Qs(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function Rs(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 1, 24, b3, Ss() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Ss() {
          return 1392;
        }
        function Ts(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          Vs(c2[(Us(a3) | 0) >> 2] | 0, b3);
          return;
        }
        function Us(a3) {
          a3 = a3 | 0;
          return (c2[(Fs() | 0) + 24 >> 2] | 0) + (a3 << 3) | 0;
        }
        function Vs(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var c3 = 0, d3 = 0;
          c3 = l2;
          l2 = l2 + 16 | 0;
          d3 = c3;
          Lq(d3, b3);
          b3 = Mq(d3, b3) | 0;
          nb[a3 & 127](b3);
          l2 = c3;
          return;
        }
        function Ws(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = c2[a3 >> 2] | 0;
          f3 = Xs() | 0;
          a3 = Ys(d3) | 0;
          fi(g3, b3, f3, a3, Zs(d3, e2) | 0, e2);
          return;
        }
        function Xs() {
          var b3 = 0, d3 = 0;
          if (!(a2[7872] | 0)) {
            et(10244);
            Ha(52, 10244, o2 | 0) | 0;
            d3 = 7872;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(10244) | 0)) {
            b3 = 10244;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            et(10244);
          }
          return 10244;
        }
        function Ys(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function Zs(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          f3 = i4;
          g3 = i4 + 4 | 0;
          c2[f3 >> 2] = a3;
          j3 = Xs() | 0;
          h3 = j3 + 24 | 0;
          b3 = ji(b3, 4) | 0;
          c2[g3 >> 2] = b3;
          d3 = j3 + 28 | 0;
          e2 = c2[d3 >> 2] | 0;
          if (e2 >>> 0 < (c2[j3 + 32 >> 2] | 0) >>> 0) {
            _s(e2, a3, b3);
            b3 = (c2[d3 >> 2] | 0) + 8 | 0;
            c2[d3 >> 2] = b3;
          } else {
            $s(h3, f3, g3);
            b3 = c2[d3 >> 2] | 0;
          }
          l2 = i4;
          return (b3 - (c2[h3 >> 2] | 0) >> 3) + -1 | 0;
        }
        function _s(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function $s(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          f3 = i4;
          g3 = a3 + 4 | 0;
          h3 = ((c2[g3 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 3) + 1 | 0;
          e2 = at(a3) | 0;
          if (e2 >>> 0 < h3 >>> 0)
            jC(a3);
          else {
            j3 = c2[a3 >> 2] | 0;
            m3 = (c2[a3 + 8 >> 2] | 0) - j3 | 0;
            k3 = m3 >> 2;
            bt(f3, m3 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k3 >>> 0 < h3 >>> 0 ? h3 : k3 : e2, (c2[g3 >> 2] | 0) - j3 >> 3, a3 + 8 | 0);
            h3 = f3 + 8 | 0;
            _s(c2[h3 >> 2] | 0, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0);
            c2[h3 >> 2] = (c2[h3 >> 2] | 0) + 8;
            ct(a3, f3);
            dt(f3);
            l2 = i4;
            return;
          }
        }
        function at(a3) {
          a3 = a3 | 0;
          return 536870911;
        }
        function bt(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 536870911)
                Ta();
              else {
                f3 = qC(b3 << 3) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 3) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 3);
          return;
        }
        function ct(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 3) << 3) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function dt(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -8 - b3 | 0) >>> 3) << 3);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function et(a3) {
          a3 = a3 | 0;
          ht(a3);
          return;
        }
        function ft(a3) {
          a3 = a3 | 0;
          gt(a3 + 24 | 0);
          return;
        }
        function gt(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function ht(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 1, 16, b3, it() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function it() {
          return 1400;
        }
        function jt(a3) {
          a3 = a3 | 0;
          return lt(c2[(kt(a3) | 0) >> 2] | 0) | 0;
        }
        function kt(a3) {
          a3 = a3 | 0;
          return (c2[(Xs() | 0) + 24 >> 2] | 0) + (a3 << 3) | 0;
        }
        function lt(a3) {
          a3 = a3 | 0;
          return mt(Ab[a3 & 7]() | 0) | 0;
        }
        function mt(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function nt() {
          var b3 = 0;
          if (!(a2[7880] | 0)) {
            ut(10280);
            Ha(25, 10280, o2 | 0) | 0;
            b3 = 7880;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10280;
        }
        function ot(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = pt() | 0;
          c2[a3 + 4 >> 2] = qt() | 0;
          c2[a3 + 12 >> 2] = b3;
          c2[a3 + 8 >> 2] = rt() | 0;
          c2[a3 + 32 >> 2] = 4;
          return;
        }
        function pt() {
          return 11711;
        }
        function qt() {
          return 1356;
        }
        function rt() {
          return lr() | 0;
        }
        function st(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          if ((jr(d3, 896) | 0) == 512) {
            if (c3 | 0) {
              tt(c3);
              sC(c3);
            }
          } else if (b3 | 0) {
            mf(b3);
            sC(b3);
          }
          return;
        }
        function tt(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 4 >> 2] | 0;
          if (a3 | 0)
            oC(a3);
          return;
        }
        function ut(a3) {
          a3 = a3 | 0;
          Zi(a3);
          return;
        }
        function vt(a3) {
          a3 = a3 | 0;
          wt(a3, 4920);
          xt(a3) | 0;
          yt(a3) | 0;
          return;
        }
        function wt(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = nn2() | 0;
          c2[a3 >> 2] = d3;
          Yt(d3, b3);
          Hv(c2[a3 >> 2] | 0);
          return;
        }
        function xt(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = c2[a3 >> 2] | 0;
          At(b3, Mt() | 0);
          return a3 | 0;
        }
        function yt(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = c2[a3 >> 2] | 0;
          At(b3, zt() | 0);
          return a3 | 0;
        }
        function zt() {
          var b3 = 0;
          if (!(a2[7888] | 0)) {
            Bt(10328);
            Ha(53, 10328, o2 | 0) | 0;
            b3 = 7888;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          if (!(si(10328) | 0))
            Bt(10328);
          return 10328;
        }
        function At(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          fi(a3, 0, b3, 0, 0, 0);
          return;
        }
        function Bt(a3) {
          a3 = a3 | 0;
          Et(a3);
          Gt(a3, 10);
          return;
        }
        function Ct(a3) {
          a3 = a3 | 0;
          Dt(a3 + 24 | 0);
          return;
        }
        function Dt(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function Et(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 5, 1, b3, Jt() | 0, 2);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Ft(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = +c3;
          Ht(a3, b3, c3);
          return;
        }
        function Gt(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 + 20 >> 2] = b3;
          return;
        }
        function Ht(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = +d3;
          var e2 = 0, f3 = 0, g3 = 0, i4 = 0, j3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          g3 = e2 + 8 | 0;
          j3 = e2 + 13 | 0;
          f3 = e2;
          i4 = e2 + 12 | 0;
          tj(j3, b3);
          c2[g3 >> 2] = uj(j3, b3) | 0;
          rj(i4, d3);
          h2[f3 >> 3] = +sj(i4, d3);
          It(a3, g3, f3);
          l2 = e2;
          return;
        }
        function It(b3, d3, e2) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          mg(b3 + 8 | 0, c2[d3 >> 2] | 0, +h2[e2 >> 3]);
          a2[b3 + 24 >> 0] = 1;
          return;
        }
        function Jt() {
          return 1404;
        }
        function Kt(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          return Lt(a3, b3) | 0;
        }
        function Lt(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          g3 = e2 + 4 | 0;
          h3 = e2 + 8 | 0;
          i4 = e2;
          f3 = jy(8) | 0;
          d3 = f3;
          j3 = qC(16) | 0;
          tj(g3, a3);
          a3 = uj(g3, a3) | 0;
          rj(h3, b3);
          mg(j3, a3, +sj(h3, b3));
          h3 = d3 + 4 | 0;
          c2[h3 >> 2] = j3;
          a3 = qC(8) | 0;
          h3 = c2[h3 >> 2] | 0;
          c2[i4 >> 2] = 0;
          c2[g3 >> 2] = c2[i4 >> 2];
          qn(a3, h3, g3);
          c2[f3 >> 2] = a3;
          l2 = e2;
          return d3 | 0;
        }
        function Mt() {
          var b3 = 0;
          if (!(a2[7896] | 0)) {
            Nt(10364);
            Ha(54, 10364, o2 | 0) | 0;
            b3 = 7896;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          if (!(si(10364) | 0))
            Nt(10364);
          return 10364;
        }
        function Nt(a3) {
          a3 = a3 | 0;
          Qt(a3);
          Gt(a3, 55);
          return;
        }
        function Ot(a3) {
          a3 = a3 | 0;
          Pt(a3 + 24 | 0);
          return;
        }
        function Pt(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function Qt(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 5, 4, b3, Vt() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Rt(a3) {
          a3 = a3 | 0;
          St(a3);
          return;
        }
        function St(a3) {
          a3 = a3 | 0;
          Tt(a3);
          return;
        }
        function Tt(b3) {
          b3 = b3 | 0;
          Ut(b3 + 8 | 0);
          a2[b3 + 24 >> 0] = 1;
          return;
        }
        function Ut(a3) {
          a3 = a3 | 0;
          c2[a3 >> 2] = 0;
          h2[a3 + 8 >> 3] = 0;
          return;
        }
        function Vt() {
          return 1424;
        }
        function Wt() {
          return Xt() | 0;
        }
        function Xt() {
          var a3 = 0, b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          b3 = l2;
          l2 = l2 + 16 | 0;
          f3 = b3 + 4 | 0;
          h3 = b3;
          d3 = jy(8) | 0;
          a3 = d3;
          e2 = qC(16) | 0;
          Ut(e2);
          g3 = a3 + 4 | 0;
          c2[g3 >> 2] = e2;
          e2 = qC(8) | 0;
          g3 = c2[g3 >> 2] | 0;
          c2[h3 >> 2] = 0;
          c2[f3 >> 2] = c2[h3 >> 2];
          qn(e2, g3, f3);
          c2[d3 >> 2] = e2;
          l2 = b3;
          return a3 | 0;
        }
        function Yt(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = Zt() | 0;
          c2[a3 + 4 >> 2] = _t() | 0;
          c2[a3 + 12 >> 2] = b3;
          c2[a3 + 8 >> 2] = $t() | 0;
          c2[a3 + 32 >> 2] = 5;
          return;
        }
        function Zt() {
          return 11710;
        }
        function _t() {
          return 1416;
        }
        function $t() {
          return cu() | 0;
        }
        function au(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          if ((jr(d3, 896) | 0) == 512) {
            if (c3 | 0) {
              bu(c3);
              sC(c3);
            }
          } else if (b3 | 0)
            sC(b3);
          return;
        }
        function bu(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 4 >> 2] | 0;
          if (a3 | 0)
            oC(a3);
          return;
        }
        function cu() {
          var b3 = 0;
          if (!(a2[7904] | 0)) {
            c2[2600] = du() | 0;
            c2[2601] = 0;
            b3 = 7904;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10400;
        }
        function du() {
          return c2[357] | 0;
        }
        function eu(a3) {
          a3 = a3 | 0;
          fu(a3, 4926);
          gu(a3) | 0;
          return;
        }
        function fu(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = Ci() | 0;
          c2[a3 >> 2] = d3;
          su(d3, b3);
          Hv(c2[a3 >> 2] | 0);
          return;
        }
        function gu(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = c2[a3 >> 2] | 0;
          At(b3, hu() | 0);
          return a3 | 0;
        }
        function hu() {
          var b3 = 0;
          if (!(a2[7912] | 0)) {
            iu(10412);
            Ha(56, 10412, o2 | 0) | 0;
            b3 = 7912;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          if (!(si(10412) | 0))
            iu(10412);
          return 10412;
        }
        function iu(a3) {
          a3 = a3 | 0;
          lu(a3);
          Gt(a3, 57);
          return;
        }
        function ju(a3) {
          a3 = a3 | 0;
          ku(a3 + 24 | 0);
          return;
        }
        function ku(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function lu(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 5, 5, b3, pu() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function mu(a3) {
          a3 = a3 | 0;
          nu(a3);
          return;
        }
        function nu(a3) {
          a3 = a3 | 0;
          ou(a3);
          return;
        }
        function ou(b3) {
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          d3 = b3 + 8 | 0;
          e2 = d3 + 48 | 0;
          do {
            c2[d3 >> 2] = 0;
            d3 = d3 + 4 | 0;
          } while ((d3 | 0) < (e2 | 0));
          a2[b3 + 56 >> 0] = 1;
          return;
        }
        function pu() {
          return 1432;
        }
        function qu() {
          return ru() | 0;
        }
        function ru() {
          var a3 = 0, b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          h3 = l2;
          l2 = l2 + 16 | 0;
          a3 = h3 + 4 | 0;
          b3 = h3;
          d3 = jy(8) | 0;
          e2 = d3;
          f3 = qC(48) | 0;
          g3 = f3;
          i4 = g3 + 48 | 0;
          do {
            c2[g3 >> 2] = 0;
            g3 = g3 + 4 | 0;
          } while ((g3 | 0) < (i4 | 0));
          g3 = e2 + 4 | 0;
          c2[g3 >> 2] = f3;
          i4 = qC(8) | 0;
          g3 = c2[g3 >> 2] | 0;
          c2[b3 >> 2] = 0;
          c2[a3 >> 2] = c2[b3 >> 2];
          Ji(i4, g3, a3);
          c2[d3 >> 2] = i4;
          l2 = h3;
          return e2 | 0;
        }
        function su(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = tu() | 0;
          c2[a3 + 4 >> 2] = uu() | 0;
          c2[a3 + 12 >> 2] = b3;
          c2[a3 + 8 >> 2] = vu() | 0;
          c2[a3 + 32 >> 2] = 6;
          return;
        }
        function tu() {
          return 11704;
        }
        function uu() {
          return 1436;
        }
        function vu() {
          return cu() | 0;
        }
        function wu(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          if ((jr(d3, 896) | 0) == 512) {
            if (c3 | 0) {
              xu(c3);
              sC(c3);
            }
          } else if (b3 | 0)
            sC(b3);
          return;
        }
        function xu(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 4 >> 2] | 0;
          if (a3 | 0)
            oC(a3);
          return;
        }
        function yu(a3) {
          a3 = a3 | 0;
          zu(a3, 4933);
          Au(a3) | 0;
          Bu(a3) | 0;
          return;
        }
        function zu(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = cv() | 0;
          c2[a3 >> 2] = d3;
          dv(d3, b3);
          Hv(c2[a3 >> 2] | 0);
          return;
        }
        function Au(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = c2[a3 >> 2] | 0;
          At(b3, Su() | 0);
          return a3 | 0;
        }
        function Bu(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = c2[a3 >> 2] | 0;
          At(b3, Cu() | 0);
          return a3 | 0;
        }
        function Cu() {
          var b3 = 0;
          if (!(a2[7920] | 0)) {
            Du(10452);
            Ha(58, 10452, o2 | 0) | 0;
            b3 = 7920;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          if (!(si(10452) | 0))
            Du(10452);
          return 10452;
        }
        function Du(a3) {
          a3 = a3 | 0;
          Gu(a3);
          Gt(a3, 1);
          return;
        }
        function Eu(a3) {
          a3 = a3 | 0;
          Fu(a3 + 24 | 0);
          return;
        }
        function Fu(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function Gu(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 5, 1, b3, Lu() | 0, 2);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Hu(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = +b3;
          c3 = +c3;
          Iu(a3, b3, c3);
          return;
        }
        function Iu(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = +b3;
          c3 = +c3;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, i4 = 0;
          d3 = l2;
          l2 = l2 + 32 | 0;
          f3 = d3 + 8 | 0;
          i4 = d3 + 17 | 0;
          e2 = d3;
          g3 = d3 + 16 | 0;
          rj(i4, b3);
          h2[f3 >> 3] = +sj(i4, b3);
          rj(g3, c3);
          h2[e2 >> 3] = +sj(g3, c3);
          Ju(a3, f3, e2);
          l2 = d3;
          return;
        }
        function Ju(b3, c3, d3) {
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          Ku(b3 + 8 | 0, +h2[c3 >> 3], +h2[d3 >> 3]);
          a2[b3 + 24 >> 0] = 1;
          return;
        }
        function Ku(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = +b3;
          c3 = +c3;
          h2[a3 >> 3] = b3;
          h2[a3 + 8 >> 3] = c3;
          return;
        }
        function Lu() {
          return 1472;
        }
        function Mu(a3, b3) {
          a3 = +a3;
          b3 = +b3;
          return Nu(a3, b3) | 0;
        }
        function Nu(a3, b3) {
          a3 = +a3;
          b3 = +b3;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          h3 = e2 + 4 | 0;
          i4 = e2 + 8 | 0;
          j3 = e2;
          f3 = jy(8) | 0;
          d3 = f3;
          g3 = qC(16) | 0;
          rj(h3, a3);
          a3 = +sj(h3, a3);
          rj(i4, b3);
          Ku(g3, a3, +sj(i4, b3));
          i4 = d3 + 4 | 0;
          c2[i4 >> 2] = g3;
          g3 = qC(8) | 0;
          i4 = c2[i4 >> 2] | 0;
          c2[j3 >> 2] = 0;
          c2[h3 >> 2] = c2[j3 >> 2];
          Ou(g3, i4, h3);
          c2[f3 >> 2] = g3;
          l2 = e2;
          return d3 | 0;
        }
        function Ou(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          d3 = qC(16) | 0;
          c2[d3 + 4 >> 2] = 0;
          c2[d3 + 8 >> 2] = 0;
          c2[d3 >> 2] = 1452;
          c2[d3 + 12 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function Pu(a3) {
          a3 = a3 | 0;
          kC(a3);
          sC(a3);
          return;
        }
        function Qu(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 12 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Ru(a3) {
          a3 = a3 | 0;
          sC(a3);
          return;
        }
        function Su() {
          var b3 = 0;
          if (!(a2[7928] | 0)) {
            Tu(10488);
            Ha(59, 10488, o2 | 0) | 0;
            b3 = 7928;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          if (!(si(10488) | 0))
            Tu(10488);
          return 10488;
        }
        function Tu(a3) {
          a3 = a3 | 0;
          Wu(a3);
          Gt(a3, 60);
          return;
        }
        function Uu(a3) {
          a3 = a3 | 0;
          Vu(a3 + 24 | 0);
          return;
        }
        function Vu(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function Wu(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 5, 6, b3, $u() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Xu(a3) {
          a3 = a3 | 0;
          Yu(a3);
          return;
        }
        function Yu(a3) {
          a3 = a3 | 0;
          Zu(a3);
          return;
        }
        function Zu(b3) {
          b3 = b3 | 0;
          _u(b3 + 8 | 0);
          a2[b3 + 24 >> 0] = 1;
          return;
        }
        function _u(a3) {
          a3 = a3 | 0;
          c2[a3 >> 2] = 0;
          c2[a3 + 4 >> 2] = 0;
          c2[a3 + 8 >> 2] = 0;
          c2[a3 + 12 >> 2] = 0;
          return;
        }
        function $u() {
          return 1492;
        }
        function av() {
          return bv() | 0;
        }
        function bv() {
          var a3 = 0, b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          b3 = l2;
          l2 = l2 + 16 | 0;
          f3 = b3 + 4 | 0;
          h3 = b3;
          d3 = jy(8) | 0;
          a3 = d3;
          e2 = qC(16) | 0;
          _u(e2);
          g3 = a3 + 4 | 0;
          c2[g3 >> 2] = e2;
          e2 = qC(8) | 0;
          g3 = c2[g3 >> 2] | 0;
          c2[h3 >> 2] = 0;
          c2[f3 >> 2] = c2[h3 >> 2];
          Ou(e2, g3, f3);
          c2[d3 >> 2] = e2;
          l2 = b3;
          return a3 | 0;
        }
        function cv() {
          var b3 = 0;
          if (!(a2[7936] | 0)) {
            jv(10524);
            Ha(25, 10524, o2 | 0) | 0;
            b3 = 7936;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10524;
        }
        function dv(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = ev() | 0;
          c2[a3 + 4 >> 2] = fv() | 0;
          c2[a3 + 12 >> 2] = b3;
          c2[a3 + 8 >> 2] = gv() | 0;
          c2[a3 + 32 >> 2] = 7;
          return;
        }
        function ev() {
          return 11700;
        }
        function fv() {
          return 1484;
        }
        function gv() {
          return cu() | 0;
        }
        function hv(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          if ((jr(d3, 896) | 0) == 512) {
            if (c3 | 0) {
              iv(c3);
              sC(c3);
            }
          } else if (b3 | 0)
            sC(b3);
          return;
        }
        function iv(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 4 >> 2] | 0;
          if (a3 | 0)
            oC(a3);
          return;
        }
        function jv(a3) {
          a3 = a3 | 0;
          Zi(a3);
          return;
        }
        function kv(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          a3 = ai(b3) | 0;
          b3 = lv(c3) | 0;
          c3 = mv(c3, 0) | 0;
          Zv(a3, b3, c3, nv() | 0, 0);
          return;
        }
        function lv(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function mv(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          f3 = i4;
          g3 = i4 + 4 | 0;
          c2[f3 >> 2] = a3;
          j3 = nv() | 0;
          h3 = j3 + 24 | 0;
          b3 = ji(b3, 4) | 0;
          c2[g3 >> 2] = b3;
          d3 = j3 + 28 | 0;
          e2 = c2[d3 >> 2] | 0;
          if (e2 >>> 0 < (c2[j3 + 32 >> 2] | 0) >>> 0) {
            vv(e2, a3, b3);
            b3 = (c2[d3 >> 2] | 0) + 8 | 0;
            c2[d3 >> 2] = b3;
          } else {
            wv(h3, f3, g3);
            b3 = c2[d3 >> 2] | 0;
          }
          l2 = i4;
          return (b3 - (c2[h3 >> 2] | 0) >> 3) + -1 | 0;
        }
        function nv() {
          var b3 = 0, d3 = 0;
          if (!(a2[7944] | 0)) {
            ov(10568);
            Ha(61, 10568, o2 | 0) | 0;
            d3 = 7944;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(10568) | 0)) {
            b3 = 10568;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            ov(10568);
          }
          return 10568;
        }
        function ov(a3) {
          a3 = a3 | 0;
          rv(a3);
          return;
        }
        function pv(a3) {
          a3 = a3 | 0;
          qv(a3 + 24 | 0);
          return;
        }
        function qv(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function rv(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 1, 17, b3, ql() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function sv(a3) {
          a3 = a3 | 0;
          return uv(c2[(tv(a3) | 0) >> 2] | 0) | 0;
        }
        function tv(a3) {
          a3 = a3 | 0;
          return (c2[(nv() | 0) + 24 >> 2] | 0) + (a3 << 3) | 0;
        }
        function uv(a3) {
          a3 = a3 | 0;
          return ul(Ab[a3 & 7]() | 0) | 0;
        }
        function vv(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function wv(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          f3 = i4;
          g3 = a3 + 4 | 0;
          h3 = ((c2[g3 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 3) + 1 | 0;
          e2 = xv(a3) | 0;
          if (e2 >>> 0 < h3 >>> 0)
            jC(a3);
          else {
            j3 = c2[a3 >> 2] | 0;
            m3 = (c2[a3 + 8 >> 2] | 0) - j3 | 0;
            k3 = m3 >> 2;
            yv(f3, m3 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k3 >>> 0 < h3 >>> 0 ? h3 : k3 : e2, (c2[g3 >> 2] | 0) - j3 >> 3, a3 + 8 | 0);
            h3 = f3 + 8 | 0;
            vv(c2[h3 >> 2] | 0, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0);
            c2[h3 >> 2] = (c2[h3 >> 2] | 0) + 8;
            zv(a3, f3);
            Av(f3);
            l2 = i4;
            return;
          }
        }
        function xv(a3) {
          a3 = a3 | 0;
          return 536870911;
        }
        function yv(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 536870911)
                Ta();
              else {
                f3 = qC(b3 << 3) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 3) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 3);
          return;
        }
        function zv(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 3) << 3) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Av(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -8 - b3 | 0) >>> 3) << 3);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Bv() {
          Cv();
          return;
        }
        function Cv() {
          Dv(10604);
          return;
        }
        function Dv(a3) {
          a3 = a3 | 0;
          Ev(a3, 4955);
          return;
        }
        function Ev(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = Fv() | 0;
          c2[a3 >> 2] = d3;
          Gv(d3, b3);
          Hv(c2[a3 >> 2] | 0);
          return;
        }
        function Fv() {
          var b3 = 0;
          if (!(a2[7952] | 0)) {
            Rv(10612);
            Ha(25, 10612, o2 | 0) | 0;
            b3 = 7952;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10612;
        }
        function Gv(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = Mv() | 0;
          c2[a3 + 4 >> 2] = Nv() | 0;
          c2[a3 + 12 >> 2] = b3;
          c2[a3 + 8 >> 2] = Ov() | 0;
          c2[a3 + 32 >> 2] = 8;
          return;
        }
        function Hv(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0;
          b3 = l2;
          l2 = l2 + 16 | 0;
          d3 = b3;
          Iv() | 0;
          c2[d3 >> 2] = a3;
          Jv(10608, d3);
          l2 = b3;
          return;
        }
        function Iv() {
          if (!(a2[11714] | 0)) {
            c2[2652] = 0;
            Ha(62, 10608, o2 | 0) | 0;
            a2[11714] = 1;
          }
          return 10608;
        }
        function Jv(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = qC(8) | 0;
          c2[d3 + 4 >> 2] = c2[b3 >> 2];
          c2[d3 >> 2] = c2[a3 >> 2];
          c2[a3 >> 2] = d3;
          return;
        }
        function Kv(a3) {
          a3 = a3 | 0;
          Lv(a3);
          return;
        }
        function Lv(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0;
          b3 = c2[a3 >> 2] | 0;
          if (b3 | 0)
            do {
              d3 = b3;
              b3 = c2[b3 >> 2] | 0;
              sC(d3);
            } while ((b3 | 0) != 0);
          c2[a3 >> 2] = 0;
          return;
        }
        function Mv() {
          return 11715;
        }
        function Nv() {
          return 1496;
        }
        function Ov() {
          return lr() | 0;
        }
        function Pv(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          if ((jr(d3, 896) | 0) == 512) {
            if (c3 | 0) {
              Qv(c3);
              sC(c3);
            }
          } else if (b3 | 0)
            sC(b3);
          return;
        }
        function Qv(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 4 >> 2] | 0;
          if (a3 | 0)
            oC(a3);
          return;
        }
        function Rv(a3) {
          a3 = a3 | 0;
          Zi(a3);
          return;
        }
        function Sv(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          Iv() | 0;
          d3 = c2[2652] | 0;
          a:
            do
              if (d3 | 0) {
                while (1) {
                  e2 = c2[d3 + 4 >> 2] | 0;
                  if (e2 | 0 ? (AB(Tv(e2) | 0, a3) | 0) == 0 : 0)
                    break;
                  d3 = c2[d3 >> 2] | 0;
                  if (!d3)
                    break a;
                }
                Uv(e2, b3);
              }
            while (0);
          return;
        }
        function Tv(a3) {
          a3 = a3 | 0;
          return c2[a3 + 12 >> 2] | 0;
        }
        function Uv(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          a3 = a3 + 36 | 0;
          d3 = c2[a3 >> 2] | 0;
          if (d3 | 0) {
            vf(d3);
            sC(d3);
          }
          d3 = qC(4) | 0;
          Og(d3, b3);
          c2[a3 >> 2] = d3;
          return;
        }
        function Vv() {
          if (!(a2[11716] | 0)) {
            c2[2664] = 0;
            Ha(63, 10656, o2 | 0) | 0;
            a2[11716] = 1;
          }
          return 10656;
        }
        function Wv() {
          var b3 = 0;
          if (!(a2[11717] | 0)) {
            Xv();
            c2[2665] = 1504;
            a2[11717] = 1;
            b3 = 1504;
          } else
            b3 = c2[2665] | 0;
          return b3 | 0;
        }
        function Xv() {
          if (!(a2[11740] | 0)) {
            a2[11718] = ji(ji(8, 0) | 0, 0) | 0;
            a2[11719] = ji(ji(0, 0) | 0, 0) | 0;
            a2[11720] = ji(ji(0, 16) | 0, 0) | 0;
            a2[11721] = ji(ji(8, 0) | 0, 0) | 0;
            a2[11722] = ji(ji(0, 0) | 0, 0) | 0;
            a2[11723] = ji(ji(8, 0) | 0, 0) | 0;
            a2[11724] = ji(ji(0, 0) | 0, 0) | 0;
            a2[11725] = ji(ji(8, 0) | 0, 0) | 0;
            a2[11726] = ji(ji(0, 0) | 0, 0) | 0;
            a2[11727] = ji(ji(8, 0) | 0, 0) | 0;
            a2[11728] = ji(ji(0, 0) | 0, 0) | 0;
            a2[11729] = ji(ji(0, 0) | 0, 32) | 0;
            a2[11730] = ji(ji(0, 0) | 0, 32) | 0;
            a2[11740] = 1;
          }
          return;
        }
        function Yv() {
          return 1572;
        }
        function Zv(a3, b3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          var g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          g3 = l2;
          l2 = l2 + 32 | 0;
          m3 = g3 + 16 | 0;
          k3 = g3 + 12 | 0;
          j3 = g3 + 8 | 0;
          i4 = g3 + 4 | 0;
          h3 = g3;
          c2[m3 >> 2] = a3;
          c2[k3 >> 2] = b3;
          c2[j3 >> 2] = d3;
          c2[i4 >> 2] = e2;
          c2[h3 >> 2] = f3;
          Vv() | 0;
          _v(10656, m3, k3, j3, i4, h3);
          l2 = g3;
          return;
        }
        function _v(a3, b3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          var h3 = 0;
          h3 = qC(24) | 0;
          ii(h3 + 4 | 0, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0, c2[e2 >> 2] | 0, c2[f3 >> 2] | 0, c2[g3 >> 2] | 0);
          c2[h3 >> 2] = c2[a3 >> 2];
          c2[a3 >> 2] = h3;
          return;
        }
        function $v(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0;
          u3 = l2;
          l2 = l2 + 32 | 0;
          q3 = u3 + 20 | 0;
          r3 = u3 + 8 | 0;
          s3 = u3 + 4 | 0;
          t3 = u3;
          b3 = c2[b3 >> 2] | 0;
          if (b3 | 0) {
            p3 = q3 + 4 | 0;
            j3 = q3 + 8 | 0;
            k3 = r3 + 4 | 0;
            m3 = r3 + 8 | 0;
            n3 = r3 + 8 | 0;
            o3 = q3 + 8 | 0;
            do {
              h3 = b3 + 4 | 0;
              i4 = aw(h3) | 0;
              if (i4 | 0) {
                f3 = bw(i4) | 0;
                c2[q3 >> 2] = 0;
                c2[p3 >> 2] = 0;
                c2[j3 >> 2] = 0;
                e2 = (cw(i4) | 0) + 1 | 0;
                dw(q3, e2);
                if (e2 | 0)
                  while (1) {
                    e2 = e2 + -1 | 0;
                    OA(r3, c2[f3 >> 2] | 0);
                    g3 = c2[p3 >> 2] | 0;
                    if (g3 >>> 0 < (c2[o3 >> 2] | 0) >>> 0) {
                      c2[g3 >> 2] = c2[r3 >> 2];
                      c2[p3 >> 2] = (c2[p3 >> 2] | 0) + 4;
                    } else
                      ew(q3, r3);
                    if (!e2)
                      break;
                    else
                      f3 = f3 + 4 | 0;
                  }
                e2 = fw(i4) | 0;
                c2[r3 >> 2] = 0;
                c2[k3 >> 2] = 0;
                c2[m3 >> 2] = 0;
                a:
                  do
                    if (c2[e2 >> 2] | 0) {
                      f3 = 0;
                      g3 = 0;
                      while (1) {
                        if ((f3 | 0) == (g3 | 0))
                          gw(r3, e2);
                        else {
                          c2[f3 >> 2] = c2[e2 >> 2];
                          c2[k3 >> 2] = (c2[k3 >> 2] | 0) + 4;
                        }
                        e2 = e2 + 4 | 0;
                        if (!(c2[e2 >> 2] | 0))
                          break a;
                        f3 = c2[k3 >> 2] | 0;
                        g3 = c2[n3 >> 2] | 0;
                      }
                    }
                  while (0);
                c2[s3 >> 2] = hw(h3) | 0;
                c2[t3 >> 2] = si(i4) | 0;
                iw(d3, a3, s3, t3, q3, r3);
                jw(r3);
                kw(q3);
              }
              b3 = c2[b3 >> 2] | 0;
            } while ((b3 | 0) != 0);
          }
          l2 = u3;
          return;
        }
        function aw(a3) {
          a3 = a3 | 0;
          return c2[a3 + 12 >> 2] | 0;
        }
        function bw(a3) {
          a3 = a3 | 0;
          return c2[a3 + 12 >> 2] | 0;
        }
        function cw(a3) {
          a3 = a3 | 0;
          return c2[a3 + 16 >> 2] | 0;
        }
        function dw(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          d3 = f3;
          e2 = c2[a3 >> 2] | 0;
          if ((c2[a3 + 8 >> 2] | 0) - e2 >> 2 >>> 0 < b3 >>> 0) {
            Rw(d3, b3, (c2[a3 + 4 >> 2] | 0) - e2 >> 2, a3 + 8 | 0);
            Sw(a3, d3);
            Tw(d3);
          }
          l2 = f3;
          return;
        }
        function ew(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0;
          h3 = l2;
          l2 = l2 + 32 | 0;
          d3 = h3;
          e2 = a3 + 4 | 0;
          f3 = ((c2[e2 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 2) + 1 | 0;
          g3 = Nw(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            i4 = c2[a3 >> 2] | 0;
            k3 = (c2[a3 + 8 >> 2] | 0) - i4 | 0;
            j3 = k3 >> 1;
            Rw(d3, k3 >> 2 >>> 0 < g3 >>> 1 >>> 0 ? j3 >>> 0 < f3 >>> 0 ? f3 : j3 : g3, (c2[e2 >> 2] | 0) - i4 >> 2, a3 + 8 | 0);
            g3 = d3 + 8 | 0;
            c2[c2[g3 >> 2] >> 2] = c2[b3 >> 2];
            c2[g3 >> 2] = (c2[g3 >> 2] | 0) + 4;
            Sw(a3, d3);
            Tw(d3);
            l2 = h3;
            return;
          }
        }
        function fw(a3) {
          a3 = a3 | 0;
          return c2[a3 + 8 >> 2] | 0;
        }
        function gw(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0;
          h3 = l2;
          l2 = l2 + 32 | 0;
          d3 = h3;
          e2 = a3 + 4 | 0;
          f3 = ((c2[e2 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 2) + 1 | 0;
          g3 = Kw(a3) | 0;
          if (g3 >>> 0 < f3 >>> 0)
            jC(a3);
          else {
            i4 = c2[a3 >> 2] | 0;
            k3 = (c2[a3 + 8 >> 2] | 0) - i4 | 0;
            j3 = k3 >> 1;
            Ow(d3, k3 >> 2 >>> 0 < g3 >>> 1 >>> 0 ? j3 >>> 0 < f3 >>> 0 ? f3 : j3 : g3, (c2[e2 >> 2] | 0) - i4 >> 2, a3 + 8 | 0);
            g3 = d3 + 8 | 0;
            c2[c2[g3 >> 2] >> 2] = c2[b3 >> 2];
            c2[g3 >> 2] = (c2[g3 >> 2] | 0) + 4;
            Pw(a3, d3);
            Qw(d3);
            l2 = h3;
            return;
          }
        }
        function hw(a3) {
          a3 = a3 | 0;
          return c2[a3 >> 2] | 0;
        }
        function iw(a3, b3, c3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          lw(a3, b3, c3, d3, e2, f3);
          return;
        }
        function jw(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -4 - e2 | 0) >>> 2) << 2);
            sC(d3);
          }
          return;
        }
        function kw(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -4 - e2 | 0) >>> 2) << 2);
            sC(d3);
          }
          return;
        }
        function lw(a3, b3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          var h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          h3 = l2;
          l2 = l2 + 48 | 0;
          m3 = h3 + 40 | 0;
          i4 = h3 + 32 | 0;
          n3 = h3 + 24 | 0;
          j3 = h3 + 12 | 0;
          k3 = h3;
          UA(i4);
          a3 = Sg(a3) | 0;
          c2[n3 >> 2] = c2[b3 >> 2];
          d3 = c2[d3 >> 2] | 0;
          e2 = c2[e2 >> 2] | 0;
          mw(j3, f3);
          nw(k3, g3);
          c2[m3 >> 2] = c2[n3 >> 2];
          ow(a3, m3, d3, e2, j3, k3);
          jw(k3);
          kw(j3);
          WA(i4);
          l2 = h3;
          return;
        }
        function mw(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          c2[a3 >> 2] = 0;
          c2[a3 + 4 >> 2] = 0;
          c2[a3 + 8 >> 2] = 0;
          d3 = b3 + 4 | 0;
          e2 = (c2[d3 >> 2] | 0) - (c2[b3 >> 2] | 0) >> 2;
          if (e2 | 0) {
            Lw(a3, e2);
            Mw(a3, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0, e2);
          }
          return;
        }
        function nw(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          c2[a3 >> 2] = 0;
          c2[a3 + 4 >> 2] = 0;
          c2[a3 + 8 >> 2] = 0;
          d3 = b3 + 4 | 0;
          e2 = (c2[d3 >> 2] | 0) - (c2[b3 >> 2] | 0) >> 2;
          if (e2 | 0) {
            Iw(a3, e2);
            Jw(a3, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0, e2);
          }
          return;
        }
        function ow(a3, b3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          var h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0;
          h3 = l2;
          l2 = l2 + 32 | 0;
          m3 = h3 + 28 | 0;
          n3 = h3 + 24 | 0;
          i4 = h3 + 12 | 0;
          j3 = h3;
          k3 = Vg(pw() | 0) | 0;
          c2[n3 >> 2] = c2[b3 >> 2];
          c2[m3 >> 2] = c2[n3 >> 2];
          b3 = qw(m3) | 0;
          d3 = rw(d3) | 0;
          e2 = sw(e2) | 0;
          c2[i4 >> 2] = c2[f3 >> 2];
          m3 = f3 + 4 | 0;
          c2[i4 + 4 >> 2] = c2[m3 >> 2];
          n3 = f3 + 8 | 0;
          c2[i4 + 8 >> 2] = c2[n3 >> 2];
          c2[n3 >> 2] = 0;
          c2[m3 >> 2] = 0;
          c2[f3 >> 2] = 0;
          f3 = tw(i4) | 0;
          c2[j3 >> 2] = c2[g3 >> 2];
          m3 = g3 + 4 | 0;
          c2[j3 + 4 >> 2] = c2[m3 >> 2];
          n3 = g3 + 8 | 0;
          c2[j3 + 8 >> 2] = c2[n3 >> 2];
          c2[n3 >> 2] = 0;
          c2[m3 >> 2] = 0;
          c2[g3 >> 2] = 0;
          Ba(0, k3 | 0, a3 | 0, b3 | 0, d3 | 0, e2 | 0, f3 | 0, uw(j3) | 0) | 0;
          jw(j3);
          kw(i4);
          l2 = h3;
          return;
        }
        function pw() {
          var b3 = 0;
          if (!(a2[7968] | 0)) {
            Gw(10708);
            b3 = 7968;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10708;
        }
        function qw(a3) {
          a3 = a3 | 0;
          return yw(a3) | 0;
        }
        function rw(a3) {
          a3 = a3 | 0;
          return ww(a3) | 0;
        }
        function sw(a3) {
          a3 = a3 | 0;
          return ul(a3) | 0;
        }
        function tw(a3) {
          a3 = a3 | 0;
          return xw(a3) | 0;
        }
        function uw(a3) {
          a3 = a3 | 0;
          return vw(a3) | 0;
        }
        function vw(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          e2 = (c2[a3 + 4 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0;
          d3 = e2 >> 2;
          e2 = jy(e2 + 4 | 0) | 0;
          c2[e2 >> 2] = d3;
          if (d3 | 0) {
            b3 = 0;
            do {
              c2[e2 + 4 + (b3 << 2) >> 2] = ww(c2[(c2[a3 >> 2] | 0) + (b3 << 2) >> 2] | 0) | 0;
              b3 = b3 + 1 | 0;
            } while ((b3 | 0) != (d3 | 0));
          }
          return e2 | 0;
        }
        function ww(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function xw(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          e2 = (c2[a3 + 4 >> 2] | 0) - (c2[a3 >> 2] | 0) | 0;
          d3 = e2 >> 2;
          e2 = jy(e2 + 4 | 0) | 0;
          c2[e2 >> 2] = d3;
          if (d3 | 0) {
            b3 = 0;
            do {
              c2[e2 + 4 + (b3 << 2) >> 2] = yw((c2[a3 >> 2] | 0) + (b3 << 2) | 0) | 0;
              b3 = b3 + 1 | 0;
            } while ((b3 | 0) != (d3 | 0));
          }
          return e2 | 0;
        }
        function yw(a3) {
          a3 = a3 | 0;
          var b3 = 0, c3 = 0, d3 = 0, e2 = 0;
          e2 = l2;
          l2 = l2 + 32 | 0;
          b3 = e2 + 12 | 0;
          c3 = e2;
          d3 = Di(zw() | 0) | 0;
          if (!d3)
            a3 = Aw(a3) | 0;
          else {
            Ei(b3, d3);
            Fi(c3, b3);
            RA(a3, c3);
            a3 = Hi(b3) | 0;
          }
          l2 = e2;
          return a3 | 0;
        }
        function zw() {
          var b3 = 0;
          if (!(a2[7960] | 0)) {
            Fw(10664);
            Ha(25, 10664, o2 | 0) | 0;
            b3 = 7960;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10664;
        }
        function Aw(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          f3 = d3 + 4 | 0;
          h3 = d3;
          e2 = jy(8) | 0;
          b3 = e2;
          i4 = qC(4) | 0;
          c2[i4 >> 2] = c2[a3 >> 2];
          g3 = b3 + 4 | 0;
          c2[g3 >> 2] = i4;
          a3 = qC(8) | 0;
          g3 = c2[g3 >> 2] | 0;
          c2[h3 >> 2] = 0;
          c2[f3 >> 2] = c2[h3 >> 2];
          Bw(a3, g3, f3);
          c2[e2 >> 2] = a3;
          l2 = d3;
          return b3 | 0;
        }
        function Bw(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          d3 = qC(16) | 0;
          c2[d3 + 4 >> 2] = 0;
          c2[d3 + 8 >> 2] = 0;
          c2[d3 >> 2] = 1656;
          c2[d3 + 12 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function Cw(a3) {
          a3 = a3 | 0;
          kC(a3);
          sC(a3);
          return;
        }
        function Dw(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 12 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Ew(a3) {
          a3 = a3 | 0;
          sC(a3);
          return;
        }
        function Fw(a3) {
          a3 = a3 | 0;
          Zi(a3);
          return;
        }
        function Gw(a3) {
          a3 = a3 | 0;
          fh(a3, Hw() | 0, 5);
          return;
        }
        function Hw() {
          return 1676;
        }
        function Iw(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          if ((Kw(a3) | 0) >>> 0 < b3 >>> 0)
            jC(a3);
          if (b3 >>> 0 > 1073741823)
            Ta();
          else {
            d3 = qC(b3 << 2) | 0;
            c2[a3 + 4 >> 2] = d3;
            c2[a3 >> 2] = d3;
            c2[a3 + 8 >> 2] = d3 + (b3 << 2);
            return;
          }
        }
        function Jw(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          e2 = a3 + 4 | 0;
          a3 = d3 - b3 | 0;
          if ((a3 | 0) > 0) {
            BC(c2[e2 >> 2] | 0, b3 | 0, a3 | 0) | 0;
            c2[e2 >> 2] = (c2[e2 >> 2] | 0) + (a3 >>> 2 << 2);
          }
          return;
        }
        function Kw(a3) {
          a3 = a3 | 0;
          return 1073741823;
        }
        function Lw(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          if ((Nw(a3) | 0) >>> 0 < b3 >>> 0)
            jC(a3);
          if (b3 >>> 0 > 1073741823)
            Ta();
          else {
            d3 = qC(b3 << 2) | 0;
            c2[a3 + 4 >> 2] = d3;
            c2[a3 >> 2] = d3;
            c2[a3 + 8 >> 2] = d3 + (b3 << 2);
            return;
          }
        }
        function Mw(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          e2 = a3 + 4 | 0;
          a3 = d3 - b3 | 0;
          if ((a3 | 0) > 0) {
            BC(c2[e2 >> 2] | 0, b3 | 0, a3 | 0) | 0;
            c2[e2 >> 2] = (c2[e2 >> 2] | 0) + (a3 >>> 2 << 2);
          }
          return;
        }
        function Nw(a3) {
          a3 = a3 | 0;
          return 1073741823;
        }
        function Ow(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 1073741823)
                Ta();
              else {
                f3 = qC(b3 << 2) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 2) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 2);
          return;
        }
        function Pw(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 2) << 2) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Qw(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -4 - b3 | 0) >>> 2) << 2);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Rw(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 1073741823)
                Ta();
              else {
                f3 = qC(b3 << 2) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 2) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 2);
          return;
        }
        function Sw(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 2) << 2) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Tw(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -4 - b3 | 0) >>> 2) << 2);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Uw(a3, b3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          var g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0, q3 = 0, r3 = 0;
          r3 = l2;
          l2 = l2 + 32 | 0;
          m3 = r3 + 20 | 0;
          n3 = r3 + 12 | 0;
          k3 = r3 + 16 | 0;
          o3 = r3 + 4 | 0;
          p3 = r3;
          q3 = r3 + 8 | 0;
          i4 = Wv() | 0;
          g3 = c2[i4 >> 2] | 0;
          h3 = c2[g3 >> 2] | 0;
          if (h3 | 0) {
            j3 = c2[i4 + 8 >> 2] | 0;
            i4 = c2[i4 + 4 >> 2] | 0;
            while (1) {
              OA(m3, h3);
              Vw(a3, m3, i4, j3);
              g3 = g3 + 4 | 0;
              h3 = c2[g3 >> 2] | 0;
              if (!h3)
                break;
              else {
                j3 = j3 + 1 | 0;
                i4 = i4 + 1 | 0;
              }
            }
          }
          g3 = Yv() | 0;
          h3 = c2[g3 >> 2] | 0;
          if (h3 | 0)
            do {
              OA(m3, h3);
              c2[n3 >> 2] = c2[g3 + 4 >> 2];
              Ww(b3, m3, n3);
              g3 = g3 + 8 | 0;
              h3 = c2[g3 >> 2] | 0;
            } while ((h3 | 0) != 0);
          g3 = c2[(Iv() | 0) >> 2] | 0;
          if (g3 | 0)
            do {
              b3 = c2[g3 + 4 >> 2] | 0;
              OA(m3, c2[(Xw(b3) | 0) >> 2] | 0);
              c2[n3 >> 2] = Tv(b3) | 0;
              Yw(d3, m3, n3);
              g3 = c2[g3 >> 2] | 0;
            } while ((g3 | 0) != 0);
          OA(k3, 0);
          g3 = Vv() | 0;
          c2[m3 >> 2] = c2[k3 >> 2];
          $v(m3, g3, f3);
          g3 = c2[(Iv() | 0) >> 2] | 0;
          if (g3 | 0) {
            a3 = m3 + 4 | 0;
            b3 = m3 + 8 | 0;
            d3 = m3 + 8 | 0;
            do {
              j3 = c2[g3 + 4 >> 2] | 0;
              OA(n3, c2[(Xw(j3) | 0) >> 2] | 0);
              _w(o3, Zw(j3) | 0);
              h3 = c2[o3 >> 2] | 0;
              if (h3 | 0) {
                c2[m3 >> 2] = 0;
                c2[a3 >> 2] = 0;
                c2[b3 >> 2] = 0;
                do {
                  OA(p3, c2[(Xw(c2[h3 + 4 >> 2] | 0) | 0) >> 2] | 0);
                  i4 = c2[a3 >> 2] | 0;
                  if (i4 >>> 0 < (c2[d3 >> 2] | 0) >>> 0) {
                    c2[i4 >> 2] = c2[p3 >> 2];
                    c2[a3 >> 2] = (c2[a3 >> 2] | 0) + 4;
                  } else
                    ew(m3, p3);
                  h3 = c2[h3 >> 2] | 0;
                } while ((h3 | 0) != 0);
                $w(e2, n3, m3);
                kw(m3);
              }
              c2[q3 >> 2] = c2[n3 >> 2];
              k3 = ax(j3) | 0;
              c2[m3 >> 2] = c2[q3 >> 2];
              $v(m3, k3, f3);
              Wi(o3);
              g3 = c2[g3 >> 2] | 0;
            } while ((g3 | 0) != 0);
          }
          l2 = r3;
          return;
        }
        function Vw(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          ox(a3, b3, c3, d3);
          return;
        }
        function Ww(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          nx(a3, b3, c3);
          return;
        }
        function Xw(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function Yw(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          ix(a3, b3, c3);
          return;
        }
        function Zw(a3) {
          a3 = a3 | 0;
          return a3 + 16 | 0;
        }
        function _w(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          f3 = g3 + 8 | 0;
          d3 = g3;
          c2[a3 >> 2] = 0;
          e2 = c2[b3 >> 2] | 0;
          c2[f3 >> 2] = e2;
          c2[d3 >> 2] = a3;
          d3 = gx(d3) | 0;
          if (e2 | 0) {
            e2 = qC(12) | 0;
            h3 = (hx(f3) | 0) + 4 | 0;
            a3 = c2[h3 + 4 >> 2] | 0;
            b3 = e2 + 4 | 0;
            c2[b3 >> 2] = c2[h3 >> 2];
            c2[b3 + 4 >> 2] = a3;
            b3 = c2[c2[f3 >> 2] >> 2] | 0;
            c2[f3 >> 2] = b3;
            if (!b3)
              a3 = e2;
            else {
              b3 = e2;
              while (1) {
                a3 = qC(12) | 0;
                j3 = (hx(f3) | 0) + 4 | 0;
                i4 = c2[j3 + 4 >> 2] | 0;
                h3 = a3 + 4 | 0;
                c2[h3 >> 2] = c2[j3 >> 2];
                c2[h3 + 4 >> 2] = i4;
                c2[b3 >> 2] = a3;
                h3 = c2[c2[f3 >> 2] >> 2] | 0;
                c2[f3 >> 2] = h3;
                if (!h3)
                  break;
                else
                  b3 = a3;
              }
            }
            c2[a3 >> 2] = c2[d3 >> 2];
            c2[d3 >> 2] = e2;
          }
          l2 = g3;
          return;
        }
        function $w(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          bx(a3, b3, c3);
          return;
        }
        function ax(a3) {
          a3 = a3 | 0;
          return a3 + 24 | 0;
        }
        function bx(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 32 | 0;
          h3 = e2 + 24 | 0;
          f3 = e2 + 16 | 0;
          i4 = e2 + 12 | 0;
          g3 = e2;
          UA(f3);
          a3 = Sg(a3) | 0;
          c2[i4 >> 2] = c2[b3 >> 2];
          mw(g3, d3);
          c2[h3 >> 2] = c2[i4 >> 2];
          cx(a3, h3, g3);
          kw(g3);
          WA(f3);
          l2 = e2;
          return;
        }
        function cx(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          e2 = l2;
          l2 = l2 + 32 | 0;
          h3 = e2 + 16 | 0;
          i4 = e2 + 12 | 0;
          f3 = e2;
          g3 = Vg(dx() | 0) | 0;
          c2[i4 >> 2] = c2[b3 >> 2];
          c2[h3 >> 2] = c2[i4 >> 2];
          b3 = qw(h3) | 0;
          c2[f3 >> 2] = c2[d3 >> 2];
          h3 = d3 + 4 | 0;
          c2[f3 + 4 >> 2] = c2[h3 >> 2];
          i4 = d3 + 8 | 0;
          c2[f3 + 8 >> 2] = c2[i4 >> 2];
          c2[i4 >> 2] = 0;
          c2[h3 >> 2] = 0;
          c2[d3 >> 2] = 0;
          xa(0, g3 | 0, a3 | 0, b3 | 0, tw(f3) | 0) | 0;
          kw(f3);
          l2 = e2;
          return;
        }
        function dx() {
          var b3 = 0;
          if (!(a2[7976] | 0)) {
            ex(10720);
            b3 = 7976;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10720;
        }
        function ex(a3) {
          a3 = a3 | 0;
          fh(a3, fx() | 0, 2);
          return;
        }
        function fx() {
          return 1732;
        }
        function gx(a3) {
          a3 = a3 | 0;
          return c2[a3 >> 2] | 0;
        }
        function hx(a3) {
          a3 = a3 | 0;
          return c2[a3 >> 2] | 0;
        }
        function ix(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 32 | 0;
          g3 = e2 + 16 | 0;
          f3 = e2 + 8 | 0;
          h3 = e2;
          UA(f3);
          a3 = Sg(a3) | 0;
          c2[h3 >> 2] = c2[b3 >> 2];
          d3 = c2[d3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          jx(a3, g3, d3);
          WA(f3);
          l2 = e2;
          return;
        }
        function jx(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          g3 = e2 + 4 | 0;
          h3 = e2;
          f3 = Vg(kx() | 0) | 0;
          c2[h3 >> 2] = c2[b3 >> 2];
          c2[g3 >> 2] = c2[h3 >> 2];
          b3 = qw(g3) | 0;
          xa(0, f3 | 0, a3 | 0, b3 | 0, rw(d3) | 0) | 0;
          l2 = e2;
          return;
        }
        function kx() {
          var b3 = 0;
          if (!(a2[7984] | 0)) {
            lx(10732);
            b3 = 7984;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10732;
        }
        function lx(a3) {
          a3 = a3 | 0;
          fh(a3, mx() | 0, 2);
          return;
        }
        function mx() {
          return 1744;
        }
        function nx(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = l2;
          l2 = l2 + 32 | 0;
          g3 = e2 + 16 | 0;
          f3 = e2 + 8 | 0;
          h3 = e2;
          UA(f3);
          a3 = Sg(a3) | 0;
          c2[h3 >> 2] = c2[b3 >> 2];
          d3 = c2[d3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          jx(a3, g3, d3);
          WA(f3);
          l2 = e2;
          return;
        }
        function ox(b3, d3, e2, f3) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          var g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          g3 = l2;
          l2 = l2 + 32 | 0;
          i4 = g3 + 16 | 0;
          h3 = g3 + 8 | 0;
          j3 = g3;
          UA(h3);
          b3 = Sg(b3) | 0;
          c2[j3 >> 2] = c2[d3 >> 2];
          e2 = a2[e2 >> 0] | 0;
          f3 = a2[f3 >> 0] | 0;
          c2[i4 >> 2] = c2[j3 >> 2];
          px(b3, i4, e2, f3);
          WA(h3);
          l2 = g3;
          return;
        }
        function px(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          f3 = l2;
          l2 = l2 + 16 | 0;
          h3 = f3 + 4 | 0;
          i4 = f3;
          g3 = Vg(qx() | 0) | 0;
          c2[i4 >> 2] = c2[b3 >> 2];
          c2[h3 >> 2] = c2[i4 >> 2];
          b3 = qw(h3) | 0;
          d3 = rx(d3) | 0;
          $a(0, g3 | 0, a3 | 0, b3 | 0, d3 | 0, rx(e2) | 0) | 0;
          l2 = f3;
          return;
        }
        function qx() {
          var b3 = 0;
          if (!(a2[7992] | 0)) {
            tx(10744);
            b3 = 7992;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10744;
        }
        function rx(a3) {
          a3 = a3 | 0;
          return sx(a3) | 0;
        }
        function sx(a3) {
          a3 = a3 | 0;
          return a3 & 255 | 0;
        }
        function tx(a3) {
          a3 = a3 | 0;
          fh(a3, ux() | 0, 3);
          return;
        }
        function ux() {
          return 1756;
        }
        function vx(b3, d3, e2) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0;
          p3 = l2;
          l2 = l2 + 32 | 0;
          j3 = p3 + 8 | 0;
          k3 = p3 + 4 | 0;
          m3 = p3 + 20 | 0;
          n3 = p3;
          mk(b3, 0);
          f3 = QA(d3) | 0;
          c2[j3 >> 2] = 0;
          o3 = j3 + 4 | 0;
          c2[o3 >> 2] = 0;
          c2[j3 + 8 >> 2] = 0;
          switch (f3 << 24 >> 24) {
            case 0: {
              a2[m3 >> 0] = 0;
              wx(k3, e2, m3);
              xx(b3, k3) | 0;
              wf(k3);
              break;
            }
            case 8: {
              o3 = PA(d3) | 0;
              a2[m3 >> 0] = 8;
              OA(n3, c2[o3 + 4 >> 2] | 0);
              yx(k3, e2, m3, n3, o3 + 8 | 0);
              xx(b3, k3) | 0;
              wf(k3);
              break;
            }
            case 9: {
              h3 = PA(d3) | 0;
              d3 = c2[h3 + 4 >> 2] | 0;
              if (d3 | 0) {
                i4 = j3 + 8 | 0;
                g3 = h3 + 12 | 0;
                while (1) {
                  d3 = d3 + -1 | 0;
                  OA(k3, c2[g3 >> 2] | 0);
                  f3 = c2[o3 >> 2] | 0;
                  if (f3 >>> 0 < (c2[i4 >> 2] | 0) >>> 0) {
                    c2[f3 >> 2] = c2[k3 >> 2];
                    c2[o3 >> 2] = (c2[o3 >> 2] | 0) + 4;
                  } else
                    ew(j3, k3);
                  if (!d3)
                    break;
                  else
                    g3 = g3 + 4 | 0;
                }
              }
              a2[m3 >> 0] = 9;
              OA(n3, c2[h3 + 8 >> 2] | 0);
              zx(k3, e2, m3, n3, j3);
              xx(b3, k3) | 0;
              wf(k3);
              break;
            }
            default: {
              o3 = PA(d3) | 0;
              a2[m3 >> 0] = f3;
              OA(n3, c2[o3 + 4 >> 2] | 0);
              Ax(k3, e2, m3, n3);
              xx(b3, k3) | 0;
              wf(k3);
            }
          }
          kw(j3);
          l2 = p3;
          return;
        }
        function wx(b3, c3, d3) {
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0;
          e2 = l2;
          l2 = l2 + 16 | 0;
          f3 = e2;
          UA(f3);
          c3 = Sg(c3) | 0;
          Ox(b3, c3, a2[d3 >> 0] | 0);
          WA(f3);
          l2 = e2;
          return;
        }
        function xx(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = c2[a3 >> 2] | 0;
          if (d3 | 0)
            ab(d3 | 0);
          c2[a3 >> 2] = c2[b3 >> 2];
          c2[b3 >> 2] = 0;
          return a3 | 0;
        }
        function yx(b3, d3, e2, f3, g3) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          var h3 = 0, i4 = 0, j3 = 0, k3 = 0;
          h3 = l2;
          l2 = l2 + 32 | 0;
          j3 = h3 + 16 | 0;
          i4 = h3 + 8 | 0;
          k3 = h3;
          UA(i4);
          d3 = Sg(d3) | 0;
          e2 = a2[e2 >> 0] | 0;
          c2[k3 >> 2] = c2[f3 >> 2];
          g3 = c2[g3 >> 2] | 0;
          c2[j3 >> 2] = c2[k3 >> 2];
          Kx(b3, d3, e2, j3, g3);
          WA(i4);
          l2 = h3;
          return;
        }
        function zx(b3, d3, e2, f3, g3) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          var h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          h3 = l2;
          l2 = l2 + 32 | 0;
          k3 = h3 + 24 | 0;
          i4 = h3 + 16 | 0;
          m3 = h3 + 12 | 0;
          j3 = h3;
          UA(i4);
          d3 = Sg(d3) | 0;
          e2 = a2[e2 >> 0] | 0;
          c2[m3 >> 2] = c2[f3 >> 2];
          mw(j3, g3);
          c2[k3 >> 2] = c2[m3 >> 2];
          Gx(b3, d3, e2, k3, j3);
          kw(j3);
          WA(i4);
          l2 = h3;
          return;
        }
        function Ax(b3, d3, e2, f3) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          var g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          g3 = l2;
          l2 = l2 + 32 | 0;
          i4 = g3 + 16 | 0;
          h3 = g3 + 8 | 0;
          j3 = g3;
          UA(h3);
          d3 = Sg(d3) | 0;
          e2 = a2[e2 >> 0] | 0;
          c2[j3 >> 2] = c2[f3 >> 2];
          c2[i4 >> 2] = c2[j3 >> 2];
          Bx(b3, d3, e2, i4);
          WA(h3);
          l2 = g3;
          return;
        }
        function Bx(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          f3 = l2;
          l2 = l2 + 16 | 0;
          g3 = f3 + 4 | 0;
          i4 = f3;
          h3 = Vg(Cx() | 0) | 0;
          d3 = rx(d3) | 0;
          c2[i4 >> 2] = c2[e2 >> 2];
          c2[g3 >> 2] = c2[i4 >> 2];
          Dx(a3, xa(0, h3 | 0, b3 | 0, d3 | 0, qw(g3) | 0) | 0);
          l2 = f3;
          return;
        }
        function Cx() {
          var b3 = 0;
          if (!(a2[8e3] | 0)) {
            Ex(10756);
            b3 = 8e3;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10756;
        }
        function Dx(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          mk(a3, b3);
          return;
        }
        function Ex(a3) {
          a3 = a3 | 0;
          fh(a3, Fx() | 0, 2);
          return;
        }
        function Fx() {
          return 1772;
        }
        function Gx(a3, b3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          var g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0;
          g3 = l2;
          l2 = l2 + 32 | 0;
          j3 = g3 + 16 | 0;
          k3 = g3 + 12 | 0;
          h3 = g3;
          i4 = Vg(Hx() | 0) | 0;
          d3 = rx(d3) | 0;
          c2[k3 >> 2] = c2[e2 >> 2];
          c2[j3 >> 2] = c2[k3 >> 2];
          e2 = qw(j3) | 0;
          c2[h3 >> 2] = c2[f3 >> 2];
          j3 = f3 + 4 | 0;
          c2[h3 + 4 >> 2] = c2[j3 >> 2];
          k3 = f3 + 8 | 0;
          c2[h3 + 8 >> 2] = c2[k3 >> 2];
          c2[k3 >> 2] = 0;
          c2[j3 >> 2] = 0;
          c2[f3 >> 2] = 0;
          Dx(a3, $a(0, i4 | 0, b3 | 0, d3 | 0, e2 | 0, tw(h3) | 0) | 0);
          kw(h3);
          l2 = g3;
          return;
        }
        function Hx() {
          var b3 = 0;
          if (!(a2[8008] | 0)) {
            Ix(10768);
            b3 = 8008;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10768;
        }
        function Ix(a3) {
          a3 = a3 | 0;
          fh(a3, Jx() | 0, 3);
          return;
        }
        function Jx() {
          return 1784;
        }
        function Kx(a3, b3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          var g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          i4 = g3 + 4 | 0;
          j3 = g3;
          h3 = Vg(Lx() | 0) | 0;
          d3 = rx(d3) | 0;
          c2[j3 >> 2] = c2[e2 >> 2];
          c2[i4 >> 2] = c2[j3 >> 2];
          e2 = qw(i4) | 0;
          Dx(a3, $a(0, h3 | 0, b3 | 0, d3 | 0, e2 | 0, sw(f3) | 0) | 0);
          l2 = g3;
          return;
        }
        function Lx() {
          var b3 = 0;
          if (!(a2[8016] | 0)) {
            Mx(10780);
            b3 = 8016;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10780;
        }
        function Mx(a3) {
          a3 = a3 | 0;
          fh(a3, Nx() | 0, 3);
          return;
        }
        function Nx() {
          return 1800;
        }
        function Ox(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          var d3 = 0;
          d3 = Vg(Px() | 0) | 0;
          Dx(a3, bb(0, d3 | 0, b3 | 0, rx(c3) | 0) | 0);
          return;
        }
        function Px() {
          var b3 = 0;
          if (!(a2[8024] | 0)) {
            Qx(10792);
            b3 = 8024;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 10792;
        }
        function Qx(a3) {
          a3 = a3 | 0;
          fh(a3, Rx() | 0, 1);
          return;
        }
        function Rx() {
          return 1816;
        }
        function Sx() {
          Tx();
          Ux();
          Vx();
          return;
        }
        function Tx() {
          c2[2702] = rC(65536) | 0;
          return;
        }
        function Ux() {
          qy(10856);
          return;
        }
        function Vx() {
          Wx(10816);
          return;
        }
        function Wx(a3) {
          a3 = a3 | 0;
          Xx(a3, 5044);
          Yx(a3) | 0;
          return;
        }
        function Xx(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = zw() | 0;
          c2[a3 >> 2] = d3;
          ky(d3, b3);
          Hv(c2[a3 >> 2] | 0);
          return;
        }
        function Yx(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = c2[a3 >> 2] | 0;
          At(b3, Zx() | 0);
          return a3 | 0;
        }
        function Zx() {
          var b3 = 0;
          if (!(a2[8032] | 0)) {
            _x(10820);
            Ha(64, 10820, o2 | 0) | 0;
            b3 = 8032;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          if (!(si(10820) | 0))
            _x(10820);
          return 10820;
        }
        function _x(a3) {
          a3 = a3 | 0;
          by(a3);
          Gt(a3, 25);
          return;
        }
        function $x(a3) {
          a3 = a3 | 0;
          ay(a3 + 24 | 0);
          return;
        }
        function ay(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function by(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 5, 18, b3, gy() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function cy(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          dy(a3, b3);
          return;
        }
        function dy(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3;
          f3 = d3 + 4 | 0;
          Gk(f3, b3);
          c2[e2 >> 2] = Hk(f3, b3) | 0;
          ey(a3, e2);
          l2 = d3;
          return;
        }
        function ey(b3, d3) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          fy(b3 + 4 | 0, c2[d3 >> 2] | 0);
          a2[b3 + 8 >> 0] = 1;
          return;
        }
        function fy(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = b3;
          return;
        }
        function gy() {
          return 1824;
        }
        function hy(a3) {
          a3 = a3 | 0;
          return iy(a3) | 0;
        }
        function iy(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          f3 = d3 + 4 | 0;
          h3 = d3;
          e2 = jy(8) | 0;
          b3 = e2;
          i4 = qC(4) | 0;
          Gk(f3, a3);
          fy(i4, Hk(f3, a3) | 0);
          g3 = b3 + 4 | 0;
          c2[g3 >> 2] = i4;
          a3 = qC(8) | 0;
          g3 = c2[g3 >> 2] | 0;
          c2[h3 >> 2] = 0;
          c2[f3 >> 2] = c2[h3 >> 2];
          Bw(a3, g3, f3);
          c2[e2 >> 2] = a3;
          l2 = d3;
          return b3 | 0;
        }
        function jy(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0;
          a3 = a3 + 7 & -8;
          if (a3 >>> 0 <= 32768 ? (b3 = c2[2701] | 0, a3 >>> 0 <= (65536 - b3 | 0) >>> 0) : 0) {
            d3 = (c2[2702] | 0) + b3 | 0;
            c2[2701] = b3 + a3;
            a3 = d3;
          } else {
            a3 = rC(a3 + 8 | 0) | 0;
            c2[a3 >> 2] = c2[2703];
            c2[2703] = a3;
            a3 = a3 + 8 | 0;
          }
          return a3 | 0;
        }
        function ky(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = ly() | 0;
          c2[a3 + 4 >> 2] = my() | 0;
          c2[a3 + 12 >> 2] = b3;
          c2[a3 + 8 >> 2] = ny() | 0;
          c2[a3 + 32 >> 2] = 9;
          return;
        }
        function ly() {
          return 11744;
        }
        function my() {
          return 1832;
        }
        function ny() {
          return cu() | 0;
        }
        function oy(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          if ((jr(d3, 896) | 0) == 512) {
            if (c3 | 0) {
              py(c3);
              sC(c3);
            }
          } else if (b3 | 0)
            sC(b3);
          return;
        }
        function py(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 4 >> 2] | 0;
          if (a3 | 0)
            oC(a3);
          return;
        }
        function qy(a3) {
          a3 = a3 | 0;
          ry(a3, 5052);
          sy(a3) | 0;
          ty(a3, 5058, 26) | 0;
          uy(a3, 5069, 1) | 0;
          vy(a3, 5077, 10) | 0;
          wy(a3, 5087, 19) | 0;
          yy(a3, 5094, 27) | 0;
          return;
        }
        function ry(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = GA() | 0;
          c2[a3 >> 2] = d3;
          HA(d3, b3);
          Hv(c2[a3 >> 2] | 0);
          return;
        }
        function sy(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = c2[a3 >> 2] | 0;
          At(b3, rA() | 0);
          return a3 | 0;
        }
        function ty(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          Yz(a3, ai(b3) | 0, c3, 0);
          return a3 | 0;
        }
        function uy(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          Gz(a3, ai(b3) | 0, c3, 0);
          return a3 | 0;
        }
        function vy(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          hz(a3, ai(b3) | 0, c3, 0);
          return a3 | 0;
        }
        function wy(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          Ry(a3, ai(b3) | 0, c3, 0);
          return a3 | 0;
        }
        function xy(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          a:
            while (1) {
              d3 = c2[2703] | 0;
              while (1) {
                if ((d3 | 0) == (b3 | 0))
                  break a;
                e2 = c2[d3 >> 2] | 0;
                c2[2703] = e2;
                if (!d3)
                  d3 = e2;
                else
                  break;
              }
              sC(d3);
            }
          c2[2701] = a3;
          return;
        }
        function yy(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          zy(a3, ai(b3) | 0, c3, 0);
          return a3 | 0;
        }
        function zy(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = c2[a3 >> 2] | 0;
          f3 = Ay() | 0;
          a3 = By(d3) | 0;
          fi(g3, b3, f3, a3, Cy(d3, e2) | 0, e2);
          return;
        }
        function Ay() {
          var b3 = 0, d3 = 0;
          if (!(a2[8040] | 0)) {
            Jy(10860);
            Ha(65, 10860, o2 | 0) | 0;
            d3 = 8040;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(10860) | 0)) {
            b3 = 10860;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Jy(10860);
          }
          return 10860;
        }
        function By(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function Cy(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          f3 = i4;
          g3 = i4 + 4 | 0;
          c2[f3 >> 2] = a3;
          j3 = Ay() | 0;
          h3 = j3 + 24 | 0;
          b3 = ji(b3, 4) | 0;
          c2[g3 >> 2] = b3;
          d3 = j3 + 28 | 0;
          e2 = c2[d3 >> 2] | 0;
          if (e2 >>> 0 < (c2[j3 + 32 >> 2] | 0) >>> 0) {
            Dy(e2, a3, b3);
            b3 = (c2[d3 >> 2] | 0) + 8 | 0;
            c2[d3 >> 2] = b3;
          } else {
            Ey(h3, f3, g3);
            b3 = c2[d3 >> 2] | 0;
          }
          l2 = i4;
          return (b3 - (c2[h3 >> 2] | 0) >> 3) + -1 | 0;
        }
        function Dy(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function Ey(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          f3 = i4;
          g3 = a3 + 4 | 0;
          h3 = ((c2[g3 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 3) + 1 | 0;
          e2 = Fy(a3) | 0;
          if (e2 >>> 0 < h3 >>> 0)
            jC(a3);
          else {
            j3 = c2[a3 >> 2] | 0;
            m3 = (c2[a3 + 8 >> 2] | 0) - j3 | 0;
            k3 = m3 >> 2;
            Gy(f3, m3 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k3 >>> 0 < h3 >>> 0 ? h3 : k3 : e2, (c2[g3 >> 2] | 0) - j3 >> 3, a3 + 8 | 0);
            h3 = f3 + 8 | 0;
            Dy(c2[h3 >> 2] | 0, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0);
            c2[h3 >> 2] = (c2[h3 >> 2] | 0) + 8;
            Hy(a3, f3);
            Iy(f3);
            l2 = i4;
            return;
          }
        }
        function Fy(a3) {
          a3 = a3 | 0;
          return 536870911;
        }
        function Gy(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 536870911)
                Ta();
              else {
                f3 = qC(b3 << 3) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 3) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 3);
          return;
        }
        function Hy(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 3) << 3) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Iy(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -8 - b3 | 0) >>> 3) << 3);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Jy(a3) {
          a3 = a3 | 0;
          My(a3);
          return;
        }
        function Ky(a3) {
          a3 = a3 | 0;
          Ly(a3 + 24 | 0);
          return;
        }
        function Ly(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function My(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 1, 11, b3, Ny() | 0, 2);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Ny() {
          return 1840;
        }
        function Oy(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          Qy(c2[(Py(a3) | 0) >> 2] | 0, b3, d3);
          return;
        }
        function Py(a3) {
          a3 = a3 | 0;
          return (c2[(Ay() | 0) + 24 >> 2] | 0) + (a3 << 3) | 0;
        }
        function Qy(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          var d3 = 0, e2 = 0, f3 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          f3 = d3 + 1 | 0;
          e2 = d3;
          Gk(f3, b3);
          b3 = Hk(f3, b3) | 0;
          Gk(e2, c3);
          c3 = Hk(e2, c3) | 0;
          ob[a3 & 31](b3, c3);
          l2 = d3;
          return;
        }
        function Ry(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = c2[a3 >> 2] | 0;
          f3 = Sy() | 0;
          a3 = Ty(d3) | 0;
          fi(g3, b3, f3, a3, Uy(d3, e2) | 0, e2);
          return;
        }
        function Sy() {
          var b3 = 0, d3 = 0;
          if (!(a2[8048] | 0)) {
            $y(10896);
            Ha(66, 10896, o2 | 0) | 0;
            d3 = 8048;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(10896) | 0)) {
            b3 = 10896;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            $y(10896);
          }
          return 10896;
        }
        function Ty(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function Uy(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          f3 = i4;
          g3 = i4 + 4 | 0;
          c2[f3 >> 2] = a3;
          j3 = Sy() | 0;
          h3 = j3 + 24 | 0;
          b3 = ji(b3, 4) | 0;
          c2[g3 >> 2] = b3;
          d3 = j3 + 28 | 0;
          e2 = c2[d3 >> 2] | 0;
          if (e2 >>> 0 < (c2[j3 + 32 >> 2] | 0) >>> 0) {
            Vy(e2, a3, b3);
            b3 = (c2[d3 >> 2] | 0) + 8 | 0;
            c2[d3 >> 2] = b3;
          } else {
            Wy(h3, f3, g3);
            b3 = c2[d3 >> 2] | 0;
          }
          l2 = i4;
          return (b3 - (c2[h3 >> 2] | 0) >> 3) + -1 | 0;
        }
        function Vy(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function Wy(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          f3 = i4;
          g3 = a3 + 4 | 0;
          h3 = ((c2[g3 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 3) + 1 | 0;
          e2 = Xy(a3) | 0;
          if (e2 >>> 0 < h3 >>> 0)
            jC(a3);
          else {
            j3 = c2[a3 >> 2] | 0;
            m3 = (c2[a3 + 8 >> 2] | 0) - j3 | 0;
            k3 = m3 >> 2;
            Yy(f3, m3 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k3 >>> 0 < h3 >>> 0 ? h3 : k3 : e2, (c2[g3 >> 2] | 0) - j3 >> 3, a3 + 8 | 0);
            h3 = f3 + 8 | 0;
            Vy(c2[h3 >> 2] | 0, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0);
            c2[h3 >> 2] = (c2[h3 >> 2] | 0) + 8;
            Zy(a3, f3);
            _y(f3);
            l2 = i4;
            return;
          }
        }
        function Xy(a3) {
          a3 = a3 | 0;
          return 536870911;
        }
        function Yy(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 536870911)
                Ta();
              else {
                f3 = qC(b3 << 3) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 3) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 3);
          return;
        }
        function Zy(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 3) << 3) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function _y(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -8 - b3 | 0) >>> 3) << 3);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function $y(a3) {
          a3 = a3 | 0;
          cz(a3);
          return;
        }
        function az(a3) {
          a3 = a3 | 0;
          bz(a3 + 24 | 0);
          return;
        }
        function bz(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function cz(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 1, 11, b3, dz() | 0, 1);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function dz() {
          return 1852;
        }
        function ez(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return gz(c2[(fz(a3) | 0) >> 2] | 0, b3) | 0;
        }
        function fz(a3) {
          a3 = a3 | 0;
          return (c2[(Sy() | 0) + 24 >> 2] | 0) + (a3 << 3) | 0;
        }
        function gz(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var c3 = 0, d3 = 0;
          c3 = l2;
          l2 = l2 + 16 | 0;
          d3 = c3;
          Gk(d3, b3);
          b3 = Hk(d3, b3) | 0;
          b3 = ul(pb[a3 & 31](b3) | 0) | 0;
          l2 = c3;
          return b3 | 0;
        }
        function hz(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = c2[a3 >> 2] | 0;
          f3 = iz() | 0;
          a3 = jz(d3) | 0;
          fi(g3, b3, f3, a3, kz(d3, e2) | 0, e2);
          return;
        }
        function iz() {
          var b3 = 0, d3 = 0;
          if (!(a2[8056] | 0)) {
            rz(10932);
            Ha(67, 10932, o2 | 0) | 0;
            d3 = 8056;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(10932) | 0)) {
            b3 = 10932;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            rz(10932);
          }
          return 10932;
        }
        function jz(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function kz(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          f3 = i4;
          g3 = i4 + 4 | 0;
          c2[f3 >> 2] = a3;
          j3 = iz() | 0;
          h3 = j3 + 24 | 0;
          b3 = ji(b3, 4) | 0;
          c2[g3 >> 2] = b3;
          d3 = j3 + 28 | 0;
          e2 = c2[d3 >> 2] | 0;
          if (e2 >>> 0 < (c2[j3 + 32 >> 2] | 0) >>> 0) {
            lz(e2, a3, b3);
            b3 = (c2[d3 >> 2] | 0) + 8 | 0;
            c2[d3 >> 2] = b3;
          } else {
            mz(h3, f3, g3);
            b3 = c2[d3 >> 2] | 0;
          }
          l2 = i4;
          return (b3 - (c2[h3 >> 2] | 0) >> 3) + -1 | 0;
        }
        function lz(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function mz(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          f3 = i4;
          g3 = a3 + 4 | 0;
          h3 = ((c2[g3 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 3) + 1 | 0;
          e2 = nz(a3) | 0;
          if (e2 >>> 0 < h3 >>> 0)
            jC(a3);
          else {
            j3 = c2[a3 >> 2] | 0;
            m3 = (c2[a3 + 8 >> 2] | 0) - j3 | 0;
            k3 = m3 >> 2;
            oz(f3, m3 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k3 >>> 0 < h3 >>> 0 ? h3 : k3 : e2, (c2[g3 >> 2] | 0) - j3 >> 3, a3 + 8 | 0);
            h3 = f3 + 8 | 0;
            lz(c2[h3 >> 2] | 0, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0);
            c2[h3 >> 2] = (c2[h3 >> 2] | 0) + 8;
            pz(a3, f3);
            qz(f3);
            l2 = i4;
            return;
          }
        }
        function nz(a3) {
          a3 = a3 | 0;
          return 536870911;
        }
        function oz(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 536870911)
                Ta();
              else {
                f3 = qC(b3 << 3) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 3) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 3);
          return;
        }
        function pz(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 3) << 3) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function qz(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -8 - b3 | 0) >>> 3) << 3);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function rz(a3) {
          a3 = a3 | 0;
          uz(a3);
          return;
        }
        function sz(a3) {
          a3 = a3 | 0;
          tz(a3 + 24 | 0);
          return;
        }
        function tz(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function uz(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 1, 7, b3, vz() | 0, 2);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function vz() {
          return 1860;
        }
        function wz(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          return yz(c2[(xz(a3) | 0) >> 2] | 0, b3, d3) | 0;
        }
        function xz(a3) {
          a3 = a3 | 0;
          return (c2[(iz() | 0) + 24 >> 2] | 0) + (a3 << 3) | 0;
        }
        function yz(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          e2 = l2;
          l2 = l2 + 32 | 0;
          h3 = e2 + 12 | 0;
          g3 = e2 + 8 | 0;
          i4 = e2;
          j3 = e2 + 16 | 0;
          f3 = e2 + 4 | 0;
          zz(j3, b3);
          Az(i4, j3, b3);
          ik(f3, d3);
          d3 = jk(f3, d3) | 0;
          c2[h3 >> 2] = c2[i4 >> 2];
          Eb[a3 & 15](g3, h3, d3);
          d3 = Bz(g3) | 0;
          wf(g3);
          kk(f3);
          l2 = e2;
          return d3 | 0;
        }
        function zz(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return;
        }
        function Az(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          Cz(a3, c3);
          return;
        }
        function Bz(a3) {
          a3 = a3 | 0;
          return Sg(a3) | 0;
        }
        function Cz(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0;
          f3 = l2;
          l2 = l2 + 16 | 0;
          d3 = f3;
          e2 = b3;
          if (!(e2 & 1))
            c2[a3 >> 2] = c2[b3 >> 2];
          else {
            Dz(d3, 0);
            Ja(e2 | 0, d3 | 0) | 0;
            Ez(a3, d3);
            Fz(d3);
          }
          l2 = f3;
          return;
        }
        function Dz(b3, d3) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          ah(b3, d3);
          c2[b3 + 4 >> 2] = 0;
          a2[b3 + 8 >> 0] = 0;
          return;
        }
        function Ez(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = c2[b3 + 4 >> 2];
          return;
        }
        function Fz(b3) {
          b3 = b3 | 0;
          a2[b3 + 8 >> 0] = 0;
          return;
        }
        function Gz(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = c2[a3 >> 2] | 0;
          f3 = Hz() | 0;
          a3 = Iz(d3) | 0;
          fi(g3, b3, f3, a3, Jz(d3, e2) | 0, e2);
          return;
        }
        function Hz() {
          var b3 = 0, d3 = 0;
          if (!(a2[8064] | 0)) {
            Qz(10968);
            Ha(68, 10968, o2 | 0) | 0;
            d3 = 8064;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(10968) | 0)) {
            b3 = 10968;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            Qz(10968);
          }
          return 10968;
        }
        function Iz(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function Jz(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          f3 = i4;
          g3 = i4 + 4 | 0;
          c2[f3 >> 2] = a3;
          j3 = Hz() | 0;
          h3 = j3 + 24 | 0;
          b3 = ji(b3, 4) | 0;
          c2[g3 >> 2] = b3;
          d3 = j3 + 28 | 0;
          e2 = c2[d3 >> 2] | 0;
          if (e2 >>> 0 < (c2[j3 + 32 >> 2] | 0) >>> 0) {
            Kz(e2, a3, b3);
            b3 = (c2[d3 >> 2] | 0) + 8 | 0;
            c2[d3 >> 2] = b3;
          } else {
            Lz(h3, f3, g3);
            b3 = c2[d3 >> 2] | 0;
          }
          l2 = i4;
          return (b3 - (c2[h3 >> 2] | 0) >> 3) + -1 | 0;
        }
        function Kz(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function Lz(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          f3 = i4;
          g3 = a3 + 4 | 0;
          h3 = ((c2[g3 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 3) + 1 | 0;
          e2 = Mz(a3) | 0;
          if (e2 >>> 0 < h3 >>> 0)
            jC(a3);
          else {
            j3 = c2[a3 >> 2] | 0;
            m3 = (c2[a3 + 8 >> 2] | 0) - j3 | 0;
            k3 = m3 >> 2;
            Nz(f3, m3 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k3 >>> 0 < h3 >>> 0 ? h3 : k3 : e2, (c2[g3 >> 2] | 0) - j3 >> 3, a3 + 8 | 0);
            h3 = f3 + 8 | 0;
            Kz(c2[h3 >> 2] | 0, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0);
            c2[h3 >> 2] = (c2[h3 >> 2] | 0) + 8;
            Oz(a3, f3);
            Pz(f3);
            l2 = i4;
            return;
          }
        }
        function Mz(a3) {
          a3 = a3 | 0;
          return 536870911;
        }
        function Nz(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 536870911)
                Ta();
              else {
                f3 = qC(b3 << 3) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 3) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 3);
          return;
        }
        function Oz(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 3) << 3) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function Pz(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -8 - b3 | 0) >>> 3) << 3);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function Qz(a3) {
          a3 = a3 | 0;
          Tz(a3);
          return;
        }
        function Rz(a3) {
          a3 = a3 | 0;
          Sz(a3 + 24 | 0);
          return;
        }
        function Sz(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function Tz(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 1, 1, b3, Uz() | 0, 5);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function Uz() {
          return 1872;
        }
        function Vz(a3, b3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          Xz(c2[(Wz(a3) | 0) >> 2] | 0, b3, d3, e2, f3, g3);
          return;
        }
        function Wz(a3) {
          a3 = a3 | 0;
          return (c2[(Hz() | 0) + 24 >> 2] | 0) + (a3 << 3) | 0;
        }
        function Xz(a3, b3, c3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          var g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          g3 = l2;
          l2 = l2 + 32 | 0;
          h3 = g3 + 16 | 0;
          i4 = g3 + 12 | 0;
          j3 = g3 + 8 | 0;
          k3 = g3 + 4 | 0;
          m3 = g3;
          ik(h3, b3);
          b3 = jk(h3, b3) | 0;
          ik(i4, c3);
          c3 = jk(i4, c3) | 0;
          ik(j3, d3);
          d3 = jk(j3, d3) | 0;
          ik(k3, e2);
          e2 = jk(k3, e2) | 0;
          ik(m3, f3);
          f3 = jk(m3, f3) | 0;
          jb[a3 & 1](b3, c3, d3, e2, f3);
          kk(m3);
          kk(k3);
          kk(j3);
          kk(i4);
          kk(h3);
          l2 = g3;
          return;
        }
        function Yz(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = c2[a3 >> 2] | 0;
          f3 = Zz() | 0;
          a3 = _z(d3) | 0;
          fi(g3, b3, f3, a3, $z(d3, e2) | 0, e2);
          return;
        }
        function Zz() {
          var b3 = 0, d3 = 0;
          if (!(a2[8072] | 0)) {
            gA(11004);
            Ha(69, 11004, o2 | 0) | 0;
            d3 = 8072;
            c2[d3 >> 2] = 1;
            c2[d3 + 4 >> 2] = 0;
          }
          if (!(si(11004) | 0)) {
            b3 = 11004;
            d3 = b3 + 36 | 0;
            do {
              c2[b3 >> 2] = 0;
              b3 = b3 + 4 | 0;
            } while ((b3 | 0) < (d3 | 0));
            gA(11004);
          }
          return 11004;
        }
        function _z(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function $z(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          i4 = l2;
          l2 = l2 + 16 | 0;
          f3 = i4;
          g3 = i4 + 4 | 0;
          c2[f3 >> 2] = a3;
          j3 = Zz() | 0;
          h3 = j3 + 24 | 0;
          b3 = ji(b3, 4) | 0;
          c2[g3 >> 2] = b3;
          d3 = j3 + 28 | 0;
          e2 = c2[d3 >> 2] | 0;
          if (e2 >>> 0 < (c2[j3 + 32 >> 2] | 0) >>> 0) {
            aA(e2, a3, b3);
            b3 = (c2[d3 >> 2] | 0) + 8 | 0;
            c2[d3 >> 2] = b3;
          } else {
            bA(h3, f3, g3);
            b3 = c2[d3 >> 2] | 0;
          }
          l2 = i4;
          return (b3 - (c2[h3 >> 2] | 0) >> 3) + -1 | 0;
        }
        function aA(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function bA(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0;
          i4 = l2;
          l2 = l2 + 32 | 0;
          f3 = i4;
          g3 = a3 + 4 | 0;
          h3 = ((c2[g3 >> 2] | 0) - (c2[a3 >> 2] | 0) >> 3) + 1 | 0;
          e2 = cA(a3) | 0;
          if (e2 >>> 0 < h3 >>> 0)
            jC(a3);
          else {
            j3 = c2[a3 >> 2] | 0;
            m3 = (c2[a3 + 8 >> 2] | 0) - j3 | 0;
            k3 = m3 >> 2;
            dA(f3, m3 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k3 >>> 0 < h3 >>> 0 ? h3 : k3 : e2, (c2[g3 >> 2] | 0) - j3 >> 3, a3 + 8 | 0);
            h3 = f3 + 8 | 0;
            aA(c2[h3 >> 2] | 0, c2[b3 >> 2] | 0, c2[d3 >> 2] | 0);
            c2[h3 >> 2] = (c2[h3 >> 2] | 0) + 8;
            eA(a3, f3);
            fA(f3);
            l2 = i4;
            return;
          }
        }
        function cA(a3) {
          a3 = a3 | 0;
          return 536870911;
        }
        function dA(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0;
          c2[a3 + 12 >> 2] = 0;
          c2[a3 + 16 >> 2] = e2;
          do
            if (b3) {
              if (b3 >>> 0 > 536870911)
                Ta();
              else {
                f3 = qC(b3 << 3) | 0;
                break;
              }
            } else
              f3 = 0;
          while (0);
          c2[a3 >> 2] = f3;
          e2 = f3 + (d3 << 3) | 0;
          c2[a3 + 8 >> 2] = e2;
          c2[a3 + 4 >> 2] = e2;
          c2[a3 + 12 >> 2] = f3 + (b3 << 3);
          return;
        }
        function eA(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          e2 = c2[a3 >> 2] | 0;
          h3 = a3 + 4 | 0;
          g3 = b3 + 4 | 0;
          f3 = (c2[h3 >> 2] | 0) - e2 | 0;
          d3 = (c2[g3 >> 2] | 0) + (0 - (f3 >> 3) << 3) | 0;
          c2[g3 >> 2] = d3;
          if ((f3 | 0) > 0) {
            BC(d3 | 0, e2 | 0, f3 | 0) | 0;
            e2 = g3;
            d3 = c2[g3 >> 2] | 0;
          } else
            e2 = g3;
          g3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = d3;
          c2[e2 >> 2] = g3;
          g3 = b3 + 8 | 0;
          f3 = c2[h3 >> 2] | 0;
          c2[h3 >> 2] = c2[g3 >> 2];
          c2[g3 >> 2] = f3;
          g3 = a3 + 8 | 0;
          h3 = b3 + 12 | 0;
          a3 = c2[g3 >> 2] | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[h3 >> 2] = a3;
          c2[b3 >> 2] = c2[e2 >> 2];
          return;
        }
        function fA(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          b3 = c2[a3 + 4 >> 2] | 0;
          d3 = a3 + 8 | 0;
          e2 = c2[d3 >> 2] | 0;
          if ((e2 | 0) != (b3 | 0))
            c2[d3 >> 2] = e2 + (~((e2 + -8 - b3 | 0) >>> 3) << 3);
          a3 = c2[a3 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function gA(a3) {
          a3 = a3 | 0;
          jA(a3);
          return;
        }
        function hA(a3) {
          a3 = a3 | 0;
          iA(a3 + 24 | 0);
          return;
        }
        function iA(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function jA(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 1, 12, b3, kA() | 0, 2);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function kA() {
          return 1896;
        }
        function lA(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          nA(c2[(mA(a3) | 0) >> 2] | 0, b3, d3);
          return;
        }
        function mA(a3) {
          a3 = a3 | 0;
          return (c2[(Zz() | 0) + 24 >> 2] | 0) + (a3 << 3) | 0;
        }
        function nA(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          var d3 = 0, e2 = 0, f3 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          f3 = d3 + 4 | 0;
          e2 = d3;
          oA(f3, b3);
          b3 = pA(f3, b3) | 0;
          ik(e2, c3);
          c3 = jk(e2, c3) | 0;
          ob[a3 & 31](b3, c3);
          kk(e2);
          l2 = d3;
          return;
        }
        function oA(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return;
        }
        function pA(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return qA(b3) | 0;
        }
        function qA(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function rA() {
          var b3 = 0;
          if (!(a2[8080] | 0)) {
            sA(11040);
            Ha(70, 11040, o2 | 0) | 0;
            b3 = 8080;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          if (!(si(11040) | 0))
            sA(11040);
          return 11040;
        }
        function sA(a3) {
          a3 = a3 | 0;
          vA(a3);
          Gt(a3, 71);
          return;
        }
        function tA(a3) {
          a3 = a3 | 0;
          uA(a3 + 24 | 0);
          return;
        }
        function uA(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0;
          d3 = c2[a3 >> 2] | 0;
          e2 = d3;
          if (d3 | 0) {
            a3 = a3 + 4 | 0;
            b3 = c2[a3 >> 2] | 0;
            if ((b3 | 0) != (d3 | 0))
              c2[a3 >> 2] = b3 + (~((b3 + -8 - e2 | 0) >>> 3) << 3);
            sC(d3);
          }
          return;
        }
        function vA(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = vi() | 0;
          yi(a3, 5, 7, b3, zA() | 0, 0);
          c2[a3 + 24 >> 2] = 0;
          c2[a3 + 28 >> 2] = 0;
          c2[a3 + 32 >> 2] = 0;
          return;
        }
        function wA(a3) {
          a3 = a3 | 0;
          xA(a3);
          return;
        }
        function xA(a3) {
          a3 = a3 | 0;
          yA(a3);
          return;
        }
        function yA(b3) {
          b3 = b3 | 0;
          a2[b3 + 8 >> 0] = 1;
          return;
        }
        function zA() {
          return 1936;
        }
        function AA() {
          return BA() | 0;
        }
        function BA() {
          var a3 = 0, b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0;
          b3 = l2;
          l2 = l2 + 16 | 0;
          f3 = b3 + 4 | 0;
          h3 = b3;
          d3 = jy(8) | 0;
          a3 = d3;
          g3 = a3 + 4 | 0;
          c2[g3 >> 2] = qC(1) | 0;
          e2 = qC(8) | 0;
          g3 = c2[g3 >> 2] | 0;
          c2[h3 >> 2] = 0;
          c2[f3 >> 2] = c2[h3 >> 2];
          CA(e2, g3, f3);
          c2[d3 >> 2] = e2;
          l2 = b3;
          return a3 | 0;
        }
        function CA(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          c2[a3 >> 2] = b3;
          d3 = qC(16) | 0;
          c2[d3 + 4 >> 2] = 0;
          c2[d3 + 8 >> 2] = 0;
          c2[d3 >> 2] = 1916;
          c2[d3 + 12 >> 2] = b3;
          c2[a3 + 4 >> 2] = d3;
          return;
        }
        function DA(a3) {
          a3 = a3 | 0;
          kC(a3);
          sC(a3);
          return;
        }
        function EA(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 12 >> 2] | 0;
          if (a3 | 0)
            sC(a3);
          return;
        }
        function FA(a3) {
          a3 = a3 | 0;
          sC(a3);
          return;
        }
        function GA() {
          var b3 = 0;
          if (!(a2[8088] | 0)) {
            NA(11076);
            Ha(25, 11076, o2 | 0) | 0;
            b3 = 8088;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 11076;
        }
        function HA(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = IA() | 0;
          c2[a3 + 4 >> 2] = JA() | 0;
          c2[a3 + 12 >> 2] = b3;
          c2[a3 + 8 >> 2] = KA() | 0;
          c2[a3 + 32 >> 2] = 10;
          return;
        }
        function IA() {
          return 11745;
        }
        function JA() {
          return 1940;
        }
        function KA() {
          return lr() | 0;
        }
        function LA(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          if ((jr(d3, 896) | 0) == 512) {
            if (c3 | 0) {
              MA(c3);
              sC(c3);
            }
          } else if (b3 | 0)
            sC(b3);
          return;
        }
        function MA(a3) {
          a3 = a3 | 0;
          a3 = c2[a3 + 4 >> 2] | 0;
          if (a3 | 0)
            oC(a3);
          return;
        }
        function NA(a3) {
          a3 = a3 | 0;
          Zi(a3);
          return;
        }
        function OA(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c2[a3 >> 2] = b3;
          return;
        }
        function PA(a3) {
          a3 = a3 | 0;
          return c2[a3 >> 2] | 0;
        }
        function QA(b3) {
          b3 = b3 | 0;
          return a2[c2[b3 >> 2] >> 0] | 0;
        }
        function RA(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3;
          c2[e2 >> 2] = c2[a3 >> 2];
          SA(b3, e2) | 0;
          l2 = d3;
          return;
        }
        function SA(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0;
          d3 = TA(c2[a3 >> 2] | 0, b3) | 0;
          b3 = a3 + 4 | 0;
          c2[(c2[b3 >> 2] | 0) + 8 >> 2] = d3;
          return c2[(c2[b3 >> 2] | 0) + 8 >> 2] | 0;
        }
        function TA(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          d3 = l2;
          l2 = l2 + 16 | 0;
          e2 = d3;
          UA(e2);
          a3 = Sg(a3) | 0;
          b3 = VA(a3, c2[b3 >> 2] | 0) | 0;
          WA(e2);
          l2 = d3;
          return b3 | 0;
        }
        function UA(a3) {
          a3 = a3 | 0;
          c2[a3 >> 2] = c2[2701];
          c2[a3 + 4 >> 2] = c2[2703];
          return;
        }
        function VA(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var c3 = 0;
          c3 = Vg(XA() | 0) | 0;
          return bb(0, c3 | 0, a3 | 0, sw(b3) | 0) | 0;
        }
        function WA(a3) {
          a3 = a3 | 0;
          xy(c2[a3 >> 2] | 0, c2[a3 + 4 >> 2] | 0);
          return;
        }
        function XA() {
          var b3 = 0;
          if (!(a2[8096] | 0)) {
            YA(11120);
            b3 = 8096;
            c2[b3 >> 2] = 1;
            c2[b3 + 4 >> 2] = 0;
          }
          return 11120;
        }
        function YA(a3) {
          a3 = a3 | 0;
          fh(a3, ZA() | 0, 1);
          return;
        }
        function ZA() {
          return 1948;
        }
        function _A() {
          $A();
          return;
        }
        function $A() {
          var b3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0;
          s3 = l2;
          l2 = l2 + 16 | 0;
          o3 = s3 + 4 | 0;
          p3 = s3;
          Ea(65536, 10804, c2[2702] | 0, 10812);
          f3 = Wv() | 0;
          e2 = c2[f3 >> 2] | 0;
          b3 = c2[e2 >> 2] | 0;
          if (b3 | 0) {
            g3 = c2[f3 + 8 >> 2] | 0;
            f3 = c2[f3 + 4 >> 2] | 0;
            while (1) {
              Ma(b3 | 0, d2[f3 >> 0] | 0 | 0, a2[g3 >> 0] | 0);
              e2 = e2 + 4 | 0;
              b3 = c2[e2 >> 2] | 0;
              if (!b3)
                break;
              else {
                g3 = g3 + 1 | 0;
                f3 = f3 + 1 | 0;
              }
            }
          }
          b3 = Yv() | 0;
          e2 = c2[b3 >> 2] | 0;
          if (e2 | 0)
            do {
              Na(e2 | 0, c2[b3 + 4 >> 2] | 0);
              b3 = b3 + 8 | 0;
              e2 = c2[b3 >> 2] | 0;
            } while ((e2 | 0) != 0);
          Na(aB() | 0, 5167);
          n3 = Iv() | 0;
          b3 = c2[n3 >> 2] | 0;
          a:
            do
              if (b3 | 0) {
                do {
                  bB(c2[b3 + 4 >> 2] | 0);
                  b3 = c2[b3 >> 2] | 0;
                } while ((b3 | 0) != 0);
                b3 = c2[n3 >> 2] | 0;
                if (b3 | 0) {
                  m3 = n3;
                  do {
                    while (1) {
                      h3 = b3;
                      b3 = c2[b3 >> 2] | 0;
                      h3 = c2[h3 + 4 >> 2] | 0;
                      if (!(cB(h3) | 0))
                        break;
                      c2[p3 >> 2] = m3;
                      c2[o3 >> 2] = c2[p3 >> 2];
                      dB(n3, o3) | 0;
                      if (!b3)
                        break a;
                    }
                    eB(h3);
                    m3 = c2[m3 >> 2] | 0;
                    e2 = fB(h3) | 0;
                    i4 = Va() | 0;
                    j3 = l2;
                    l2 = l2 + ((1 * (e2 << 2) | 0) + 15 & -16) | 0;
                    k3 = l2;
                    l2 = l2 + ((1 * (e2 << 2) | 0) + 15 & -16) | 0;
                    e2 = c2[(Zw(h3) | 0) >> 2] | 0;
                    if (e2 | 0) {
                      f3 = j3;
                      g3 = k3;
                      while (1) {
                        c2[f3 >> 2] = c2[(Xw(c2[e2 + 4 >> 2] | 0) | 0) >> 2];
                        c2[g3 >> 2] = c2[e2 + 8 >> 2];
                        e2 = c2[e2 >> 2] | 0;
                        if (!e2)
                          break;
                        else {
                          f3 = f3 + 4 | 0;
                          g3 = g3 + 4 | 0;
                        }
                      }
                    }
                    t3 = Xw(h3) | 0;
                    e2 = gB(h3) | 0;
                    f3 = fB(h3) | 0;
                    g3 = hB(h3) | 0;
                    Ra(t3 | 0, e2 | 0, j3 | 0, k3 | 0, f3 | 0, g3 | 0, Tv(h3) | 0);
                    Ga(i4 | 0);
                  } while ((b3 | 0) != 0);
                }
              }
            while (0);
          b3 = c2[(Vv() | 0) >> 2] | 0;
          if (b3 | 0)
            do {
              t3 = b3 + 4 | 0;
              n3 = aw(t3) | 0;
              h3 = fw(n3) | 0;
              i4 = bw(n3) | 0;
              j3 = (cw(n3) | 0) + 1 | 0;
              k3 = iB(n3) | 0;
              m3 = jB(t3) | 0;
              n3 = si(n3) | 0;
              o3 = hw(t3) | 0;
              p3 = kB(t3) | 0;
              Pa(0, h3 | 0, i4 | 0, j3 | 0, k3 | 0, m3 | 0, n3 | 0, o3 | 0, p3 | 0, lB(t3) | 0);
              b3 = c2[b3 >> 2] | 0;
            } while ((b3 | 0) != 0);
          b3 = c2[(Iv() | 0) >> 2] | 0;
          b:
            do
              if (b3 | 0) {
                c:
                  while (1) {
                    e2 = c2[b3 + 4 >> 2] | 0;
                    if (e2 | 0 ? (q3 = c2[(Xw(e2) | 0) >> 2] | 0, r3 = c2[(ax(e2) | 0) >> 2] | 0, r3 | 0) : 0) {
                      f3 = r3;
                      do {
                        e2 = f3 + 4 | 0;
                        g3 = aw(e2) | 0;
                        d:
                          do
                            if (g3 | 0)
                              switch (si(g3) | 0) {
                                case 0:
                                  break c;
                                case 4:
                                case 3:
                                case 2: {
                                  k3 = fw(g3) | 0;
                                  m3 = bw(g3) | 0;
                                  n3 = (cw(g3) | 0) + 1 | 0;
                                  o3 = iB(g3) | 0;
                                  p3 = si(g3) | 0;
                                  t3 = hw(e2) | 0;
                                  Pa(q3 | 0, k3 | 0, m3 | 0, n3 | 0, o3 | 0, 0, p3 | 0, t3 | 0, kB(e2) | 0, lB(e2) | 0);
                                  break d;
                                }
                                case 1: {
                                  j3 = fw(g3) | 0;
                                  k3 = bw(g3) | 0;
                                  m3 = (cw(g3) | 0) + 1 | 0;
                                  n3 = iB(g3) | 0;
                                  o3 = jB(e2) | 0;
                                  p3 = si(g3) | 0;
                                  t3 = hw(e2) | 0;
                                  Pa(q3 | 0, j3 | 0, k3 | 0, m3 | 0, n3 | 0, o3 | 0, p3 | 0, t3 | 0, kB(e2) | 0, lB(e2) | 0);
                                  break d;
                                }
                                case 5: {
                                  n3 = fw(g3) | 0;
                                  o3 = bw(g3) | 0;
                                  p3 = (cw(g3) | 0) + 1 | 0;
                                  t3 = iB(g3) | 0;
                                  Pa(q3 | 0, n3 | 0, o3 | 0, p3 | 0, t3 | 0, mB(g3) | 0, si(g3) | 0, 0, 0, 0);
                                  break d;
                                }
                                default:
                                  break d;
                              }
                          while (0);
                        f3 = c2[f3 >> 2] | 0;
                      } while ((f3 | 0) != 0);
                    }
                    b3 = c2[b3 >> 2] | 0;
                    if (!b3)
                      break b;
                  }
                Ta();
              }
            while (0);
          Sa();
          l2 = s3;
          return;
        }
        function aB() {
          return 11703;
        }
        function bB(b3) {
          b3 = b3 | 0;
          a2[b3 + 40 >> 0] = 0;
          return;
        }
        function cB(b3) {
          b3 = b3 | 0;
          return (a2[b3 + 40 >> 0] | 0) != 0 | 0;
        }
        function dB(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          b3 = nB(b3) | 0;
          a3 = c2[b3 >> 2] | 0;
          c2[b3 >> 2] = c2[a3 >> 2];
          sC(a3);
          return c2[b3 >> 2] | 0;
        }
        function eB(b3) {
          b3 = b3 | 0;
          a2[b3 + 40 >> 0] = 1;
          return;
        }
        function fB(a3) {
          a3 = a3 | 0;
          return c2[a3 + 20 >> 2] | 0;
        }
        function gB(a3) {
          a3 = a3 | 0;
          return c2[a3 + 8 >> 2] | 0;
        }
        function hB(a3) {
          a3 = a3 | 0;
          return c2[a3 + 32 >> 2] | 0;
        }
        function iB(a3) {
          a3 = a3 | 0;
          return c2[a3 + 4 >> 2] | 0;
        }
        function jB(a3) {
          a3 = a3 | 0;
          return c2[a3 + 4 >> 2] | 0;
        }
        function kB(a3) {
          a3 = a3 | 0;
          return c2[a3 + 8 >> 2] | 0;
        }
        function lB(a3) {
          a3 = a3 | 0;
          return c2[a3 + 16 >> 2] | 0;
        }
        function mB(a3) {
          a3 = a3 | 0;
          return c2[a3 + 20 >> 2] | 0;
        }
        function nB(a3) {
          a3 = a3 | 0;
          return c2[a3 >> 2] | 0;
        }
        function oB(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w3 = 0, x3 = 0;
          x3 = l2;
          l2 = l2 + 16 | 0;
          o3 = x3;
          do
            if (a3 >>> 0 < 245) {
              k3 = a3 >>> 0 < 11 ? 16 : a3 + 11 & -8;
              a3 = k3 >>> 3;
              n3 = c2[2783] | 0;
              d3 = n3 >>> a3;
              if (d3 & 3 | 0) {
                b3 = (d3 & 1 ^ 1) + a3 | 0;
                a3 = 11172 + (b3 << 1 << 2) | 0;
                d3 = a3 + 8 | 0;
                e2 = c2[d3 >> 2] | 0;
                f3 = e2 + 8 | 0;
                g3 = c2[f3 >> 2] | 0;
                if ((a3 | 0) == (g3 | 0))
                  c2[2783] = n3 & ~(1 << b3);
                else {
                  c2[g3 + 12 >> 2] = a3;
                  c2[d3 >> 2] = g3;
                }
                w3 = b3 << 3;
                c2[e2 + 4 >> 2] = w3 | 3;
                w3 = e2 + w3 + 4 | 0;
                c2[w3 >> 2] = c2[w3 >> 2] | 1;
                w3 = f3;
                l2 = x3;
                return w3 | 0;
              }
              m3 = c2[2785] | 0;
              if (k3 >>> 0 > m3 >>> 0) {
                if (d3 | 0) {
                  b3 = 2 << a3;
                  b3 = d3 << a3 & (b3 | 0 - b3);
                  b3 = (b3 & 0 - b3) + -1 | 0;
                  h3 = b3 >>> 12 & 16;
                  b3 = b3 >>> h3;
                  d3 = b3 >>> 5 & 8;
                  b3 = b3 >>> d3;
                  f3 = b3 >>> 2 & 4;
                  b3 = b3 >>> f3;
                  a3 = b3 >>> 1 & 2;
                  b3 = b3 >>> a3;
                  e2 = b3 >>> 1 & 1;
                  e2 = (d3 | h3 | f3 | a3 | e2) + (b3 >>> e2) | 0;
                  b3 = 11172 + (e2 << 1 << 2) | 0;
                  a3 = b3 + 8 | 0;
                  f3 = c2[a3 >> 2] | 0;
                  h3 = f3 + 8 | 0;
                  d3 = c2[h3 >> 2] | 0;
                  if ((b3 | 0) == (d3 | 0)) {
                    a3 = n3 & ~(1 << e2);
                    c2[2783] = a3;
                  } else {
                    c2[d3 + 12 >> 2] = b3;
                    c2[a3 >> 2] = d3;
                    a3 = n3;
                  }
                  g3 = (e2 << 3) - k3 | 0;
                  c2[f3 + 4 >> 2] = k3 | 3;
                  e2 = f3 + k3 | 0;
                  c2[e2 + 4 >> 2] = g3 | 1;
                  c2[e2 + g3 >> 2] = g3;
                  if (m3 | 0) {
                    f3 = c2[2788] | 0;
                    b3 = m3 >>> 3;
                    d3 = 11172 + (b3 << 1 << 2) | 0;
                    b3 = 1 << b3;
                    if (!(a3 & b3)) {
                      c2[2783] = a3 | b3;
                      b3 = d3;
                      a3 = d3 + 8 | 0;
                    } else {
                      a3 = d3 + 8 | 0;
                      b3 = c2[a3 >> 2] | 0;
                    }
                    c2[a3 >> 2] = f3;
                    c2[b3 + 12 >> 2] = f3;
                    c2[f3 + 8 >> 2] = b3;
                    c2[f3 + 12 >> 2] = d3;
                  }
                  c2[2785] = g3;
                  c2[2788] = e2;
                  w3 = h3;
                  l2 = x3;
                  return w3 | 0;
                }
                i4 = c2[2784] | 0;
                if (i4) {
                  d3 = (i4 & 0 - i4) + -1 | 0;
                  h3 = d3 >>> 12 & 16;
                  d3 = d3 >>> h3;
                  g3 = d3 >>> 5 & 8;
                  d3 = d3 >>> g3;
                  j3 = d3 >>> 2 & 4;
                  d3 = d3 >>> j3;
                  e2 = d3 >>> 1 & 2;
                  d3 = d3 >>> e2;
                  a3 = d3 >>> 1 & 1;
                  a3 = c2[11436 + ((g3 | h3 | j3 | e2 | a3) + (d3 >>> a3) << 2) >> 2] | 0;
                  d3 = (c2[a3 + 4 >> 2] & -8) - k3 | 0;
                  e2 = c2[a3 + 16 + (((c2[a3 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
                  if (!e2) {
                    j3 = a3;
                    g3 = d3;
                  } else {
                    do {
                      h3 = (c2[e2 + 4 >> 2] & -8) - k3 | 0;
                      j3 = h3 >>> 0 < d3 >>> 0;
                      d3 = j3 ? h3 : d3;
                      a3 = j3 ? e2 : a3;
                      e2 = c2[e2 + 16 + (((c2[e2 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
                    } while ((e2 | 0) != 0);
                    j3 = a3;
                    g3 = d3;
                  }
                  h3 = j3 + k3 | 0;
                  if (j3 >>> 0 < h3 >>> 0) {
                    f3 = c2[j3 + 24 >> 2] | 0;
                    b3 = c2[j3 + 12 >> 2] | 0;
                    do
                      if ((b3 | 0) == (j3 | 0)) {
                        a3 = j3 + 20 | 0;
                        b3 = c2[a3 >> 2] | 0;
                        if (!b3) {
                          a3 = j3 + 16 | 0;
                          b3 = c2[a3 >> 2] | 0;
                          if (!b3) {
                            d3 = 0;
                            break;
                          }
                        }
                        while (1) {
                          d3 = b3 + 20 | 0;
                          e2 = c2[d3 >> 2] | 0;
                          if (e2 | 0) {
                            b3 = e2;
                            a3 = d3;
                            continue;
                          }
                          d3 = b3 + 16 | 0;
                          e2 = c2[d3 >> 2] | 0;
                          if (!e2)
                            break;
                          else {
                            b3 = e2;
                            a3 = d3;
                          }
                        }
                        c2[a3 >> 2] = 0;
                        d3 = b3;
                      } else {
                        d3 = c2[j3 + 8 >> 2] | 0;
                        c2[d3 + 12 >> 2] = b3;
                        c2[b3 + 8 >> 2] = d3;
                        d3 = b3;
                      }
                    while (0);
                    do
                      if (f3 | 0) {
                        b3 = c2[j3 + 28 >> 2] | 0;
                        a3 = 11436 + (b3 << 2) | 0;
                        if ((j3 | 0) == (c2[a3 >> 2] | 0)) {
                          c2[a3 >> 2] = d3;
                          if (!d3) {
                            c2[2784] = i4 & ~(1 << b3);
                            break;
                          }
                        } else {
                          c2[f3 + 16 + (((c2[f3 + 16 >> 2] | 0) != (j3 | 0) & 1) << 2) >> 2] = d3;
                          if (!d3)
                            break;
                        }
                        c2[d3 + 24 >> 2] = f3;
                        b3 = c2[j3 + 16 >> 2] | 0;
                        if (b3 | 0) {
                          c2[d3 + 16 >> 2] = b3;
                          c2[b3 + 24 >> 2] = d3;
                        }
                        b3 = c2[j3 + 20 >> 2] | 0;
                        if (b3 | 0) {
                          c2[d3 + 20 >> 2] = b3;
                          c2[b3 + 24 >> 2] = d3;
                        }
                      }
                    while (0);
                    if (g3 >>> 0 < 16) {
                      w3 = g3 + k3 | 0;
                      c2[j3 + 4 >> 2] = w3 | 3;
                      w3 = j3 + w3 + 4 | 0;
                      c2[w3 >> 2] = c2[w3 >> 2] | 1;
                    } else {
                      c2[j3 + 4 >> 2] = k3 | 3;
                      c2[h3 + 4 >> 2] = g3 | 1;
                      c2[h3 + g3 >> 2] = g3;
                      if (m3 | 0) {
                        e2 = c2[2788] | 0;
                        b3 = m3 >>> 3;
                        d3 = 11172 + (b3 << 1 << 2) | 0;
                        b3 = 1 << b3;
                        if (!(n3 & b3)) {
                          c2[2783] = n3 | b3;
                          b3 = d3;
                          a3 = d3 + 8 | 0;
                        } else {
                          a3 = d3 + 8 | 0;
                          b3 = c2[a3 >> 2] | 0;
                        }
                        c2[a3 >> 2] = e2;
                        c2[b3 + 12 >> 2] = e2;
                        c2[e2 + 8 >> 2] = b3;
                        c2[e2 + 12 >> 2] = d3;
                      }
                      c2[2785] = g3;
                      c2[2788] = h3;
                    }
                    w3 = j3 + 8 | 0;
                    l2 = x3;
                    return w3 | 0;
                  } else
                    n3 = k3;
                } else
                  n3 = k3;
              } else
                n3 = k3;
            } else if (a3 >>> 0 <= 4294967231) {
              a3 = a3 + 11 | 0;
              k3 = a3 & -8;
              j3 = c2[2784] | 0;
              if (j3) {
                e2 = 0 - k3 | 0;
                a3 = a3 >>> 8;
                if (a3) {
                  if (k3 >>> 0 > 16777215)
                    i4 = 31;
                  else {
                    n3 = (a3 + 1048320 | 0) >>> 16 & 8;
                    v3 = a3 << n3;
                    m3 = (v3 + 520192 | 0) >>> 16 & 4;
                    v3 = v3 << m3;
                    i4 = (v3 + 245760 | 0) >>> 16 & 2;
                    i4 = 14 - (m3 | n3 | i4) + (v3 << i4 >>> 15) | 0;
                    i4 = k3 >>> (i4 + 7 | 0) & 1 | i4 << 1;
                  }
                } else
                  i4 = 0;
                d3 = c2[11436 + (i4 << 2) >> 2] | 0;
                a:
                  do
                    if (!d3) {
                      d3 = 0;
                      a3 = 0;
                      v3 = 57;
                    } else {
                      a3 = 0;
                      h3 = k3 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
                      g3 = 0;
                      while (1) {
                        f3 = (c2[d3 + 4 >> 2] & -8) - k3 | 0;
                        if (f3 >>> 0 < e2 >>> 0)
                          if (!f3) {
                            a3 = d3;
                            e2 = 0;
                            f3 = d3;
                            v3 = 61;
                            break a;
                          } else {
                            a3 = d3;
                            e2 = f3;
                          }
                        f3 = c2[d3 + 20 >> 2] | 0;
                        d3 = c2[d3 + 16 + (h3 >>> 31 << 2) >> 2] | 0;
                        g3 = (f3 | 0) == 0 | (f3 | 0) == (d3 | 0) ? g3 : f3;
                        f3 = (d3 | 0) == 0;
                        if (f3) {
                          d3 = g3;
                          v3 = 57;
                          break;
                        } else
                          h3 = h3 << ((f3 ^ 1) & 1);
                      }
                    }
                  while (0);
                if ((v3 | 0) == 57) {
                  if ((d3 | 0) == 0 & (a3 | 0) == 0) {
                    a3 = 2 << i4;
                    a3 = j3 & (a3 | 0 - a3);
                    if (!a3) {
                      n3 = k3;
                      break;
                    }
                    n3 = (a3 & 0 - a3) + -1 | 0;
                    h3 = n3 >>> 12 & 16;
                    n3 = n3 >>> h3;
                    g3 = n3 >>> 5 & 8;
                    n3 = n3 >>> g3;
                    i4 = n3 >>> 2 & 4;
                    n3 = n3 >>> i4;
                    m3 = n3 >>> 1 & 2;
                    n3 = n3 >>> m3;
                    d3 = n3 >>> 1 & 1;
                    a3 = 0;
                    d3 = c2[11436 + ((g3 | h3 | i4 | m3 | d3) + (n3 >>> d3) << 2) >> 2] | 0;
                  }
                  if (!d3) {
                    i4 = a3;
                    h3 = e2;
                  } else {
                    f3 = d3;
                    v3 = 61;
                  }
                }
                if ((v3 | 0) == 61)
                  while (1) {
                    v3 = 0;
                    d3 = (c2[f3 + 4 >> 2] & -8) - k3 | 0;
                    n3 = d3 >>> 0 < e2 >>> 0;
                    d3 = n3 ? d3 : e2;
                    a3 = n3 ? f3 : a3;
                    f3 = c2[f3 + 16 + (((c2[f3 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
                    if (!f3) {
                      i4 = a3;
                      h3 = d3;
                      break;
                    } else {
                      e2 = d3;
                      v3 = 61;
                    }
                  }
                if ((i4 | 0) != 0 ? h3 >>> 0 < ((c2[2785] | 0) - k3 | 0) >>> 0 : 0) {
                  g3 = i4 + k3 | 0;
                  if (i4 >>> 0 >= g3 >>> 0) {
                    w3 = 0;
                    l2 = x3;
                    return w3 | 0;
                  }
                  f3 = c2[i4 + 24 >> 2] | 0;
                  b3 = c2[i4 + 12 >> 2] | 0;
                  do
                    if ((b3 | 0) == (i4 | 0)) {
                      a3 = i4 + 20 | 0;
                      b3 = c2[a3 >> 2] | 0;
                      if (!b3) {
                        a3 = i4 + 16 | 0;
                        b3 = c2[a3 >> 2] | 0;
                        if (!b3) {
                          b3 = 0;
                          break;
                        }
                      }
                      while (1) {
                        d3 = b3 + 20 | 0;
                        e2 = c2[d3 >> 2] | 0;
                        if (e2 | 0) {
                          b3 = e2;
                          a3 = d3;
                          continue;
                        }
                        d3 = b3 + 16 | 0;
                        e2 = c2[d3 >> 2] | 0;
                        if (!e2)
                          break;
                        else {
                          b3 = e2;
                          a3 = d3;
                        }
                      }
                      c2[a3 >> 2] = 0;
                    } else {
                      w3 = c2[i4 + 8 >> 2] | 0;
                      c2[w3 + 12 >> 2] = b3;
                      c2[b3 + 8 >> 2] = w3;
                    }
                  while (0);
                  do
                    if (f3) {
                      a3 = c2[i4 + 28 >> 2] | 0;
                      d3 = 11436 + (a3 << 2) | 0;
                      if ((i4 | 0) == (c2[d3 >> 2] | 0)) {
                        c2[d3 >> 2] = b3;
                        if (!b3) {
                          e2 = j3 & ~(1 << a3);
                          c2[2784] = e2;
                          break;
                        }
                      } else {
                        c2[f3 + 16 + (((c2[f3 + 16 >> 2] | 0) != (i4 | 0) & 1) << 2) >> 2] = b3;
                        if (!b3) {
                          e2 = j3;
                          break;
                        }
                      }
                      c2[b3 + 24 >> 2] = f3;
                      a3 = c2[i4 + 16 >> 2] | 0;
                      if (a3 | 0) {
                        c2[b3 + 16 >> 2] = a3;
                        c2[a3 + 24 >> 2] = b3;
                      }
                      a3 = c2[i4 + 20 >> 2] | 0;
                      if (a3) {
                        c2[b3 + 20 >> 2] = a3;
                        c2[a3 + 24 >> 2] = b3;
                        e2 = j3;
                      } else
                        e2 = j3;
                    } else
                      e2 = j3;
                  while (0);
                  do
                    if (h3 >>> 0 >= 16) {
                      c2[i4 + 4 >> 2] = k3 | 3;
                      c2[g3 + 4 >> 2] = h3 | 1;
                      c2[g3 + h3 >> 2] = h3;
                      b3 = h3 >>> 3;
                      if (h3 >>> 0 < 256) {
                        d3 = 11172 + (b3 << 1 << 2) | 0;
                        a3 = c2[2783] | 0;
                        b3 = 1 << b3;
                        if (!(a3 & b3)) {
                          c2[2783] = a3 | b3;
                          b3 = d3;
                          a3 = d3 + 8 | 0;
                        } else {
                          a3 = d3 + 8 | 0;
                          b3 = c2[a3 >> 2] | 0;
                        }
                        c2[a3 >> 2] = g3;
                        c2[b3 + 12 >> 2] = g3;
                        c2[g3 + 8 >> 2] = b3;
                        c2[g3 + 12 >> 2] = d3;
                        break;
                      }
                      b3 = h3 >>> 8;
                      if (b3) {
                        if (h3 >>> 0 > 16777215)
                          b3 = 31;
                        else {
                          v3 = (b3 + 1048320 | 0) >>> 16 & 8;
                          w3 = b3 << v3;
                          u3 = (w3 + 520192 | 0) >>> 16 & 4;
                          w3 = w3 << u3;
                          b3 = (w3 + 245760 | 0) >>> 16 & 2;
                          b3 = 14 - (u3 | v3 | b3) + (w3 << b3 >>> 15) | 0;
                          b3 = h3 >>> (b3 + 7 | 0) & 1 | b3 << 1;
                        }
                      } else
                        b3 = 0;
                      d3 = 11436 + (b3 << 2) | 0;
                      c2[g3 + 28 >> 2] = b3;
                      a3 = g3 + 16 | 0;
                      c2[a3 + 4 >> 2] = 0;
                      c2[a3 >> 2] = 0;
                      a3 = 1 << b3;
                      if (!(e2 & a3)) {
                        c2[2784] = e2 | a3;
                        c2[d3 >> 2] = g3;
                        c2[g3 + 24 >> 2] = d3;
                        c2[g3 + 12 >> 2] = g3;
                        c2[g3 + 8 >> 2] = g3;
                        break;
                      }
                      a3 = h3 << ((b3 | 0) == 31 ? 0 : 25 - (b3 >>> 1) | 0);
                      d3 = c2[d3 >> 2] | 0;
                      while (1) {
                        if ((c2[d3 + 4 >> 2] & -8 | 0) == (h3 | 0)) {
                          v3 = 97;
                          break;
                        }
                        e2 = d3 + 16 + (a3 >>> 31 << 2) | 0;
                        b3 = c2[e2 >> 2] | 0;
                        if (!b3) {
                          v3 = 96;
                          break;
                        } else {
                          a3 = a3 << 1;
                          d3 = b3;
                        }
                      }
                      if ((v3 | 0) == 96) {
                        c2[e2 >> 2] = g3;
                        c2[g3 + 24 >> 2] = d3;
                        c2[g3 + 12 >> 2] = g3;
                        c2[g3 + 8 >> 2] = g3;
                        break;
                      } else if ((v3 | 0) == 97) {
                        v3 = d3 + 8 | 0;
                        w3 = c2[v3 >> 2] | 0;
                        c2[w3 + 12 >> 2] = g3;
                        c2[v3 >> 2] = g3;
                        c2[g3 + 8 >> 2] = w3;
                        c2[g3 + 12 >> 2] = d3;
                        c2[g3 + 24 >> 2] = 0;
                        break;
                      }
                    } else {
                      w3 = h3 + k3 | 0;
                      c2[i4 + 4 >> 2] = w3 | 3;
                      w3 = i4 + w3 + 4 | 0;
                      c2[w3 >> 2] = c2[w3 >> 2] | 1;
                    }
                  while (0);
                  w3 = i4 + 8 | 0;
                  l2 = x3;
                  return w3 | 0;
                } else
                  n3 = k3;
              } else
                n3 = k3;
            } else
              n3 = -1;
          while (0);
          d3 = c2[2785] | 0;
          if (d3 >>> 0 >= n3 >>> 0) {
            b3 = d3 - n3 | 0;
            a3 = c2[2788] | 0;
            if (b3 >>> 0 > 15) {
              w3 = a3 + n3 | 0;
              c2[2788] = w3;
              c2[2785] = b3;
              c2[w3 + 4 >> 2] = b3 | 1;
              c2[w3 + b3 >> 2] = b3;
              c2[a3 + 4 >> 2] = n3 | 3;
            } else {
              c2[2785] = 0;
              c2[2788] = 0;
              c2[a3 + 4 >> 2] = d3 | 3;
              w3 = a3 + d3 + 4 | 0;
              c2[w3 >> 2] = c2[w3 >> 2] | 1;
            }
            w3 = a3 + 8 | 0;
            l2 = x3;
            return w3 | 0;
          }
          h3 = c2[2786] | 0;
          if (h3 >>> 0 > n3 >>> 0) {
            u3 = h3 - n3 | 0;
            c2[2786] = u3;
            w3 = c2[2789] | 0;
            v3 = w3 + n3 | 0;
            c2[2789] = v3;
            c2[v3 + 4 >> 2] = u3 | 1;
            c2[w3 + 4 >> 2] = n3 | 3;
            w3 = w3 + 8 | 0;
            l2 = x3;
            return w3 | 0;
          }
          if (!(c2[2901] | 0)) {
            c2[2903] = 4096;
            c2[2902] = 4096;
            c2[2904] = -1;
            c2[2905] = -1;
            c2[2906] = 0;
            c2[2894] = 0;
            a3 = o3 & -16 ^ 1431655768;
            c2[o3 >> 2] = a3;
            c2[2901] = a3;
            a3 = 4096;
          } else
            a3 = c2[2903] | 0;
          i4 = n3 + 48 | 0;
          j3 = n3 + 47 | 0;
          g3 = a3 + j3 | 0;
          f3 = 0 - a3 | 0;
          k3 = g3 & f3;
          if (k3 >>> 0 <= n3 >>> 0) {
            w3 = 0;
            l2 = x3;
            return w3 | 0;
          }
          a3 = c2[2893] | 0;
          if (a3 | 0 ? (m3 = c2[2891] | 0, o3 = m3 + k3 | 0, o3 >>> 0 <= m3 >>> 0 | o3 >>> 0 > a3 >>> 0) : 0) {
            w3 = 0;
            l2 = x3;
            return w3 | 0;
          }
          b:
            do
              if (!(c2[2894] & 4)) {
                d3 = c2[2789] | 0;
                c:
                  do
                    if (d3) {
                      e2 = 11580;
                      while (1) {
                        a3 = c2[e2 >> 2] | 0;
                        if (a3 >>> 0 <= d3 >>> 0 ? (r3 = e2 + 4 | 0, (a3 + (c2[r3 >> 2] | 0) | 0) >>> 0 > d3 >>> 0) : 0)
                          break;
                        a3 = c2[e2 + 8 >> 2] | 0;
                        if (!a3) {
                          v3 = 118;
                          break c;
                        } else
                          e2 = a3;
                      }
                      b3 = g3 - h3 & f3;
                      if (b3 >>> 0 < 2147483647) {
                        a3 = FC(b3 | 0) | 0;
                        if ((a3 | 0) == ((c2[e2 >> 2] | 0) + (c2[r3 >> 2] | 0) | 0)) {
                          if ((a3 | 0) != (-1 | 0)) {
                            h3 = b3;
                            g3 = a3;
                            v3 = 135;
                            break b;
                          }
                        } else {
                          e2 = a3;
                          v3 = 126;
                        }
                      } else
                        b3 = 0;
                    } else
                      v3 = 118;
                  while (0);
                do
                  if ((v3 | 0) == 118) {
                    d3 = FC(0) | 0;
                    if ((d3 | 0) != (-1 | 0) ? (b3 = d3, p3 = c2[2902] | 0, q3 = p3 + -1 | 0, b3 = ((q3 & b3 | 0) == 0 ? 0 : (q3 + b3 & 0 - p3) - b3 | 0) + k3 | 0, p3 = c2[2891] | 0, q3 = b3 + p3 | 0, b3 >>> 0 > n3 >>> 0 & b3 >>> 0 < 2147483647) : 0) {
                      r3 = c2[2893] | 0;
                      if (r3 | 0 ? q3 >>> 0 <= p3 >>> 0 | q3 >>> 0 > r3 >>> 0 : 0) {
                        b3 = 0;
                        break;
                      }
                      a3 = FC(b3 | 0) | 0;
                      if ((a3 | 0) == (d3 | 0)) {
                        h3 = b3;
                        g3 = d3;
                        v3 = 135;
                        break b;
                      } else {
                        e2 = a3;
                        v3 = 126;
                      }
                    } else
                      b3 = 0;
                  }
                while (0);
                do
                  if ((v3 | 0) == 126) {
                    d3 = 0 - b3 | 0;
                    if (!(i4 >>> 0 > b3 >>> 0 & (b3 >>> 0 < 2147483647 & (e2 | 0) != (-1 | 0))))
                      if ((e2 | 0) == (-1 | 0)) {
                        b3 = 0;
                        break;
                      } else {
                        h3 = b3;
                        g3 = e2;
                        v3 = 135;
                        break b;
                      }
                    a3 = c2[2903] | 0;
                    a3 = j3 - b3 + a3 & 0 - a3;
                    if (a3 >>> 0 >= 2147483647) {
                      h3 = b3;
                      g3 = e2;
                      v3 = 135;
                      break b;
                    }
                    if ((FC(a3 | 0) | 0) == (-1 | 0)) {
                      FC(d3 | 0) | 0;
                      b3 = 0;
                      break;
                    } else {
                      h3 = a3 + b3 | 0;
                      g3 = e2;
                      v3 = 135;
                      break b;
                    }
                  }
                while (0);
                c2[2894] = c2[2894] | 4;
                v3 = 133;
              } else {
                b3 = 0;
                v3 = 133;
              }
            while (0);
          if (((v3 | 0) == 133 ? k3 >>> 0 < 2147483647 : 0) ? (u3 = FC(k3 | 0) | 0, r3 = FC(0) | 0, s3 = r3 - u3 | 0, t3 = s3 >>> 0 > (n3 + 40 | 0) >>> 0, !((u3 | 0) == (-1 | 0) | t3 ^ 1 | u3 >>> 0 < r3 >>> 0 & ((u3 | 0) != (-1 | 0) & (r3 | 0) != (-1 | 0)) ^ 1)) : 0) {
            h3 = t3 ? s3 : b3;
            g3 = u3;
            v3 = 135;
          }
          if ((v3 | 0) == 135) {
            b3 = (c2[2891] | 0) + h3 | 0;
            c2[2891] = b3;
            if (b3 >>> 0 > (c2[2892] | 0) >>> 0)
              c2[2892] = b3;
            j3 = c2[2789] | 0;
            do
              if (j3) {
                b3 = 11580;
                while (1) {
                  a3 = c2[b3 >> 2] | 0;
                  d3 = b3 + 4 | 0;
                  e2 = c2[d3 >> 2] | 0;
                  if ((g3 | 0) == (a3 + e2 | 0)) {
                    v3 = 145;
                    break;
                  }
                  f3 = c2[b3 + 8 >> 2] | 0;
                  if (!f3)
                    break;
                  else
                    b3 = f3;
                }
                if (((v3 | 0) == 145 ? (c2[b3 + 12 >> 2] & 8 | 0) == 0 : 0) ? j3 >>> 0 < g3 >>> 0 & j3 >>> 0 >= a3 >>> 0 : 0) {
                  c2[d3 >> 2] = e2 + h3;
                  w3 = j3 + 8 | 0;
                  w3 = (w3 & 7 | 0) == 0 ? 0 : 0 - w3 & 7;
                  v3 = j3 + w3 | 0;
                  w3 = (c2[2786] | 0) + (h3 - w3) | 0;
                  c2[2789] = v3;
                  c2[2786] = w3;
                  c2[v3 + 4 >> 2] = w3 | 1;
                  c2[v3 + w3 + 4 >> 2] = 40;
                  c2[2790] = c2[2905];
                  break;
                }
                if (g3 >>> 0 < (c2[2787] | 0) >>> 0)
                  c2[2787] = g3;
                d3 = g3 + h3 | 0;
                b3 = 11580;
                while (1) {
                  if ((c2[b3 >> 2] | 0) == (d3 | 0)) {
                    v3 = 153;
                    break;
                  }
                  a3 = c2[b3 + 8 >> 2] | 0;
                  if (!a3)
                    break;
                  else
                    b3 = a3;
                }
                if ((v3 | 0) == 153 ? (c2[b3 + 12 >> 2] & 8 | 0) == 0 : 0) {
                  c2[b3 >> 2] = g3;
                  m3 = b3 + 4 | 0;
                  c2[m3 >> 2] = (c2[m3 >> 2] | 0) + h3;
                  m3 = g3 + 8 | 0;
                  m3 = g3 + ((m3 & 7 | 0) == 0 ? 0 : 0 - m3 & 7) | 0;
                  b3 = d3 + 8 | 0;
                  b3 = d3 + ((b3 & 7 | 0) == 0 ? 0 : 0 - b3 & 7) | 0;
                  k3 = m3 + n3 | 0;
                  i4 = b3 - m3 - n3 | 0;
                  c2[m3 + 4 >> 2] = n3 | 3;
                  do
                    if ((b3 | 0) != (j3 | 0)) {
                      if ((b3 | 0) == (c2[2788] | 0)) {
                        w3 = (c2[2785] | 0) + i4 | 0;
                        c2[2785] = w3;
                        c2[2788] = k3;
                        c2[k3 + 4 >> 2] = w3 | 1;
                        c2[k3 + w3 >> 2] = w3;
                        break;
                      }
                      a3 = c2[b3 + 4 >> 2] | 0;
                      if ((a3 & 3 | 0) == 1) {
                        h3 = a3 & -8;
                        e2 = a3 >>> 3;
                        d:
                          do
                            if (a3 >>> 0 < 256) {
                              a3 = c2[b3 + 8 >> 2] | 0;
                              d3 = c2[b3 + 12 >> 2] | 0;
                              if ((d3 | 0) == (a3 | 0)) {
                                c2[2783] = c2[2783] & ~(1 << e2);
                                break;
                              } else {
                                c2[a3 + 12 >> 2] = d3;
                                c2[d3 + 8 >> 2] = a3;
                                break;
                              }
                            } else {
                              g3 = c2[b3 + 24 >> 2] | 0;
                              a3 = c2[b3 + 12 >> 2] | 0;
                              do
                                if ((a3 | 0) == (b3 | 0)) {
                                  e2 = b3 + 16 | 0;
                                  d3 = e2 + 4 | 0;
                                  a3 = c2[d3 >> 2] | 0;
                                  if (!a3) {
                                    a3 = c2[e2 >> 2] | 0;
                                    if (!a3) {
                                      a3 = 0;
                                      break;
                                    } else
                                      d3 = e2;
                                  }
                                  while (1) {
                                    e2 = a3 + 20 | 0;
                                    f3 = c2[e2 >> 2] | 0;
                                    if (f3 | 0) {
                                      a3 = f3;
                                      d3 = e2;
                                      continue;
                                    }
                                    e2 = a3 + 16 | 0;
                                    f3 = c2[e2 >> 2] | 0;
                                    if (!f3)
                                      break;
                                    else {
                                      a3 = f3;
                                      d3 = e2;
                                    }
                                  }
                                  c2[d3 >> 2] = 0;
                                } else {
                                  w3 = c2[b3 + 8 >> 2] | 0;
                                  c2[w3 + 12 >> 2] = a3;
                                  c2[a3 + 8 >> 2] = w3;
                                }
                              while (0);
                              if (!g3)
                                break;
                              d3 = c2[b3 + 28 >> 2] | 0;
                              e2 = 11436 + (d3 << 2) | 0;
                              do
                                if ((b3 | 0) != (c2[e2 >> 2] | 0)) {
                                  c2[g3 + 16 + (((c2[g3 + 16 >> 2] | 0) != (b3 | 0) & 1) << 2) >> 2] = a3;
                                  if (!a3)
                                    break d;
                                } else {
                                  c2[e2 >> 2] = a3;
                                  if (a3 | 0)
                                    break;
                                  c2[2784] = c2[2784] & ~(1 << d3);
                                  break d;
                                }
                              while (0);
                              c2[a3 + 24 >> 2] = g3;
                              d3 = b3 + 16 | 0;
                              e2 = c2[d3 >> 2] | 0;
                              if (e2 | 0) {
                                c2[a3 + 16 >> 2] = e2;
                                c2[e2 + 24 >> 2] = a3;
                              }
                              d3 = c2[d3 + 4 >> 2] | 0;
                              if (!d3)
                                break;
                              c2[a3 + 20 >> 2] = d3;
                              c2[d3 + 24 >> 2] = a3;
                            }
                          while (0);
                        b3 = b3 + h3 | 0;
                        f3 = h3 + i4 | 0;
                      } else
                        f3 = i4;
                      b3 = b3 + 4 | 0;
                      c2[b3 >> 2] = c2[b3 >> 2] & -2;
                      c2[k3 + 4 >> 2] = f3 | 1;
                      c2[k3 + f3 >> 2] = f3;
                      b3 = f3 >>> 3;
                      if (f3 >>> 0 < 256) {
                        d3 = 11172 + (b3 << 1 << 2) | 0;
                        a3 = c2[2783] | 0;
                        b3 = 1 << b3;
                        if (!(a3 & b3)) {
                          c2[2783] = a3 | b3;
                          b3 = d3;
                          a3 = d3 + 8 | 0;
                        } else {
                          a3 = d3 + 8 | 0;
                          b3 = c2[a3 >> 2] | 0;
                        }
                        c2[a3 >> 2] = k3;
                        c2[b3 + 12 >> 2] = k3;
                        c2[k3 + 8 >> 2] = b3;
                        c2[k3 + 12 >> 2] = d3;
                        break;
                      }
                      b3 = f3 >>> 8;
                      do
                        if (!b3)
                          b3 = 0;
                        else {
                          if (f3 >>> 0 > 16777215) {
                            b3 = 31;
                            break;
                          }
                          v3 = (b3 + 1048320 | 0) >>> 16 & 8;
                          w3 = b3 << v3;
                          u3 = (w3 + 520192 | 0) >>> 16 & 4;
                          w3 = w3 << u3;
                          b3 = (w3 + 245760 | 0) >>> 16 & 2;
                          b3 = 14 - (u3 | v3 | b3) + (w3 << b3 >>> 15) | 0;
                          b3 = f3 >>> (b3 + 7 | 0) & 1 | b3 << 1;
                        }
                      while (0);
                      e2 = 11436 + (b3 << 2) | 0;
                      c2[k3 + 28 >> 2] = b3;
                      a3 = k3 + 16 | 0;
                      c2[a3 + 4 >> 2] = 0;
                      c2[a3 >> 2] = 0;
                      a3 = c2[2784] | 0;
                      d3 = 1 << b3;
                      if (!(a3 & d3)) {
                        c2[2784] = a3 | d3;
                        c2[e2 >> 2] = k3;
                        c2[k3 + 24 >> 2] = e2;
                        c2[k3 + 12 >> 2] = k3;
                        c2[k3 + 8 >> 2] = k3;
                        break;
                      }
                      a3 = f3 << ((b3 | 0) == 31 ? 0 : 25 - (b3 >>> 1) | 0);
                      d3 = c2[e2 >> 2] | 0;
                      while (1) {
                        if ((c2[d3 + 4 >> 2] & -8 | 0) == (f3 | 0)) {
                          v3 = 194;
                          break;
                        }
                        e2 = d3 + 16 + (a3 >>> 31 << 2) | 0;
                        b3 = c2[e2 >> 2] | 0;
                        if (!b3) {
                          v3 = 193;
                          break;
                        } else {
                          a3 = a3 << 1;
                          d3 = b3;
                        }
                      }
                      if ((v3 | 0) == 193) {
                        c2[e2 >> 2] = k3;
                        c2[k3 + 24 >> 2] = d3;
                        c2[k3 + 12 >> 2] = k3;
                        c2[k3 + 8 >> 2] = k3;
                        break;
                      } else if ((v3 | 0) == 194) {
                        v3 = d3 + 8 | 0;
                        w3 = c2[v3 >> 2] | 0;
                        c2[w3 + 12 >> 2] = k3;
                        c2[v3 >> 2] = k3;
                        c2[k3 + 8 >> 2] = w3;
                        c2[k3 + 12 >> 2] = d3;
                        c2[k3 + 24 >> 2] = 0;
                        break;
                      }
                    } else {
                      w3 = (c2[2786] | 0) + i4 | 0;
                      c2[2786] = w3;
                      c2[2789] = k3;
                      c2[k3 + 4 >> 2] = w3 | 1;
                    }
                  while (0);
                  w3 = m3 + 8 | 0;
                  l2 = x3;
                  return w3 | 0;
                }
                b3 = 11580;
                while (1) {
                  a3 = c2[b3 >> 2] | 0;
                  if (a3 >>> 0 <= j3 >>> 0 ? (w3 = a3 + (c2[b3 + 4 >> 2] | 0) | 0, w3 >>> 0 > j3 >>> 0) : 0)
                    break;
                  b3 = c2[b3 + 8 >> 2] | 0;
                }
                f3 = w3 + -47 | 0;
                a3 = f3 + 8 | 0;
                a3 = f3 + ((a3 & 7 | 0) == 0 ? 0 : 0 - a3 & 7) | 0;
                f3 = j3 + 16 | 0;
                a3 = a3 >>> 0 < f3 >>> 0 ? j3 : a3;
                b3 = a3 + 8 | 0;
                d3 = g3 + 8 | 0;
                d3 = (d3 & 7 | 0) == 0 ? 0 : 0 - d3 & 7;
                v3 = g3 + d3 | 0;
                d3 = h3 + -40 - d3 | 0;
                c2[2789] = v3;
                c2[2786] = d3;
                c2[v3 + 4 >> 2] = d3 | 1;
                c2[v3 + d3 + 4 >> 2] = 40;
                c2[2790] = c2[2905];
                d3 = a3 + 4 | 0;
                c2[d3 >> 2] = 27;
                c2[b3 >> 2] = c2[2895];
                c2[b3 + 4 >> 2] = c2[2896];
                c2[b3 + 8 >> 2] = c2[2897];
                c2[b3 + 12 >> 2] = c2[2898];
                c2[2895] = g3;
                c2[2896] = h3;
                c2[2898] = 0;
                c2[2897] = b3;
                b3 = a3 + 24 | 0;
                do {
                  v3 = b3;
                  b3 = b3 + 4 | 0;
                  c2[b3 >> 2] = 7;
                } while ((v3 + 8 | 0) >>> 0 < w3 >>> 0);
                if ((a3 | 0) != (j3 | 0)) {
                  g3 = a3 - j3 | 0;
                  c2[d3 >> 2] = c2[d3 >> 2] & -2;
                  c2[j3 + 4 >> 2] = g3 | 1;
                  c2[a3 >> 2] = g3;
                  b3 = g3 >>> 3;
                  if (g3 >>> 0 < 256) {
                    d3 = 11172 + (b3 << 1 << 2) | 0;
                    a3 = c2[2783] | 0;
                    b3 = 1 << b3;
                    if (!(a3 & b3)) {
                      c2[2783] = a3 | b3;
                      b3 = d3;
                      a3 = d3 + 8 | 0;
                    } else {
                      a3 = d3 + 8 | 0;
                      b3 = c2[a3 >> 2] | 0;
                    }
                    c2[a3 >> 2] = j3;
                    c2[b3 + 12 >> 2] = j3;
                    c2[j3 + 8 >> 2] = b3;
                    c2[j3 + 12 >> 2] = d3;
                    break;
                  }
                  b3 = g3 >>> 8;
                  if (b3) {
                    if (g3 >>> 0 > 16777215)
                      d3 = 31;
                    else {
                      v3 = (b3 + 1048320 | 0) >>> 16 & 8;
                      w3 = b3 << v3;
                      u3 = (w3 + 520192 | 0) >>> 16 & 4;
                      w3 = w3 << u3;
                      d3 = (w3 + 245760 | 0) >>> 16 & 2;
                      d3 = 14 - (u3 | v3 | d3) + (w3 << d3 >>> 15) | 0;
                      d3 = g3 >>> (d3 + 7 | 0) & 1 | d3 << 1;
                    }
                  } else
                    d3 = 0;
                  e2 = 11436 + (d3 << 2) | 0;
                  c2[j3 + 28 >> 2] = d3;
                  c2[j3 + 20 >> 2] = 0;
                  c2[f3 >> 2] = 0;
                  b3 = c2[2784] | 0;
                  a3 = 1 << d3;
                  if (!(b3 & a3)) {
                    c2[2784] = b3 | a3;
                    c2[e2 >> 2] = j3;
                    c2[j3 + 24 >> 2] = e2;
                    c2[j3 + 12 >> 2] = j3;
                    c2[j3 + 8 >> 2] = j3;
                    break;
                  }
                  a3 = g3 << ((d3 | 0) == 31 ? 0 : 25 - (d3 >>> 1) | 0);
                  d3 = c2[e2 >> 2] | 0;
                  while (1) {
                    if ((c2[d3 + 4 >> 2] & -8 | 0) == (g3 | 0)) {
                      v3 = 216;
                      break;
                    }
                    e2 = d3 + 16 + (a3 >>> 31 << 2) | 0;
                    b3 = c2[e2 >> 2] | 0;
                    if (!b3) {
                      v3 = 215;
                      break;
                    } else {
                      a3 = a3 << 1;
                      d3 = b3;
                    }
                  }
                  if ((v3 | 0) == 215) {
                    c2[e2 >> 2] = j3;
                    c2[j3 + 24 >> 2] = d3;
                    c2[j3 + 12 >> 2] = j3;
                    c2[j3 + 8 >> 2] = j3;
                    break;
                  } else if ((v3 | 0) == 216) {
                    v3 = d3 + 8 | 0;
                    w3 = c2[v3 >> 2] | 0;
                    c2[w3 + 12 >> 2] = j3;
                    c2[v3 >> 2] = j3;
                    c2[j3 + 8 >> 2] = w3;
                    c2[j3 + 12 >> 2] = d3;
                    c2[j3 + 24 >> 2] = 0;
                    break;
                  }
                }
              } else {
                w3 = c2[2787] | 0;
                if ((w3 | 0) == 0 | g3 >>> 0 < w3 >>> 0)
                  c2[2787] = g3;
                c2[2895] = g3;
                c2[2896] = h3;
                c2[2898] = 0;
                c2[2792] = c2[2901];
                c2[2791] = -1;
                b3 = 0;
                do {
                  w3 = 11172 + (b3 << 1 << 2) | 0;
                  c2[w3 + 12 >> 2] = w3;
                  c2[w3 + 8 >> 2] = w3;
                  b3 = b3 + 1 | 0;
                } while ((b3 | 0) != 32);
                w3 = g3 + 8 | 0;
                w3 = (w3 & 7 | 0) == 0 ? 0 : 0 - w3 & 7;
                v3 = g3 + w3 | 0;
                w3 = h3 + -40 - w3 | 0;
                c2[2789] = v3;
                c2[2786] = w3;
                c2[v3 + 4 >> 2] = w3 | 1;
                c2[v3 + w3 + 4 >> 2] = 40;
                c2[2790] = c2[2905];
              }
            while (0);
            b3 = c2[2786] | 0;
            if (b3 >>> 0 > n3 >>> 0) {
              u3 = b3 - n3 | 0;
              c2[2786] = u3;
              w3 = c2[2789] | 0;
              v3 = w3 + n3 | 0;
              c2[2789] = v3;
              c2[v3 + 4 >> 2] = u3 | 1;
              c2[w3 + 4 >> 2] = n3 | 3;
              w3 = w3 + 8 | 0;
              l2 = x3;
              return w3 | 0;
            }
          }
          c2[(vB() | 0) >> 2] = 12;
          w3 = 0;
          l2 = x3;
          return w3 | 0;
        }
        function pB(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0, e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          if (!a3)
            return;
          d3 = a3 + -8 | 0;
          f3 = c2[2787] | 0;
          a3 = c2[a3 + -4 >> 2] | 0;
          b3 = a3 & -8;
          j3 = d3 + b3 | 0;
          do
            if (!(a3 & 1)) {
              e2 = c2[d3 >> 2] | 0;
              if (!(a3 & 3))
                return;
              h3 = d3 + (0 - e2) | 0;
              g3 = e2 + b3 | 0;
              if (h3 >>> 0 < f3 >>> 0)
                return;
              if ((h3 | 0) == (c2[2788] | 0)) {
                a3 = j3 + 4 | 0;
                b3 = c2[a3 >> 2] | 0;
                if ((b3 & 3 | 0) != 3) {
                  i4 = h3;
                  b3 = g3;
                  break;
                }
                c2[2785] = g3;
                c2[a3 >> 2] = b3 & -2;
                c2[h3 + 4 >> 2] = g3 | 1;
                c2[h3 + g3 >> 2] = g3;
                return;
              }
              d3 = e2 >>> 3;
              if (e2 >>> 0 < 256) {
                a3 = c2[h3 + 8 >> 2] | 0;
                b3 = c2[h3 + 12 >> 2] | 0;
                if ((b3 | 0) == (a3 | 0)) {
                  c2[2783] = c2[2783] & ~(1 << d3);
                  i4 = h3;
                  b3 = g3;
                  break;
                } else {
                  c2[a3 + 12 >> 2] = b3;
                  c2[b3 + 8 >> 2] = a3;
                  i4 = h3;
                  b3 = g3;
                  break;
                }
              }
              f3 = c2[h3 + 24 >> 2] | 0;
              a3 = c2[h3 + 12 >> 2] | 0;
              do
                if ((a3 | 0) == (h3 | 0)) {
                  d3 = h3 + 16 | 0;
                  b3 = d3 + 4 | 0;
                  a3 = c2[b3 >> 2] | 0;
                  if (!a3) {
                    a3 = c2[d3 >> 2] | 0;
                    if (!a3) {
                      a3 = 0;
                      break;
                    } else
                      b3 = d3;
                  }
                  while (1) {
                    d3 = a3 + 20 | 0;
                    e2 = c2[d3 >> 2] | 0;
                    if (e2 | 0) {
                      a3 = e2;
                      b3 = d3;
                      continue;
                    }
                    d3 = a3 + 16 | 0;
                    e2 = c2[d3 >> 2] | 0;
                    if (!e2)
                      break;
                    else {
                      a3 = e2;
                      b3 = d3;
                    }
                  }
                  c2[b3 >> 2] = 0;
                } else {
                  i4 = c2[h3 + 8 >> 2] | 0;
                  c2[i4 + 12 >> 2] = a3;
                  c2[a3 + 8 >> 2] = i4;
                }
              while (0);
              if (f3) {
                b3 = c2[h3 + 28 >> 2] | 0;
                d3 = 11436 + (b3 << 2) | 0;
                if ((h3 | 0) == (c2[d3 >> 2] | 0)) {
                  c2[d3 >> 2] = a3;
                  if (!a3) {
                    c2[2784] = c2[2784] & ~(1 << b3);
                    i4 = h3;
                    b3 = g3;
                    break;
                  }
                } else {
                  c2[f3 + 16 + (((c2[f3 + 16 >> 2] | 0) != (h3 | 0) & 1) << 2) >> 2] = a3;
                  if (!a3) {
                    i4 = h3;
                    b3 = g3;
                    break;
                  }
                }
                c2[a3 + 24 >> 2] = f3;
                b3 = h3 + 16 | 0;
                d3 = c2[b3 >> 2] | 0;
                if (d3 | 0) {
                  c2[a3 + 16 >> 2] = d3;
                  c2[d3 + 24 >> 2] = a3;
                }
                b3 = c2[b3 + 4 >> 2] | 0;
                if (b3) {
                  c2[a3 + 20 >> 2] = b3;
                  c2[b3 + 24 >> 2] = a3;
                  i4 = h3;
                  b3 = g3;
                } else {
                  i4 = h3;
                  b3 = g3;
                }
              } else {
                i4 = h3;
                b3 = g3;
              }
            } else {
              i4 = d3;
              h3 = d3;
            }
          while (0);
          if (h3 >>> 0 >= j3 >>> 0)
            return;
          a3 = j3 + 4 | 0;
          e2 = c2[a3 >> 2] | 0;
          if (!(e2 & 1))
            return;
          if (!(e2 & 2)) {
            a3 = c2[2788] | 0;
            if ((j3 | 0) == (c2[2789] | 0)) {
              j3 = (c2[2786] | 0) + b3 | 0;
              c2[2786] = j3;
              c2[2789] = i4;
              c2[i4 + 4 >> 2] = j3 | 1;
              if ((i4 | 0) != (a3 | 0))
                return;
              c2[2788] = 0;
              c2[2785] = 0;
              return;
            }
            if ((j3 | 0) == (a3 | 0)) {
              j3 = (c2[2785] | 0) + b3 | 0;
              c2[2785] = j3;
              c2[2788] = h3;
              c2[i4 + 4 >> 2] = j3 | 1;
              c2[h3 + j3 >> 2] = j3;
              return;
            }
            f3 = (e2 & -8) + b3 | 0;
            d3 = e2 >>> 3;
            do
              if (e2 >>> 0 < 256) {
                b3 = c2[j3 + 8 >> 2] | 0;
                a3 = c2[j3 + 12 >> 2] | 0;
                if ((a3 | 0) == (b3 | 0)) {
                  c2[2783] = c2[2783] & ~(1 << d3);
                  break;
                } else {
                  c2[b3 + 12 >> 2] = a3;
                  c2[a3 + 8 >> 2] = b3;
                  break;
                }
              } else {
                g3 = c2[j3 + 24 >> 2] | 0;
                a3 = c2[j3 + 12 >> 2] | 0;
                do
                  if ((a3 | 0) == (j3 | 0)) {
                    d3 = j3 + 16 | 0;
                    b3 = d3 + 4 | 0;
                    a3 = c2[b3 >> 2] | 0;
                    if (!a3) {
                      a3 = c2[d3 >> 2] | 0;
                      if (!a3) {
                        d3 = 0;
                        break;
                      } else
                        b3 = d3;
                    }
                    while (1) {
                      d3 = a3 + 20 | 0;
                      e2 = c2[d3 >> 2] | 0;
                      if (e2 | 0) {
                        a3 = e2;
                        b3 = d3;
                        continue;
                      }
                      d3 = a3 + 16 | 0;
                      e2 = c2[d3 >> 2] | 0;
                      if (!e2)
                        break;
                      else {
                        a3 = e2;
                        b3 = d3;
                      }
                    }
                    c2[b3 >> 2] = 0;
                    d3 = a3;
                  } else {
                    d3 = c2[j3 + 8 >> 2] | 0;
                    c2[d3 + 12 >> 2] = a3;
                    c2[a3 + 8 >> 2] = d3;
                    d3 = a3;
                  }
                while (0);
                if (g3 | 0) {
                  a3 = c2[j3 + 28 >> 2] | 0;
                  b3 = 11436 + (a3 << 2) | 0;
                  if ((j3 | 0) == (c2[b3 >> 2] | 0)) {
                    c2[b3 >> 2] = d3;
                    if (!d3) {
                      c2[2784] = c2[2784] & ~(1 << a3);
                      break;
                    }
                  } else {
                    c2[g3 + 16 + (((c2[g3 + 16 >> 2] | 0) != (j3 | 0) & 1) << 2) >> 2] = d3;
                    if (!d3)
                      break;
                  }
                  c2[d3 + 24 >> 2] = g3;
                  a3 = j3 + 16 | 0;
                  b3 = c2[a3 >> 2] | 0;
                  if (b3 | 0) {
                    c2[d3 + 16 >> 2] = b3;
                    c2[b3 + 24 >> 2] = d3;
                  }
                  a3 = c2[a3 + 4 >> 2] | 0;
                  if (a3 | 0) {
                    c2[d3 + 20 >> 2] = a3;
                    c2[a3 + 24 >> 2] = d3;
                  }
                }
              }
            while (0);
            c2[i4 + 4 >> 2] = f3 | 1;
            c2[h3 + f3 >> 2] = f3;
            if ((i4 | 0) == (c2[2788] | 0)) {
              c2[2785] = f3;
              return;
            }
          } else {
            c2[a3 >> 2] = e2 & -2;
            c2[i4 + 4 >> 2] = b3 | 1;
            c2[h3 + b3 >> 2] = b3;
            f3 = b3;
          }
          a3 = f3 >>> 3;
          if (f3 >>> 0 < 256) {
            d3 = 11172 + (a3 << 1 << 2) | 0;
            b3 = c2[2783] | 0;
            a3 = 1 << a3;
            if (!(b3 & a3)) {
              c2[2783] = b3 | a3;
              a3 = d3;
              b3 = d3 + 8 | 0;
            } else {
              b3 = d3 + 8 | 0;
              a3 = c2[b3 >> 2] | 0;
            }
            c2[b3 >> 2] = i4;
            c2[a3 + 12 >> 2] = i4;
            c2[i4 + 8 >> 2] = a3;
            c2[i4 + 12 >> 2] = d3;
            return;
          }
          a3 = f3 >>> 8;
          if (a3) {
            if (f3 >>> 0 > 16777215)
              a3 = 31;
            else {
              h3 = (a3 + 1048320 | 0) >>> 16 & 8;
              j3 = a3 << h3;
              g3 = (j3 + 520192 | 0) >>> 16 & 4;
              j3 = j3 << g3;
              a3 = (j3 + 245760 | 0) >>> 16 & 2;
              a3 = 14 - (g3 | h3 | a3) + (j3 << a3 >>> 15) | 0;
              a3 = f3 >>> (a3 + 7 | 0) & 1 | a3 << 1;
            }
          } else
            a3 = 0;
          e2 = 11436 + (a3 << 2) | 0;
          c2[i4 + 28 >> 2] = a3;
          c2[i4 + 20 >> 2] = 0;
          c2[i4 + 16 >> 2] = 0;
          b3 = c2[2784] | 0;
          d3 = 1 << a3;
          do
            if (b3 & d3) {
              b3 = f3 << ((a3 | 0) == 31 ? 0 : 25 - (a3 >>> 1) | 0);
              d3 = c2[e2 >> 2] | 0;
              while (1) {
                if ((c2[d3 + 4 >> 2] & -8 | 0) == (f3 | 0)) {
                  a3 = 73;
                  break;
                }
                e2 = d3 + 16 + (b3 >>> 31 << 2) | 0;
                a3 = c2[e2 >> 2] | 0;
                if (!a3) {
                  a3 = 72;
                  break;
                } else {
                  b3 = b3 << 1;
                  d3 = a3;
                }
              }
              if ((a3 | 0) == 72) {
                c2[e2 >> 2] = i4;
                c2[i4 + 24 >> 2] = d3;
                c2[i4 + 12 >> 2] = i4;
                c2[i4 + 8 >> 2] = i4;
                break;
              } else if ((a3 | 0) == 73) {
                h3 = d3 + 8 | 0;
                j3 = c2[h3 >> 2] | 0;
                c2[j3 + 12 >> 2] = i4;
                c2[h3 >> 2] = i4;
                c2[i4 + 8 >> 2] = j3;
                c2[i4 + 12 >> 2] = d3;
                c2[i4 + 24 >> 2] = 0;
                break;
              }
            } else {
              c2[2784] = b3 | d3;
              c2[e2 >> 2] = i4;
              c2[i4 + 24 >> 2] = e2;
              c2[i4 + 12 >> 2] = i4;
              c2[i4 + 8 >> 2] = i4;
            }
          while (0);
          j3 = (c2[2791] | 0) + -1 | 0;
          c2[2791] = j3;
          if (!j3)
            a3 = 11588;
          else
            return;
          while (1) {
            a3 = c2[a3 >> 2] | 0;
            if (!a3)
              break;
            else
              a3 = a3 + 8 | 0;
          }
          c2[2791] = -1;
          return;
        }
        function qB() {
          return 11628;
        }
        function rB(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0;
          b3 = l2;
          l2 = l2 + 16 | 0;
          d3 = b3;
          c2[d3 >> 2] = yB(c2[a3 + 60 >> 2] | 0) | 0;
          a3 = uB(db(6, d3 | 0) | 0) | 0;
          l2 = b3;
          return a3 | 0;
        }
        function sB(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0;
          n3 = l2;
          l2 = l2 + 48 | 0;
          k3 = n3 + 16 | 0;
          g3 = n3;
          f3 = n3 + 32 | 0;
          i4 = a3 + 28 | 0;
          e2 = c2[i4 >> 2] | 0;
          c2[f3 >> 2] = e2;
          j3 = a3 + 20 | 0;
          e2 = (c2[j3 >> 2] | 0) - e2 | 0;
          c2[f3 + 4 >> 2] = e2;
          c2[f3 + 8 >> 2] = b3;
          c2[f3 + 12 >> 2] = d3;
          e2 = e2 + d3 | 0;
          h3 = a3 + 60 | 0;
          c2[g3 >> 2] = c2[h3 >> 2];
          c2[g3 + 4 >> 2] = f3;
          c2[g3 + 8 >> 2] = 2;
          g3 = uB(gb(146, g3 | 0) | 0) | 0;
          a:
            do
              if ((e2 | 0) != (g3 | 0)) {
                b3 = 2;
                while (1) {
                  if ((g3 | 0) < 0)
                    break;
                  e2 = e2 - g3 | 0;
                  p3 = c2[f3 + 4 >> 2] | 0;
                  o3 = g3 >>> 0 > p3 >>> 0;
                  f3 = o3 ? f3 + 8 | 0 : f3;
                  b3 = (o3 << 31 >> 31) + b3 | 0;
                  p3 = g3 - (o3 ? p3 : 0) | 0;
                  c2[f3 >> 2] = (c2[f3 >> 2] | 0) + p3;
                  o3 = f3 + 4 | 0;
                  c2[o3 >> 2] = (c2[o3 >> 2] | 0) - p3;
                  c2[k3 >> 2] = c2[h3 >> 2];
                  c2[k3 + 4 >> 2] = f3;
                  c2[k3 + 8 >> 2] = b3;
                  g3 = uB(gb(146, k3 | 0) | 0) | 0;
                  if ((e2 | 0) == (g3 | 0)) {
                    m3 = 3;
                    break a;
                  }
                }
                c2[a3 + 16 >> 2] = 0;
                c2[i4 >> 2] = 0;
                c2[j3 >> 2] = 0;
                c2[a3 >> 2] = c2[a3 >> 2] | 32;
                if ((b3 | 0) == 2)
                  d3 = 0;
                else
                  d3 = d3 - (c2[f3 + 4 >> 2] | 0) | 0;
              } else
                m3 = 3;
            while (0);
          if ((m3 | 0) == 3) {
            p3 = c2[a3 + 44 >> 2] | 0;
            c2[a3 + 16 >> 2] = p3 + (c2[a3 + 48 >> 2] | 0);
            c2[i4 >> 2] = p3;
            c2[j3 >> 2] = p3;
          }
          l2 = n3;
          return d3 | 0;
        }
        function tB(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0;
          f3 = l2;
          l2 = l2 + 32 | 0;
          g3 = f3;
          e2 = f3 + 20 | 0;
          c2[g3 >> 2] = c2[a3 + 60 >> 2];
          c2[g3 + 4 >> 2] = 0;
          c2[g3 + 8 >> 2] = b3;
          c2[g3 + 12 >> 2] = e2;
          c2[g3 + 16 >> 2] = d3;
          if ((uB(fb(140, g3 | 0) | 0) | 0) < 0) {
            c2[e2 >> 2] = -1;
            a3 = -1;
          } else
            a3 = c2[e2 >> 2] | 0;
          l2 = f3;
          return a3 | 0;
        }
        function uB(a3) {
          a3 = a3 | 0;
          if (a3 >>> 0 > 4294963200) {
            c2[(vB() | 0) >> 2] = 0 - a3;
            a3 = -1;
          }
          return a3 | 0;
        }
        function vB() {
          return (wB() | 0) + 64 | 0;
        }
        function wB() {
          return xB() | 0;
        }
        function xB() {
          return 2084;
        }
        function yB(a3) {
          a3 = a3 | 0;
          return a3 | 0;
        }
        function zB(b3, d3, e2) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = l2;
          l2 = l2 + 32 | 0;
          f3 = g3;
          c2[b3 + 36 >> 2] = 1;
          if ((c2[b3 >> 2] & 64 | 0) == 0 ? (c2[f3 >> 2] = c2[b3 + 60 >> 2], c2[f3 + 4 >> 2] = 21523, c2[f3 + 8 >> 2] = g3 + 16, Wa(54, f3 | 0) | 0) : 0)
            a2[b3 + 75 >> 0] = -1;
          f3 = sB(b3, d3, e2) | 0;
          l2 = g3;
          return f3 | 0;
        }
        function AB(b3, c3) {
          b3 = b3 | 0;
          c3 = c3 | 0;
          var d3 = 0, e2 = 0;
          d3 = a2[b3 >> 0] | 0;
          e2 = a2[c3 >> 0] | 0;
          if (d3 << 24 >> 24 == 0 ? 1 : d3 << 24 >> 24 != e2 << 24 >> 24)
            b3 = e2;
          else {
            do {
              b3 = b3 + 1 | 0;
              c3 = c3 + 1 | 0;
              d3 = a2[b3 >> 0] | 0;
              e2 = a2[c3 >> 0] | 0;
            } while (!(d3 << 24 >> 24 == 0 ? 1 : d3 << 24 >> 24 != e2 << 24 >> 24));
            b3 = e2;
          }
          return (d3 & 255) - (b3 & 255) | 0;
        }
        function BB(b3, c3, d3) {
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0;
          a:
            do
              if (!d3)
                b3 = 0;
              else {
                while (1) {
                  e2 = a2[b3 >> 0] | 0;
                  f3 = a2[c3 >> 0] | 0;
                  if (e2 << 24 >> 24 != f3 << 24 >> 24)
                    break;
                  d3 = d3 + -1 | 0;
                  if (!d3) {
                    b3 = 0;
                    break a;
                  } else {
                    b3 = b3 + 1 | 0;
                    c3 = c3 + 1 | 0;
                  }
                }
                b3 = (e2 & 255) - (f3 & 255) | 0;
              }
            while (0);
          return b3 | 0;
        }
        function CB(b3, d3, e2) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0;
          s3 = l2;
          l2 = l2 + 224 | 0;
          n3 = s3 + 120 | 0;
          o3 = s3 + 80 | 0;
          q3 = s3;
          r3 = s3 + 136 | 0;
          f3 = o3;
          g3 = f3 + 40 | 0;
          do {
            c2[f3 >> 2] = 0;
            f3 = f3 + 4 | 0;
          } while ((f3 | 0) < (g3 | 0));
          c2[n3 >> 2] = c2[e2 >> 2];
          if ((DB(0, d3, n3, q3, o3) | 0) < 0)
            e2 = -1;
          else {
            if ((c2[b3 + 76 >> 2] | 0) > -1)
              p3 = EB(b3) | 0;
            else
              p3 = 0;
            e2 = c2[b3 >> 2] | 0;
            m3 = e2 & 32;
            if ((a2[b3 + 74 >> 0] | 0) < 1)
              c2[b3 >> 2] = e2 & -33;
            f3 = b3 + 48 | 0;
            if (!(c2[f3 >> 2] | 0)) {
              g3 = b3 + 44 | 0;
              h3 = c2[g3 >> 2] | 0;
              c2[g3 >> 2] = r3;
              i4 = b3 + 28 | 0;
              c2[i4 >> 2] = r3;
              j3 = b3 + 20 | 0;
              c2[j3 >> 2] = r3;
              c2[f3 >> 2] = 80;
              k3 = b3 + 16 | 0;
              c2[k3 >> 2] = r3 + 80;
              e2 = DB(b3, d3, n3, q3, o3) | 0;
              if (h3) {
                sb[c2[b3 + 36 >> 2] & 7](b3, 0, 0) | 0;
                e2 = (c2[j3 >> 2] | 0) == 0 ? -1 : e2;
                c2[g3 >> 2] = h3;
                c2[f3 >> 2] = 0;
                c2[k3 >> 2] = 0;
                c2[i4 >> 2] = 0;
                c2[j3 >> 2] = 0;
              }
            } else
              e2 = DB(b3, d3, n3, q3, o3) | 0;
            f3 = c2[b3 >> 2] | 0;
            c2[b3 >> 2] = f3 | m3;
            if (p3 | 0)
              FB(b3);
            e2 = (f3 & 32 | 0) == 0 ? e2 : -1;
          }
          l2 = s3;
          return e2 | 0;
        }
        function DB(d3, e2, f3, g3, i4) {
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          i4 = i4 | 0;
          var j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w3 = 0, x3 = 0, y3 = 0, z3 = 0, B3 = 0, C3 = 0, D3 = 0, E3 = 0, F3 = 0, G3 = 0, H3 = 0;
          H3 = l2;
          l2 = l2 + 64 | 0;
          D3 = H3 + 16 | 0;
          E3 = H3;
          B3 = H3 + 24 | 0;
          F3 = H3 + 8 | 0;
          G3 = H3 + 20 | 0;
          c2[D3 >> 2] = e2;
          x3 = (d3 | 0) != 0;
          y3 = B3 + 40 | 0;
          z3 = y3;
          B3 = B3 + 39 | 0;
          C3 = F3 + 4 | 0;
          k3 = 0;
          j3 = 0;
          p3 = 0;
          a:
            while (1) {
              do
                if ((j3 | 0) > -1)
                  if ((k3 | 0) > (2147483647 - j3 | 0)) {
                    c2[(vB() | 0) >> 2] = 75;
                    j3 = -1;
                    break;
                  } else {
                    j3 = k3 + j3 | 0;
                    break;
                  }
              while (0);
              k3 = a2[e2 >> 0] | 0;
              if (!(k3 << 24 >> 24)) {
                w3 = 87;
                break;
              } else
                m3 = e2;
              b:
                while (1) {
                  switch (k3 << 24 >> 24) {
                    case 37: {
                      k3 = m3;
                      w3 = 9;
                      break b;
                    }
                    case 0: {
                      k3 = m3;
                      break b;
                    }
                    default: {
                    }
                  }
                  v3 = m3 + 1 | 0;
                  c2[D3 >> 2] = v3;
                  k3 = a2[v3 >> 0] | 0;
                  m3 = v3;
                }
              c:
                do
                  if ((w3 | 0) == 9)
                    while (1) {
                      w3 = 0;
                      if ((a2[m3 + 1 >> 0] | 0) != 37)
                        break c;
                      k3 = k3 + 1 | 0;
                      m3 = m3 + 2 | 0;
                      c2[D3 >> 2] = m3;
                      if ((a2[m3 >> 0] | 0) == 37)
                        w3 = 9;
                      else
                        break;
                    }
                while (0);
              k3 = k3 - e2 | 0;
              if (x3)
                GB(d3, e2, k3);
              if (k3 | 0) {
                e2 = m3;
                continue;
              }
              n3 = m3 + 1 | 0;
              k3 = (a2[n3 >> 0] | 0) + -48 | 0;
              if (k3 >>> 0 < 10) {
                v3 = (a2[m3 + 2 >> 0] | 0) == 36;
                u3 = v3 ? k3 : -1;
                p3 = v3 ? 1 : p3;
                n3 = v3 ? m3 + 3 | 0 : n3;
              } else
                u3 = -1;
              c2[D3 >> 2] = n3;
              k3 = a2[n3 >> 0] | 0;
              m3 = (k3 << 24 >> 24) + -32 | 0;
              d:
                do
                  if (m3 >>> 0 < 32) {
                    o3 = 0;
                    q3 = k3;
                    while (1) {
                      k3 = 1 << m3;
                      if (!(k3 & 75913)) {
                        k3 = q3;
                        break d;
                      }
                      o3 = k3 | o3;
                      n3 = n3 + 1 | 0;
                      c2[D3 >> 2] = n3;
                      k3 = a2[n3 >> 0] | 0;
                      m3 = (k3 << 24 >> 24) + -32 | 0;
                      if (m3 >>> 0 >= 32)
                        break;
                      else
                        q3 = k3;
                    }
                  } else
                    o3 = 0;
                while (0);
              if (k3 << 24 >> 24 == 42) {
                m3 = n3 + 1 | 0;
                k3 = (a2[m3 >> 0] | 0) + -48 | 0;
                if (k3 >>> 0 < 10 ? (a2[n3 + 2 >> 0] | 0) == 36 : 0) {
                  c2[i4 + (k3 << 2) >> 2] = 10;
                  k3 = c2[g3 + ((a2[m3 >> 0] | 0) + -48 << 3) >> 2] | 0;
                  p3 = 1;
                  n3 = n3 + 3 | 0;
                } else {
                  if (p3 | 0) {
                    j3 = -1;
                    break;
                  }
                  if (x3) {
                    p3 = (c2[f3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                    k3 = c2[p3 >> 2] | 0;
                    c2[f3 >> 2] = p3 + 4;
                    p3 = 0;
                    n3 = m3;
                  } else {
                    k3 = 0;
                    p3 = 0;
                    n3 = m3;
                  }
                }
                c2[D3 >> 2] = n3;
                v3 = (k3 | 0) < 0;
                k3 = v3 ? 0 - k3 | 0 : k3;
                o3 = v3 ? o3 | 8192 : o3;
              } else {
                k3 = HB(D3) | 0;
                if ((k3 | 0) < 0) {
                  j3 = -1;
                  break;
                }
                n3 = c2[D3 >> 2] | 0;
              }
              do
                if ((a2[n3 >> 0] | 0) == 46) {
                  if ((a2[n3 + 1 >> 0] | 0) != 42) {
                    c2[D3 >> 2] = n3 + 1;
                    m3 = HB(D3) | 0;
                    n3 = c2[D3 >> 2] | 0;
                    break;
                  }
                  q3 = n3 + 2 | 0;
                  m3 = (a2[q3 >> 0] | 0) + -48 | 0;
                  if (m3 >>> 0 < 10 ? (a2[n3 + 3 >> 0] | 0) == 36 : 0) {
                    c2[i4 + (m3 << 2) >> 2] = 10;
                    m3 = c2[g3 + ((a2[q3 >> 0] | 0) + -48 << 3) >> 2] | 0;
                    n3 = n3 + 4 | 0;
                    c2[D3 >> 2] = n3;
                    break;
                  }
                  if (p3 | 0) {
                    j3 = -1;
                    break a;
                  }
                  if (x3) {
                    v3 = (c2[f3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                    m3 = c2[v3 >> 2] | 0;
                    c2[f3 >> 2] = v3 + 4;
                  } else
                    m3 = 0;
                  c2[D3 >> 2] = q3;
                  n3 = q3;
                } else
                  m3 = -1;
              while (0);
              t3 = 0;
              while (1) {
                if (((a2[n3 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
                  j3 = -1;
                  break a;
                }
                v3 = n3 + 1 | 0;
                c2[D3 >> 2] = v3;
                q3 = a2[(a2[n3 >> 0] | 0) + -65 + (5178 + (t3 * 58 | 0)) >> 0] | 0;
                r3 = q3 & 255;
                if ((r3 + -1 | 0) >>> 0 < 8) {
                  t3 = r3;
                  n3 = v3;
                } else
                  break;
              }
              if (!(q3 << 24 >> 24)) {
                j3 = -1;
                break;
              }
              s3 = (u3 | 0) > -1;
              do
                if (q3 << 24 >> 24 == 19) {
                  if (s3) {
                    j3 = -1;
                    break a;
                  } else
                    w3 = 49;
                } else {
                  if (s3) {
                    c2[i4 + (u3 << 2) >> 2] = r3;
                    s3 = g3 + (u3 << 3) | 0;
                    u3 = c2[s3 + 4 >> 2] | 0;
                    w3 = E3;
                    c2[w3 >> 2] = c2[s3 >> 2];
                    c2[w3 + 4 >> 2] = u3;
                    w3 = 49;
                    break;
                  }
                  if (!x3) {
                    j3 = 0;
                    break a;
                  }
                  IB(E3, r3, f3);
                }
              while (0);
              if ((w3 | 0) == 49 ? (w3 = 0, !x3) : 0) {
                k3 = 0;
                e2 = v3;
                continue;
              }
              n3 = a2[n3 >> 0] | 0;
              n3 = (t3 | 0) != 0 & (n3 & 15 | 0) == 3 ? n3 & -33 : n3;
              s3 = o3 & -65537;
              u3 = (o3 & 8192 | 0) == 0 ? o3 : s3;
              e:
                do
                  switch (n3 | 0) {
                    case 110:
                      switch ((t3 & 255) << 24 >> 24) {
                        case 0: {
                          c2[c2[E3 >> 2] >> 2] = j3;
                          k3 = 0;
                          e2 = v3;
                          continue a;
                        }
                        case 1: {
                          c2[c2[E3 >> 2] >> 2] = j3;
                          k3 = 0;
                          e2 = v3;
                          continue a;
                        }
                        case 2: {
                          k3 = c2[E3 >> 2] | 0;
                          c2[k3 >> 2] = j3;
                          c2[k3 + 4 >> 2] = ((j3 | 0) < 0) << 31 >> 31;
                          k3 = 0;
                          e2 = v3;
                          continue a;
                        }
                        case 3: {
                          b2[c2[E3 >> 2] >> 1] = j3;
                          k3 = 0;
                          e2 = v3;
                          continue a;
                        }
                        case 4: {
                          a2[c2[E3 >> 2] >> 0] = j3;
                          k3 = 0;
                          e2 = v3;
                          continue a;
                        }
                        case 6: {
                          c2[c2[E3 >> 2] >> 2] = j3;
                          k3 = 0;
                          e2 = v3;
                          continue a;
                        }
                        case 7: {
                          k3 = c2[E3 >> 2] | 0;
                          c2[k3 >> 2] = j3;
                          c2[k3 + 4 >> 2] = ((j3 | 0) < 0) << 31 >> 31;
                          k3 = 0;
                          e2 = v3;
                          continue a;
                        }
                        default: {
                          k3 = 0;
                          e2 = v3;
                          continue a;
                        }
                      }
                    case 112: {
                      n3 = 120;
                      m3 = m3 >>> 0 > 8 ? m3 : 8;
                      e2 = u3 | 8;
                      w3 = 61;
                      break;
                    }
                    case 88:
                    case 120: {
                      e2 = u3;
                      w3 = 61;
                      break;
                    }
                    case 111: {
                      n3 = E3;
                      e2 = c2[n3 >> 2] | 0;
                      n3 = c2[n3 + 4 >> 2] | 0;
                      r3 = KB(e2, n3, y3) | 0;
                      s3 = z3 - r3 | 0;
                      o3 = 0;
                      q3 = 5642;
                      m3 = (u3 & 8 | 0) == 0 | (m3 | 0) > (s3 | 0) ? m3 : s3 + 1 | 0;
                      s3 = u3;
                      w3 = 67;
                      break;
                    }
                    case 105:
                    case 100: {
                      n3 = E3;
                      e2 = c2[n3 >> 2] | 0;
                      n3 = c2[n3 + 4 >> 2] | 0;
                      if ((n3 | 0) < 0) {
                        e2 = wC(0, 0, e2 | 0, n3 | 0) | 0;
                        n3 = A2;
                        o3 = E3;
                        c2[o3 >> 2] = e2;
                        c2[o3 + 4 >> 2] = n3;
                        o3 = 1;
                        q3 = 5642;
                        w3 = 66;
                        break e;
                      } else {
                        o3 = (u3 & 2049 | 0) != 0 & 1;
                        q3 = (u3 & 2048 | 0) == 0 ? (u3 & 1 | 0) == 0 ? 5642 : 5644 : 5643;
                        w3 = 66;
                        break e;
                      }
                    }
                    case 117: {
                      n3 = E3;
                      o3 = 0;
                      q3 = 5642;
                      e2 = c2[n3 >> 2] | 0;
                      n3 = c2[n3 + 4 >> 2] | 0;
                      w3 = 66;
                      break;
                    }
                    case 99: {
                      a2[B3 >> 0] = c2[E3 >> 2];
                      e2 = B3;
                      o3 = 0;
                      q3 = 5642;
                      r3 = y3;
                      n3 = 1;
                      m3 = s3;
                      break;
                    }
                    case 109: {
                      n3 = MB(c2[(vB() | 0) >> 2] | 0) | 0;
                      w3 = 71;
                      break;
                    }
                    case 115: {
                      n3 = c2[E3 >> 2] | 0;
                      n3 = n3 | 0 ? n3 : 5652;
                      w3 = 71;
                      break;
                    }
                    case 67: {
                      c2[F3 >> 2] = c2[E3 >> 2];
                      c2[C3 >> 2] = 0;
                      c2[E3 >> 2] = F3;
                      r3 = -1;
                      n3 = F3;
                      w3 = 75;
                      break;
                    }
                    case 83: {
                      e2 = c2[E3 >> 2] | 0;
                      if (!m3) {
                        OB(d3, 32, k3, 0, u3);
                        e2 = 0;
                        w3 = 84;
                      } else {
                        r3 = m3;
                        n3 = e2;
                        w3 = 75;
                      }
                      break;
                    }
                    case 65:
                    case 71:
                    case 70:
                    case 69:
                    case 97:
                    case 103:
                    case 102:
                    case 101: {
                      k3 = QB(d3, +h2[E3 >> 3], k3, m3, u3, n3) | 0;
                      e2 = v3;
                      continue a;
                    }
                    default: {
                      o3 = 0;
                      q3 = 5642;
                      r3 = y3;
                      n3 = m3;
                      m3 = u3;
                    }
                  }
                while (0);
              f:
                do
                  if ((w3 | 0) == 61) {
                    u3 = E3;
                    t3 = c2[u3 >> 2] | 0;
                    u3 = c2[u3 + 4 >> 2] | 0;
                    r3 = JB(t3, u3, y3, n3 & 32) | 0;
                    q3 = (e2 & 8 | 0) == 0 | (t3 | 0) == 0 & (u3 | 0) == 0;
                    o3 = q3 ? 0 : 2;
                    q3 = q3 ? 5642 : 5642 + (n3 >> 4) | 0;
                    s3 = e2;
                    e2 = t3;
                    n3 = u3;
                    w3 = 67;
                  } else if ((w3 | 0) == 66) {
                    r3 = LB(e2, n3, y3) | 0;
                    s3 = u3;
                    w3 = 67;
                  } else if ((w3 | 0) == 71) {
                    w3 = 0;
                    u3 = NB(n3, 0, m3) | 0;
                    t3 = (u3 | 0) == 0;
                    e2 = n3;
                    o3 = 0;
                    q3 = 5642;
                    r3 = t3 ? n3 + m3 | 0 : u3;
                    n3 = t3 ? m3 : u3 - n3 | 0;
                    m3 = s3;
                  } else if ((w3 | 0) == 75) {
                    w3 = 0;
                    q3 = n3;
                    e2 = 0;
                    m3 = 0;
                    while (1) {
                      o3 = c2[q3 >> 2] | 0;
                      if (!o3)
                        break;
                      m3 = PB(G3, o3) | 0;
                      if ((m3 | 0) < 0 | m3 >>> 0 > (r3 - e2 | 0) >>> 0)
                        break;
                      e2 = m3 + e2 | 0;
                      if (r3 >>> 0 > e2 >>> 0)
                        q3 = q3 + 4 | 0;
                      else
                        break;
                    }
                    if ((m3 | 0) < 0) {
                      j3 = -1;
                      break a;
                    }
                    OB(d3, 32, k3, e2, u3);
                    if (!e2) {
                      e2 = 0;
                      w3 = 84;
                    } else {
                      o3 = 0;
                      while (1) {
                        m3 = c2[n3 >> 2] | 0;
                        if (!m3) {
                          w3 = 84;
                          break f;
                        }
                        m3 = PB(G3, m3) | 0;
                        o3 = m3 + o3 | 0;
                        if ((o3 | 0) > (e2 | 0)) {
                          w3 = 84;
                          break f;
                        }
                        GB(d3, G3, m3);
                        if (o3 >>> 0 >= e2 >>> 0) {
                          w3 = 84;
                          break;
                        } else
                          n3 = n3 + 4 | 0;
                      }
                    }
                  }
                while (0);
              if ((w3 | 0) == 67) {
                w3 = 0;
                n3 = (e2 | 0) != 0 | (n3 | 0) != 0;
                u3 = (m3 | 0) != 0 | n3;
                n3 = ((n3 ^ 1) & 1) + (z3 - r3) | 0;
                e2 = u3 ? r3 : y3;
                r3 = y3;
                n3 = u3 ? (m3 | 0) > (n3 | 0) ? m3 : n3 : m3;
                m3 = (m3 | 0) > -1 ? s3 & -65537 : s3;
              } else if ((w3 | 0) == 84) {
                w3 = 0;
                OB(d3, 32, k3, e2, u3 ^ 8192);
                k3 = (k3 | 0) > (e2 | 0) ? k3 : e2;
                e2 = v3;
                continue;
              }
              t3 = r3 - e2 | 0;
              s3 = (n3 | 0) < (t3 | 0) ? t3 : n3;
              u3 = s3 + o3 | 0;
              k3 = (k3 | 0) < (u3 | 0) ? u3 : k3;
              OB(d3, 32, k3, u3, m3);
              GB(d3, q3, o3);
              OB(d3, 48, k3, u3, m3 ^ 65536);
              OB(d3, 48, s3, t3, 0);
              GB(d3, e2, t3);
              OB(d3, 32, k3, u3, m3 ^ 8192);
              e2 = v3;
            }
          g:
            do
              if ((w3 | 0) == 87) {
                if (!d3)
                  if (!p3)
                    j3 = 0;
                  else {
                    j3 = 1;
                    while (1) {
                      e2 = c2[i4 + (j3 << 2) >> 2] | 0;
                      if (!e2)
                        break;
                      IB(g3 + (j3 << 3) | 0, e2, f3);
                      j3 = j3 + 1 | 0;
                      if ((j3 | 0) >= 10) {
                        j3 = 1;
                        break g;
                      }
                    }
                    while (1) {
                      if (c2[i4 + (j3 << 2) >> 2] | 0) {
                        j3 = -1;
                        break g;
                      }
                      j3 = j3 + 1 | 0;
                      if ((j3 | 0) >= 10) {
                        j3 = 1;
                        break;
                      }
                    }
                  }
              }
            while (0);
          l2 = H3;
          return j3 | 0;
        }
        function EB(a3) {
          a3 = a3 | 0;
          return 0;
        }
        function FB(a3) {
          a3 = a3 | 0;
          return;
        }
        function GB(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          if (!(c2[a3 >> 2] & 32))
            aC(b3, d3, a3) | 0;
          return;
        }
        function HB(b3) {
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0;
          e2 = c2[b3 >> 2] | 0;
          f3 = (a2[e2 >> 0] | 0) + -48 | 0;
          if (f3 >>> 0 < 10) {
            d3 = 0;
            do {
              d3 = f3 + (d3 * 10 | 0) | 0;
              e2 = e2 + 1 | 0;
              c2[b3 >> 2] = e2;
              f3 = (a2[e2 >> 0] | 0) + -48 | 0;
            } while (f3 >>> 0 < 10);
          } else
            d3 = 0;
          return d3 | 0;
        }
        function IB(a3, b3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          var e2 = 0, f3 = 0, g3 = 0;
          a:
            do
              if (b3 >>> 0 <= 20)
                do
                  switch (b3 | 0) {
                    case 9: {
                      e2 = (c2[d3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      b3 = c2[e2 >> 2] | 0;
                      c2[d3 >> 2] = e2 + 4;
                      c2[a3 >> 2] = b3;
                      break a;
                    }
                    case 10: {
                      e2 = (c2[d3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      b3 = c2[e2 >> 2] | 0;
                      c2[d3 >> 2] = e2 + 4;
                      e2 = a3;
                      c2[e2 >> 2] = b3;
                      c2[e2 + 4 >> 2] = ((b3 | 0) < 0) << 31 >> 31;
                      break a;
                    }
                    case 11: {
                      e2 = (c2[d3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      b3 = c2[e2 >> 2] | 0;
                      c2[d3 >> 2] = e2 + 4;
                      e2 = a3;
                      c2[e2 >> 2] = b3;
                      c2[e2 + 4 >> 2] = 0;
                      break a;
                    }
                    case 12: {
                      e2 = (c2[d3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
                      b3 = e2;
                      f3 = c2[b3 >> 2] | 0;
                      b3 = c2[b3 + 4 >> 2] | 0;
                      c2[d3 >> 2] = e2 + 8;
                      e2 = a3;
                      c2[e2 >> 2] = f3;
                      c2[e2 + 4 >> 2] = b3;
                      break a;
                    }
                    case 13: {
                      f3 = (c2[d3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      e2 = c2[f3 >> 2] | 0;
                      c2[d3 >> 2] = f3 + 4;
                      e2 = (e2 & 65535) << 16 >> 16;
                      f3 = a3;
                      c2[f3 >> 2] = e2;
                      c2[f3 + 4 >> 2] = ((e2 | 0) < 0) << 31 >> 31;
                      break a;
                    }
                    case 14: {
                      f3 = (c2[d3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      e2 = c2[f3 >> 2] | 0;
                      c2[d3 >> 2] = f3 + 4;
                      f3 = a3;
                      c2[f3 >> 2] = e2 & 65535;
                      c2[f3 + 4 >> 2] = 0;
                      break a;
                    }
                    case 15: {
                      f3 = (c2[d3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      e2 = c2[f3 >> 2] | 0;
                      c2[d3 >> 2] = f3 + 4;
                      e2 = (e2 & 255) << 24 >> 24;
                      f3 = a3;
                      c2[f3 >> 2] = e2;
                      c2[f3 + 4 >> 2] = ((e2 | 0) < 0) << 31 >> 31;
                      break a;
                    }
                    case 16: {
                      f3 = (c2[d3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      e2 = c2[f3 >> 2] | 0;
                      c2[d3 >> 2] = f3 + 4;
                      f3 = a3;
                      c2[f3 >> 2] = e2 & 255;
                      c2[f3 + 4 >> 2] = 0;
                      break a;
                    }
                    case 17: {
                      f3 = (c2[d3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
                      g3 = +h2[f3 >> 3];
                      c2[d3 >> 2] = f3 + 8;
                      h2[a3 >> 3] = g3;
                      break a;
                    }
                    case 18: {
                      f3 = (c2[d3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
                      g3 = +h2[f3 >> 3];
                      c2[d3 >> 2] = f3 + 8;
                      h2[a3 >> 3] = g3;
                      break a;
                    }
                    default:
                      break a;
                  }
                while (0);
            while (0);
          return;
        }
        function JB(b3, c3, e2, f3) {
          b3 = b3 | 0;
          c3 = c3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          if (!((b3 | 0) == 0 & (c3 | 0) == 0))
            do {
              e2 = e2 + -1 | 0;
              a2[e2 >> 0] = d2[5694 + (b3 & 15) >> 0] | 0 | f3;
              b3 = AC(b3 | 0, c3 | 0, 4) | 0;
              c3 = A2;
            } while (!((b3 | 0) == 0 & (c3 | 0) == 0));
          return e2 | 0;
        }
        function KB(b3, c3, d3) {
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          if (!((b3 | 0) == 0 & (c3 | 0) == 0))
            do {
              d3 = d3 + -1 | 0;
              a2[d3 >> 0] = b3 & 7 | 48;
              b3 = AC(b3 | 0, c3 | 0, 3) | 0;
              c3 = A2;
            } while (!((b3 | 0) == 0 & (c3 | 0) == 0));
          return d3 | 0;
        }
        function LB(b3, c3, d3) {
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          if (c3 >>> 0 > 0 | (c3 | 0) == 0 & b3 >>> 0 > 4294967295) {
            while (1) {
              e2 = HC(b3 | 0, c3 | 0, 10, 0) | 0;
              d3 = d3 + -1 | 0;
              a2[d3 >> 0] = e2 & 255 | 48;
              e2 = b3;
              b3 = EC(b3 | 0, c3 | 0, 10, 0) | 0;
              if (!(c3 >>> 0 > 9 | (c3 | 0) == 9 & e2 >>> 0 > 4294967295))
                break;
              else
                c3 = A2;
            }
            c3 = b3;
          } else
            c3 = b3;
          if (c3)
            while (1) {
              d3 = d3 + -1 | 0;
              a2[d3 >> 0] = (c3 >>> 0) % 10 | 0 | 48;
              if (c3 >>> 0 < 10)
                break;
              else
                c3 = (c3 >>> 0) / 10 | 0;
            }
          return d3 | 0;
        }
        function MB(a3) {
          a3 = a3 | 0;
          return XB(a3, c2[(WB() | 0) + 188 >> 2] | 0) | 0;
        }
        function NB(b3, d3, e2) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          h3 = d3 & 255;
          f3 = (e2 | 0) != 0;
          a:
            do
              if (f3 & (b3 & 3 | 0) != 0) {
                g3 = d3 & 255;
                while (1) {
                  if ((a2[b3 >> 0] | 0) == g3 << 24 >> 24) {
                    i4 = 6;
                    break a;
                  }
                  b3 = b3 + 1 | 0;
                  e2 = e2 + -1 | 0;
                  f3 = (e2 | 0) != 0;
                  if (!(f3 & (b3 & 3 | 0) != 0)) {
                    i4 = 5;
                    break;
                  }
                }
              } else
                i4 = 5;
            while (0);
          if ((i4 | 0) == 5)
            if (f3)
              i4 = 6;
            else
              e2 = 0;
          b:
            do
              if ((i4 | 0) == 6) {
                g3 = d3 & 255;
                if ((a2[b3 >> 0] | 0) != g3 << 24 >> 24) {
                  f3 = P2(h3, 16843009) | 0;
                  c:
                    do
                      if (e2 >>> 0 > 3)
                        while (1) {
                          h3 = c2[b3 >> 2] ^ f3;
                          if ((h3 & -2139062144 ^ -2139062144) & h3 + -16843009 | 0)
                            break;
                          b3 = b3 + 4 | 0;
                          e2 = e2 + -4 | 0;
                          if (e2 >>> 0 <= 3) {
                            i4 = 11;
                            break c;
                          }
                        }
                      else
                        i4 = 11;
                    while (0);
                  if ((i4 | 0) == 11) {
                    if (!e2) {
                      e2 = 0;
                      break;
                    }
                  }
                  while (1) {
                    if ((a2[b3 >> 0] | 0) == g3 << 24 >> 24)
                      break b;
                    b3 = b3 + 1 | 0;
                    e2 = e2 + -1 | 0;
                    if (!e2) {
                      e2 = 0;
                      break;
                    }
                  }
                }
              }
            while (0);
          return (e2 | 0 ? b3 : 0) | 0;
        }
        function OB(a3, b3, c3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = l2;
          l2 = l2 + 256 | 0;
          f3 = g3;
          if ((c3 | 0) > (d3 | 0) & (e2 & 73728 | 0) == 0) {
            e2 = c3 - d3 | 0;
            yC(f3 | 0, b3 | 0, (e2 >>> 0 < 256 ? e2 : 256) | 0) | 0;
            if (e2 >>> 0 > 255) {
              b3 = c3 - d3 | 0;
              do {
                GB(a3, f3, 256);
                e2 = e2 + -256 | 0;
              } while (e2 >>> 0 > 255);
              e2 = b3 & 255;
            }
            GB(a3, f3, e2);
          }
          l2 = g3;
          return;
        }
        function PB(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          if (!a3)
            a3 = 0;
          else
            a3 = UB(a3, b3, 0) | 0;
          return a3 | 0;
        }
        function QB(b3, e2, f3, g3, h3, i4) {
          b3 = b3 | 0;
          e2 = +e2;
          f3 = f3 | 0;
          g3 = g3 | 0;
          h3 = h3 | 0;
          i4 = i4 | 0;
          var j3 = 0, k3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w3 = 0, x3 = 0, y3 = 0, z3 = 0, B3 = 0, C3 = 0, D3 = 0, E3 = 0, F3 = 0, G3 = 0, H3 = 0;
          H3 = l2;
          l2 = l2 + 560 | 0;
          m3 = H3 + 8 | 0;
          u3 = H3;
          G3 = H3 + 524 | 0;
          F3 = G3;
          n3 = H3 + 512 | 0;
          c2[u3 >> 2] = 0;
          E3 = n3 + 12 | 0;
          RB(e2) | 0;
          if ((A2 | 0) < 0) {
            e2 = -e2;
            C3 = 1;
            B3 = 5659;
          } else {
            C3 = (h3 & 2049 | 0) != 0 & 1;
            B3 = (h3 & 2048 | 0) == 0 ? (h3 & 1 | 0) == 0 ? 5660 : 5665 : 5662;
          }
          RB(e2) | 0;
          D3 = A2 & 2146435072;
          do
            if (D3 >>> 0 < 2146435072 | (D3 | 0) == 2146435072 & 0 < 0) {
              r3 = +SB(e2, u3) * 2;
              j3 = r3 != 0;
              if (j3)
                c2[u3 >> 2] = (c2[u3 >> 2] | 0) + -1;
              w3 = i4 | 32;
              if ((w3 | 0) == 97) {
                s3 = i4 & 32;
                q3 = (s3 | 0) == 0 ? B3 : B3 + 9 | 0;
                p3 = C3 | 2;
                j3 = 12 - g3 | 0;
                do
                  if (!(g3 >>> 0 > 11 | (j3 | 0) == 0)) {
                    e2 = 8;
                    do {
                      j3 = j3 + -1 | 0;
                      e2 = e2 * 16;
                    } while ((j3 | 0) != 0);
                    if ((a2[q3 >> 0] | 0) == 45) {
                      e2 = -(e2 + (-r3 - e2));
                      break;
                    } else {
                      e2 = r3 + e2 - e2;
                      break;
                    }
                  } else
                    e2 = r3;
                while (0);
                k3 = c2[u3 >> 2] | 0;
                j3 = (k3 | 0) < 0 ? 0 - k3 | 0 : k3;
                j3 = LB(j3, ((j3 | 0) < 0) << 31 >> 31, E3) | 0;
                if ((j3 | 0) == (E3 | 0)) {
                  j3 = n3 + 11 | 0;
                  a2[j3 >> 0] = 48;
                }
                a2[j3 + -1 >> 0] = (k3 >> 31 & 2) + 43;
                o3 = j3 + -2 | 0;
                a2[o3 >> 0] = i4 + 15;
                n3 = (g3 | 0) < 1;
                m3 = (h3 & 8 | 0) == 0;
                j3 = G3;
                do {
                  D3 = ~~e2;
                  k3 = j3 + 1 | 0;
                  a2[j3 >> 0] = d2[5694 + D3 >> 0] | s3;
                  e2 = (e2 - +(D3 | 0)) * 16;
                  if ((k3 - F3 | 0) == 1 ? !(m3 & (n3 & e2 == 0)) : 0) {
                    a2[k3 >> 0] = 46;
                    j3 = j3 + 2 | 0;
                  } else
                    j3 = k3;
                } while (e2 != 0);
                D3 = j3 - F3 | 0;
                F3 = E3 - o3 | 0;
                E3 = (g3 | 0) != 0 & (D3 + -2 | 0) < (g3 | 0) ? g3 + 2 | 0 : D3;
                j3 = F3 + p3 + E3 | 0;
                OB(b3, 32, f3, j3, h3);
                GB(b3, q3, p3);
                OB(b3, 48, f3, j3, h3 ^ 65536);
                GB(b3, G3, D3);
                OB(b3, 48, E3 - D3 | 0, 0, 0);
                GB(b3, o3, F3);
                OB(b3, 32, f3, j3, h3 ^ 8192);
                break;
              }
              k3 = (g3 | 0) < 0 ? 6 : g3;
              if (j3) {
                j3 = (c2[u3 >> 2] | 0) + -28 | 0;
                c2[u3 >> 2] = j3;
                e2 = r3 * 268435456;
              } else {
                e2 = r3;
                j3 = c2[u3 >> 2] | 0;
              }
              D3 = (j3 | 0) < 0 ? m3 : m3 + 288 | 0;
              m3 = D3;
              do {
                y3 = ~~e2 >>> 0;
                c2[m3 >> 2] = y3;
                m3 = m3 + 4 | 0;
                e2 = (e2 - +(y3 >>> 0)) * 1e9;
              } while (e2 != 0);
              if ((j3 | 0) > 0) {
                n3 = D3;
                p3 = m3;
                while (1) {
                  o3 = (j3 | 0) < 29 ? j3 : 29;
                  j3 = p3 + -4 | 0;
                  if (j3 >>> 0 >= n3 >>> 0) {
                    m3 = 0;
                    do {
                      x3 = zC(c2[j3 >> 2] | 0, 0, o3 | 0) | 0;
                      x3 = xC(x3 | 0, A2 | 0, m3 | 0, 0) | 0;
                      y3 = A2;
                      v3 = HC(x3 | 0, y3 | 0, 1e9, 0) | 0;
                      c2[j3 >> 2] = v3;
                      m3 = EC(x3 | 0, y3 | 0, 1e9, 0) | 0;
                      j3 = j3 + -4 | 0;
                    } while (j3 >>> 0 >= n3 >>> 0);
                    if (m3) {
                      n3 = n3 + -4 | 0;
                      c2[n3 >> 2] = m3;
                    }
                  }
                  m3 = p3;
                  while (1) {
                    if (m3 >>> 0 <= n3 >>> 0)
                      break;
                    j3 = m3 + -4 | 0;
                    if (!(c2[j3 >> 2] | 0))
                      m3 = j3;
                    else
                      break;
                  }
                  j3 = (c2[u3 >> 2] | 0) - o3 | 0;
                  c2[u3 >> 2] = j3;
                  if ((j3 | 0) > 0)
                    p3 = m3;
                  else
                    break;
                }
              } else
                n3 = D3;
              if ((j3 | 0) < 0) {
                g3 = ((k3 + 25 | 0) / 9 | 0) + 1 | 0;
                t3 = (w3 | 0) == 102;
                do {
                  s3 = 0 - j3 | 0;
                  s3 = (s3 | 0) < 9 ? s3 : 9;
                  if (n3 >>> 0 < m3 >>> 0) {
                    o3 = (1 << s3) + -1 | 0;
                    p3 = 1e9 >>> s3;
                    q3 = 0;
                    j3 = n3;
                    do {
                      y3 = c2[j3 >> 2] | 0;
                      c2[j3 >> 2] = (y3 >>> s3) + q3;
                      q3 = P2(y3 & o3, p3) | 0;
                      j3 = j3 + 4 | 0;
                    } while (j3 >>> 0 < m3 >>> 0);
                    j3 = (c2[n3 >> 2] | 0) == 0 ? n3 + 4 | 0 : n3;
                    if (!q3) {
                      n3 = j3;
                      j3 = m3;
                    } else {
                      c2[m3 >> 2] = q3;
                      n3 = j3;
                      j3 = m3 + 4 | 0;
                    }
                  } else {
                    n3 = (c2[n3 >> 2] | 0) == 0 ? n3 + 4 | 0 : n3;
                    j3 = m3;
                  }
                  m3 = t3 ? D3 : n3;
                  m3 = (j3 - m3 >> 2 | 0) > (g3 | 0) ? m3 + (g3 << 2) | 0 : j3;
                  j3 = (c2[u3 >> 2] | 0) + s3 | 0;
                  c2[u3 >> 2] = j3;
                } while ((j3 | 0) < 0);
                j3 = n3;
                g3 = m3;
              } else {
                j3 = n3;
                g3 = m3;
              }
              y3 = D3;
              if (j3 >>> 0 < g3 >>> 0) {
                m3 = (y3 - j3 >> 2) * 9 | 0;
                o3 = c2[j3 >> 2] | 0;
                if (o3 >>> 0 >= 10) {
                  n3 = 10;
                  do {
                    n3 = n3 * 10 | 0;
                    m3 = m3 + 1 | 0;
                  } while (o3 >>> 0 >= n3 >>> 0);
                }
              } else
                m3 = 0;
              t3 = (w3 | 0) == 103;
              v3 = (k3 | 0) != 0;
              n3 = k3 - ((w3 | 0) != 102 ? m3 : 0) + ((v3 & t3) << 31 >> 31) | 0;
              if ((n3 | 0) < (((g3 - y3 >> 2) * 9 | 0) + -9 | 0)) {
                n3 = n3 + 9216 | 0;
                s3 = D3 + 4 + (((n3 | 0) / 9 | 0) + -1024 << 2) | 0;
                n3 = ((n3 | 0) % 9 | 0) + 1 | 0;
                if ((n3 | 0) < 9) {
                  o3 = 10;
                  do {
                    o3 = o3 * 10 | 0;
                    n3 = n3 + 1 | 0;
                  } while ((n3 | 0) != 9);
                } else
                  o3 = 10;
                p3 = c2[s3 >> 2] | 0;
                q3 = (p3 >>> 0) % (o3 >>> 0) | 0;
                n3 = (s3 + 4 | 0) == (g3 | 0);
                if (!(n3 & (q3 | 0) == 0)) {
                  r3 = (((p3 >>> 0) / (o3 >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992 : 9007199254740994;
                  x3 = (o3 | 0) / 2 | 0;
                  e2 = q3 >>> 0 < x3 >>> 0 ? 0.5 : n3 & (q3 | 0) == (x3 | 0) ? 1 : 1.5;
                  if (C3) {
                    x3 = (a2[B3 >> 0] | 0) == 45;
                    e2 = x3 ? -e2 : e2;
                    r3 = x3 ? -r3 : r3;
                  }
                  n3 = p3 - q3 | 0;
                  c2[s3 >> 2] = n3;
                  if (r3 + e2 != r3) {
                    x3 = n3 + o3 | 0;
                    c2[s3 >> 2] = x3;
                    if (x3 >>> 0 > 999999999) {
                      m3 = s3;
                      while (1) {
                        n3 = m3 + -4 | 0;
                        c2[m3 >> 2] = 0;
                        if (n3 >>> 0 < j3 >>> 0) {
                          j3 = j3 + -4 | 0;
                          c2[j3 >> 2] = 0;
                        }
                        x3 = (c2[n3 >> 2] | 0) + 1 | 0;
                        c2[n3 >> 2] = x3;
                        if (x3 >>> 0 > 999999999)
                          m3 = n3;
                        else
                          break;
                      }
                    } else
                      n3 = s3;
                    m3 = (y3 - j3 >> 2) * 9 | 0;
                    p3 = c2[j3 >> 2] | 0;
                    if (p3 >>> 0 >= 10) {
                      o3 = 10;
                      do {
                        o3 = o3 * 10 | 0;
                        m3 = m3 + 1 | 0;
                      } while (p3 >>> 0 >= o3 >>> 0);
                    }
                  } else
                    n3 = s3;
                } else
                  n3 = s3;
                n3 = n3 + 4 | 0;
                n3 = g3 >>> 0 > n3 >>> 0 ? n3 : g3;
                x3 = j3;
              } else {
                n3 = g3;
                x3 = j3;
              }
              w3 = n3;
              while (1) {
                if (w3 >>> 0 <= x3 >>> 0) {
                  u3 = 0;
                  break;
                }
                j3 = w3 + -4 | 0;
                if (!(c2[j3 >> 2] | 0))
                  w3 = j3;
                else {
                  u3 = 1;
                  break;
                }
              }
              g3 = 0 - m3 | 0;
              do
                if (t3) {
                  j3 = ((v3 ^ 1) & 1) + k3 | 0;
                  if ((j3 | 0) > (m3 | 0) & (m3 | 0) > -5) {
                    o3 = i4 + -1 | 0;
                    k3 = j3 + -1 - m3 | 0;
                  } else {
                    o3 = i4 + -2 | 0;
                    k3 = j3 + -1 | 0;
                  }
                  j3 = h3 & 8;
                  if (!j3) {
                    if (u3 ? (z3 = c2[w3 + -4 >> 2] | 0, (z3 | 0) != 0) : 0) {
                      if (!((z3 >>> 0) % 10 | 0)) {
                        n3 = 0;
                        j3 = 10;
                        do {
                          j3 = j3 * 10 | 0;
                          n3 = n3 + 1 | 0;
                        } while (!((z3 >>> 0) % (j3 >>> 0) | 0 | 0));
                      } else
                        n3 = 0;
                    } else
                      n3 = 9;
                    j3 = ((w3 - y3 >> 2) * 9 | 0) + -9 | 0;
                    if ((o3 | 32 | 0) == 102) {
                      s3 = j3 - n3 | 0;
                      s3 = (s3 | 0) > 0 ? s3 : 0;
                      k3 = (k3 | 0) < (s3 | 0) ? k3 : s3;
                      s3 = 0;
                      break;
                    } else {
                      s3 = j3 + m3 - n3 | 0;
                      s3 = (s3 | 0) > 0 ? s3 : 0;
                      k3 = (k3 | 0) < (s3 | 0) ? k3 : s3;
                      s3 = 0;
                      break;
                    }
                  } else
                    s3 = j3;
                } else {
                  o3 = i4;
                  s3 = h3 & 8;
                }
              while (0);
              t3 = k3 | s3;
              p3 = (t3 | 0) != 0 & 1;
              q3 = (o3 | 32 | 0) == 102;
              if (q3) {
                v3 = 0;
                j3 = (m3 | 0) > 0 ? m3 : 0;
              } else {
                j3 = (m3 | 0) < 0 ? g3 : m3;
                j3 = LB(j3, ((j3 | 0) < 0) << 31 >> 31, E3) | 0;
                n3 = E3;
                if ((n3 - j3 | 0) < 2)
                  do {
                    j3 = j3 + -1 | 0;
                    a2[j3 >> 0] = 48;
                  } while ((n3 - j3 | 0) < 2);
                a2[j3 + -1 >> 0] = (m3 >> 31 & 2) + 43;
                j3 = j3 + -2 | 0;
                a2[j3 >> 0] = o3;
                v3 = j3;
                j3 = n3 - j3 | 0;
              }
              j3 = C3 + 1 + k3 + p3 + j3 | 0;
              OB(b3, 32, f3, j3, h3);
              GB(b3, B3, C3);
              OB(b3, 48, f3, j3, h3 ^ 65536);
              if (q3) {
                o3 = x3 >>> 0 > D3 >>> 0 ? D3 : x3;
                s3 = G3 + 9 | 0;
                p3 = s3;
                q3 = G3 + 8 | 0;
                n3 = o3;
                do {
                  m3 = LB(c2[n3 >> 2] | 0, 0, s3) | 0;
                  if ((n3 | 0) == (o3 | 0)) {
                    if ((m3 | 0) == (s3 | 0)) {
                      a2[q3 >> 0] = 48;
                      m3 = q3;
                    }
                  } else if (m3 >>> 0 > G3 >>> 0) {
                    yC(G3 | 0, 48, m3 - F3 | 0) | 0;
                    do
                      m3 = m3 + -1 | 0;
                    while (m3 >>> 0 > G3 >>> 0);
                  }
                  GB(b3, m3, p3 - m3 | 0);
                  n3 = n3 + 4 | 0;
                } while (n3 >>> 0 <= D3 >>> 0);
                if (t3 | 0)
                  GB(b3, 5710, 1);
                if (n3 >>> 0 < w3 >>> 0 & (k3 | 0) > 0)
                  while (1) {
                    m3 = LB(c2[n3 >> 2] | 0, 0, s3) | 0;
                    if (m3 >>> 0 > G3 >>> 0) {
                      yC(G3 | 0, 48, m3 - F3 | 0) | 0;
                      do
                        m3 = m3 + -1 | 0;
                      while (m3 >>> 0 > G3 >>> 0);
                    }
                    GB(b3, m3, (k3 | 0) < 9 ? k3 : 9);
                    n3 = n3 + 4 | 0;
                    m3 = k3 + -9 | 0;
                    if (!(n3 >>> 0 < w3 >>> 0 & (k3 | 0) > 9)) {
                      k3 = m3;
                      break;
                    } else
                      k3 = m3;
                  }
                OB(b3, 48, k3 + 9 | 0, 9, 0);
              } else {
                t3 = u3 ? w3 : x3 + 4 | 0;
                if ((k3 | 0) > -1) {
                  u3 = G3 + 9 | 0;
                  s3 = (s3 | 0) == 0;
                  g3 = u3;
                  p3 = 0 - F3 | 0;
                  q3 = G3 + 8 | 0;
                  o3 = x3;
                  do {
                    m3 = LB(c2[o3 >> 2] | 0, 0, u3) | 0;
                    if ((m3 | 0) == (u3 | 0)) {
                      a2[q3 >> 0] = 48;
                      m3 = q3;
                    }
                    do
                      if ((o3 | 0) == (x3 | 0)) {
                        n3 = m3 + 1 | 0;
                        GB(b3, m3, 1);
                        if (s3 & (k3 | 0) < 1) {
                          m3 = n3;
                          break;
                        }
                        GB(b3, 5710, 1);
                        m3 = n3;
                      } else {
                        if (m3 >>> 0 <= G3 >>> 0)
                          break;
                        yC(G3 | 0, 48, m3 + p3 | 0) | 0;
                        do
                          m3 = m3 + -1 | 0;
                        while (m3 >>> 0 > G3 >>> 0);
                      }
                    while (0);
                    F3 = g3 - m3 | 0;
                    GB(b3, m3, (k3 | 0) > (F3 | 0) ? F3 : k3);
                    k3 = k3 - F3 | 0;
                    o3 = o3 + 4 | 0;
                  } while (o3 >>> 0 < t3 >>> 0 & (k3 | 0) > -1);
                }
                OB(b3, 48, k3 + 18 | 0, 18, 0);
                GB(b3, v3, E3 - v3 | 0);
              }
              OB(b3, 32, f3, j3, h3 ^ 8192);
            } else {
              G3 = (i4 & 32 | 0) != 0;
              j3 = C3 + 3 | 0;
              OB(b3, 32, f3, j3, h3 & -65537);
              GB(b3, B3, C3);
              GB(b3, e2 != e2 | false ? G3 ? 5686 : 5690 : G3 ? 5678 : 5682, 3);
              OB(b3, 32, f3, j3, h3 ^ 8192);
            }
          while (0);
          l2 = H3;
          return ((j3 | 0) < (f3 | 0) ? f3 : j3) | 0;
        }
        function RB(a3) {
          a3 = +a3;
          var b3 = 0;
          h2[j2 >> 3] = a3;
          b3 = c2[j2 >> 2] | 0;
          A2 = c2[j2 + 4 >> 2] | 0;
          return b3 | 0;
        }
        function SB(a3, b3) {
          a3 = +a3;
          b3 = b3 | 0;
          return + +TB(a3, b3);
        }
        function TB(a3, b3) {
          a3 = +a3;
          b3 = b3 | 0;
          var d3 = 0, e2 = 0, f3 = 0;
          h2[j2 >> 3] = a3;
          d3 = c2[j2 >> 2] | 0;
          e2 = c2[j2 + 4 >> 2] | 0;
          f3 = AC(d3 | 0, e2 | 0, 52) | 0;
          switch (f3 & 2047) {
            case 0: {
              if (a3 != 0) {
                a3 = +TB(a3 * 18446744073709552e3, b3);
                d3 = (c2[b3 >> 2] | 0) + -64 | 0;
              } else
                d3 = 0;
              c2[b3 >> 2] = d3;
              break;
            }
            case 2047:
              break;
            default: {
              c2[b3 >> 2] = (f3 & 2047) + -1022;
              c2[j2 >> 2] = d3;
              c2[j2 + 4 >> 2] = e2 & -2146435073 | 1071644672;
              a3 = +h2[j2 >> 3];
            }
          }
          return +a3;
        }
        function UB(b3, d3, e2) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          do
            if (b3) {
              if (d3 >>> 0 < 128) {
                a2[b3 >> 0] = d3;
                b3 = 1;
                break;
              }
              if (!(c2[c2[(VB() | 0) + 188 >> 2] >> 2] | 0))
                if ((d3 & -128 | 0) == 57216) {
                  a2[b3 >> 0] = d3;
                  b3 = 1;
                  break;
                } else {
                  c2[(vB() | 0) >> 2] = 84;
                  b3 = -1;
                  break;
                }
              if (d3 >>> 0 < 2048) {
                a2[b3 >> 0] = d3 >>> 6 | 192;
                a2[b3 + 1 >> 0] = d3 & 63 | 128;
                b3 = 2;
                break;
              }
              if (d3 >>> 0 < 55296 | (d3 & -8192 | 0) == 57344) {
                a2[b3 >> 0] = d3 >>> 12 | 224;
                a2[b3 + 1 >> 0] = d3 >>> 6 & 63 | 128;
                a2[b3 + 2 >> 0] = d3 & 63 | 128;
                b3 = 3;
                break;
              }
              if ((d3 + -65536 | 0) >>> 0 < 1048576) {
                a2[b3 >> 0] = d3 >>> 18 | 240;
                a2[b3 + 1 >> 0] = d3 >>> 12 & 63 | 128;
                a2[b3 + 2 >> 0] = d3 >>> 6 & 63 | 128;
                a2[b3 + 3 >> 0] = d3 & 63 | 128;
                b3 = 4;
                break;
              } else {
                c2[(vB() | 0) >> 2] = 84;
                b3 = -1;
                break;
              }
            } else
              b3 = 1;
          while (0);
          return b3 | 0;
        }
        function VB() {
          return xB() | 0;
        }
        function WB() {
          return xB() | 0;
        }
        function XB(b3, e2) {
          b3 = b3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = 0;
          while (1) {
            if ((d2[5712 + g3 >> 0] | 0) == (b3 | 0)) {
              b3 = 2;
              break;
            }
            f3 = g3 + 1 | 0;
            if ((f3 | 0) == 87) {
              f3 = 5800;
              g3 = 87;
              b3 = 5;
              break;
            } else
              g3 = f3;
          }
          if ((b3 | 0) == 2)
            if (!g3)
              f3 = 5800;
            else {
              f3 = 5800;
              b3 = 5;
            }
          if ((b3 | 0) == 5)
            while (1) {
              do {
                b3 = f3;
                f3 = f3 + 1 | 0;
              } while ((a2[b3 >> 0] | 0) != 0);
              g3 = g3 + -1 | 0;
              if (!g3)
                break;
              else
                b3 = 5;
            }
          return YB(f3, c2[e2 + 20 >> 2] | 0) | 0;
        }
        function YB(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return ZB(a3, b3) | 0;
        }
        function ZB(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          if (!b3)
            b3 = 0;
          else
            b3 = _B(c2[b3 >> 2] | 0, c2[b3 + 4 >> 2] | 0, a3) | 0;
          return (b3 | 0 ? b3 : a3) | 0;
        }
        function _B(b3, d3, e2) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, l3 = 0, m3 = 0, n3 = 0, o3 = 0;
          o3 = (c2[b3 >> 2] | 0) + 1794895138 | 0;
          h3 = $B(c2[b3 + 8 >> 2] | 0, o3) | 0;
          f3 = $B(c2[b3 + 12 >> 2] | 0, o3) | 0;
          g3 = $B(c2[b3 + 16 >> 2] | 0, o3) | 0;
          a:
            do
              if ((h3 >>> 0 < d3 >>> 2 >>> 0 ? (n3 = d3 - (h3 << 2) | 0, f3 >>> 0 < n3 >>> 0 & g3 >>> 0 < n3 >>> 0) : 0) ? ((g3 | f3) & 3 | 0) == 0 : 0) {
                n3 = f3 >>> 2;
                m3 = g3 >>> 2;
                l3 = 0;
                while (1) {
                  j3 = h3 >>> 1;
                  k3 = l3 + j3 | 0;
                  i4 = k3 << 1;
                  g3 = i4 + n3 | 0;
                  f3 = $B(c2[b3 + (g3 << 2) >> 2] | 0, o3) | 0;
                  g3 = $B(c2[b3 + (g3 + 1 << 2) >> 2] | 0, o3) | 0;
                  if (!(g3 >>> 0 < d3 >>> 0 & f3 >>> 0 < (d3 - g3 | 0) >>> 0)) {
                    f3 = 0;
                    break a;
                  }
                  if (a2[b3 + (g3 + f3) >> 0] | 0) {
                    f3 = 0;
                    break a;
                  }
                  f3 = AB(e2, b3 + g3 | 0) | 0;
                  if (!f3)
                    break;
                  f3 = (f3 | 0) < 0;
                  if ((h3 | 0) == 1) {
                    f3 = 0;
                    break a;
                  } else {
                    l3 = f3 ? l3 : k3;
                    h3 = f3 ? j3 : h3 - j3 | 0;
                  }
                }
                f3 = i4 + m3 | 0;
                g3 = $B(c2[b3 + (f3 << 2) >> 2] | 0, o3) | 0;
                f3 = $B(c2[b3 + (f3 + 1 << 2) >> 2] | 0, o3) | 0;
                if (f3 >>> 0 < d3 >>> 0 & g3 >>> 0 < (d3 - f3 | 0) >>> 0)
                  f3 = (a2[b3 + (f3 + g3) >> 0] | 0) == 0 ? b3 + f3 | 0 : 0;
                else
                  f3 = 0;
              } else
                f3 = 0;
            while (0);
          return f3 | 0;
        }
        function $B(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          var c3 = 0;
          c3 = IC(a3 | 0) | 0;
          return ((b3 | 0) == 0 ? a3 : c3) | 0;
        }
        function aC(b3, d3, e2) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0, j3 = 0;
          f3 = e2 + 16 | 0;
          g3 = c2[f3 >> 2] | 0;
          if (!g3) {
            if (!(bC(e2) | 0)) {
              g3 = c2[f3 >> 2] | 0;
              h3 = 5;
            } else
              f3 = 0;
          } else
            h3 = 5;
          a:
            do
              if ((h3 | 0) == 5) {
                j3 = e2 + 20 | 0;
                i4 = c2[j3 >> 2] | 0;
                f3 = i4;
                if ((g3 - i4 | 0) >>> 0 < d3 >>> 0) {
                  f3 = sb[c2[e2 + 36 >> 2] & 7](e2, b3, d3) | 0;
                  break;
                }
                b:
                  do
                    if ((a2[e2 + 75 >> 0] | 0) > -1) {
                      i4 = d3;
                      while (1) {
                        if (!i4) {
                          h3 = 0;
                          g3 = b3;
                          break b;
                        }
                        g3 = i4 + -1 | 0;
                        if ((a2[b3 + g3 >> 0] | 0) == 10)
                          break;
                        else
                          i4 = g3;
                      }
                      f3 = sb[c2[e2 + 36 >> 2] & 7](e2, b3, i4) | 0;
                      if (f3 >>> 0 < i4 >>> 0)
                        break a;
                      h3 = i4;
                      g3 = b3 + i4 | 0;
                      d3 = d3 - i4 | 0;
                      f3 = c2[j3 >> 2] | 0;
                    } else {
                      h3 = 0;
                      g3 = b3;
                    }
                  while (0);
                BC(f3 | 0, g3 | 0, d3 | 0) | 0;
                c2[j3 >> 2] = (c2[j3 >> 2] | 0) + d3;
                f3 = h3 + d3 | 0;
              }
            while (0);
          return f3 | 0;
        }
        function bC(b3) {
          b3 = b3 | 0;
          var d3 = 0, e2 = 0;
          d3 = b3 + 74 | 0;
          e2 = a2[d3 >> 0] | 0;
          a2[d3 >> 0] = e2 + 255 | e2;
          d3 = c2[b3 >> 2] | 0;
          if (!(d3 & 8)) {
            c2[b3 + 8 >> 2] = 0;
            c2[b3 + 4 >> 2] = 0;
            e2 = c2[b3 + 44 >> 2] | 0;
            c2[b3 + 28 >> 2] = e2;
            c2[b3 + 20 >> 2] = e2;
            c2[b3 + 16 >> 2] = e2 + (c2[b3 + 48 >> 2] | 0);
            b3 = 0;
          } else {
            c2[b3 >> 2] = d3 | 32;
            b3 = -1;
          }
          return b3 | 0;
        }
        function cC(a3, b3) {
          a3 = T2(a3);
          b3 = T2(b3);
          var c3 = 0, d3 = 0;
          c3 = dC(a3) | 0;
          do
            if ((c3 & 2147483647) >>> 0 <= 2139095040) {
              d3 = dC(b3) | 0;
              if ((d3 & 2147483647) >>> 0 <= 2139095040)
                if ((d3 ^ c3 | 0) < 0) {
                  a3 = (c3 | 0) < 0 ? b3 : a3;
                  break;
                } else {
                  a3 = a3 < b3 ? b3 : a3;
                  break;
                }
            } else
              a3 = b3;
          while (0);
          return T2(a3);
        }
        function dC(a3) {
          a3 = T2(a3);
          return (g2[j2 >> 2] = a3, c2[j2 >> 2] | 0) | 0;
        }
        function eC(a3, b3) {
          a3 = T2(a3);
          b3 = T2(b3);
          var c3 = 0, d3 = 0;
          c3 = fC(a3) | 0;
          do
            if ((c3 & 2147483647) >>> 0 <= 2139095040) {
              d3 = fC(b3) | 0;
              if ((d3 & 2147483647) >>> 0 <= 2139095040)
                if ((d3 ^ c3 | 0) < 0) {
                  a3 = (c3 | 0) < 0 ? a3 : b3;
                  break;
                } else {
                  a3 = a3 < b3 ? a3 : b3;
                  break;
                }
            } else
              a3 = b3;
          while (0);
          return T2(a3);
        }
        function fC(a3) {
          a3 = T2(a3);
          return (g2[j2 >> 2] = a3, c2[j2 >> 2] | 0) | 0;
        }
        function gC(a3, b3) {
          a3 = T2(a3);
          b3 = T2(b3);
          var d3 = 0, e2 = 0, f3 = 0, h3 = 0, i4 = 0, k3 = 0, l3 = 0, m3 = 0;
          h3 = (g2[j2 >> 2] = a3, c2[j2 >> 2] | 0);
          k3 = (g2[j2 >> 2] = b3, c2[j2 >> 2] | 0);
          d3 = h3 >>> 23 & 255;
          i4 = k3 >>> 23 & 255;
          l3 = h3 & -2147483648;
          f3 = k3 << 1;
          a:
            do
              if ((f3 | 0) != 0 ? !((d3 | 0) == 255 | ((hC(b3) | 0) & 2147483647) >>> 0 > 2139095040) : 0) {
                e2 = h3 << 1;
                if (e2 >>> 0 <= f3 >>> 0) {
                  b3 = T2(a3 * T2(0));
                  return T2((e2 | 0) == (f3 | 0) ? b3 : a3);
                }
                if (!d3) {
                  d3 = h3 << 9;
                  if ((d3 | 0) > -1) {
                    e2 = d3;
                    d3 = 0;
                    do {
                      d3 = d3 + -1 | 0;
                      e2 = e2 << 1;
                    } while ((e2 | 0) > -1);
                  } else
                    d3 = 0;
                  e2 = h3 << 1 - d3;
                } else
                  e2 = h3 & 8388607 | 8388608;
                if (!i4) {
                  h3 = k3 << 9;
                  if ((h3 | 0) > -1) {
                    f3 = 0;
                    do {
                      f3 = f3 + -1 | 0;
                      h3 = h3 << 1;
                    } while ((h3 | 0) > -1);
                  } else
                    f3 = 0;
                  i4 = f3;
                  k3 = k3 << 1 - f3;
                } else
                  k3 = k3 & 8388607 | 8388608;
                f3 = e2 - k3 | 0;
                h3 = (f3 | 0) > -1;
                b:
                  do
                    if ((d3 | 0) > (i4 | 0)) {
                      while (1) {
                        if (h3)
                          if (!f3)
                            break;
                          else
                            e2 = f3;
                        e2 = e2 << 1;
                        d3 = d3 + -1 | 0;
                        f3 = e2 - k3 | 0;
                        h3 = (f3 | 0) > -1;
                        if ((d3 | 0) <= (i4 | 0))
                          break b;
                      }
                      b3 = T2(a3 * T2(0));
                      break a;
                    }
                  while (0);
                if (h3)
                  if (!f3) {
                    b3 = T2(a3 * T2(0));
                    break;
                  } else
                    e2 = f3;
                if (e2 >>> 0 < 8388608)
                  do {
                    e2 = e2 << 1;
                    d3 = d3 + -1 | 0;
                  } while (e2 >>> 0 < 8388608);
                if ((d3 | 0) > 0)
                  d3 = e2 + -8388608 | d3 << 23;
                else
                  d3 = e2 >>> (1 - d3 | 0);
                b3 = (c2[j2 >> 2] = d3 | l3, T2(g2[j2 >> 2]));
              } else
                m3 = 3;
            while (0);
          if ((m3 | 0) == 3) {
            b3 = T2(a3 * b3);
            b3 = T2(b3 / b3);
          }
          return T2(b3);
        }
        function hC(a3) {
          a3 = T2(a3);
          return (g2[j2 >> 2] = a3, c2[j2 >> 2] | 0) | 0;
        }
        function iC(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return CB(c2[582] | 0, a3, b3) | 0;
        }
        function jC(a3) {
          a3 = a3 | 0;
          Ta();
        }
        function kC(a3) {
          a3 = a3 | 0;
          return;
        }
        function lC(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return 0;
        }
        function mC(a3) {
          a3 = a3 | 0;
          if ((nC(a3 + 4 | 0) | 0) == -1) {
            nb[c2[(c2[a3 >> 2] | 0) + 8 >> 2] & 127](a3);
            a3 = 1;
          } else
            a3 = 0;
          return a3 | 0;
        }
        function nC(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = c2[a3 >> 2] | 0;
          c2[a3 >> 2] = b3 + -1;
          return b3 + -1 | 0;
        }
        function oC(a3) {
          a3 = a3 | 0;
          if (mC(a3) | 0)
            pC(a3);
          return;
        }
        function pC(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = a3 + 8 | 0;
          if (!((c2[b3 >> 2] | 0) != 0 ? (nC(b3) | 0) != -1 : 0))
            nb[c2[(c2[a3 >> 2] | 0) + 16 >> 2] & 127](a3);
          return;
        }
        function qC(a3) {
          a3 = a3 | 0;
          var b3 = 0;
          b3 = (a3 | 0) == 0 ? 1 : a3;
          while (1) {
            a3 = oB(b3) | 0;
            if (a3 | 0)
              break;
            a3 = uC() | 0;
            if (!a3) {
              a3 = 0;
              break;
            }
            Fb[a3 & 0]();
          }
          return a3 | 0;
        }
        function rC(a3) {
          a3 = a3 | 0;
          return qC(a3) | 0;
        }
        function sC(a3) {
          a3 = a3 | 0;
          pB(a3);
          return;
        }
        function tC(b3) {
          b3 = b3 | 0;
          if ((a2[b3 + 11 >> 0] | 0) < 0)
            sC(c2[b3 >> 2] | 0);
          return;
        }
        function uC() {
          var a3 = 0;
          a3 = c2[2923] | 0;
          c2[2923] = a3 + 0;
          return a3 | 0;
        }
        function vC() {
        }
        function wC(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          d3 = b3 - d3 - (c3 >>> 0 > a3 >>> 0 | 0) >>> 0;
          return (A2 = d3, a3 - c3 >>> 0 | 0) | 0;
        }
        function xC(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          c3 = a3 + c3 >>> 0;
          return (A2 = b3 + d3 + (c3 >>> 0 < a3 >>> 0 | 0) >>> 0, c3 | 0) | 0;
        }
        function yC(b3, d3, e2) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0, i4 = 0;
          h3 = b3 + e2 | 0;
          d3 = d3 & 255;
          if ((e2 | 0) >= 67) {
            while (b3 & 3) {
              a2[b3 >> 0] = d3;
              b3 = b3 + 1 | 0;
            }
            f3 = h3 & -4 | 0;
            g3 = f3 - 64 | 0;
            i4 = d3 | d3 << 8 | d3 << 16 | d3 << 24;
            while ((b3 | 0) <= (g3 | 0)) {
              c2[b3 >> 2] = i4;
              c2[b3 + 4 >> 2] = i4;
              c2[b3 + 8 >> 2] = i4;
              c2[b3 + 12 >> 2] = i4;
              c2[b3 + 16 >> 2] = i4;
              c2[b3 + 20 >> 2] = i4;
              c2[b3 + 24 >> 2] = i4;
              c2[b3 + 28 >> 2] = i4;
              c2[b3 + 32 >> 2] = i4;
              c2[b3 + 36 >> 2] = i4;
              c2[b3 + 40 >> 2] = i4;
              c2[b3 + 44 >> 2] = i4;
              c2[b3 + 48 >> 2] = i4;
              c2[b3 + 52 >> 2] = i4;
              c2[b3 + 56 >> 2] = i4;
              c2[b3 + 60 >> 2] = i4;
              b3 = b3 + 64 | 0;
            }
            while ((b3 | 0) < (f3 | 0)) {
              c2[b3 >> 2] = i4;
              b3 = b3 + 4 | 0;
            }
          }
          while ((b3 | 0) < (h3 | 0)) {
            a2[b3 >> 0] = d3;
            b3 = b3 + 1 | 0;
          }
          return h3 - e2 | 0;
        }
        function zC(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          if ((c3 | 0) < 32) {
            A2 = b3 << c3 | (a3 & (1 << c3) - 1 << 32 - c3) >>> 32 - c3;
            return a3 << c3;
          }
          A2 = a3 << c3 - 32;
          return 0;
        }
        function AC(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          if ((c3 | 0) < 32) {
            A2 = b3 >>> c3;
            return a3 >>> c3 | (b3 & (1 << c3) - 1) << 32 - c3;
          }
          A2 = 0;
          return b3 >>> c3 - 32 | 0;
        }
        function BC(b3, d3, e2) {
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0, h3 = 0;
          if ((e2 | 0) >= 8192)
            return Oa(b3 | 0, d3 | 0, e2 | 0) | 0;
          h3 = b3 | 0;
          g3 = b3 + e2 | 0;
          if ((b3 & 3) == (d3 & 3)) {
            while (b3 & 3) {
              if (!e2)
                return h3 | 0;
              a2[b3 >> 0] = a2[d3 >> 0] | 0;
              b3 = b3 + 1 | 0;
              d3 = d3 + 1 | 0;
              e2 = e2 - 1 | 0;
            }
            e2 = g3 & -4 | 0;
            f3 = e2 - 64 | 0;
            while ((b3 | 0) <= (f3 | 0)) {
              c2[b3 >> 2] = c2[d3 >> 2];
              c2[b3 + 4 >> 2] = c2[d3 + 4 >> 2];
              c2[b3 + 8 >> 2] = c2[d3 + 8 >> 2];
              c2[b3 + 12 >> 2] = c2[d3 + 12 >> 2];
              c2[b3 + 16 >> 2] = c2[d3 + 16 >> 2];
              c2[b3 + 20 >> 2] = c2[d3 + 20 >> 2];
              c2[b3 + 24 >> 2] = c2[d3 + 24 >> 2];
              c2[b3 + 28 >> 2] = c2[d3 + 28 >> 2];
              c2[b3 + 32 >> 2] = c2[d3 + 32 >> 2];
              c2[b3 + 36 >> 2] = c2[d3 + 36 >> 2];
              c2[b3 + 40 >> 2] = c2[d3 + 40 >> 2];
              c2[b3 + 44 >> 2] = c2[d3 + 44 >> 2];
              c2[b3 + 48 >> 2] = c2[d3 + 48 >> 2];
              c2[b3 + 52 >> 2] = c2[d3 + 52 >> 2];
              c2[b3 + 56 >> 2] = c2[d3 + 56 >> 2];
              c2[b3 + 60 >> 2] = c2[d3 + 60 >> 2];
              b3 = b3 + 64 | 0;
              d3 = d3 + 64 | 0;
            }
            while ((b3 | 0) < (e2 | 0)) {
              c2[b3 >> 2] = c2[d3 >> 2];
              b3 = b3 + 4 | 0;
              d3 = d3 + 4 | 0;
            }
          } else {
            e2 = g3 - 4 | 0;
            while ((b3 | 0) < (e2 | 0)) {
              a2[b3 >> 0] = a2[d3 >> 0] | 0;
              a2[b3 + 1 >> 0] = a2[d3 + 1 >> 0] | 0;
              a2[b3 + 2 >> 0] = a2[d3 + 2 >> 0] | 0;
              a2[b3 + 3 >> 0] = a2[d3 + 3 >> 0] | 0;
              b3 = b3 + 4 | 0;
              d3 = d3 + 4 | 0;
            }
          }
          while ((b3 | 0) < (g3 | 0)) {
            a2[b3 >> 0] = a2[d3 >> 0] | 0;
            b3 = b3 + 1 | 0;
            d3 = d3 + 1 | 0;
          }
          return h3 | 0;
        }
        function CC(b3) {
          b3 = b3 | 0;
          var c3 = 0;
          c3 = a2[n2 + (b3 & 255) >> 0] | 0;
          if ((c3 | 0) < 8)
            return c3 | 0;
          c3 = a2[n2 + (b3 >> 8 & 255) >> 0] | 0;
          if ((c3 | 0) < 8)
            return c3 + 8 | 0;
          c3 = a2[n2 + (b3 >> 16 & 255) >> 0] | 0;
          if ((c3 | 0) < 8)
            return c3 + 16 | 0;
          return (a2[n2 + (b3 >>> 24) >> 0] | 0) + 24 | 0;
        }
        function DC(a3, b3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          var g3 = 0, h3 = 0, i4 = 0, j3 = 0, k3 = 0, l3 = 0, m3 = 0, n3 = 0, o3 = 0, p3 = 0;
          l3 = a3;
          j3 = b3;
          k3 = j3;
          h3 = d3;
          n3 = e2;
          i4 = n3;
          if (!k3) {
            g3 = (f3 | 0) != 0;
            if (!i4) {
              if (g3) {
                c2[f3 >> 2] = (l3 >>> 0) % (h3 >>> 0);
                c2[f3 + 4 >> 2] = 0;
              }
              n3 = 0;
              f3 = (l3 >>> 0) / (h3 >>> 0) >>> 0;
              return (A2 = n3, f3) | 0;
            } else {
              if (!g3) {
                n3 = 0;
                f3 = 0;
                return (A2 = n3, f3) | 0;
              }
              c2[f3 >> 2] = a3 | 0;
              c2[f3 + 4 >> 2] = b3 & 0;
              n3 = 0;
              f3 = 0;
              return (A2 = n3, f3) | 0;
            }
          }
          g3 = (i4 | 0) == 0;
          do
            if (h3) {
              if (!g3) {
                g3 = (S2(i4 | 0) | 0) - (S2(k3 | 0) | 0) | 0;
                if (g3 >>> 0 <= 31) {
                  m3 = g3 + 1 | 0;
                  i4 = 31 - g3 | 0;
                  b3 = g3 - 31 >> 31;
                  h3 = m3;
                  a3 = l3 >>> (m3 >>> 0) & b3 | k3 << i4;
                  b3 = k3 >>> (m3 >>> 0) & b3;
                  g3 = 0;
                  i4 = l3 << i4;
                  break;
                }
                if (!f3) {
                  n3 = 0;
                  f3 = 0;
                  return (A2 = n3, f3) | 0;
                }
                c2[f3 >> 2] = a3 | 0;
                c2[f3 + 4 >> 2] = j3 | b3 & 0;
                n3 = 0;
                f3 = 0;
                return (A2 = n3, f3) | 0;
              }
              g3 = h3 - 1 | 0;
              if (g3 & h3 | 0) {
                i4 = (S2(h3 | 0) | 0) + 33 - (S2(k3 | 0) | 0) | 0;
                p3 = 64 - i4 | 0;
                m3 = 32 - i4 | 0;
                j3 = m3 >> 31;
                o3 = i4 - 32 | 0;
                b3 = o3 >> 31;
                h3 = i4;
                a3 = m3 - 1 >> 31 & k3 >>> (o3 >>> 0) | (k3 << m3 | l3 >>> (i4 >>> 0)) & b3;
                b3 = b3 & k3 >>> (i4 >>> 0);
                g3 = l3 << p3 & j3;
                i4 = (k3 << p3 | l3 >>> (o3 >>> 0)) & j3 | l3 << m3 & i4 - 33 >> 31;
                break;
              }
              if (f3 | 0) {
                c2[f3 >> 2] = g3 & l3;
                c2[f3 + 4 >> 2] = 0;
              }
              if ((h3 | 0) == 1) {
                o3 = j3 | b3 & 0;
                p3 = a3 | 0 | 0;
                return (A2 = o3, p3) | 0;
              } else {
                p3 = CC(h3 | 0) | 0;
                o3 = k3 >>> (p3 >>> 0) | 0;
                p3 = k3 << 32 - p3 | l3 >>> (p3 >>> 0) | 0;
                return (A2 = o3, p3) | 0;
              }
            } else {
              if (g3) {
                if (f3 | 0) {
                  c2[f3 >> 2] = (k3 >>> 0) % (h3 >>> 0);
                  c2[f3 + 4 >> 2] = 0;
                }
                o3 = 0;
                p3 = (k3 >>> 0) / (h3 >>> 0) >>> 0;
                return (A2 = o3, p3) | 0;
              }
              if (!l3) {
                if (f3 | 0) {
                  c2[f3 >> 2] = 0;
                  c2[f3 + 4 >> 2] = (k3 >>> 0) % (i4 >>> 0);
                }
                o3 = 0;
                p3 = (k3 >>> 0) / (i4 >>> 0) >>> 0;
                return (A2 = o3, p3) | 0;
              }
              g3 = i4 - 1 | 0;
              if (!(g3 & i4)) {
                if (f3 | 0) {
                  c2[f3 >> 2] = a3 | 0;
                  c2[f3 + 4 >> 2] = g3 & k3 | b3 & 0;
                }
                o3 = 0;
                p3 = k3 >>> ((CC(i4 | 0) | 0) >>> 0);
                return (A2 = o3, p3) | 0;
              }
              g3 = (S2(i4 | 0) | 0) - (S2(k3 | 0) | 0) | 0;
              if (g3 >>> 0 <= 30) {
                b3 = g3 + 1 | 0;
                i4 = 31 - g3 | 0;
                h3 = b3;
                a3 = k3 << i4 | l3 >>> (b3 >>> 0);
                b3 = k3 >>> (b3 >>> 0);
                g3 = 0;
                i4 = l3 << i4;
                break;
              }
              if (!f3) {
                o3 = 0;
                p3 = 0;
                return (A2 = o3, p3) | 0;
              }
              c2[f3 >> 2] = a3 | 0;
              c2[f3 + 4 >> 2] = j3 | b3 & 0;
              o3 = 0;
              p3 = 0;
              return (A2 = o3, p3) | 0;
            }
          while (0);
          if (!h3) {
            k3 = i4;
            j3 = 0;
            i4 = 0;
          } else {
            m3 = d3 | 0 | 0;
            l3 = n3 | e2 & 0;
            k3 = xC(m3 | 0, l3 | 0, -1, -1) | 0;
            d3 = A2;
            j3 = i4;
            i4 = 0;
            do {
              e2 = j3;
              j3 = g3 >>> 31 | j3 << 1;
              g3 = i4 | g3 << 1;
              e2 = a3 << 1 | e2 >>> 31 | 0;
              n3 = a3 >>> 31 | b3 << 1 | 0;
              wC(k3 | 0, d3 | 0, e2 | 0, n3 | 0) | 0;
              p3 = A2;
              o3 = p3 >> 31 | ((p3 | 0) < 0 ? -1 : 0) << 1;
              i4 = o3 & 1;
              a3 = wC(e2 | 0, n3 | 0, o3 & m3 | 0, (((p3 | 0) < 0 ? -1 : 0) >> 31 | ((p3 | 0) < 0 ? -1 : 0) << 1) & l3 | 0) | 0;
              b3 = A2;
              h3 = h3 - 1 | 0;
            } while ((h3 | 0) != 0);
            k3 = j3;
            j3 = 0;
          }
          h3 = 0;
          if (f3 | 0) {
            c2[f3 >> 2] = a3;
            c2[f3 + 4 >> 2] = b3;
          }
          o3 = (g3 | 0) >>> 31 | (k3 | h3) << 1 | (h3 << 1 | g3 >>> 31) & 0 | j3;
          p3 = (g3 << 1 | 0 >>> 31) & -2 | i4;
          return (A2 = o3, p3) | 0;
        }
        function EC(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          return DC(a3, b3, c3, d3, 0) | 0;
        }
        function FC(a3) {
          a3 = a3 | 0;
          var b3 = 0, d3 = 0;
          d3 = a3 + 15 & -16 | 0;
          b3 = c2[i3 >> 2] | 0;
          a3 = b3 + d3 | 0;
          if ((d3 | 0) > 0 & (a3 | 0) < (b3 | 0) | (a3 | 0) < 0) {
            Y2() | 0;
            Qa(12);
            return -1;
          }
          c2[i3 >> 2] = a3;
          if ((a3 | 0) > (X2() | 0) ? (W2() | 0) == 0 : 0) {
            c2[i3 >> 2] = b3;
            Qa(12);
            return -1;
          }
          return b3 | 0;
        }
        function GC(b3, c3, d3) {
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          var e2 = 0;
          if ((c3 | 0) < (b3 | 0) & (b3 | 0) < (c3 + d3 | 0)) {
            e2 = b3;
            c3 = c3 + d3 | 0;
            b3 = b3 + d3 | 0;
            while ((d3 | 0) > 0) {
              b3 = b3 - 1 | 0;
              c3 = c3 - 1 | 0;
              d3 = d3 - 1 | 0;
              a2[b3 >> 0] = a2[c3 >> 0] | 0;
            }
            b3 = e2;
          } else
            BC(b3, c3, d3) | 0;
          return b3 | 0;
        }
        function HC(a3, b3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          var f3 = 0, g3 = 0;
          g3 = l2;
          l2 = l2 + 16 | 0;
          f3 = g3 | 0;
          DC(a3, b3, d3, e2, f3) | 0;
          l2 = g3;
          return (A2 = c2[f3 + 4 >> 2] | 0, c2[f3 >> 2] | 0) | 0;
        }
        function IC(a3) {
          a3 = a3 | 0;
          return (a3 & 255) << 24 | (a3 >> 8 & 255) << 16 | (a3 >> 16 & 255) << 8 | a3 >>> 24 | 0;
        }
        function JC(a3, b3, c3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          jb[a3 & 1](b3 | 0, c3 | 0, d3 | 0, e2 | 0, f3 | 0);
        }
        function KC(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = T2(c3);
          kb[a3 & 1](b3 | 0, T2(c3));
        }
        function LC(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = +c3;
          lb[a3 & 31](b3 | 0, +c3);
        }
        function MC(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = T2(c3);
          d3 = T2(d3);
          return T2(mb[a3 & 0](b3 | 0, T2(c3), T2(d3)));
        }
        function NC(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          nb[a3 & 127](b3 | 0);
        }
        function OC(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          ob[a3 & 31](b3 | 0, c3 | 0);
        }
        function PC(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return pb[a3 & 31](b3 | 0) | 0;
        }
        function QC(a3, b3, c3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = +c3;
          d3 = +d3;
          e2 = e2 | 0;
          qb[a3 & 1](b3 | 0, +c3, +d3, e2 | 0);
        }
        function RC(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = +c3;
          d3 = +d3;
          rb[a3 & 1](b3 | 0, +c3, +d3);
        }
        function SC(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          return sb[a3 & 7](b3 | 0, c3 | 0, d3 | 0) | 0;
        }
        function TC(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          return +tb[a3 & 1](b3 | 0, c3 | 0, d3 | 0);
        }
        function UC(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          return +ub[a3 & 15](b3 | 0);
        }
        function VC(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = +c3;
          return vb[a3 & 1](b3 | 0, +c3) | 0;
        }
        function WC(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          return wb[a3 & 15](b3 | 0, c3 | 0) | 0;
        }
        function XC(a3, b3, c3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = +d3;
          e2 = +e2;
          f3 = f3 | 0;
          xb[a3 & 1](b3 | 0, c3 | 0, +d3, +e2, f3 | 0);
        }
        function YC(a3, b3, c3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          g3 = g3 | 0;
          yb[a3 & 1](b3 | 0, c3 | 0, d3 | 0, e2 | 0, f3 | 0, g3 | 0);
        }
        function ZC(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          return +zb[a3 & 7](b3 | 0, c3 | 0);
        }
        function _C(a3) {
          a3 = a3 | 0;
          return Ab[a3 & 7]() | 0;
        }
        function $C(a3, b3, c3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          return Bb[a3 & 1](b3 | 0, c3 | 0, d3 | 0, e2 | 0, f3 | 0) | 0;
        }
        function aD(a3, b3, c3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          e2 = +e2;
          Cb[a3 & 1](b3 | 0, c3 | 0, d3 | 0, +e2);
        }
        function bD(a3, b3, c3, d3, e2, f3, g3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = T2(d3);
          e2 = e2 | 0;
          f3 = T2(f3);
          g3 = g3 | 0;
          Db[a3 & 1](b3 | 0, c3 | 0, T2(d3), e2 | 0, T2(f3), g3 | 0);
        }
        function cD(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          Eb[a3 & 15](b3 | 0, c3 | 0, d3 | 0);
        }
        function dD(a3) {
          a3 = a3 | 0;
          Fb[a3 & 0]();
        }
        function eD(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = +d3;
          Gb[a3 & 15](b3 | 0, c3 | 0, +d3);
        }
        function fD(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = +b3;
          c3 = +c3;
          return Hb[a3 & 1](+b3, +c3) | 0;
        }
        function gD(a3, b3, c3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          Ib[a3 & 15](b3 | 0, c3 | 0, d3 | 0, e2 | 0);
        }
        function hD(a3, b3, c3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          U2(0);
        }
        function iD(a3, b3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          U2(1);
        }
        function jD(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          U2(2);
        }
        function kD(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = T2(b3);
          c3 = T2(c3);
          U2(3);
          return ib;
        }
        function lD(a3) {
          a3 = a3 | 0;
          U2(4);
        }
        function mD(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          U2(5);
        }
        function nD(a3) {
          a3 = a3 | 0;
          U2(6);
          return 0;
        }
        function oD(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = +b3;
          c3 = +c3;
          d3 = d3 | 0;
          U2(7);
        }
        function pD(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = +b3;
          c3 = +c3;
          U2(8);
        }
        function qD(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          U2(9);
          return 0;
        }
        function rD(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          U2(10);
          return 0;
        }
        function sD(a3) {
          a3 = a3 | 0;
          U2(11);
          return 0;
        }
        function tD(a3, b3) {
          a3 = a3 | 0;
          b3 = +b3;
          U2(12);
          return 0;
        }
        function uD(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          U2(13);
          return 0;
        }
        function vD(a3, b3, c3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = +c3;
          d3 = +d3;
          e2 = e2 | 0;
          U2(14);
        }
        function wD(a3, b3, c3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          f3 = f3 | 0;
          U2(15);
        }
        function xD(a3, b3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          U2(16);
          return 0;
        }
        function yD() {
          U2(17);
          return 0;
        }
        function zD(a3, b3, c3, d3, e2) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          e2 = e2 | 0;
          U2(18);
          return 0;
        }
        function AD(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = +d3;
          U2(19);
        }
        function BD(a3, b3, c3, d3, e2, f3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = T2(c3);
          d3 = d3 | 0;
          e2 = T2(e2);
          f3 = f3 | 0;
          U2(20);
        }
        function CD(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          U2(21);
        }
        function DD() {
          U2(22);
        }
        function ED(a3, b3, c3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = +c3;
          U2(23);
        }
        function FD(a3, b3) {
          a3 = +a3;
          b3 = +b3;
          U2(24);
          return 0;
        }
        function GD(a3, b3, c3, d3) {
          a3 = a3 | 0;
          b3 = b3 | 0;
          c3 = c3 | 0;
          d3 = d3 | 0;
          U2(25);
        }
        var jb = [hD, Uw];
        var kb = [iD, of];
        var lb = [jD, Of, Pf, Qf, Rf, Sf, Tf, Uf, Wf, Xf, Zf, _f, $f, ag, bg, cg, dg, eg, fg, jD, jD, jD, jD, jD, jD, jD, jD, jD, jD, jD, jD, jD];
        var mb = [kD];
        var nb = [lD, kC, Ki, Li, Mi, rn2, sn2, tn2, Pu, Qu, Ru, Cw, Dw, Ew, DA, EA, FA, Rb, tf, yf, Vf, Yf, hh, ih, ri, Ui, kj, Jj, bk, zk, Wk, nl, Hl, bm, um, Nm, en2, Nn, fo, yo, Ro, ip, Bp, Xp, nq, Eq, Zq, lf, Hr, _r, us, Ps, ft, Ct, Ot, Rt, ju, mu, Eu, Uu, Xu, pv, Kv, Vi, $x, Ky, az, sz, Rz, hA, tA, wA, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD];
        var ob = [mD, zf, Af, Df, Ef, Ff, Gf, Hf, If, Lf, Mf, Nf, wg, zg, Ag, Bg, Cg, Dg, Eg, Jg, Ng, rh, $p, qq, Ts, cy, Sv, xy, mD, mD, mD, mD];
        var pb = [nD, rB, sf, jg, ng, og, pg, qg, rg, sg, ug, vg, Kg, Lg, jh, ar, jt, sv, hy, jy, nD, nD, nD, nD, nD, nD, nD, nD, nD, nD, nD, nD];
        var qb = [oD, kh];
        var rb = [pD, Hu];
        var sb = [qD, sB, tB, zB, Dk, Rn, Lr, wz];
        var tb = [rD, ym];
        var ub = [sD, xg, yg, Fg, lh, mh, nh, oh, ph, qh, sD, sD, sD, sD, sD, sD];
        var vb = [tD, Kt];
        var wb = [uD, lC, Mg, xi, Nj, _k, rl, jn, jo, Iq, pf, ez, uD, uD, uD, uD];
        var xb = [vD, oj];
        var yb = [wD, Vz];
        var zb = [xD, Gg, sh, th, uh, Rm, xD, xD];
        var Ab = [yD, vh, qf, jf, Wt, qu, av, AA];
        var Bb = [zD, ee];
        var Cb = [AD, Vo];
        var Db = [BD, Pg];
        var Eb = [CD, kg, tg, Hg, Ig, fk, Ll, mp, Fp, nf, vx, Oy, lA, CD, CD, CD];
        var Fb = [DD];
        var Gb = [ED, Bf, Cf, Jf, Kf, gg, hg, ig, Co, cs, Ft, ED, ED, ED, ED, ED];
        var Hb = [FD, Mu];
        var Ib = [GD, fm, ir, ys, st, au, wu, hv, Pv, oy, LA, GD, GD, GD, GD, GD];
        return { _llvm_bswap_i32: IC, dynCall_idd: fD, dynCall_i: _C, _i64Subtract: wC, ___udivdi3: EC, dynCall_vif: KC, setThrew: Nb, dynCall_viii: cD, _bitshift64Lshr: AC, _bitshift64Shl: zC, dynCall_vi: NC, dynCall_viiddi: XC, dynCall_diii: TC, dynCall_iii: WC, _memset: yC, _sbrk: FC, _memcpy: BC, __GLOBAL__sub_I_Yoga_cpp: hf, dynCall_vii: OC, ___uremdi3: HC, dynCall_vid: LC, stackAlloc: Jb, _nbind_init: _A, getTempRet0: Pb, dynCall_di: UC, dynCall_iid: VC, setTempRet0: Ob, _i64Add: xC, dynCall_fiff: MC, dynCall_iiii: SC, _emscripten_get_global_libc: qB, dynCall_viid: eD, dynCall_viiid: aD, dynCall_viififi: bD, dynCall_ii: PC, __GLOBAL__sub_I_Binding_cc: Sx, dynCall_viiii: gD, dynCall_iiiiii: $C, stackSave: Kb, dynCall_viiiii: JC, __GLOBAL__sub_I_nbind_cc: wh, dynCall_vidd: RC, _free: pB, runPostSets: vC, dynCall_viiiiii: YC, establishStackSpace: Mb, _memmove: GC, stackRestore: Lb, _malloc: oB, __GLOBAL__sub_I_common_cc: Bv, dynCall_viddi: QC, dynCall_dii: ZC, dynCall_v: dD };
      }(
        Module.asmGlobalArg,
        Module.asmLibraryArg,
        buffer
      );
      var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
      var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
      var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
      var setThrew = Module["setThrew"] = asm["setThrew"];
      var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
      var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
      var _memset = Module["_memset"] = asm["_memset"];
      var _sbrk = Module["_sbrk"] = asm["_sbrk"];
      var _memcpy = Module["_memcpy"] = asm["_memcpy"];
      var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
      var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
      var _nbind_init = Module["_nbind_init"] = asm["_nbind_init"];
      var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
      var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
      var _i64Add = Module["_i64Add"] = asm["_i64Add"];
      var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
      var __GLOBAL__sub_I_Yoga_cpp = Module["__GLOBAL__sub_I_Yoga_cpp"] = asm["__GLOBAL__sub_I_Yoga_cpp"];
      var __GLOBAL__sub_I_Binding_cc = Module["__GLOBAL__sub_I_Binding_cc"] = asm["__GLOBAL__sub_I_Binding_cc"];
      var stackSave = Module["stackSave"] = asm["stackSave"];
      var __GLOBAL__sub_I_nbind_cc = Module["__GLOBAL__sub_I_nbind_cc"] = asm["__GLOBAL__sub_I_nbind_cc"];
      var _free = Module["_free"] = asm["_free"];
      var runPostSets = Module["runPostSets"] = asm["runPostSets"];
      var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
      var _memmove = Module["_memmove"] = asm["_memmove"];
      var stackRestore = Module["stackRestore"] = asm["stackRestore"];
      var _malloc = Module["_malloc"] = asm["_malloc"];
      var __GLOBAL__sub_I_common_cc = Module["__GLOBAL__sub_I_common_cc"] = asm["__GLOBAL__sub_I_common_cc"];
      var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
      var dynCall_vif = Module["dynCall_vif"] = asm["dynCall_vif"];
      var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
      var dynCall_fiff = Module["dynCall_fiff"] = asm["dynCall_fiff"];
      var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
      var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
      var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
      var dynCall_viddi = Module["dynCall_viddi"] = asm["dynCall_viddi"];
      var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
      var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
      var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
      var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
      var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
      var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
      var dynCall_viiddi = Module["dynCall_viiddi"] = asm["dynCall_viiddi"];
      var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
      var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
      var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
      var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
      var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
      var dynCall_viififi = Module["dynCall_viififi"] = asm["dynCall_viififi"];
      var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
      var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
      var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
      var dynCall_idd = Module["dynCall_idd"] = asm["dynCall_idd"];
      var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
      Runtime.stackAlloc = Module["stackAlloc"];
      Runtime.stackSave = Module["stackSave"];
      Runtime.stackRestore = Module["stackRestore"];
      Runtime.establishStackSpace = Module["establishStackSpace"];
      Runtime.setTempRet0 = Module["setTempRet0"];
      Runtime.getTempRet0 = Module["getTempRet0"];
      Module["asm"] = asm;
      function ExitStatus(status) {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
      }
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;
      var initialStackTop;
      var preloadStartTime = null;
      var calledMain = false;
      dependenciesFulfilled = function runCaller() {
        if (!Module["calledRun"])
          run();
        if (!Module["calledRun"])
          dependenciesFulfilled = runCaller;
      };
      Module["callMain"] = Module.callMain = function callMain(args) {
        args = args || [];
        ensureInitRuntime();
        var argc = args.length + 1;
        function pad() {
          for (var i4 = 0; i4 < 4 - 1; i4++) {
            argv.push(0);
          }
        }
        var argv = [allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL)];
        pad();
        for (var i3 = 0; i3 < argc - 1; i3 = i3 + 1) {
          argv.push(allocate(intArrayFromString(args[i3]), "i8", ALLOC_NORMAL));
          pad();
        }
        argv.push(0);
        argv = allocate(argv, "i32", ALLOC_NORMAL);
        try {
          var ret = Module["_main"](argc, argv, 0);
          exit(ret, true);
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else if (e == "SimulateInfiniteLoop") {
            Module["noExitRuntime"] = true;
            return;
          } else {
            var toLog = e;
            if (e && typeof e === "object" && e.stack) {
              toLog = [e, e.stack];
            }
            Module.printErr("exception thrown: " + toLog);
            Module["quit"](1, e);
          }
        } finally {
          calledMain = true;
        }
      };
      function run(args) {
        args = args || Module["arguments"];
        if (preloadStartTime === null)
          preloadStartTime = Date.now();
        if (runDependencies > 0) {
          return;
        }
        preRun();
        if (runDependencies > 0)
          return;
        if (Module["calledRun"])
          return;
        function doRun() {
          if (Module["calledRun"])
            return;
          Module["calledRun"] = true;
          if (ABORT)
            return;
          ensureInitRuntime();
          preMain();
          if (Module["onRuntimeInitialized"])
            Module["onRuntimeInitialized"]();
          if (Module["_main"] && shouldRunNow)
            Module["callMain"](args);
          postRun();
        }
        if (Module["setStatus"]) {
          Module["setStatus"]("Running...");
          setTimeout(function() {
            setTimeout(function() {
              Module["setStatus"]("");
            }, 1);
            doRun();
          }, 1);
        } else {
          doRun();
        }
      }
      Module["run"] = Module.run = run;
      function exit(status, implicit) {
        if (implicit && Module["noExitRuntime"]) {
          return;
        }
        if (Module["noExitRuntime"]) {
        } else {
          ABORT = true;
          EXITSTATUS = status;
          STACKTOP = initialStackTop;
          exitRuntime();
          if (Module["onExit"])
            Module["onExit"](status);
        }
        if (ENVIRONMENT_IS_NODE) {
          process["exit"](status);
        }
        Module["quit"](status, new ExitStatus(status));
      }
      Module["exit"] = Module.exit = exit;
      var abortDecorators = [];
      function abort(what) {
        if (Module["onAbort"]) {
          Module["onAbort"](what);
        }
        if (what !== void 0) {
          Module.print(what);
          Module.printErr(what);
          what = JSON.stringify(what);
        } else {
          what = "";
        }
        ABORT = true;
        EXITSTATUS = 1;
        var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
        var output = "abort(" + what + ") at " + stackTrace() + extra;
        if (abortDecorators) {
          abortDecorators.forEach(function(decorator) {
            output = decorator(output, what);
          });
        }
        throw output;
      }
      Module["abort"] = Module.abort = abort;
      if (Module["preInit"]) {
        if (typeof Module["preInit"] == "function")
          Module["preInit"] = [Module["preInit"]];
        while (Module["preInit"].length > 0) {
          Module["preInit"].pop()();
        }
      }
      var shouldRunNow = true;
      if (Module["noInitialRun"]) {
        shouldRunNow = false;
      }
      run();
    });
  }
});

// node_modules/.pnpm/yoga-layout-prebuilt@1.10.0/node_modules/yoga-layout-prebuilt/yoga-layout/dist/entry-browser.js
var require_entry_browser = __commonJS({
  "node_modules/.pnpm/yoga-layout-prebuilt@1.10.0/node_modules/yoga-layout-prebuilt/yoga-layout/dist/entry-browser.js"(exports2, module2) {
    "use strict";
    var Yoga = require_entry_common();
    var nbind = require_nbind();
    var ran = false;
    var ret = null;
    nbind({}, function(err2, result) {
      if (ran) {
        return;
      }
      ran = true;
      if (err2) {
        throw err2;
      }
      ret = result;
    });
    if (!ran) {
      throw new Error("Failed to load the yoga module - it needed to be loaded synchronously, but didn't");
    }
    module2.exports = Yoga(ret.bind, ret.lib);
  }
});

// node_modules/.pnpm/ansi-regex@5.0.1/node_modules/ansi-regex/index.js
var require_ansi_regex = __commonJS({
  "node_modules/.pnpm/ansi-regex@5.0.1/node_modules/ansi-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = ({ onlyFirst = false } = {}) => {
      const pattern = [
        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
        "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
      ].join("|");
      return new RegExp(pattern, onlyFirst ? void 0 : "g");
    };
  }
});

// node_modules/.pnpm/strip-ansi@6.0.1/node_modules/strip-ansi/index.js
var require_strip_ansi = __commonJS({
  "node_modules/.pnpm/strip-ansi@6.0.1/node_modules/strip-ansi/index.js"(exports2, module2) {
    "use strict";
    var ansiRegex = require_ansi_regex();
    module2.exports = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
  }
});

// node_modules/.pnpm/is-fullwidth-code-point@3.0.0/node_modules/is-fullwidth-code-point/index.js
var require_is_fullwidth_code_point = __commonJS({
  "node_modules/.pnpm/is-fullwidth-code-point@3.0.0/node_modules/is-fullwidth-code-point/index.js"(exports2, module2) {
    "use strict";
    var isFullwidthCodePoint = (codePoint) => {
      if (Number.isNaN(codePoint)) {
        return false;
      }
      if (codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141)) {
        return true;
      }
      return false;
    };
    module2.exports = isFullwidthCodePoint;
    module2.exports.default = isFullwidthCodePoint;
  }
});

// node_modules/.pnpm/emoji-regex@8.0.0/node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS({
  "node_modules/.pnpm/emoji-regex@8.0.0/node_modules/emoji-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function() {
      return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
    };
  }
});

// node_modules/.pnpm/string-width@4.2.3/node_modules/string-width/index.js
var require_string_width = __commonJS({
  "node_modules/.pnpm/string-width@4.2.3/node_modules/string-width/index.js"(exports2, module2) {
    "use strict";
    var stripAnsi = require_strip_ansi();
    var isFullwidthCodePoint = require_is_fullwidth_code_point();
    var emojiRegex = require_emoji_regex();
    var stringWidth = (string) => {
      if (typeof string !== "string" || string.length === 0) {
        return 0;
      }
      string = stripAnsi(string);
      if (string.length === 0) {
        return 0;
      }
      string = string.replace(emojiRegex(), "  ");
      let width = 0;
      for (let i3 = 0; i3 < string.length; i3++) {
        const code = string.codePointAt(i3);
        if (code <= 31 || code >= 127 && code <= 159) {
          continue;
        }
        if (code >= 768 && code <= 879) {
          continue;
        }
        if (code > 65535) {
          i3++;
        }
        width += isFullwidthCodePoint(code) ? 2 : 1;
      }
      return width;
    };
    module2.exports = stringWidth;
    module2.exports.default = stringWidth;
  }
});

// node_modules/.pnpm/widest-line@3.1.0/node_modules/widest-line/index.js
var require_widest_line = __commonJS({
  "node_modules/.pnpm/widest-line@3.1.0/node_modules/widest-line/index.js"(exports2, module2) {
    "use strict";
    var stringWidth = require_string_width();
    var widestLine = (input) => {
      let max = 0;
      for (const line of input.split("\n")) {
        max = Math.max(max, stringWidth(line));
      }
      return max;
    };
    module2.exports = widestLine;
    module2.exports.default = widestLine;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/measure-text.js
var require_measure_text = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/measure-text.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var widest_line_1 = __importDefault(require_widest_line());
    var cache = {};
    exports2.default = (text) => {
      if (text.length === 0) {
        return {
          width: 0,
          height: 0
        };
      }
      if (cache[text]) {
        return cache[text];
      }
      const width = widest_line_1.default(text);
      const height = text.split("\n").length;
      cache[text] = { width, height };
      return { width, height };
    };
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/styles.js
var require_styles = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/styles.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var yoga_layout_prebuilt_1 = __importDefault(require_entry_browser());
    var applyPositionStyles = (node, style) => {
      if ("position" in style) {
        node.setPositionType(style.position === "absolute" ? yoga_layout_prebuilt_1.default.POSITION_TYPE_ABSOLUTE : yoga_layout_prebuilt_1.default.POSITION_TYPE_RELATIVE);
      }
    };
    var applyMarginStyles = (node, style) => {
      if ("marginLeft" in style) {
        node.setMargin(yoga_layout_prebuilt_1.default.EDGE_START, style.marginLeft || 0);
      }
      if ("marginRight" in style) {
        node.setMargin(yoga_layout_prebuilt_1.default.EDGE_END, style.marginRight || 0);
      }
      if ("marginTop" in style) {
        node.setMargin(yoga_layout_prebuilt_1.default.EDGE_TOP, style.marginTop || 0);
      }
      if ("marginBottom" in style) {
        node.setMargin(yoga_layout_prebuilt_1.default.EDGE_BOTTOM, style.marginBottom || 0);
      }
    };
    var applyPaddingStyles = (node, style) => {
      if ("paddingLeft" in style) {
        node.setPadding(yoga_layout_prebuilt_1.default.EDGE_LEFT, style.paddingLeft || 0);
      }
      if ("paddingRight" in style) {
        node.setPadding(yoga_layout_prebuilt_1.default.EDGE_RIGHT, style.paddingRight || 0);
      }
      if ("paddingTop" in style) {
        node.setPadding(yoga_layout_prebuilt_1.default.EDGE_TOP, style.paddingTop || 0);
      }
      if ("paddingBottom" in style) {
        node.setPadding(yoga_layout_prebuilt_1.default.EDGE_BOTTOM, style.paddingBottom || 0);
      }
    };
    var applyFlexStyles = (node, style) => {
      var _a2;
      if ("flexGrow" in style) {
        node.setFlexGrow((_a2 = style.flexGrow) !== null && _a2 !== void 0 ? _a2 : 0);
      }
      if ("flexShrink" in style) {
        node.setFlexShrink(typeof style.flexShrink === "number" ? style.flexShrink : 1);
      }
      if ("flexDirection" in style) {
        if (style.flexDirection === "row") {
          node.setFlexDirection(yoga_layout_prebuilt_1.default.FLEX_DIRECTION_ROW);
        }
        if (style.flexDirection === "row-reverse") {
          node.setFlexDirection(yoga_layout_prebuilt_1.default.FLEX_DIRECTION_ROW_REVERSE);
        }
        if (style.flexDirection === "column") {
          node.setFlexDirection(yoga_layout_prebuilt_1.default.FLEX_DIRECTION_COLUMN);
        }
        if (style.flexDirection === "column-reverse") {
          node.setFlexDirection(yoga_layout_prebuilt_1.default.FLEX_DIRECTION_COLUMN_REVERSE);
        }
      }
      if ("flexBasis" in style) {
        if (typeof style.flexBasis === "number") {
          node.setFlexBasis(style.flexBasis);
        } else if (typeof style.flexBasis === "string") {
          node.setFlexBasisPercent(Number.parseInt(style.flexBasis, 10));
        } else {
          node.setFlexBasis(NaN);
        }
      }
      if ("alignItems" in style) {
        if (style.alignItems === "stretch" || !style.alignItems) {
          node.setAlignItems(yoga_layout_prebuilt_1.default.ALIGN_STRETCH);
        }
        if (style.alignItems === "flex-start") {
          node.setAlignItems(yoga_layout_prebuilt_1.default.ALIGN_FLEX_START);
        }
        if (style.alignItems === "center") {
          node.setAlignItems(yoga_layout_prebuilt_1.default.ALIGN_CENTER);
        }
        if (style.alignItems === "flex-end") {
          node.setAlignItems(yoga_layout_prebuilt_1.default.ALIGN_FLEX_END);
        }
      }
      if ("alignSelf" in style) {
        if (style.alignSelf === "auto" || !style.alignSelf) {
          node.setAlignSelf(yoga_layout_prebuilt_1.default.ALIGN_AUTO);
        }
        if (style.alignSelf === "flex-start") {
          node.setAlignSelf(yoga_layout_prebuilt_1.default.ALIGN_FLEX_START);
        }
        if (style.alignSelf === "center") {
          node.setAlignSelf(yoga_layout_prebuilt_1.default.ALIGN_CENTER);
        }
        if (style.alignSelf === "flex-end") {
          node.setAlignSelf(yoga_layout_prebuilt_1.default.ALIGN_FLEX_END);
        }
      }
      if ("justifyContent" in style) {
        if (style.justifyContent === "flex-start" || !style.justifyContent) {
          node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_FLEX_START);
        }
        if (style.justifyContent === "center") {
          node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_CENTER);
        }
        if (style.justifyContent === "flex-end") {
          node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_FLEX_END);
        }
        if (style.justifyContent === "space-between") {
          node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_SPACE_BETWEEN);
        }
        if (style.justifyContent === "space-around") {
          node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_SPACE_AROUND);
        }
      }
    };
    var applyDimensionStyles = (node, style) => {
      var _a2, _b;
      if ("width" in style) {
        if (typeof style.width === "number") {
          node.setWidth(style.width);
        } else if (typeof style.width === "string") {
          node.setWidthPercent(Number.parseInt(style.width, 10));
        } else {
          node.setWidthAuto();
        }
      }
      if ("height" in style) {
        if (typeof style.height === "number") {
          node.setHeight(style.height);
        } else if (typeof style.height === "string") {
          node.setHeightPercent(Number.parseInt(style.height, 10));
        } else {
          node.setHeightAuto();
        }
      }
      if ("minWidth" in style) {
        if (typeof style.minWidth === "string") {
          node.setMinWidthPercent(Number.parseInt(style.minWidth, 10));
        } else {
          node.setMinWidth((_a2 = style.minWidth) !== null && _a2 !== void 0 ? _a2 : 0);
        }
      }
      if ("minHeight" in style) {
        if (typeof style.minHeight === "string") {
          node.setMinHeightPercent(Number.parseInt(style.minHeight, 10));
        } else {
          node.setMinHeight((_b = style.minHeight) !== null && _b !== void 0 ? _b : 0);
        }
      }
    };
    var applyDisplayStyles = (node, style) => {
      if ("display" in style) {
        node.setDisplay(style.display === "flex" ? yoga_layout_prebuilt_1.default.DISPLAY_FLEX : yoga_layout_prebuilt_1.default.DISPLAY_NONE);
      }
    };
    var applyBorderStyles = (node, style) => {
      if ("borderStyle" in style) {
        const borderWidth = typeof style.borderStyle === "string" ? 1 : 0;
        node.setBorder(yoga_layout_prebuilt_1.default.EDGE_TOP, borderWidth);
        node.setBorder(yoga_layout_prebuilt_1.default.EDGE_BOTTOM, borderWidth);
        node.setBorder(yoga_layout_prebuilt_1.default.EDGE_LEFT, borderWidth);
        node.setBorder(yoga_layout_prebuilt_1.default.EDGE_RIGHT, borderWidth);
      }
    };
    exports2.default = (node, style = {}) => {
      applyPositionStyles(node, style);
      applyMarginStyles(node, style);
      applyPaddingStyles(node, style);
      applyFlexStyles(node, style);
      applyDimensionStyles(node, style);
      applyDisplayStyles(node, style);
      applyBorderStyles(node, style);
    };
  }
});

// node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js
var require_color_name = __commonJS({
  "node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  "node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js"(exports2, module2) {
    var cssKeywords = require_color_name();
    var reverseKeywords = {};
    for (const key2 of Object.keys(cssKeywords)) {
      reverseKeywords[cssKeywords[key2]] = key2;
    }
    var convert = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    module2.exports = convert;
    for (const model of Object.keys(convert)) {
      if (!("channels" in convert[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      const { channels, labels } = convert[model];
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], "channels", { value: channels });
      Object.defineProperty(convert[model], "labels", { value: labels });
    }
    convert.rgb.hsl = function(rgb) {
      const r2 = rgb[0] / 255;
      const g2 = rgb[1] / 255;
      const b2 = rgb[2] / 255;
      const min = Math.min(r2, g2, b2);
      const max = Math.max(r2, g2, b2);
      const delta = max - min;
      let h2;
      let s2;
      if (max === min) {
        h2 = 0;
      } else if (r2 === max) {
        h2 = (g2 - b2) / delta;
      } else if (g2 === max) {
        h2 = 2 + (b2 - r2) / delta;
      } else if (b2 === max) {
        h2 = 4 + (r2 - g2) / delta;
      }
      h2 = Math.min(h2 * 60, 360);
      if (h2 < 0) {
        h2 += 360;
      }
      const l2 = (min + max) / 2;
      if (max === min) {
        s2 = 0;
      } else if (l2 <= 0.5) {
        s2 = delta / (max + min);
      } else {
        s2 = delta / (2 - max - min);
      }
      return [h2, s2 * 100, l2 * 100];
    };
    convert.rgb.hsv = function(rgb) {
      let rdif;
      let gdif;
      let bdif;
      let h2;
      let s2;
      const r2 = rgb[0] / 255;
      const g2 = rgb[1] / 255;
      const b2 = rgb[2] / 255;
      const v2 = Math.max(r2, g2, b2);
      const diff = v2 - Math.min(r2, g2, b2);
      const diffc = function(c2) {
        return (v2 - c2) / 6 / diff + 1 / 2;
      };
      if (diff === 0) {
        h2 = 0;
        s2 = 0;
      } else {
        s2 = diff / v2;
        rdif = diffc(r2);
        gdif = diffc(g2);
        bdif = diffc(b2);
        if (r2 === v2) {
          h2 = bdif - gdif;
        } else if (g2 === v2) {
          h2 = 1 / 3 + rdif - bdif;
        } else if (b2 === v2) {
          h2 = 2 / 3 + gdif - rdif;
        }
        if (h2 < 0) {
          h2 += 1;
        } else if (h2 > 1) {
          h2 -= 1;
        }
      }
      return [
        h2 * 360,
        s2 * 100,
        v2 * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      const r2 = rgb[0];
      const g2 = rgb[1];
      let b2 = rgb[2];
      const h2 = convert.rgb.hsl(rgb)[0];
      const w2 = 1 / 255 * Math.min(r2, Math.min(g2, b2));
      b2 = 1 - 1 / 255 * Math.max(r2, Math.max(g2, b2));
      return [h2, w2 * 100, b2 * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      const r2 = rgb[0] / 255;
      const g2 = rgb[1] / 255;
      const b2 = rgb[2] / 255;
      const k2 = Math.min(1 - r2, 1 - g2, 1 - b2);
      const c2 = (1 - r2 - k2) / (1 - k2) || 0;
      const m2 = (1 - g2 - k2) / (1 - k2) || 0;
      const y2 = (1 - b2 - k2) / (1 - k2) || 0;
      return [c2 * 100, m2 * 100, y2 * 100, k2 * 100];
    };
    function comparativeDistance(x2, y2) {
      return (x2[0] - y2[0]) ** 2 + (x2[1] - y2[1]) ** 2 + (x2[2] - y2[2]) ** 2;
    }
    convert.rgb.keyword = function(rgb) {
      const reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      let currentClosestDistance = Infinity;
      let currentClosestKeyword;
      for (const keyword of Object.keys(cssKeywords)) {
        const value = cssKeywords[keyword];
        const distance = comparativeDistance(rgb, value);
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      let r2 = rgb[0] / 255;
      let g2 = rgb[1] / 255;
      let b2 = rgb[2] / 255;
      r2 = r2 > 0.04045 ? ((r2 + 0.055) / 1.055) ** 2.4 : r2 / 12.92;
      g2 = g2 > 0.04045 ? ((g2 + 0.055) / 1.055) ** 2.4 : g2 / 12.92;
      b2 = b2 > 0.04045 ? ((b2 + 0.055) / 1.055) ** 2.4 : b2 / 12.92;
      const x2 = r2 * 0.4124 + g2 * 0.3576 + b2 * 0.1805;
      const y2 = r2 * 0.2126 + g2 * 0.7152 + b2 * 0.0722;
      const z2 = r2 * 0.0193 + g2 * 0.1192 + b2 * 0.9505;
      return [x2 * 100, y2 * 100, z2 * 100];
    };
    convert.rgb.lab = function(rgb) {
      const xyz = convert.rgb.xyz(rgb);
      let x2 = xyz[0];
      let y2 = xyz[1];
      let z2 = xyz[2];
      x2 /= 95.047;
      y2 /= 100;
      z2 /= 108.883;
      x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
      y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
      z2 = z2 > 8856e-6 ? z2 ** (1 / 3) : 7.787 * z2 + 16 / 116;
      const l2 = 116 * y2 - 16;
      const a2 = 500 * (x2 - y2);
      const b2 = 200 * (y2 - z2);
      return [l2, a2, b2];
    };
    convert.hsl.rgb = function(hsl) {
      const h2 = hsl[0] / 360;
      const s2 = hsl[1] / 100;
      const l2 = hsl[2] / 100;
      let t2;
      let t3;
      let val;
      if (s2 === 0) {
        val = l2 * 255;
        return [val, val, val];
      }
      if (l2 < 0.5) {
        t2 = l2 * (1 + s2);
      } else {
        t2 = l2 + s2 - l2 * s2;
      }
      const t1 = 2 * l2 - t2;
      const rgb = [0, 0, 0];
      for (let i3 = 0; i3 < 3; i3++) {
        t3 = h2 + 1 / 3 * -(i3 - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i3] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      const h2 = hsl[0];
      let s2 = hsl[1] / 100;
      let l2 = hsl[2] / 100;
      let smin = s2;
      const lmin = Math.max(l2, 0.01);
      l2 *= 2;
      s2 *= l2 <= 1 ? l2 : 2 - l2;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      const v2 = (l2 + s2) / 2;
      const sv = l2 === 0 ? 2 * smin / (lmin + smin) : 2 * s2 / (l2 + s2);
      return [h2, sv * 100, v2 * 100];
    };
    convert.hsv.rgb = function(hsv) {
      const h2 = hsv[0] / 60;
      const s2 = hsv[1] / 100;
      let v2 = hsv[2] / 100;
      const hi = Math.floor(h2) % 6;
      const f2 = h2 - Math.floor(h2);
      const p2 = 255 * v2 * (1 - s2);
      const q2 = 255 * v2 * (1 - s2 * f2);
      const t2 = 255 * v2 * (1 - s2 * (1 - f2));
      v2 *= 255;
      switch (hi) {
        case 0:
          return [v2, t2, p2];
        case 1:
          return [q2, v2, p2];
        case 2:
          return [p2, v2, t2];
        case 3:
          return [p2, q2, v2];
        case 4:
          return [t2, p2, v2];
        case 5:
          return [v2, p2, q2];
      }
    };
    convert.hsv.hsl = function(hsv) {
      const h2 = hsv[0];
      const s2 = hsv[1] / 100;
      const v2 = hsv[2] / 100;
      const vmin = Math.max(v2, 0.01);
      let sl;
      let l2;
      l2 = (2 - s2) * v2;
      const lmin = (2 - s2) * vmin;
      sl = s2 * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l2 /= 2;
      return [h2, sl * 100, l2 * 100];
    };
    convert.hwb.rgb = function(hwb) {
      const h2 = hwb[0] / 360;
      let wh = hwb[1] / 100;
      let bl = hwb[2] / 100;
      const ratio = wh + bl;
      let f2;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      const i3 = Math.floor(6 * h2);
      const v2 = 1 - bl;
      f2 = 6 * h2 - i3;
      if ((i3 & 1) !== 0) {
        f2 = 1 - f2;
      }
      const n2 = wh + f2 * (v2 - wh);
      let r2;
      let g2;
      let b2;
      switch (i3) {
        default:
        case 6:
        case 0:
          r2 = v2;
          g2 = n2;
          b2 = wh;
          break;
        case 1:
          r2 = n2;
          g2 = v2;
          b2 = wh;
          break;
        case 2:
          r2 = wh;
          g2 = v2;
          b2 = n2;
          break;
        case 3:
          r2 = wh;
          g2 = n2;
          b2 = v2;
          break;
        case 4:
          r2 = n2;
          g2 = wh;
          b2 = v2;
          break;
        case 5:
          r2 = v2;
          g2 = wh;
          b2 = n2;
          break;
      }
      return [r2 * 255, g2 * 255, b2 * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      const c2 = cmyk[0] / 100;
      const m2 = cmyk[1] / 100;
      const y2 = cmyk[2] / 100;
      const k2 = cmyk[3] / 100;
      const r2 = 1 - Math.min(1, c2 * (1 - k2) + k2);
      const g2 = 1 - Math.min(1, m2 * (1 - k2) + k2);
      const b2 = 1 - Math.min(1, y2 * (1 - k2) + k2);
      return [r2 * 255, g2 * 255, b2 * 255];
    };
    convert.xyz.rgb = function(xyz) {
      const x2 = xyz[0] / 100;
      const y2 = xyz[1] / 100;
      const z2 = xyz[2] / 100;
      let r2;
      let g2;
      let b2;
      r2 = x2 * 3.2406 + y2 * -1.5372 + z2 * -0.4986;
      g2 = x2 * -0.9689 + y2 * 1.8758 + z2 * 0.0415;
      b2 = x2 * 0.0557 + y2 * -0.204 + z2 * 1.057;
      r2 = r2 > 31308e-7 ? 1.055 * r2 ** (1 / 2.4) - 0.055 : r2 * 12.92;
      g2 = g2 > 31308e-7 ? 1.055 * g2 ** (1 / 2.4) - 0.055 : g2 * 12.92;
      b2 = b2 > 31308e-7 ? 1.055 * b2 ** (1 / 2.4) - 0.055 : b2 * 12.92;
      r2 = Math.min(Math.max(0, r2), 1);
      g2 = Math.min(Math.max(0, g2), 1);
      b2 = Math.min(Math.max(0, b2), 1);
      return [r2 * 255, g2 * 255, b2 * 255];
    };
    convert.xyz.lab = function(xyz) {
      let x2 = xyz[0];
      let y2 = xyz[1];
      let z2 = xyz[2];
      x2 /= 95.047;
      y2 /= 100;
      z2 /= 108.883;
      x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
      y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
      z2 = z2 > 8856e-6 ? z2 ** (1 / 3) : 7.787 * z2 + 16 / 116;
      const l2 = 116 * y2 - 16;
      const a2 = 500 * (x2 - y2);
      const b2 = 200 * (y2 - z2);
      return [l2, a2, b2];
    };
    convert.lab.xyz = function(lab) {
      const l2 = lab[0];
      const a2 = lab[1];
      const b2 = lab[2];
      let x2;
      let y2;
      let z2;
      y2 = (l2 + 16) / 116;
      x2 = a2 / 500 + y2;
      z2 = y2 - b2 / 200;
      const y22 = y2 ** 3;
      const x22 = x2 ** 3;
      const z22 = z2 ** 3;
      y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787;
      x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787;
      z2 = z22 > 8856e-6 ? z22 : (z2 - 16 / 116) / 7.787;
      x2 *= 95.047;
      y2 *= 100;
      z2 *= 108.883;
      return [x2, y2, z2];
    };
    convert.lab.lch = function(lab) {
      const l2 = lab[0];
      const a2 = lab[1];
      const b2 = lab[2];
      let h2;
      const hr = Math.atan2(b2, a2);
      h2 = hr * 360 / 2 / Math.PI;
      if (h2 < 0) {
        h2 += 360;
      }
      const c2 = Math.sqrt(a2 * a2 + b2 * b2);
      return [l2, c2, h2];
    };
    convert.lch.lab = function(lch) {
      const l2 = lch[0];
      const c2 = lch[1];
      const h2 = lch[2];
      const hr = h2 / 360 * 2 * Math.PI;
      const a2 = c2 * Math.cos(hr);
      const b2 = c2 * Math.sin(hr);
      return [l2, a2, b2];
    };
    convert.rgb.ansi16 = function(args, saturation = null) {
      const [r2, g2, b2] = args;
      let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      let ansi = 30 + (Math.round(b2 / 255) << 2 | Math.round(g2 / 255) << 1 | Math.round(r2 / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      const r2 = args[0];
      const g2 = args[1];
      const b2 = args[2];
      if (r2 === g2 && g2 === b2) {
        if (r2 < 8) {
          return 16;
        }
        if (r2 > 248) {
          return 231;
        }
        return Math.round((r2 - 8) / 247 * 24) + 232;
      }
      const ansi = 16 + 36 * Math.round(r2 / 255 * 5) + 6 * Math.round(g2 / 255 * 5) + Math.round(b2 / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      let color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      const mult = (~~(args > 50) + 1) * 0.5;
      const r2 = (color & 1) * mult * 255;
      const g2 = (color >> 1 & 1) * mult * 255;
      const b2 = (color >> 2 & 1) * mult * 255;
      return [r2, g2, b2];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        const c2 = (args - 232) * 10 + 8;
        return [c2, c2, c2];
      }
      args -= 16;
      let rem;
      const r2 = Math.floor(args / 36) / 5 * 255;
      const g2 = Math.floor((rem = args % 36) / 6) / 5 * 255;
      const b2 = rem % 6 / 5 * 255;
      return [r2, g2, b2];
    };
    convert.rgb.hex = function(args) {
      const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      const string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      let colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map((char) => {
          return char + char;
        }).join("");
      }
      const integer = parseInt(colorString, 16);
      const r2 = integer >> 16 & 255;
      const g2 = integer >> 8 & 255;
      const b2 = integer & 255;
      return [r2, g2, b2];
    };
    convert.rgb.hcg = function(rgb) {
      const r2 = rgb[0] / 255;
      const g2 = rgb[1] / 255;
      const b2 = rgb[2] / 255;
      const max = Math.max(Math.max(r2, g2), b2);
      const min = Math.min(Math.min(r2, g2), b2);
      const chroma = max - min;
      let grayscale;
      let hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r2) {
        hue = (g2 - b2) / chroma % 6;
      } else if (max === g2) {
        hue = 2 + (b2 - r2) / chroma;
      } else {
        hue = 4 + (r2 - g2) / chroma;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      const s2 = hsl[1] / 100;
      const l2 = hsl[2] / 100;
      const c2 = l2 < 0.5 ? 2 * s2 * l2 : 2 * s2 * (1 - l2);
      let f2 = 0;
      if (c2 < 1) {
        f2 = (l2 - 0.5 * c2) / (1 - c2);
      }
      return [hsl[0], c2 * 100, f2 * 100];
    };
    convert.hsv.hcg = function(hsv) {
      const s2 = hsv[1] / 100;
      const v2 = hsv[2] / 100;
      const c2 = s2 * v2;
      let f2 = 0;
      if (c2 < 1) {
        f2 = (v2 - c2) / (1 - c2);
      }
      return [hsv[0], c2 * 100, f2 * 100];
    };
    convert.hcg.rgb = function(hcg) {
      const h2 = hcg[0] / 360;
      const c2 = hcg[1] / 100;
      const g2 = hcg[2] / 100;
      if (c2 === 0) {
        return [g2 * 255, g2 * 255, g2 * 255];
      }
      const pure = [0, 0, 0];
      const hi = h2 % 1 * 6;
      const v2 = hi % 1;
      const w2 = 1 - v2;
      let mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v2;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w2;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v2;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w2;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v2;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w2;
      }
      mg = (1 - c2) * g2;
      return [
        (c2 * pure[0] + mg) * 255,
        (c2 * pure[1] + mg) * 255,
        (c2 * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      const c2 = hcg[1] / 100;
      const g2 = hcg[2] / 100;
      const v2 = c2 + g2 * (1 - c2);
      let f2 = 0;
      if (v2 > 0) {
        f2 = c2 / v2;
      }
      return [hcg[0], f2 * 100, v2 * 100];
    };
    convert.hcg.hsl = function(hcg) {
      const c2 = hcg[1] / 100;
      const g2 = hcg[2] / 100;
      const l2 = g2 * (1 - c2) + 0.5 * c2;
      let s2 = 0;
      if (l2 > 0 && l2 < 0.5) {
        s2 = c2 / (2 * l2);
      } else if (l2 >= 0.5 && l2 < 1) {
        s2 = c2 / (2 * (1 - l2));
      }
      return [hcg[0], s2 * 100, l2 * 100];
    };
    convert.hcg.hwb = function(hcg) {
      const c2 = hcg[1] / 100;
      const g2 = hcg[2] / 100;
      const v2 = c2 + g2 * (1 - c2);
      return [hcg[0], (v2 - c2) * 100, (1 - v2) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      const w2 = hwb[1] / 100;
      const b2 = hwb[2] / 100;
      const v2 = 1 - b2;
      const c2 = v2 - w2;
      let g2 = 0;
      if (c2 < 1) {
        g2 = (v2 - c2) / (1 - c2);
      }
      return [hwb[0], c2 * 100, g2 * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hsv = convert.gray.hsl;
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      const val = Math.round(gray[0] / 100 * 255) & 255;
      const integer = (val << 16) + (val << 8) + val;
      const string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js
var require_route = __commonJS({
  "node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js"(exports2, module2) {
    var conversions = require_conversions();
    function buildGraph() {
      const graph = {};
      const models = Object.keys(conversions);
      for (let len = models.length, i3 = 0; i3 < len; i3++) {
        graph[models[i3]] = {
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      const graph = buildGraph();
      const queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        const current = queue.pop();
        const adjacents = Object.keys(conversions[current]);
        for (let len = adjacents.length, i3 = 0; i3 < len; i3++) {
          const adjacent = adjacents[i3];
          const node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from, to) {
      return function(args) {
        return to(from(args));
      };
    }
    function wrapConversion(toModel, graph) {
      const path = [graph[toModel].parent, toModel];
      let fn2 = conversions[graph[toModel].parent][toModel];
      let cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn2 = link(conversions[graph[cur].parent][cur], fn2);
        cur = graph[cur].parent;
      }
      fn2.conversion = path;
      return fn2;
    }
    module2.exports = function(fromModel) {
      const graph = deriveBFS(fromModel);
      const conversion = {};
      const models = Object.keys(graph);
      for (let len = models.length, i3 = 0; i3 < len; i3++) {
        const toModel = models[i3];
        const node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  "node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js"(exports2, module2) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn2) {
      const wrappedFn = function(...args) {
        const arg0 = args[0];
        if (arg0 === void 0 || arg0 === null) {
          return arg0;
        }
        if (arg0.length > 1) {
          args = arg0;
        }
        return fn2(args);
      };
      if ("conversion" in fn2) {
        wrappedFn.conversion = fn2.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn2) {
      const wrappedFn = function(...args) {
        const arg0 = args[0];
        if (arg0 === void 0 || arg0 === null) {
          return arg0;
        }
        if (arg0.length > 1) {
          args = arg0;
        }
        const result = fn2(args);
        if (typeof result === "object") {
          for (let len = result.length, i3 = 0; i3 < len; i3++) {
            result[i3] = Math.round(result[i3]);
          }
        }
        return result;
      };
      if ("conversion" in fn2) {
        wrappedFn.conversion = fn2.conversion;
      }
      return wrappedFn;
    }
    models.forEach((fromModel) => {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      const routes = route(fromModel);
      const routeModels = Object.keys(routes);
      routeModels.forEach((toModel) => {
        const fn2 = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn2);
        convert[fromModel][toModel].raw = wrapRaw(fn2);
      });
    });
    module2.exports = convert;
  }
});

// node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS({
  "node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js"(exports2, module2) {
    "use strict";
    var wrapAnsi16 = (fn2, offset) => (...args) => {
      const code = fn2(...args);
      return `\x1B[${code + offset}m`;
    };
    var wrapAnsi256 = (fn2, offset) => (...args) => {
      const code = fn2(...args);
      return `\x1B[${38 + offset};5;${code}m`;
    };
    var wrapAnsi16m = (fn2, offset) => (...args) => {
      const rgb = fn2(...args);
      return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    };
    var ansi2ansi = (n2) => n2;
    var rgb2rgb = (r2, g2, b2) => [r2, g2, b2];
    var setLazyProperty = (object, property, get) => {
      Object.defineProperty(object, property, {
        get: () => {
          const value = get();
          Object.defineProperty(object, property, {
            value,
            enumerable: true,
            configurable: true
          });
          return value;
        },
        enumerable: true,
        configurable: true
      });
    };
    var colorConvert;
    var makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
      if (colorConvert === void 0) {
        colorConvert = require_color_convert();
      }
      const offset = isBackground ? 10 : 0;
      const styles = {};
      for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
        const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
        if (sourceSpace === targetSpace) {
          styles[name] = wrap(identity, offset);
        } else if (typeof suite === "object") {
          styles[name] = wrap(suite[targetSpace], offset);
        }
      }
      return styles;
    };
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles = {
        modifier: {
          reset: [0, 0],
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          blackBright: [90, 39],
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles.color.gray = styles.color.blackBright;
      styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
      styles.color.grey = styles.color.blackBright;
      styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
      for (const [groupName, group] of Object.entries(styles)) {
        for (const [styleName, style] of Object.entries(group)) {
          styles[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
      }
      Object.defineProperty(styles, "codes", {
        value: codes,
        enumerable: false
      });
      styles.color.close = "\x1B[39m";
      styles.bgColor.close = "\x1B[49m";
      setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
      setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
      setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
      setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
      setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
      setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
      return styles;
    }
    Object.defineProperty(module2, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  }
});

// node_modules/.pnpm/wrap-ansi@6.2.0/node_modules/wrap-ansi/index.js
var require_wrap_ansi = __commonJS({
  "node_modules/.pnpm/wrap-ansi@6.2.0/node_modules/wrap-ansi/index.js"(exports2, module2) {
    "use strict";
    var stringWidth = require_string_width();
    var stripAnsi = require_strip_ansi();
    var ansiStyles = require_ansi_styles();
    var ESCAPES = /* @__PURE__ */ new Set([
      "\x1B",
      "\x9B"
    ]);
    var END_CODE = 39;
    var wrapAnsi = (code) => `${ESCAPES.values().next().value}[${code}m`;
    var wordLengths = (string) => string.split(" ").map((character) => stringWidth(character));
    var wrapWord = (rows, word, columns) => {
      const characters = [...word];
      let isInsideEscape = false;
      let visible = stringWidth(stripAnsi(rows[rows.length - 1]));
      for (const [index, character] of characters.entries()) {
        const characterLength = stringWidth(character);
        if (visible + characterLength <= columns) {
          rows[rows.length - 1] += character;
        } else {
          rows.push(character);
          visible = 0;
        }
        if (ESCAPES.has(character)) {
          isInsideEscape = true;
        } else if (isInsideEscape && character === "m") {
          isInsideEscape = false;
          continue;
        }
        if (isInsideEscape) {
          continue;
        }
        visible += characterLength;
        if (visible === columns && index < characters.length - 1) {
          rows.push("");
          visible = 0;
        }
      }
      if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {
        rows[rows.length - 2] += rows.pop();
      }
    };
    var stringVisibleTrimSpacesRight = (str) => {
      const words = str.split(" ");
      let last = words.length;
      while (last > 0) {
        if (stringWidth(words[last - 1]) > 0) {
          break;
        }
        last--;
      }
      if (last === words.length) {
        return str;
      }
      return words.slice(0, last).join(" ") + words.slice(last).join("");
    };
    var exec = (string, columns, options = {}) => {
      if (options.trim !== false && string.trim() === "") {
        return "";
      }
      let pre = "";
      let ret = "";
      let escapeCode;
      const lengths = wordLengths(string);
      let rows = [""];
      for (const [index, word] of string.split(" ").entries()) {
        if (options.trim !== false) {
          rows[rows.length - 1] = rows[rows.length - 1].trimLeft();
        }
        let rowLength = stringWidth(rows[rows.length - 1]);
        if (index !== 0) {
          if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {
            rows.push("");
            rowLength = 0;
          }
          if (rowLength > 0 || options.trim === false) {
            rows[rows.length - 1] += " ";
            rowLength++;
          }
        }
        if (options.hard && lengths[index] > columns) {
          const remainingColumns = columns - rowLength;
          const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);
          const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);
          if (breaksStartingNextLine < breaksStartingThisLine) {
            rows.push("");
          }
          wrapWord(rows, word, columns);
          continue;
        }
        if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {
          if (options.wordWrap === false && rowLength < columns) {
            wrapWord(rows, word, columns);
            continue;
          }
          rows.push("");
        }
        if (rowLength + lengths[index] > columns && options.wordWrap === false) {
          wrapWord(rows, word, columns);
          continue;
        }
        rows[rows.length - 1] += word;
      }
      if (options.trim !== false) {
        rows = rows.map(stringVisibleTrimSpacesRight);
      }
      pre = rows.join("\n");
      for (const [index, character] of [...pre].entries()) {
        ret += character;
        if (ESCAPES.has(character)) {
          const code2 = parseFloat(/\d[^m]*/.exec(pre.slice(index, index + 4)));
          escapeCode = code2 === END_CODE ? null : code2;
        }
        const code = ansiStyles.codes.get(Number(escapeCode));
        if (escapeCode && code) {
          if (pre[index + 1] === "\n") {
            ret += wrapAnsi(code);
          } else if (character === "\n") {
            ret += wrapAnsi(escapeCode);
          }
        }
      }
      return ret;
    };
    module2.exports = (string, columns, options) => {
      return String(string).normalize().replace(/\r\n/g, "\n").split("\n").map((line) => exec(line, columns, options)).join("\n");
    };
  }
});

// node_modules/.pnpm/astral-regex@2.0.0/node_modules/astral-regex/index.js
var require_astral_regex = __commonJS({
  "node_modules/.pnpm/astral-regex@2.0.0/node_modules/astral-regex/index.js"(exports2, module2) {
    "use strict";
    var regex = "[\uD800-\uDBFF][\uDC00-\uDFFF]";
    var astralRegex = (options) => options && options.exact ? new RegExp(`^${regex}$`) : new RegExp(regex, "g");
    module2.exports = astralRegex;
  }
});

// node_modules/.pnpm/slice-ansi@3.0.0/node_modules/slice-ansi/index.js
var require_slice_ansi = __commonJS({
  "node_modules/.pnpm/slice-ansi@3.0.0/node_modules/slice-ansi/index.js"(exports2, module2) {
    "use strict";
    var isFullwidthCodePoint = require_is_fullwidth_code_point();
    var astralRegex = require_astral_regex();
    var ansiStyles = require_ansi_styles();
    var ESCAPES = [
      "\x1B",
      "\x9B"
    ];
    var wrapAnsi = (code) => `${ESCAPES[0]}[${code}m`;
    var checkAnsi = (ansiCodes, isEscapes, endAnsiCode) => {
      let output = [];
      ansiCodes = [...ansiCodes];
      for (let ansiCode of ansiCodes) {
        const ansiCodeOrigin = ansiCode;
        if (ansiCode.match(";")) {
          ansiCode = ansiCode.split(";")[0][0] + "0";
        }
        const item = ansiStyles.codes.get(parseInt(ansiCode, 10));
        if (item) {
          const indexEscape = ansiCodes.indexOf(item.toString());
          if (indexEscape >= 0) {
            ansiCodes.splice(indexEscape, 1);
          } else {
            output.push(wrapAnsi(isEscapes ? item : ansiCodeOrigin));
          }
        } else if (isEscapes) {
          output.push(wrapAnsi(0));
          break;
        } else {
          output.push(wrapAnsi(ansiCodeOrigin));
        }
      }
      if (isEscapes) {
        output = output.filter((element, index) => output.indexOf(element) === index);
        if (endAnsiCode !== void 0) {
          const fistEscapeCode = wrapAnsi(ansiStyles.codes.get(parseInt(endAnsiCode, 10)));
          output = output.reduce((current, next) => next === fistEscapeCode ? [next, ...current] : [...current, next], []);
        }
      }
      return output.join("");
    };
    module2.exports = (string, begin, end) => {
      const characters = [...string.normalize()];
      const ansiCodes = [];
      end = typeof end === "number" ? end : characters.length;
      let isInsideEscape = false;
      let ansiCode;
      let visible = 0;
      let output = "";
      for (const [index, character] of characters.entries()) {
        let leftEscape = false;
        if (ESCAPES.includes(character)) {
          const code = /\d[^m]*/.exec(string.slice(index, index + 18));
          ansiCode = code && code.length > 0 ? code[0] : void 0;
          if (visible < end) {
            isInsideEscape = true;
            if (ansiCode !== void 0) {
              ansiCodes.push(ansiCode);
            }
          }
        } else if (isInsideEscape && character === "m") {
          isInsideEscape = false;
          leftEscape = true;
        }
        if (!isInsideEscape && !leftEscape) {
          ++visible;
        }
        if (!astralRegex({ exact: true }).test(character) && isFullwidthCodePoint(character.codePointAt())) {
          ++visible;
        }
        if (visible > begin && visible <= end) {
          output += character;
        } else if (visible === begin && !isInsideEscape && ansiCode !== void 0) {
          output = checkAnsi(ansiCodes);
        } else if (visible >= end) {
          output += checkAnsi(ansiCodes, true, ansiCode);
          break;
        }
      }
      return output;
    };
  }
});

// node_modules/.pnpm/cli-truncate@2.1.0/node_modules/cli-truncate/index.js
var require_cli_truncate = __commonJS({
  "node_modules/.pnpm/cli-truncate@2.1.0/node_modules/cli-truncate/index.js"(exports2, module2) {
    "use strict";
    var sliceAnsi = require_slice_ansi();
    var stringWidth = require_string_width();
    function getIndexOfNearestSpace(string, index, shouldSearchRight) {
      if (string.charAt(index) === " ") {
        return index;
      }
      for (let i3 = 1; i3 <= 3; i3++) {
        if (shouldSearchRight) {
          if (string.charAt(index + i3) === " ") {
            return index + i3;
          }
        } else if (string.charAt(index - i3) === " ") {
          return index - i3;
        }
      }
      return index;
    }
    module2.exports = (text, columns, options) => {
      options = {
        position: "end",
        preferTruncationOnSpace: false,
        ...options
      };
      const { position, space, preferTruncationOnSpace } = options;
      let ellipsis = "\u2026";
      let ellipsisWidth = 1;
      if (typeof text !== "string") {
        throw new TypeError(`Expected \`input\` to be a string, got ${typeof text}`);
      }
      if (typeof columns !== "number") {
        throw new TypeError(`Expected \`columns\` to be a number, got ${typeof columns}`);
      }
      if (columns < 1) {
        return "";
      }
      if (columns === 1) {
        return ellipsis;
      }
      const length = stringWidth(text);
      if (length <= columns) {
        return text;
      }
      if (position === "start") {
        if (preferTruncationOnSpace) {
          const nearestSpace = getIndexOfNearestSpace(text, length - columns + 1, true);
          return ellipsis + sliceAnsi(text, nearestSpace, length).trim();
        }
        if (space === true) {
          ellipsis += " ";
          ellipsisWidth = 2;
        }
        return ellipsis + sliceAnsi(text, length - columns + ellipsisWidth, length);
      }
      if (position === "middle") {
        if (space === true) {
          ellipsis = " " + ellipsis + " ";
          ellipsisWidth = 3;
        }
        const half = Math.floor(columns / 2);
        if (preferTruncationOnSpace) {
          const spaceNearFirstBreakPoint = getIndexOfNearestSpace(text, half);
          const spaceNearSecondBreakPoint = getIndexOfNearestSpace(text, length - (columns - half) + 1, true);
          return sliceAnsi(text, 0, spaceNearFirstBreakPoint) + ellipsis + sliceAnsi(text, spaceNearSecondBreakPoint, length).trim();
        }
        return sliceAnsi(text, 0, half) + ellipsis + sliceAnsi(text, length - (columns - half) + ellipsisWidth, length);
      }
      if (position === "end") {
        if (preferTruncationOnSpace) {
          const nearestSpace = getIndexOfNearestSpace(text, columns - 1);
          return sliceAnsi(text, 0, nearestSpace) + ellipsis;
        }
        if (space === true) {
          ellipsis = " " + ellipsis;
          ellipsisWidth = 2;
        }
        return sliceAnsi(text, 0, columns - ellipsisWidth) + ellipsis;
      }
      throw new Error(`Expected \`options.position\` to be either \`start\`, \`middle\` or \`end\`, got ${position}`);
    };
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/wrap-text.js
var require_wrap_text = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/wrap-text.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var wrap_ansi_1 = __importDefault(require_wrap_ansi());
    var cli_truncate_1 = __importDefault(require_cli_truncate());
    var cache = {};
    exports2.default = (text, maxWidth, wrapType) => {
      const cacheKey = text + String(maxWidth) + String(wrapType);
      if (cache[cacheKey]) {
        return cache[cacheKey];
      }
      let wrappedText = text;
      if (wrapType === "wrap") {
        wrappedText = wrap_ansi_1.default(text, maxWidth, {
          trim: false,
          hard: true
        });
      }
      if (wrapType.startsWith("truncate")) {
        let position = "end";
        if (wrapType === "truncate-middle") {
          position = "middle";
        }
        if (wrapType === "truncate-start") {
          position = "start";
        }
        wrappedText = cli_truncate_1.default(text, maxWidth, { position });
      }
      cache[cacheKey] = wrappedText;
      return wrappedText;
    };
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/squash-text-nodes.js
var require_squash_text_nodes = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/squash-text-nodes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var squashTextNodes = (node) => {
      let text = "";
      if (node.childNodes.length > 0) {
        for (const childNode of node.childNodes) {
          let nodeText = "";
          if (childNode.nodeName === "#text") {
            nodeText = childNode.nodeValue;
          } else {
            if (childNode.nodeName === "ink-text" || childNode.nodeName === "ink-virtual-text") {
              nodeText = squashTextNodes(childNode);
            }
            if (nodeText.length > 0 && typeof childNode.internal_transform === "function") {
              nodeText = childNode.internal_transform(nodeText);
            }
          }
          text += nodeText;
        }
      }
      return text;
    };
    exports2.default = squashTextNodes;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/dom.js
var require_dom = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/dom.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setTextNodeValue = exports2.createTextNode = exports2.setStyle = exports2.setAttribute = exports2.removeChildNode = exports2.insertBeforeNode = exports2.appendChildNode = exports2.createNode = exports2.TEXT_NAME = void 0;
    var yoga_layout_prebuilt_1 = __importDefault(require_entry_browser());
    var measure_text_1 = __importDefault(require_measure_text());
    var styles_1 = __importDefault(require_styles());
    var wrap_text_1 = __importDefault(require_wrap_text());
    var squash_text_nodes_1 = __importDefault(require_squash_text_nodes());
    exports2.TEXT_NAME = "#text";
    exports2.createNode = (nodeName) => {
      var _a2;
      const node = {
        nodeName,
        style: {},
        attributes: {},
        childNodes: [],
        parentNode: null,
        yogaNode: nodeName === "ink-virtual-text" ? void 0 : yoga_layout_prebuilt_1.default.Node.create()
      };
      if (nodeName === "ink-text") {
        (_a2 = node.yogaNode) === null || _a2 === void 0 ? void 0 : _a2.setMeasureFunc(measureTextNode.bind(null, node));
      }
      return node;
    };
    exports2.appendChildNode = (node, childNode) => {
      var _a2;
      if (childNode.parentNode) {
        exports2.removeChildNode(childNode.parentNode, childNode);
      }
      childNode.parentNode = node;
      node.childNodes.push(childNode);
      if (childNode.yogaNode) {
        (_a2 = node.yogaNode) === null || _a2 === void 0 ? void 0 : _a2.insertChild(childNode.yogaNode, node.yogaNode.getChildCount());
      }
      if (node.nodeName === "ink-text" || node.nodeName === "ink-virtual-text") {
        markNodeAsDirty(node);
      }
    };
    exports2.insertBeforeNode = (node, newChildNode, beforeChildNode) => {
      var _a2, _b;
      if (newChildNode.parentNode) {
        exports2.removeChildNode(newChildNode.parentNode, newChildNode);
      }
      newChildNode.parentNode = node;
      const index = node.childNodes.indexOf(beforeChildNode);
      if (index >= 0) {
        node.childNodes.splice(index, 0, newChildNode);
        if (newChildNode.yogaNode) {
          (_a2 = node.yogaNode) === null || _a2 === void 0 ? void 0 : _a2.insertChild(newChildNode.yogaNode, index);
        }
        return;
      }
      node.childNodes.push(newChildNode);
      if (newChildNode.yogaNode) {
        (_b = node.yogaNode) === null || _b === void 0 ? void 0 : _b.insertChild(newChildNode.yogaNode, node.yogaNode.getChildCount());
      }
      if (node.nodeName === "ink-text" || node.nodeName === "ink-virtual-text") {
        markNodeAsDirty(node);
      }
    };
    exports2.removeChildNode = (node, removeNode) => {
      var _a2, _b;
      if (removeNode.yogaNode) {
        (_b = (_a2 = removeNode.parentNode) === null || _a2 === void 0 ? void 0 : _a2.yogaNode) === null || _b === void 0 ? void 0 : _b.removeChild(removeNode.yogaNode);
      }
      removeNode.parentNode = null;
      const index = node.childNodes.indexOf(removeNode);
      if (index >= 0) {
        node.childNodes.splice(index, 1);
      }
      if (node.nodeName === "ink-text" || node.nodeName === "ink-virtual-text") {
        markNodeAsDirty(node);
      }
    };
    exports2.setAttribute = (node, key2, value) => {
      node.attributes[key2] = value;
    };
    exports2.setStyle = (node, style) => {
      node.style = style;
      if (node.yogaNode) {
        styles_1.default(node.yogaNode, style);
      }
    };
    exports2.createTextNode = (text) => {
      const node = {
        nodeName: "#text",
        nodeValue: text,
        yogaNode: void 0,
        parentNode: null,
        style: {}
      };
      exports2.setTextNodeValue(node, text);
      return node;
    };
    var measureTextNode = function(node, width) {
      var _a2, _b;
      const text = node.nodeName === "#text" ? node.nodeValue : squash_text_nodes_1.default(node);
      const dimensions = measure_text_1.default(text);
      if (dimensions.width <= width) {
        return dimensions;
      }
      if (dimensions.width >= 1 && width > 0 && width < 1) {
        return dimensions;
      }
      const textWrap = (_b = (_a2 = node.style) === null || _a2 === void 0 ? void 0 : _a2.textWrap) !== null && _b !== void 0 ? _b : "wrap";
      const wrappedText = wrap_text_1.default(text, width, textWrap);
      return measure_text_1.default(wrappedText);
    };
    var findClosestYogaNode = (node) => {
      var _a2;
      if (!node || !node.parentNode) {
        return void 0;
      }
      return (_a2 = node.yogaNode) !== null && _a2 !== void 0 ? _a2 : findClosestYogaNode(node.parentNode);
    };
    var markNodeAsDirty = (node) => {
      const yogaNode = findClosestYogaNode(node);
      yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.markDirty();
    };
    exports2.setTextNodeValue = (node, text) => {
      if (typeof text !== "string") {
        text = String(text);
      }
      node.nodeValue = text;
      markNodeAsDirty(node);
    };
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/constants.js
var require_constants = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/constants.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      BINARY_TYPES: ["nodebuffer", "arraybuffer", "fragments"],
      GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
      kStatusCode: Symbol("status-code"),
      kWebSocket: Symbol("websocket"),
      EMPTY_BUFFER: Buffer.alloc(0),
      NOOP: () => {
      }
    };
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/buffer-util.js
var require_buffer_util = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/buffer-util.js"(exports2, module2) {
    "use strict";
    var { EMPTY_BUFFER } = require_constants();
    function concat(list, totalLength) {
      if (list.length === 0)
        return EMPTY_BUFFER;
      if (list.length === 1)
        return list[0];
      const target = Buffer.allocUnsafe(totalLength);
      let offset = 0;
      for (let i3 = 0; i3 < list.length; i3++) {
        const buf = list[i3];
        target.set(buf, offset);
        offset += buf.length;
      }
      if (offset < totalLength)
        return target.slice(0, offset);
      return target;
    }
    function _mask(source, mask2, output, offset, length) {
      for (let i3 = 0; i3 < length; i3++) {
        output[offset + i3] = source[i3] ^ mask2[i3 & 3];
      }
    }
    function _unmask(buffer2, mask2) {
      const length = buffer2.length;
      for (let i3 = 0; i3 < length; i3++) {
        buffer2[i3] ^= mask2[i3 & 3];
      }
    }
    function toArrayBuffer(buf) {
      if (buf.byteLength === buf.buffer.byteLength) {
        return buf.buffer;
      }
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    }
    function toBuffer(data) {
      toBuffer.readOnly = true;
      if (Buffer.isBuffer(data))
        return data;
      let buf;
      if (data instanceof ArrayBuffer) {
        buf = Buffer.from(data);
      } else if (ArrayBuffer.isView(data)) {
        buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
      } else {
        buf = Buffer.from(data);
        toBuffer.readOnly = false;
      }
      return buf;
    }
    try {
      const bufferUtil = __require("bufferutil");
      const bu = bufferUtil.BufferUtil || bufferUtil;
      module2.exports = {
        concat,
        mask(source, mask2, output, offset, length) {
          if (length < 48)
            _mask(source, mask2, output, offset, length);
          else
            bu.mask(source, mask2, output, offset, length);
        },
        toArrayBuffer,
        toBuffer,
        unmask(buffer2, mask2) {
          if (buffer2.length < 32)
            _unmask(buffer2, mask2);
          else
            bu.unmask(buffer2, mask2);
        }
      };
    } catch (e) {
      module2.exports = {
        concat,
        mask: _mask,
        toArrayBuffer,
        toBuffer,
        unmask: _unmask
      };
    }
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/limiter.js
var require_limiter = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/limiter.js"(exports2, module2) {
    "use strict";
    var kDone = Symbol("kDone");
    var kRun = Symbol("kRun");
    var Limiter = class {
      constructor(concurrency) {
        this[kDone] = () => {
          this.pending--;
          this[kRun]();
        };
        this.concurrency = concurrency || Infinity;
        this.jobs = [];
        this.pending = 0;
      }
      add(job) {
        this.jobs.push(job);
        this[kRun]();
      }
      [kRun]() {
        if (this.pending === this.concurrency)
          return;
        if (this.jobs.length) {
          const job = this.jobs.shift();
          this.pending++;
          job(this[kDone]);
        }
      }
    };
    module2.exports = Limiter;
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/permessage-deflate.js
var require_permessage_deflate = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/permessage-deflate.js"(exports2, module2) {
    "use strict";
    var zlib = __require("zlib");
    var bufferUtil = require_buffer_util();
    var Limiter = require_limiter();
    var { kStatusCode, NOOP } = require_constants();
    var TRAILER = Buffer.from([0, 0, 255, 255]);
    var kPerMessageDeflate = Symbol("permessage-deflate");
    var kTotalLength = Symbol("total-length");
    var kCallback = Symbol("callback");
    var kBuffers = Symbol("buffers");
    var kError = Symbol("error");
    var zlibLimiter;
    var PerMessageDeflate = class {
      constructor(options, isServer, maxPayload) {
        this._maxPayload = maxPayload | 0;
        this._options = options || {};
        this._threshold = this._options.threshold !== void 0 ? this._options.threshold : 1024;
        this._isServer = !!isServer;
        this._deflate = null;
        this._inflate = null;
        this.params = null;
        if (!zlibLimiter) {
          const concurrency = this._options.concurrencyLimit !== void 0 ? this._options.concurrencyLimit : 10;
          zlibLimiter = new Limiter(concurrency);
        }
      }
      static get extensionName() {
        return "permessage-deflate";
      }
      offer() {
        const params = {};
        if (this._options.serverNoContextTakeover) {
          params.server_no_context_takeover = true;
        }
        if (this._options.clientNoContextTakeover) {
          params.client_no_context_takeover = true;
        }
        if (this._options.serverMaxWindowBits) {
          params.server_max_window_bits = this._options.serverMaxWindowBits;
        }
        if (this._options.clientMaxWindowBits) {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        } else if (this._options.clientMaxWindowBits == null) {
          params.client_max_window_bits = true;
        }
        return params;
      }
      accept(configurations) {
        configurations = this.normalizeParams(configurations);
        this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
        return this.params;
      }
      cleanup() {
        if (this._inflate) {
          this._inflate.close();
          this._inflate = null;
        }
        if (this._deflate) {
          const callback = this._deflate[kCallback];
          this._deflate.close();
          this._deflate = null;
          if (callback) {
            callback(
              new Error(
                "The deflate stream was closed while data was being processed"
              )
            );
          }
        }
      }
      acceptAsServer(offers) {
        const opts = this._options;
        const accepted = offers.find((params) => {
          if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === "number" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === "number" && !params.client_max_window_bits) {
            return false;
          }
          return true;
        });
        if (!accepted) {
          throw new Error("None of the extension offers can be accepted");
        }
        if (opts.serverNoContextTakeover) {
          accepted.server_no_context_takeover = true;
        }
        if (opts.clientNoContextTakeover) {
          accepted.client_no_context_takeover = true;
        }
        if (typeof opts.serverMaxWindowBits === "number") {
          accepted.server_max_window_bits = opts.serverMaxWindowBits;
        }
        if (typeof opts.clientMaxWindowBits === "number") {
          accepted.client_max_window_bits = opts.clientMaxWindowBits;
        } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
          delete accepted.client_max_window_bits;
        }
        return accepted;
      }
      acceptAsClient(response) {
        const params = response[0];
        if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
          throw new Error('Unexpected parameter "client_no_context_takeover"');
        }
        if (!params.client_max_window_bits) {
          if (typeof this._options.clientMaxWindowBits === "number") {
            params.client_max_window_bits = this._options.clientMaxWindowBits;
          }
        } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === "number" && params.client_max_window_bits > this._options.clientMaxWindowBits) {
          throw new Error(
            'Unexpected or invalid parameter "client_max_window_bits"'
          );
        }
        return params;
      }
      normalizeParams(configurations) {
        configurations.forEach((params) => {
          Object.keys(params).forEach((key2) => {
            let value = params[key2];
            if (value.length > 1) {
              throw new Error(`Parameter "${key2}" must have only a single value`);
            }
            value = value[0];
            if (key2 === "client_max_window_bits") {
              if (value !== true) {
                const num2 = +value;
                if (!Number.isInteger(num2) || num2 < 8 || num2 > 15) {
                  throw new TypeError(
                    `Invalid value for parameter "${key2}": ${value}`
                  );
                }
                value = num2;
              } else if (!this._isServer) {
                throw new TypeError(
                  `Invalid value for parameter "${key2}": ${value}`
                );
              }
            } else if (key2 === "server_max_window_bits") {
              const num2 = +value;
              if (!Number.isInteger(num2) || num2 < 8 || num2 > 15) {
                throw new TypeError(
                  `Invalid value for parameter "${key2}": ${value}`
                );
              }
              value = num2;
            } else if (key2 === "client_no_context_takeover" || key2 === "server_no_context_takeover") {
              if (value !== true) {
                throw new TypeError(
                  `Invalid value for parameter "${key2}": ${value}`
                );
              }
            } else {
              throw new Error(`Unknown parameter "${key2}"`);
            }
            params[key2] = value;
          });
        });
        return configurations;
      }
      decompress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._decompress(data, fin, (err2, result) => {
            done();
            callback(err2, result);
          });
        });
      }
      compress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._compress(data, fin, (err2, result) => {
            done();
            callback(err2, result);
          });
        });
      }
      _decompress(data, fin, callback) {
        const endpoint = this._isServer ? "client" : "server";
        if (!this._inflate) {
          const key2 = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key2] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key2];
          this._inflate = zlib.createInflateRaw({
            ...this._options.zlibInflateOptions,
            windowBits
          });
          this._inflate[kPerMessageDeflate] = this;
          this._inflate[kTotalLength] = 0;
          this._inflate[kBuffers] = [];
          this._inflate.on("error", inflateOnError);
          this._inflate.on("data", inflateOnData);
        }
        this._inflate[kCallback] = callback;
        this._inflate.write(data);
        if (fin)
          this._inflate.write(TRAILER);
        this._inflate.flush(() => {
          const err2 = this._inflate[kError];
          if (err2) {
            this._inflate.close();
            this._inflate = null;
            callback(err2);
            return;
          }
          const data2 = bufferUtil.concat(
            this._inflate[kBuffers],
            this._inflate[kTotalLength]
          );
          if (this._inflate._readableState.endEmitted) {
            this._inflate.close();
            this._inflate = null;
          } else {
            this._inflate[kTotalLength] = 0;
            this._inflate[kBuffers] = [];
            if (fin && this.params[`${endpoint}_no_context_takeover`]) {
              this._inflate.reset();
            }
          }
          callback(null, data2);
        });
      }
      _compress(data, fin, callback) {
        const endpoint = this._isServer ? "server" : "client";
        if (!this._deflate) {
          const key2 = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key2] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key2];
          this._deflate = zlib.createDeflateRaw({
            ...this._options.zlibDeflateOptions,
            windowBits
          });
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          this._deflate.on("error", NOOP);
          this._deflate.on("data", deflateOnData);
        }
        this._deflate[kCallback] = callback;
        this._deflate.write(data);
        this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
          if (!this._deflate) {
            return;
          }
          let data2 = bufferUtil.concat(
            this._deflate[kBuffers],
            this._deflate[kTotalLength]
          );
          if (fin)
            data2 = data2.slice(0, data2.length - 4);
          this._deflate[kCallback] = null;
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          if (fin && this.params[`${endpoint}_no_context_takeover`]) {
            this._deflate.reset();
          }
          callback(null, data2);
        });
      }
    };
    module2.exports = PerMessageDeflate;
    function deflateOnData(chunk) {
      this[kBuffers].push(chunk);
      this[kTotalLength] += chunk.length;
    }
    function inflateOnData(chunk) {
      this[kTotalLength] += chunk.length;
      if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {
        this[kBuffers].push(chunk);
        return;
      }
      this[kError] = new RangeError("Max payload size exceeded");
      this[kError].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH";
      this[kError][kStatusCode] = 1009;
      this.removeListener("data", inflateOnData);
      this.reset();
    }
    function inflateOnError(err2) {
      this[kPerMessageDeflate]._inflate = null;
      err2[kStatusCode] = 1007;
      this[kCallback](err2);
    }
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/validation.js
var require_validation = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/validation.js"(exports2, module2) {
    "use strict";
    function isValidStatusCode(code) {
      return code >= 1e3 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3e3 && code <= 4999;
    }
    function _isValidUTF8(buf) {
      const len = buf.length;
      let i3 = 0;
      while (i3 < len) {
        if ((buf[i3] & 128) === 0) {
          i3++;
        } else if ((buf[i3] & 224) === 192) {
          if (i3 + 1 === len || (buf[i3 + 1] & 192) !== 128 || (buf[i3] & 254) === 192) {
            return false;
          }
          i3 += 2;
        } else if ((buf[i3] & 240) === 224) {
          if (i3 + 2 >= len || (buf[i3 + 1] & 192) !== 128 || (buf[i3 + 2] & 192) !== 128 || buf[i3] === 224 && (buf[i3 + 1] & 224) === 128 || buf[i3] === 237 && (buf[i3 + 1] & 224) === 160) {
            return false;
          }
          i3 += 3;
        } else if ((buf[i3] & 248) === 240) {
          if (i3 + 3 >= len || (buf[i3 + 1] & 192) !== 128 || (buf[i3 + 2] & 192) !== 128 || (buf[i3 + 3] & 192) !== 128 || buf[i3] === 240 && (buf[i3 + 1] & 240) === 128 || buf[i3] === 244 && buf[i3 + 1] > 143 || buf[i3] > 244) {
            return false;
          }
          i3 += 4;
        } else {
          return false;
        }
      }
      return true;
    }
    try {
      let isValidUTF8 = __require("utf-8-validate");
      if (typeof isValidUTF8 === "object") {
        isValidUTF8 = isValidUTF8.Validation.isValidUTF8;
      }
      module2.exports = {
        isValidStatusCode,
        isValidUTF8(buf) {
          return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);
        }
      };
    } catch (e) {
      module2.exports = {
        isValidStatusCode,
        isValidUTF8: _isValidUTF8
      };
    }
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/receiver.js
var require_receiver = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/receiver.js"(exports2, module2) {
    "use strict";
    var { Writable } = __require("stream");
    var PerMessageDeflate = require_permessage_deflate();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      kStatusCode,
      kWebSocket
    } = require_constants();
    var { concat, toArrayBuffer, unmask } = require_buffer_util();
    var { isValidStatusCode, isValidUTF8 } = require_validation();
    var GET_INFO = 0;
    var GET_PAYLOAD_LENGTH_16 = 1;
    var GET_PAYLOAD_LENGTH_64 = 2;
    var GET_MASK = 3;
    var GET_DATA = 4;
    var INFLATING = 5;
    var Receiver = class extends Writable {
      constructor(binaryType, extensions, isServer, maxPayload) {
        super();
        this._binaryType = binaryType || BINARY_TYPES[0];
        this[kWebSocket] = void 0;
        this._extensions = extensions || {};
        this._isServer = !!isServer;
        this._maxPayload = maxPayload | 0;
        this._bufferedBytes = 0;
        this._buffers = [];
        this._compressed = false;
        this._payloadLength = 0;
        this._mask = void 0;
        this._fragmented = 0;
        this._masked = false;
        this._fin = false;
        this._opcode = 0;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragments = [];
        this._state = GET_INFO;
        this._loop = false;
      }
      _write(chunk, encoding, cb2) {
        if (this._opcode === 8 && this._state == GET_INFO)
          return cb2();
        this._bufferedBytes += chunk.length;
        this._buffers.push(chunk);
        this.startLoop(cb2);
      }
      consume(n2) {
        this._bufferedBytes -= n2;
        if (n2 === this._buffers[0].length)
          return this._buffers.shift();
        if (n2 < this._buffers[0].length) {
          const buf = this._buffers[0];
          this._buffers[0] = buf.slice(n2);
          return buf.slice(0, n2);
        }
        const dst = Buffer.allocUnsafe(n2);
        do {
          const buf = this._buffers[0];
          const offset = dst.length - n2;
          if (n2 >= buf.length) {
            dst.set(this._buffers.shift(), offset);
          } else {
            dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n2), offset);
            this._buffers[0] = buf.slice(n2);
          }
          n2 -= buf.length;
        } while (n2 > 0);
        return dst;
      }
      startLoop(cb2) {
        let err2;
        this._loop = true;
        do {
          switch (this._state) {
            case GET_INFO:
              err2 = this.getInfo();
              break;
            case GET_PAYLOAD_LENGTH_16:
              err2 = this.getPayloadLength16();
              break;
            case GET_PAYLOAD_LENGTH_64:
              err2 = this.getPayloadLength64();
              break;
            case GET_MASK:
              this.getMask();
              break;
            case GET_DATA:
              err2 = this.getData(cb2);
              break;
            default:
              this._loop = false;
              return;
          }
        } while (this._loop);
        cb2(err2);
      }
      getInfo() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        const buf = this.consume(2);
        if ((buf[0] & 48) !== 0) {
          this._loop = false;
          return error(
            RangeError,
            "RSV2 and RSV3 must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_RSV_2_3"
          );
        }
        const compressed = (buf[0] & 64) === 64;
        if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
          this._loop = false;
          return error(
            RangeError,
            "RSV1 must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_RSV_1"
          );
        }
        this._fin = (buf[0] & 128) === 128;
        this._opcode = buf[0] & 15;
        this._payloadLength = buf[1] & 127;
        if (this._opcode === 0) {
          if (compressed) {
            this._loop = false;
            return error(
              RangeError,
              "RSV1 must be clear",
              true,
              1002,
              "WS_ERR_UNEXPECTED_RSV_1"
            );
          }
          if (!this._fragmented) {
            this._loop = false;
            return error(
              RangeError,
              "invalid opcode 0",
              true,
              1002,
              "WS_ERR_INVALID_OPCODE"
            );
          }
          this._opcode = this._fragmented;
        } else if (this._opcode === 1 || this._opcode === 2) {
          if (this._fragmented) {
            this._loop = false;
            return error(
              RangeError,
              `invalid opcode ${this._opcode}`,
              true,
              1002,
              "WS_ERR_INVALID_OPCODE"
            );
          }
          this._compressed = compressed;
        } else if (this._opcode > 7 && this._opcode < 11) {
          if (!this._fin) {
            this._loop = false;
            return error(
              RangeError,
              "FIN must be set",
              true,
              1002,
              "WS_ERR_EXPECTED_FIN"
            );
          }
          if (compressed) {
            this._loop = false;
            return error(
              RangeError,
              "RSV1 must be clear",
              true,
              1002,
              "WS_ERR_UNEXPECTED_RSV_1"
            );
          }
          if (this._payloadLength > 125) {
            this._loop = false;
            return error(
              RangeError,
              `invalid payload length ${this._payloadLength}`,
              true,
              1002,
              "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH"
            );
          }
        } else {
          this._loop = false;
          return error(
            RangeError,
            `invalid opcode ${this._opcode}`,
            true,
            1002,
            "WS_ERR_INVALID_OPCODE"
          );
        }
        if (!this._fin && !this._fragmented)
          this._fragmented = this._opcode;
        this._masked = (buf[1] & 128) === 128;
        if (this._isServer) {
          if (!this._masked) {
            this._loop = false;
            return error(
              RangeError,
              "MASK must be set",
              true,
              1002,
              "WS_ERR_EXPECTED_MASK"
            );
          }
        } else if (this._masked) {
          this._loop = false;
          return error(
            RangeError,
            "MASK must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_MASK"
          );
        }
        if (this._payloadLength === 126)
          this._state = GET_PAYLOAD_LENGTH_16;
        else if (this._payloadLength === 127)
          this._state = GET_PAYLOAD_LENGTH_64;
        else
          return this.haveLength();
      }
      getPayloadLength16() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        this._payloadLength = this.consume(2).readUInt16BE(0);
        return this.haveLength();
      }
      getPayloadLength64() {
        if (this._bufferedBytes < 8) {
          this._loop = false;
          return;
        }
        const buf = this.consume(8);
        const num2 = buf.readUInt32BE(0);
        if (num2 > Math.pow(2, 53 - 32) - 1) {
          this._loop = false;
          return error(
            RangeError,
            "Unsupported WebSocket frame: payload length > 2^53 - 1",
            false,
            1009,
            "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH"
          );
        }
        this._payloadLength = num2 * Math.pow(2, 32) + buf.readUInt32BE(4);
        return this.haveLength();
      }
      haveLength() {
        if (this._payloadLength && this._opcode < 8) {
          this._totalPayloadLength += this._payloadLength;
          if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
            this._loop = false;
            return error(
              RangeError,
              "Max payload size exceeded",
              false,
              1009,
              "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"
            );
          }
        }
        if (this._masked)
          this._state = GET_MASK;
        else
          this._state = GET_DATA;
      }
      getMask() {
        if (this._bufferedBytes < 4) {
          this._loop = false;
          return;
        }
        this._mask = this.consume(4);
        this._state = GET_DATA;
      }
      getData(cb2) {
        let data = EMPTY_BUFFER;
        if (this._payloadLength) {
          if (this._bufferedBytes < this._payloadLength) {
            this._loop = false;
            return;
          }
          data = this.consume(this._payloadLength);
          if (this._masked)
            unmask(data, this._mask);
        }
        if (this._opcode > 7)
          return this.controlMessage(data);
        if (this._compressed) {
          this._state = INFLATING;
          this.decompress(data, cb2);
          return;
        }
        if (data.length) {
          this._messageLength = this._totalPayloadLength;
          this._fragments.push(data);
        }
        return this.dataMessage();
      }
      decompress(data, cb2) {
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        perMessageDeflate.decompress(data, this._fin, (err2, buf) => {
          if (err2)
            return cb2(err2);
          if (buf.length) {
            this._messageLength += buf.length;
            if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
              return cb2(
                error(
                  RangeError,
                  "Max payload size exceeded",
                  false,
                  1009,
                  "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"
                )
              );
            }
            this._fragments.push(buf);
          }
          const er = this.dataMessage();
          if (er)
            return cb2(er);
          this.startLoop(cb2);
        });
      }
      dataMessage() {
        if (this._fin) {
          const messageLength = this._messageLength;
          const fragments = this._fragments;
          this._totalPayloadLength = 0;
          this._messageLength = 0;
          this._fragmented = 0;
          this._fragments = [];
          if (this._opcode === 2) {
            let data;
            if (this._binaryType === "nodebuffer") {
              data = concat(fragments, messageLength);
            } else if (this._binaryType === "arraybuffer") {
              data = toArrayBuffer(concat(fragments, messageLength));
            } else {
              data = fragments;
            }
            this.emit("message", data);
          } else {
            const buf = concat(fragments, messageLength);
            if (!isValidUTF8(buf)) {
              this._loop = false;
              return error(
                Error,
                "invalid UTF-8 sequence",
                true,
                1007,
                "WS_ERR_INVALID_UTF8"
              );
            }
            this.emit("message", buf.toString());
          }
        }
        this._state = GET_INFO;
      }
      controlMessage(data) {
        if (this._opcode === 8) {
          this._loop = false;
          if (data.length === 0) {
            this.emit("conclude", 1005, "");
            this.end();
          } else if (data.length === 1) {
            return error(
              RangeError,
              "invalid payload length 1",
              true,
              1002,
              "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH"
            );
          } else {
            const code = data.readUInt16BE(0);
            if (!isValidStatusCode(code)) {
              return error(
                RangeError,
                `invalid status code ${code}`,
                true,
                1002,
                "WS_ERR_INVALID_CLOSE_CODE"
              );
            }
            const buf = data.slice(2);
            if (!isValidUTF8(buf)) {
              return error(
                Error,
                "invalid UTF-8 sequence",
                true,
                1007,
                "WS_ERR_INVALID_UTF8"
              );
            }
            this.emit("conclude", code, buf.toString());
            this.end();
          }
        } else if (this._opcode === 9) {
          this.emit("ping", data);
        } else {
          this.emit("pong", data);
        }
        this._state = GET_INFO;
      }
    };
    module2.exports = Receiver;
    function error(ErrorCtor, message, prefix2, statusCode, errorCode) {
      const err2 = new ErrorCtor(
        prefix2 ? `Invalid WebSocket frame: ${message}` : message
      );
      Error.captureStackTrace(err2, error);
      err2.code = errorCode;
      err2[kStatusCode] = statusCode;
      return err2;
    }
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/sender.js
var require_sender = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/sender.js"(exports2, module2) {
    "use strict";
    var net = __require("net");
    var tls = __require("tls");
    var { randomFillSync } = __require("crypto");
    var PerMessageDeflate = require_permessage_deflate();
    var { EMPTY_BUFFER } = require_constants();
    var { isValidStatusCode } = require_validation();
    var { mask: applyMask, toBuffer } = require_buffer_util();
    var mask2 = Buffer.alloc(4);
    var Sender = class {
      constructor(socket, extensions) {
        this._extensions = extensions || {};
        this._socket = socket;
        this._firstFragment = true;
        this._compress = false;
        this._bufferedBytes = 0;
        this._deflating = false;
        this._queue = [];
      }
      static frame(data, options) {
        const merge = options.mask && options.readOnly;
        let offset = options.mask ? 6 : 2;
        let payloadLength = data.length;
        if (data.length >= 65536) {
          offset += 8;
          payloadLength = 127;
        } else if (data.length > 125) {
          offset += 2;
          payloadLength = 126;
        }
        const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);
        target[0] = options.fin ? options.opcode | 128 : options.opcode;
        if (options.rsv1)
          target[0] |= 64;
        target[1] = payloadLength;
        if (payloadLength === 126) {
          target.writeUInt16BE(data.length, 2);
        } else if (payloadLength === 127) {
          target.writeUInt32BE(0, 2);
          target.writeUInt32BE(data.length, 6);
        }
        if (!options.mask)
          return [target, data];
        randomFillSync(mask2, 0, 4);
        target[1] |= 128;
        target[offset - 4] = mask2[0];
        target[offset - 3] = mask2[1];
        target[offset - 2] = mask2[2];
        target[offset - 1] = mask2[3];
        if (merge) {
          applyMask(data, mask2, target, offset, data.length);
          return [target];
        }
        applyMask(data, mask2, data, 0, data.length);
        return [target, data];
      }
      close(code, data, mask3, cb2) {
        let buf;
        if (code === void 0) {
          buf = EMPTY_BUFFER;
        } else if (typeof code !== "number" || !isValidStatusCode(code)) {
          throw new TypeError("First argument must be a valid error code number");
        } else if (data === void 0 || data === "") {
          buf = Buffer.allocUnsafe(2);
          buf.writeUInt16BE(code, 0);
        } else {
          const length = Buffer.byteLength(data);
          if (length > 123) {
            throw new RangeError("The message must not be greater than 123 bytes");
          }
          buf = Buffer.allocUnsafe(2 + length);
          buf.writeUInt16BE(code, 0);
          buf.write(data, 2);
        }
        if (this._deflating) {
          this.enqueue([this.doClose, buf, mask3, cb2]);
        } else {
          this.doClose(buf, mask3, cb2);
        }
      }
      doClose(data, mask3, cb2) {
        this.sendFrame(
          Sender.frame(data, {
            fin: true,
            rsv1: false,
            opcode: 8,
            mask: mask3,
            readOnly: false
          }),
          cb2
        );
      }
      ping(data, mask3, cb2) {
        const buf = toBuffer(data);
        if (buf.length > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        if (this._deflating) {
          this.enqueue([this.doPing, buf, mask3, toBuffer.readOnly, cb2]);
        } else {
          this.doPing(buf, mask3, toBuffer.readOnly, cb2);
        }
      }
      doPing(data, mask3, readOnly, cb2) {
        this.sendFrame(
          Sender.frame(data, {
            fin: true,
            rsv1: false,
            opcode: 9,
            mask: mask3,
            readOnly
          }),
          cb2
        );
      }
      pong(data, mask3, cb2) {
        const buf = toBuffer(data);
        if (buf.length > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        if (this._deflating) {
          this.enqueue([this.doPong, buf, mask3, toBuffer.readOnly, cb2]);
        } else {
          this.doPong(buf, mask3, toBuffer.readOnly, cb2);
        }
      }
      doPong(data, mask3, readOnly, cb2) {
        this.sendFrame(
          Sender.frame(data, {
            fin: true,
            rsv1: false,
            opcode: 10,
            mask: mask3,
            readOnly
          }),
          cb2
        );
      }
      send(data, options, cb2) {
        const buf = toBuffer(data);
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        let opcode = options.binary ? 2 : 1;
        let rsv1 = options.compress;
        if (this._firstFragment) {
          this._firstFragment = false;
          if (rsv1 && perMessageDeflate) {
            rsv1 = buf.length >= perMessageDeflate._threshold;
          }
          this._compress = rsv1;
        } else {
          rsv1 = false;
          opcode = 0;
        }
        if (options.fin)
          this._firstFragment = true;
        if (perMessageDeflate) {
          const opts = {
            fin: options.fin,
            rsv1,
            opcode,
            mask: options.mask,
            readOnly: toBuffer.readOnly
          };
          if (this._deflating) {
            this.enqueue([this.dispatch, buf, this._compress, opts, cb2]);
          } else {
            this.dispatch(buf, this._compress, opts, cb2);
          }
        } else {
          this.sendFrame(
            Sender.frame(buf, {
              fin: options.fin,
              rsv1: false,
              opcode,
              mask: options.mask,
              readOnly: toBuffer.readOnly
            }),
            cb2
          );
        }
      }
      dispatch(data, compress, options, cb2) {
        if (!compress) {
          this.sendFrame(Sender.frame(data, options), cb2);
          return;
        }
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        this._bufferedBytes += data.length;
        this._deflating = true;
        perMessageDeflate.compress(data, options.fin, (_2, buf) => {
          if (this._socket.destroyed) {
            const err2 = new Error(
              "The socket was closed while data was being compressed"
            );
            if (typeof cb2 === "function")
              cb2(err2);
            for (let i3 = 0; i3 < this._queue.length; i3++) {
              const callback = this._queue[i3][4];
              if (typeof callback === "function")
                callback(err2);
            }
            return;
          }
          this._bufferedBytes -= data.length;
          this._deflating = false;
          options.readOnly = false;
          this.sendFrame(Sender.frame(buf, options), cb2);
          this.dequeue();
        });
      }
      dequeue() {
        while (!this._deflating && this._queue.length) {
          const params = this._queue.shift();
          this._bufferedBytes -= params[1].length;
          Reflect.apply(params[0], this, params.slice(1));
        }
      }
      enqueue(params) {
        this._bufferedBytes += params[1].length;
        this._queue.push(params);
      }
      sendFrame(list, cb2) {
        if (list.length === 2) {
          this._socket.cork();
          this._socket.write(list[0]);
          this._socket.write(list[1], cb2);
          this._socket.uncork();
        } else {
          this._socket.write(list[0], cb2);
        }
      }
    };
    module2.exports = Sender;
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/event-target.js
var require_event_target = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/event-target.js"(exports2, module2) {
    "use strict";
    var Event = class {
      constructor(type2, target) {
        this.target = target;
        this.type = type2;
      }
    };
    var MessageEvent = class extends Event {
      constructor(data, target) {
        super("message", target);
        this.data = data;
      }
    };
    var CloseEvent = class extends Event {
      constructor(code, reason, target) {
        super("close", target);
        this.wasClean = target._closeFrameReceived && target._closeFrameSent;
        this.reason = reason;
        this.code = code;
      }
    };
    var OpenEvent = class extends Event {
      constructor(target) {
        super("open", target);
      }
    };
    var ErrorEvent = class extends Event {
      constructor(error, target) {
        super("error", target);
        this.message = error.message;
        this.error = error;
      }
    };
    var EventTarget = {
      addEventListener(type2, listener, options) {
        if (typeof listener !== "function")
          return;
        function onMessage(data) {
          listener.call(this, new MessageEvent(data, this));
        }
        function onClose(code, message) {
          listener.call(this, new CloseEvent(code, message, this));
        }
        function onError(error) {
          listener.call(this, new ErrorEvent(error, this));
        }
        function onOpen() {
          listener.call(this, new OpenEvent(this));
        }
        const method = options && options.once ? "once" : "on";
        if (type2 === "message") {
          onMessage._listener = listener;
          this[method](type2, onMessage);
        } else if (type2 === "close") {
          onClose._listener = listener;
          this[method](type2, onClose);
        } else if (type2 === "error") {
          onError._listener = listener;
          this[method](type2, onError);
        } else if (type2 === "open") {
          onOpen._listener = listener;
          this[method](type2, onOpen);
        } else {
          this[method](type2, listener);
        }
      },
      removeEventListener(type2, listener) {
        const listeners = this.listeners(type2);
        for (let i3 = 0; i3 < listeners.length; i3++) {
          if (listeners[i3] === listener || listeners[i3]._listener === listener) {
            this.removeListener(type2, listeners[i3]);
          }
        }
      }
    };
    module2.exports = EventTarget;
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/extension.js
var require_extension = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/extension.js"(exports2, module2) {
    "use strict";
    var tokenChars = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      1,
      1,
      0,
      1,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      1,
      0,
      1,
      0
    ];
    function push(dest, name, elem) {
      if (dest[name] === void 0)
        dest[name] = [elem];
      else
        dest[name].push(elem);
    }
    function parse(header) {
      const offers = /* @__PURE__ */ Object.create(null);
      if (header === void 0 || header === "")
        return offers;
      let params = /* @__PURE__ */ Object.create(null);
      let mustUnescape = false;
      let isEscaping = false;
      let inQuotes = false;
      let extensionName;
      let paramName;
      let start = -1;
      let end = -1;
      let i3 = 0;
      for (; i3 < header.length; i3++) {
        const code = header.charCodeAt(i3);
        if (extensionName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i3;
          } else if (code === 32 || code === 9) {
            if (end === -1 && start !== -1)
              end = i3;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i3}`);
            }
            if (end === -1)
              end = i3;
            const name = header.slice(start, end);
            if (code === 44) {
              push(offers, name, params);
              params = /* @__PURE__ */ Object.create(null);
            } else {
              extensionName = name;
            }
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i3}`);
          }
        } else if (paramName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i3;
          } else if (code === 32 || code === 9) {
            if (end === -1 && start !== -1)
              end = i3;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i3}`);
            }
            if (end === -1)
              end = i3;
            push(params, header.slice(start, end), true);
            if (code === 44) {
              push(offers, extensionName, params);
              params = /* @__PURE__ */ Object.create(null);
              extensionName = void 0;
            }
            start = end = -1;
          } else if (code === 61 && start !== -1 && end === -1) {
            paramName = header.slice(start, i3);
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i3}`);
          }
        } else {
          if (isEscaping) {
            if (tokenChars[code] !== 1) {
              throw new SyntaxError(`Unexpected character at index ${i3}`);
            }
            if (start === -1)
              start = i3;
            else if (!mustUnescape)
              mustUnescape = true;
            isEscaping = false;
          } else if (inQuotes) {
            if (tokenChars[code] === 1) {
              if (start === -1)
                start = i3;
            } else if (code === 34 && start !== -1) {
              inQuotes = false;
              end = i3;
            } else if (code === 92) {
              isEscaping = true;
            } else {
              throw new SyntaxError(`Unexpected character at index ${i3}`);
            }
          } else if (code === 34 && header.charCodeAt(i3 - 1) === 61) {
            inQuotes = true;
          } else if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i3;
          } else if (start !== -1 && (code === 32 || code === 9)) {
            if (end === -1)
              end = i3;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i3}`);
            }
            if (end === -1)
              end = i3;
            let value = header.slice(start, end);
            if (mustUnescape) {
              value = value.replace(/\\/g, "");
              mustUnescape = false;
            }
            push(params, paramName, value);
            if (code === 44) {
              push(offers, extensionName, params);
              params = /* @__PURE__ */ Object.create(null);
              extensionName = void 0;
            }
            paramName = void 0;
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i3}`);
          }
        }
      }
      if (start === -1 || inQuotes) {
        throw new SyntaxError("Unexpected end of input");
      }
      if (end === -1)
        end = i3;
      const token = header.slice(start, end);
      if (extensionName === void 0) {
        push(offers, token, params);
      } else {
        if (paramName === void 0) {
          push(params, token, true);
        } else if (mustUnescape) {
          push(params, paramName, token.replace(/\\/g, ""));
        } else {
          push(params, paramName, token);
        }
        push(offers, extensionName, params);
      }
      return offers;
    }
    function format(extensions) {
      return Object.keys(extensions).map((extension) => {
        let configurations = extensions[extension];
        if (!Array.isArray(configurations))
          configurations = [configurations];
        return configurations.map((params) => {
          return [extension].concat(
            Object.keys(params).map((k2) => {
              let values = params[k2];
              if (!Array.isArray(values))
                values = [values];
              return values.map((v2) => v2 === true ? k2 : `${k2}=${v2}`).join("; ");
            })
          ).join("; ");
        }).join(", ");
      }).join(", ");
    }
    module2.exports = { format, parse };
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/websocket.js
var require_websocket = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/websocket.js"(exports2, module2) {
    "use strict";
    var EventEmitter = __require("events");
    var https = __require("https");
    var http = __require("http");
    var net = __require("net");
    var tls = __require("tls");
    var { randomBytes, createHash } = __require("crypto");
    var { Readable } = __require("stream");
    var { URL } = __require("url");
    var PerMessageDeflate = require_permessage_deflate();
    var Receiver = require_receiver();
    var Sender = require_sender();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      GUID,
      kStatusCode,
      kWebSocket,
      NOOP
    } = require_constants();
    var { addEventListener, removeEventListener } = require_event_target();
    var { format, parse } = require_extension();
    var { toBuffer } = require_buffer_util();
    var readyStates = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"];
    var protocolVersions = [8, 13];
    var closeTimeout = 30 * 1e3;
    var WebSocket = class extends EventEmitter {
      constructor(address, protocols, options) {
        super();
        this._binaryType = BINARY_TYPES[0];
        this._closeCode = 1006;
        this._closeFrameReceived = false;
        this._closeFrameSent = false;
        this._closeMessage = "";
        this._closeTimer = null;
        this._extensions = {};
        this._protocol = "";
        this._readyState = WebSocket.CONNECTING;
        this._receiver = null;
        this._sender = null;
        this._socket = null;
        if (address !== null) {
          this._bufferedAmount = 0;
          this._isServer = false;
          this._redirects = 0;
          if (Array.isArray(protocols)) {
            protocols = protocols.join(", ");
          } else if (typeof protocols === "object" && protocols !== null) {
            options = protocols;
            protocols = void 0;
          }
          initAsClient(this, address, protocols, options);
        } else {
          this._isServer = true;
        }
      }
      get binaryType() {
        return this._binaryType;
      }
      set binaryType(type2) {
        if (!BINARY_TYPES.includes(type2))
          return;
        this._binaryType = type2;
        if (this._receiver)
          this._receiver._binaryType = type2;
      }
      get bufferedAmount() {
        if (!this._socket)
          return this._bufferedAmount;
        return this._socket._writableState.length + this._sender._bufferedBytes;
      }
      get extensions() {
        return Object.keys(this._extensions).join();
      }
      get onclose() {
        return void 0;
      }
      set onclose(listener) {
      }
      get onerror() {
        return void 0;
      }
      set onerror(listener) {
      }
      get onopen() {
        return void 0;
      }
      set onopen(listener) {
      }
      get onmessage() {
        return void 0;
      }
      set onmessage(listener) {
      }
      get protocol() {
        return this._protocol;
      }
      get readyState() {
        return this._readyState;
      }
      get url() {
        return this._url;
      }
      setSocket(socket, head, maxPayload) {
        const receiver = new Receiver(
          this.binaryType,
          this._extensions,
          this._isServer,
          maxPayload
        );
        this._sender = new Sender(socket, this._extensions);
        this._receiver = receiver;
        this._socket = socket;
        receiver[kWebSocket] = this;
        socket[kWebSocket] = this;
        receiver.on("conclude", receiverOnConclude);
        receiver.on("drain", receiverOnDrain);
        receiver.on("error", receiverOnError);
        receiver.on("message", receiverOnMessage);
        receiver.on("ping", receiverOnPing);
        receiver.on("pong", receiverOnPong);
        socket.setTimeout(0);
        socket.setNoDelay();
        if (head.length > 0)
          socket.unshift(head);
        socket.on("close", socketOnClose);
        socket.on("data", socketOnData);
        socket.on("end", socketOnEnd);
        socket.on("error", socketOnError);
        this._readyState = WebSocket.OPEN;
        this.emit("open");
      }
      emitClose() {
        if (!this._socket) {
          this._readyState = WebSocket.CLOSED;
          this.emit("close", this._closeCode, this._closeMessage);
          return;
        }
        if (this._extensions[PerMessageDeflate.extensionName]) {
          this._extensions[PerMessageDeflate.extensionName].cleanup();
        }
        this._receiver.removeAllListeners();
        this._readyState = WebSocket.CLOSED;
        this.emit("close", this._closeCode, this._closeMessage);
      }
      close(code, data) {
        if (this.readyState === WebSocket.CLOSED)
          return;
        if (this.readyState === WebSocket.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          return abortHandshake(this, this._req, msg);
        }
        if (this.readyState === WebSocket.CLOSING) {
          if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {
            this._socket.end();
          }
          return;
        }
        this._readyState = WebSocket.CLOSING;
        this._sender.close(code, data, !this._isServer, (err2) => {
          if (err2)
            return;
          this._closeFrameSent = true;
          if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {
            this._socket.end();
          }
        });
        this._closeTimer = setTimeout(
          this._socket.destroy.bind(this._socket),
          closeTimeout
        );
      }
      ping(data, mask2, cb2) {
        if (this.readyState === WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb2 = data;
          data = mask2 = void 0;
        } else if (typeof mask2 === "function") {
          cb2 = mask2;
          mask2 = void 0;
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== WebSocket.OPEN) {
          sendAfterClose(this, data, cb2);
          return;
        }
        if (mask2 === void 0)
          mask2 = !this._isServer;
        this._sender.ping(data || EMPTY_BUFFER, mask2, cb2);
      }
      pong(data, mask2, cb2) {
        if (this.readyState === WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb2 = data;
          data = mask2 = void 0;
        } else if (typeof mask2 === "function") {
          cb2 = mask2;
          mask2 = void 0;
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== WebSocket.OPEN) {
          sendAfterClose(this, data, cb2);
          return;
        }
        if (mask2 === void 0)
          mask2 = !this._isServer;
        this._sender.pong(data || EMPTY_BUFFER, mask2, cb2);
      }
      send(data, options, cb2) {
        if (this.readyState === WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof options === "function") {
          cb2 = options;
          options = {};
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== WebSocket.OPEN) {
          sendAfterClose(this, data, cb2);
          return;
        }
        const opts = {
          binary: typeof data !== "string",
          mask: !this._isServer,
          compress: true,
          fin: true,
          ...options
        };
        if (!this._extensions[PerMessageDeflate.extensionName]) {
          opts.compress = false;
        }
        this._sender.send(data || EMPTY_BUFFER, opts, cb2);
      }
      terminate() {
        if (this.readyState === WebSocket.CLOSED)
          return;
        if (this.readyState === WebSocket.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          return abortHandshake(this, this._req, msg);
        }
        if (this._socket) {
          this._readyState = WebSocket.CLOSING;
          this._socket.destroy();
        }
      }
    };
    Object.defineProperty(WebSocket, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket.prototype, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket.prototype, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket.prototype, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    Object.defineProperty(WebSocket.prototype, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    [
      "binaryType",
      "bufferedAmount",
      "extensions",
      "protocol",
      "readyState",
      "url"
    ].forEach((property) => {
      Object.defineProperty(WebSocket.prototype, property, { enumerable: true });
    });
    ["open", "error", "close", "message"].forEach((method) => {
      Object.defineProperty(WebSocket.prototype, `on${method}`, {
        enumerable: true,
        get() {
          const listeners = this.listeners(method);
          for (let i3 = 0; i3 < listeners.length; i3++) {
            if (listeners[i3]._listener)
              return listeners[i3]._listener;
          }
          return void 0;
        },
        set(listener) {
          const listeners = this.listeners(method);
          for (let i3 = 0; i3 < listeners.length; i3++) {
            if (listeners[i3]._listener)
              this.removeListener(method, listeners[i3]);
          }
          this.addEventListener(method, listener);
        }
      });
    });
    WebSocket.prototype.addEventListener = addEventListener;
    WebSocket.prototype.removeEventListener = removeEventListener;
    module2.exports = WebSocket;
    function initAsClient(websocket, address, protocols, options) {
      const opts = {
        protocolVersion: protocolVersions[1],
        maxPayload: 100 * 1024 * 1024,
        perMessageDeflate: true,
        followRedirects: false,
        maxRedirects: 10,
        ...options,
        createConnection: void 0,
        socketPath: void 0,
        hostname: void 0,
        protocol: void 0,
        timeout: void 0,
        method: void 0,
        host: void 0,
        path: void 0,
        port: void 0
      };
      if (!protocolVersions.includes(opts.protocolVersion)) {
        throw new RangeError(
          `Unsupported protocol version: ${opts.protocolVersion} (supported versions: ${protocolVersions.join(", ")})`
        );
      }
      let parsedUrl;
      if (address instanceof URL) {
        parsedUrl = address;
        websocket._url = address.href;
      } else {
        parsedUrl = new URL(address);
        websocket._url = address;
      }
      const isUnixSocket = parsedUrl.protocol === "ws+unix:";
      if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
        const err2 = new Error(`Invalid URL: ${websocket.url}`);
        if (websocket._redirects === 0) {
          throw err2;
        } else {
          emitErrorAndClose(websocket, err2);
          return;
        }
      }
      const isSecure = parsedUrl.protocol === "wss:" || parsedUrl.protocol === "https:";
      const defaultPort = isSecure ? 443 : 80;
      const key2 = randomBytes(16).toString("base64");
      const get = isSecure ? https.get : http.get;
      let perMessageDeflate;
      opts.createConnection = isSecure ? tlsConnect : netConnect;
      opts.defaultPort = opts.defaultPort || defaultPort;
      opts.port = parsedUrl.port || defaultPort;
      opts.host = parsedUrl.hostname.startsWith("[") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
      opts.headers = {
        "Sec-WebSocket-Version": opts.protocolVersion,
        "Sec-WebSocket-Key": key2,
        Connection: "Upgrade",
        Upgrade: "websocket",
        ...opts.headers
      };
      opts.path = parsedUrl.pathname + parsedUrl.search;
      opts.timeout = opts.handshakeTimeout;
      if (opts.perMessageDeflate) {
        perMessageDeflate = new PerMessageDeflate(
          opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
          false,
          opts.maxPayload
        );
        opts.headers["Sec-WebSocket-Extensions"] = format({
          [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
        });
      }
      if (protocols) {
        opts.headers["Sec-WebSocket-Protocol"] = protocols;
      }
      if (opts.origin) {
        if (opts.protocolVersion < 13) {
          opts.headers["Sec-WebSocket-Origin"] = opts.origin;
        } else {
          opts.headers.Origin = opts.origin;
        }
      }
      if (parsedUrl.username || parsedUrl.password) {
        opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
      }
      if (isUnixSocket) {
        const parts = opts.path.split(":");
        opts.socketPath = parts[0];
        opts.path = parts[1];
      }
      if (opts.followRedirects) {
        if (websocket._redirects === 0) {
          websocket._originalUnixSocket = isUnixSocket;
          websocket._originalSecure = isSecure;
          websocket._originalHostOrSocketPath = isUnixSocket ? opts.socketPath : parsedUrl.host;
          const headers = options && options.headers;
          options = { ...options, headers: {} };
          if (headers) {
            for (const [key3, value] of Object.entries(headers)) {
              options.headers[key3.toLowerCase()] = value;
            }
          }
        } else {
          const isSameHost = isUnixSocket ? websocket._originalUnixSocket ? opts.socketPath === websocket._originalHostOrSocketPath : false : websocket._originalUnixSocket ? false : parsedUrl.host === websocket._originalHostOrSocketPath;
          if (!isSameHost || websocket._originalSecure && !isSecure) {
            delete opts.headers.authorization;
            delete opts.headers.cookie;
            if (!isSameHost)
              delete opts.headers.host;
            opts.auth = void 0;
          }
        }
        if (opts.auth && !options.headers.authorization) {
          options.headers.authorization = "Basic " + Buffer.from(opts.auth).toString("base64");
        }
      }
      let req = websocket._req = get(opts);
      if (opts.timeout) {
        req.on("timeout", () => {
          abortHandshake(websocket, req, "Opening handshake has timed out");
        });
      }
      req.on("error", (err2) => {
        if (req === null || req.aborted)
          return;
        req = websocket._req = null;
        emitErrorAndClose(websocket, err2);
      });
      req.on("response", (res) => {
        const location = res.headers.location;
        const statusCode = res.statusCode;
        if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {
          if (++websocket._redirects > opts.maxRedirects) {
            abortHandshake(websocket, req, "Maximum redirects exceeded");
            return;
          }
          req.abort();
          let addr;
          try {
            addr = new URL(location, address);
          } catch (err2) {
            emitErrorAndClose(websocket, err2);
            return;
          }
          initAsClient(websocket, addr, protocols, options);
        } else if (!websocket.emit("unexpected-response", req, res)) {
          abortHandshake(
            websocket,
            req,
            `Unexpected server response: ${res.statusCode}`
          );
        }
      });
      req.on("upgrade", (res, socket, head) => {
        websocket.emit("upgrade", res);
        if (websocket.readyState !== WebSocket.CONNECTING)
          return;
        req = websocket._req = null;
        if (res.headers.upgrade.toLowerCase() !== "websocket") {
          abortHandshake(websocket, socket, "Invalid Upgrade header");
          return;
        }
        const digest = createHash("sha1").update(key2 + GUID).digest("base64");
        if (res.headers["sec-websocket-accept"] !== digest) {
          abortHandshake(websocket, socket, "Invalid Sec-WebSocket-Accept header");
          return;
        }
        const serverProt = res.headers["sec-websocket-protocol"];
        const protList = (protocols || "").split(/, */);
        let protError;
        if (!protocols && serverProt) {
          protError = "Server sent a subprotocol but none was requested";
        } else if (protocols && !serverProt) {
          protError = "Server sent no subprotocol";
        } else if (serverProt && !protList.includes(serverProt)) {
          protError = "Server sent an invalid subprotocol";
        }
        if (protError) {
          abortHandshake(websocket, socket, protError);
          return;
        }
        if (serverProt)
          websocket._protocol = serverProt;
        const secWebSocketExtensions = res.headers["sec-websocket-extensions"];
        if (secWebSocketExtensions !== void 0) {
          if (!perMessageDeflate) {
            const message = "Server sent a Sec-WebSocket-Extensions header but no extension was requested";
            abortHandshake(websocket, socket, message);
            return;
          }
          let extensions;
          try {
            extensions = parse(secWebSocketExtensions);
          } catch (err2) {
            const message = "Invalid Sec-WebSocket-Extensions header";
            abortHandshake(websocket, socket, message);
            return;
          }
          const extensionNames = Object.keys(extensions);
          if (extensionNames.length) {
            if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {
              const message = "Server indicated an extension that was not requested";
              abortHandshake(websocket, socket, message);
              return;
            }
            try {
              perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
            } catch (err2) {
              const message = "Invalid Sec-WebSocket-Extensions header";
              abortHandshake(websocket, socket, message);
              return;
            }
            websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
          }
        }
        websocket.setSocket(socket, head, opts.maxPayload);
      });
    }
    function emitErrorAndClose(websocket, err2) {
      websocket._readyState = WebSocket.CLOSING;
      websocket.emit("error", err2);
      websocket.emitClose();
    }
    function netConnect(options) {
      options.path = options.socketPath;
      return net.connect(options);
    }
    function tlsConnect(options) {
      options.path = void 0;
      if (!options.servername && options.servername !== "") {
        options.servername = net.isIP(options.host) ? "" : options.host;
      }
      return tls.connect(options);
    }
    function abortHandshake(websocket, stream, message) {
      websocket._readyState = WebSocket.CLOSING;
      const err2 = new Error(message);
      Error.captureStackTrace(err2, abortHandshake);
      if (stream.setHeader) {
        stream.abort();
        if (stream.socket && !stream.socket.destroyed) {
          stream.socket.destroy();
        }
        stream.once("abort", websocket.emitClose.bind(websocket));
        websocket.emit("error", err2);
      } else {
        stream.destroy(err2);
        stream.once("error", websocket.emit.bind(websocket, "error"));
        stream.once("close", websocket.emitClose.bind(websocket));
      }
    }
    function sendAfterClose(websocket, data, cb2) {
      if (data) {
        const length = toBuffer(data).length;
        if (websocket._socket)
          websocket._sender._bufferedBytes += length;
        else
          websocket._bufferedAmount += length;
      }
      if (cb2) {
        const err2 = new Error(
          `WebSocket is not open: readyState ${websocket.readyState} (${readyStates[websocket.readyState]})`
        );
        cb2(err2);
      }
    }
    function receiverOnConclude(code, reason) {
      const websocket = this[kWebSocket];
      websocket._closeFrameReceived = true;
      websocket._closeMessage = reason;
      websocket._closeCode = code;
      if (websocket._socket[kWebSocket] === void 0)
        return;
      websocket._socket.removeListener("data", socketOnData);
      process.nextTick(resume, websocket._socket);
      if (code === 1005)
        websocket.close();
      else
        websocket.close(code, reason);
    }
    function receiverOnDrain() {
      this[kWebSocket]._socket.resume();
    }
    function receiverOnError(err2) {
      const websocket = this[kWebSocket];
      if (websocket._socket[kWebSocket] !== void 0) {
        websocket._socket.removeListener("data", socketOnData);
        process.nextTick(resume, websocket._socket);
        websocket.close(err2[kStatusCode]);
      }
      websocket.emit("error", err2);
    }
    function receiverOnFinish() {
      this[kWebSocket].emitClose();
    }
    function receiverOnMessage(data) {
      this[kWebSocket].emit("message", data);
    }
    function receiverOnPing(data) {
      const websocket = this[kWebSocket];
      websocket.pong(data, !websocket._isServer, NOOP);
      websocket.emit("ping", data);
    }
    function receiverOnPong(data) {
      this[kWebSocket].emit("pong", data);
    }
    function resume(stream) {
      stream.resume();
    }
    function socketOnClose() {
      const websocket = this[kWebSocket];
      this.removeListener("close", socketOnClose);
      this.removeListener("data", socketOnData);
      this.removeListener("end", socketOnEnd);
      websocket._readyState = WebSocket.CLOSING;
      let chunk;
      if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {
        websocket._receiver.write(chunk);
      }
      websocket._receiver.end();
      this[kWebSocket] = void 0;
      clearTimeout(websocket._closeTimer);
      if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
        websocket.emitClose();
      } else {
        websocket._receiver.on("error", receiverOnFinish);
        websocket._receiver.on("finish", receiverOnFinish);
      }
    }
    function socketOnData(chunk) {
      if (!this[kWebSocket]._receiver.write(chunk)) {
        this.pause();
      }
    }
    function socketOnEnd() {
      const websocket = this[kWebSocket];
      websocket._readyState = WebSocket.CLOSING;
      websocket._receiver.end();
      this.end();
    }
    function socketOnError() {
      const websocket = this[kWebSocket];
      this.removeListener("error", socketOnError);
      this.on("error", NOOP);
      if (websocket) {
        websocket._readyState = WebSocket.CLOSING;
        this.destroy();
      }
    }
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/stream.js
var require_stream = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/stream.js"(exports2, module2) {
    "use strict";
    var { Duplex } = __require("stream");
    function emitClose(stream) {
      stream.emit("close");
    }
    function duplexOnEnd() {
      if (!this.destroyed && this._writableState.finished) {
        this.destroy();
      }
    }
    function duplexOnError(err2) {
      this.removeListener("error", duplexOnError);
      this.destroy();
      if (this.listenerCount("error") === 0) {
        this.emit("error", err2);
      }
    }
    function createWebSocketStream(ws, options) {
      let resumeOnReceiverDrain = true;
      let terminateOnDestroy = true;
      function receiverOnDrain() {
        if (resumeOnReceiverDrain)
          ws._socket.resume();
      }
      if (ws.readyState === ws.CONNECTING) {
        ws.once("open", function open() {
          ws._receiver.removeAllListeners("drain");
          ws._receiver.on("drain", receiverOnDrain);
        });
      } else {
        ws._receiver.removeAllListeners("drain");
        ws._receiver.on("drain", receiverOnDrain);
      }
      const duplex = new Duplex({
        ...options,
        autoDestroy: false,
        emitClose: false,
        objectMode: false,
        writableObjectMode: false
      });
      ws.on("message", function message(msg) {
        if (!duplex.push(msg)) {
          resumeOnReceiverDrain = false;
          ws._socket.pause();
        }
      });
      ws.once("error", function error(err2) {
        if (duplex.destroyed)
          return;
        terminateOnDestroy = false;
        duplex.destroy(err2);
      });
      ws.once("close", function close() {
        if (duplex.destroyed)
          return;
        duplex.push(null);
      });
      duplex._destroy = function(err2, callback) {
        if (ws.readyState === ws.CLOSED) {
          callback(err2);
          process.nextTick(emitClose, duplex);
          return;
        }
        let called = false;
        ws.once("error", function error(err3) {
          called = true;
          callback(err3);
        });
        ws.once("close", function close() {
          if (!called)
            callback(err2);
          process.nextTick(emitClose, duplex);
        });
        if (terminateOnDestroy)
          ws.terminate();
      };
      duplex._final = function(callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex._final(callback);
          });
          return;
        }
        if (ws._socket === null)
          return;
        if (ws._socket._writableState.finished) {
          callback();
          if (duplex._readableState.endEmitted)
            duplex.destroy();
        } else {
          ws._socket.once("finish", function finish() {
            callback();
          });
          ws.close();
        }
      };
      duplex._read = function() {
        if ((ws.readyState === ws.OPEN || ws.readyState === ws.CLOSING) && !resumeOnReceiverDrain) {
          resumeOnReceiverDrain = true;
          if (!ws._receiver._writableState.needDrain)
            ws._socket.resume();
        }
      };
      duplex._write = function(chunk, encoding, callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex._write(chunk, encoding, callback);
          });
          return;
        }
        ws.send(chunk, callback);
      };
      duplex.on("end", duplexOnEnd);
      duplex.on("error", duplexOnError);
      return duplex;
    }
    module2.exports = createWebSocketStream;
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/websocket-server.js
var require_websocket_server = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/lib/websocket-server.js"(exports2, module2) {
    "use strict";
    var EventEmitter = __require("events");
    var http = __require("http");
    var https = __require("https");
    var net = __require("net");
    var tls = __require("tls");
    var { createHash } = __require("crypto");
    var PerMessageDeflate = require_permessage_deflate();
    var WebSocket = require_websocket();
    var { format, parse } = require_extension();
    var { GUID, kWebSocket } = require_constants();
    var keyRegex = /^[+/0-9A-Za-z]{22}==$/;
    var RUNNING = 0;
    var CLOSING = 1;
    var CLOSED = 2;
    var WebSocketServer = class extends EventEmitter {
      constructor(options, callback) {
        super();
        options = {
          maxPayload: 100 * 1024 * 1024,
          perMessageDeflate: false,
          handleProtocols: null,
          clientTracking: true,
          verifyClient: null,
          noServer: false,
          backlog: null,
          server: null,
          host: null,
          path: null,
          port: null,
          ...options
        };
        if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {
          throw new TypeError(
            'One and only one of the "port", "server", or "noServer" options must be specified'
          );
        }
        if (options.port != null) {
          this._server = http.createServer((req, res) => {
            const body = http.STATUS_CODES[426];
            res.writeHead(426, {
              "Content-Length": body.length,
              "Content-Type": "text/plain"
            });
            res.end(body);
          });
          this._server.listen(
            options.port,
            options.host,
            options.backlog,
            callback
          );
        } else if (options.server) {
          this._server = options.server;
        }
        if (this._server) {
          const emitConnection = this.emit.bind(this, "connection");
          this._removeListeners = addListeners(this._server, {
            listening: this.emit.bind(this, "listening"),
            error: this.emit.bind(this, "error"),
            upgrade: (req, socket, head) => {
              this.handleUpgrade(req, socket, head, emitConnection);
            }
          });
        }
        if (options.perMessageDeflate === true)
          options.perMessageDeflate = {};
        if (options.clientTracking)
          this.clients = /* @__PURE__ */ new Set();
        this.options = options;
        this._state = RUNNING;
      }
      address() {
        if (this.options.noServer) {
          throw new Error('The server is operating in "noServer" mode');
        }
        if (!this._server)
          return null;
        return this._server.address();
      }
      close(cb2) {
        if (cb2)
          this.once("close", cb2);
        if (this._state === CLOSED) {
          process.nextTick(emitClose, this);
          return;
        }
        if (this._state === CLOSING)
          return;
        this._state = CLOSING;
        if (this.clients) {
          for (const client of this.clients)
            client.terminate();
        }
        const server = this._server;
        if (server) {
          this._removeListeners();
          this._removeListeners = this._server = null;
          if (this.options.port != null) {
            server.close(emitClose.bind(void 0, this));
            return;
          }
        }
        process.nextTick(emitClose, this);
      }
      shouldHandle(req) {
        if (this.options.path) {
          const index = req.url.indexOf("?");
          const pathname = index !== -1 ? req.url.slice(0, index) : req.url;
          if (pathname !== this.options.path)
            return false;
        }
        return true;
      }
      handleUpgrade(req, socket, head, cb2) {
        socket.on("error", socketOnError);
        const key2 = req.headers["sec-websocket-key"] !== void 0 ? req.headers["sec-websocket-key"].trim() : false;
        const version = +req.headers["sec-websocket-version"];
        const extensions = {};
        if (req.method !== "GET" || req.headers.upgrade.toLowerCase() !== "websocket" || !key2 || !keyRegex.test(key2) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {
          return abortHandshake(socket, 400);
        }
        if (this.options.perMessageDeflate) {
          const perMessageDeflate = new PerMessageDeflate(
            this.options.perMessageDeflate,
            true,
            this.options.maxPayload
          );
          try {
            const offers = parse(req.headers["sec-websocket-extensions"]);
            if (offers[PerMessageDeflate.extensionName]) {
              perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
              extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
            }
          } catch (err2) {
            return abortHandshake(socket, 400);
          }
        }
        if (this.options.verifyClient) {
          const info = {
            origin: req.headers[`${version === 8 ? "sec-websocket-origin" : "origin"}`],
            secure: !!(req.socket.authorized || req.socket.encrypted),
            req
          };
          if (this.options.verifyClient.length === 2) {
            this.options.verifyClient(info, (verified, code, message, headers) => {
              if (!verified) {
                return abortHandshake(socket, code || 401, message, headers);
              }
              this.completeUpgrade(key2, extensions, req, socket, head, cb2);
            });
            return;
          }
          if (!this.options.verifyClient(info))
            return abortHandshake(socket, 401);
        }
        this.completeUpgrade(key2, extensions, req, socket, head, cb2);
      }
      completeUpgrade(key2, extensions, req, socket, head, cb2) {
        if (!socket.readable || !socket.writable)
          return socket.destroy();
        if (socket[kWebSocket]) {
          throw new Error(
            "server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration"
          );
        }
        if (this._state > RUNNING)
          return abortHandshake(socket, 503);
        const digest = createHash("sha1").update(key2 + GUID).digest("base64");
        const headers = [
          "HTTP/1.1 101 Switching Protocols",
          "Upgrade: websocket",
          "Connection: Upgrade",
          `Sec-WebSocket-Accept: ${digest}`
        ];
        const ws = new WebSocket(null);
        let protocol = req.headers["sec-websocket-protocol"];
        if (protocol) {
          protocol = protocol.split(",").map(trim);
          if (this.options.handleProtocols) {
            protocol = this.options.handleProtocols(protocol, req);
          } else {
            protocol = protocol[0];
          }
          if (protocol) {
            headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
            ws._protocol = protocol;
          }
        }
        if (extensions[PerMessageDeflate.extensionName]) {
          const params = extensions[PerMessageDeflate.extensionName].params;
          const value = format({
            [PerMessageDeflate.extensionName]: [params]
          });
          headers.push(`Sec-WebSocket-Extensions: ${value}`);
          ws._extensions = extensions;
        }
        this.emit("headers", headers, req);
        socket.write(headers.concat("\r\n").join("\r\n"));
        socket.removeListener("error", socketOnError);
        ws.setSocket(socket, head, this.options.maxPayload);
        if (this.clients) {
          this.clients.add(ws);
          ws.on("close", () => this.clients.delete(ws));
        }
        cb2(ws, req);
      }
    };
    module2.exports = WebSocketServer;
    function addListeners(server, map) {
      for (const event of Object.keys(map))
        server.on(event, map[event]);
      return function removeListeners() {
        for (const event of Object.keys(map)) {
          server.removeListener(event, map[event]);
        }
      };
    }
    function emitClose(server) {
      server._state = CLOSED;
      server.emit("close");
    }
    function socketOnError() {
      this.destroy();
    }
    function abortHandshake(socket, code, message, headers) {
      if (socket.writable) {
        message = message || http.STATUS_CODES[code];
        headers = {
          Connection: "close",
          "Content-Type": "text/html",
          "Content-Length": Buffer.byteLength(message),
          ...headers
        };
        socket.write(
          `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r
` + Object.keys(headers).map((h2) => `${h2}: ${headers[h2]}`).join("\r\n") + "\r\n\r\n" + message
        );
      }
      socket.removeListener("error", socketOnError);
      socket.destroy();
    }
    function trim(str) {
      return str.trim();
    }
  }
});

// node_modules/.pnpm/ws@7.5.9/node_modules/ws/index.js
var require_ws = __commonJS({
  "node_modules/.pnpm/ws@7.5.9/node_modules/ws/index.js"(exports2, module2) {
    "use strict";
    var WebSocket = require_websocket();
    WebSocket.createWebSocketStream = require_stream();
    WebSocket.Server = require_websocket_server();
    WebSocket.Receiver = require_receiver();
    WebSocket.Sender = require_sender();
    module2.exports = WebSocket;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/devtools-window-polyfill.js
var require_devtools_window_polyfill = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/devtools-window-polyfill.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ws_1 = __importDefault(require_ws());
    var customGlobal = global;
    if (!customGlobal.WebSocket) {
      customGlobal.WebSocket = ws_1.default;
    }
    if (!customGlobal.window) {
      customGlobal.window = global;
    }
    customGlobal.window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ = [
      {
        type: 1,
        value: 7,
        isEnabled: true
      },
      {
        type: 2,
        value: "InternalApp",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalAppContext",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalStdoutContext",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalStderrContext",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalStdinContext",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalFocusContext",
        isEnabled: true,
        isValid: true
      }
    ];
  }
});

// node_modules/.pnpm/react-devtools-core@4.25.0/node_modules/react-devtools-core/dist/backend.js
var require_backend = __commonJS({
  "node_modules/.pnpm/react-devtools-core@4.25.0/node_modules/react-devtools-core/dist/backend.js"(exports2, module2) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports2 === "object" && typeof module2 === "object")
        module2.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports2 === "object")
        exports2["ReactDevToolsBackend"] = factory();
      else
        root["ReactDevToolsBackend"] = factory();
    })(window, function() {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module3 = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
          };
          modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
          module3.l = true;
          return module3.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.d = function(exports3, name, getter) {
          if (!__webpack_require__.o(exports3, name)) {
            Object.defineProperty(exports3, name, { enumerable: true, get: getter });
          }
        };
        __webpack_require__.r = function(exports3) {
          if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            Object.defineProperty(exports3, Symbol.toStringTag, { value: "Module" });
          }
          Object.defineProperty(exports3, "__esModule", { value: true });
        };
        __webpack_require__.t = function(value, mode) {
          if (mode & 1)
            value = __webpack_require__(value);
          if (mode & 8)
            return value;
          if (mode & 4 && typeof value === "object" && value && value.__esModule)
            return value;
          var ns = /* @__PURE__ */ Object.create(null);
          __webpack_require__.r(ns);
          Object.defineProperty(ns, "default", { enumerable: true, value });
          if (mode & 2 && typeof value != "string")
            for (var key2 in value)
              __webpack_require__.d(ns, key2, function(key3) {
                return value[key3];
              }.bind(null, key2));
          return ns;
        };
        __webpack_require__.n = function(module3) {
          var getter = module3 && module3.__esModule ? function getDefault() {
            return module3["default"];
          } : function getModuleExports() {
            return module3;
          };
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 32);
      }([
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.d(__webpack_exports__, "s", function() {
            return __DEBUG__;
          });
          __webpack_require__.d(__webpack_exports__, "l", function() {
            return TREE_OPERATION_ADD;
          });
          __webpack_require__.d(__webpack_exports__, "m", function() {
            return TREE_OPERATION_REMOVE;
          });
          __webpack_require__.d(__webpack_exports__, "o", function() {
            return TREE_OPERATION_REORDER_CHILDREN;
          });
          __webpack_require__.d(__webpack_exports__, "r", function() {
            return TREE_OPERATION_UPDATE_TREE_BASE_DURATION;
          });
          __webpack_require__.d(__webpack_exports__, "q", function() {
            return TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS;
          });
          __webpack_require__.d(__webpack_exports__, "n", function() {
            return TREE_OPERATION_REMOVE_ROOT;
          });
          __webpack_require__.d(__webpack_exports__, "p", function() {
            return TREE_OPERATION_SET_SUBTREE_MODE;
          });
          __webpack_require__.d(__webpack_exports__, "g", function() {
            return PROFILING_FLAG_BASIC_SUPPORT;
          });
          __webpack_require__.d(__webpack_exports__, "h", function() {
            return PROFILING_FLAG_TIMELINE_SUPPORT;
          });
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return LOCAL_STORAGE_FILTER_PREFERENCES_KEY;
          });
          __webpack_require__.d(__webpack_exports__, "i", function() {
            return SESSION_STORAGE_LAST_SELECTION_KEY;
          });
          __webpack_require__.d(__webpack_exports__, "c", function() {
            return LOCAL_STORAGE_OPEN_IN_EDITOR_URL;
          });
          __webpack_require__.d(__webpack_exports__, "j", function() {
            return SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY;
          });
          __webpack_require__.d(__webpack_exports__, "k", function() {
            return SESSION_STORAGE_RELOAD_AND_PROFILE_KEY;
          });
          __webpack_require__.d(__webpack_exports__, "d", function() {
            return LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS;
          });
          __webpack_require__.d(__webpack_exports__, "e", function() {
            return LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY;
          });
          __webpack_require__.d(__webpack_exports__, "f", function() {
            return LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY;
          });
          __webpack_require__.d(__webpack_exports__, "b", function() {
            return LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE;
          });
          var CHROME_WEBSTORE_EXTENSION_ID = "fmkadmapgofadopljbjfkapdkoienihi";
          var INTERNAL_EXTENSION_ID = "dnjnjgbfilfphmojnmhliehogmojhclc";
          var LOCAL_EXTENSION_ID = "ikiahnapldjmdmpkmfhjdjilojjhgcbf";
          var __DEBUG__ = false;
          var __PERFORMANCE_PROFILE__ = false;
          var TREE_OPERATION_ADD = 1;
          var TREE_OPERATION_REMOVE = 2;
          var TREE_OPERATION_REORDER_CHILDREN = 3;
          var TREE_OPERATION_UPDATE_TREE_BASE_DURATION = 4;
          var TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS = 5;
          var TREE_OPERATION_REMOVE_ROOT = 6;
          var TREE_OPERATION_SET_SUBTREE_MODE = 7;
          var PROFILING_FLAG_BASIC_SUPPORT = 1;
          var PROFILING_FLAG_TIMELINE_SUPPORT = 2;
          var LOCAL_STORAGE_DEFAULT_TAB_KEY = "React::DevTools::defaultTab";
          var LOCAL_STORAGE_FILTER_PREFERENCES_KEY = "React::DevTools::componentFilters";
          var SESSION_STORAGE_LAST_SELECTION_KEY = "React::DevTools::lastSelection";
          var LOCAL_STORAGE_OPEN_IN_EDITOR_URL = "React::DevTools::openInEditorUrl";
          var LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY = "React::DevTools::parseHookNames";
          var SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY = "React::DevTools::recordChangeDescriptions";
          var SESSION_STORAGE_RELOAD_AND_PROFILE_KEY = "React::DevTools::reloadAndProfile";
          var LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS = "React::DevTools::breakOnConsoleErrors";
          var LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY = "React::DevTools::appendComponentStack";
          var LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY = "React::DevTools::showInlineWarningsAndErrors";
          var LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY = "React::DevTools::traceUpdatesEnabled";
          var LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE = "React::DevTools::hideConsoleLogsInStrictMode";
          var PROFILER_EXPORT_VERSION = 5;
          var CHANGE_LOG_URL = "https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md";
          var UNSUPPORTED_VERSION_URL = "https://reactjs.org/blog/2019/08/15/new-react-devtools.html#how-do-i-get-the-old-version-back";
          var REACT_DEVTOOLS_WORKPLACE_URL = "https://fburl.com/react-devtools-workplace-group";
          var THEME_STYLES = {
            light: {
              "--color-attribute-name": "#ef6632",
              "--color-attribute-name-not-editable": "#23272f",
              "--color-attribute-name-inverted": "rgba(255, 255, 255, 0.7)",
              "--color-attribute-value": "#1a1aa6",
              "--color-attribute-value-inverted": "#ffffff",
              "--color-attribute-editable-value": "#1a1aa6",
              "--color-background": "#ffffff",
              "--color-background-hover": "rgba(0, 136, 250, 0.1)",
              "--color-background-inactive": "#e5e5e5",
              "--color-background-invalid": "#fff0f0",
              "--color-background-selected": "#0088fa",
              "--color-button-background": "#ffffff",
              "--color-button-background-focus": "#ededed",
              "--color-button": "#5f6673",
              "--color-button-disabled": "#cfd1d5",
              "--color-button-active": "#0088fa",
              "--color-button-focus": "#23272f",
              "--color-button-hover": "#23272f",
              "--color-border": "#eeeeee",
              "--color-commit-did-not-render-fill": "#cfd1d5",
              "--color-commit-did-not-render-fill-text": "#000000",
              "--color-commit-did-not-render-pattern": "#cfd1d5",
              "--color-commit-did-not-render-pattern-text": "#333333",
              "--color-commit-gradient-0": "#37afa9",
              "--color-commit-gradient-1": "#63b19e",
              "--color-commit-gradient-2": "#80b393",
              "--color-commit-gradient-3": "#97b488",
              "--color-commit-gradient-4": "#abb67d",
              "--color-commit-gradient-5": "#beb771",
              "--color-commit-gradient-6": "#cfb965",
              "--color-commit-gradient-7": "#dfba57",
              "--color-commit-gradient-8": "#efbb49",
              "--color-commit-gradient-9": "#febc38",
              "--color-commit-gradient-text": "#000000",
              "--color-component-name": "#6a51b2",
              "--color-component-name-inverted": "#ffffff",
              "--color-component-badge-background": "rgba(0, 0, 0, 0.1)",
              "--color-component-badge-background-inverted": "rgba(255, 255, 255, 0.25)",
              "--color-component-badge-count": "#777d88",
              "--color-component-badge-count-inverted": "rgba(255, 255, 255, 0.7)",
              "--color-console-error-badge-text": "#ffffff",
              "--color-console-error-background": "#fff0f0",
              "--color-console-error-border": "#ffd6d6",
              "--color-console-error-icon": "#eb3941",
              "--color-console-error-text": "#fe2e31",
              "--color-console-warning-badge-text": "#000000",
              "--color-console-warning-background": "#fffbe5",
              "--color-console-warning-border": "#fff5c1",
              "--color-console-warning-icon": "#f4bd00",
              "--color-console-warning-text": "#64460c",
              "--color-context-background": "rgba(0,0,0,.9)",
              "--color-context-background-hover": "rgba(255, 255, 255, 0.1)",
              "--color-context-background-selected": "#178fb9",
              "--color-context-border": "#3d424a",
              "--color-context-text": "#ffffff",
              "--color-context-text-selected": "#ffffff",
              "--color-dim": "#777d88",
              "--color-dimmer": "#cfd1d5",
              "--color-dimmest": "#eff0f1",
              "--color-error-background": "hsl(0, 100%, 97%)",
              "--color-error-border": "hsl(0, 100%, 92%)",
              "--color-error-text": "#ff0000",
              "--color-expand-collapse-toggle": "#777d88",
              "--color-link": "#0000ff",
              "--color-modal-background": "rgba(255, 255, 255, 0.75)",
              "--color-bridge-version-npm-background": "#eff0f1",
              "--color-bridge-version-npm-text": "#000000",
              "--color-bridge-version-number": "#0088fa",
              "--color-primitive-hook-badge-background": "#e5e5e5",
              "--color-primitive-hook-badge-text": "#5f6673",
              "--color-record-active": "#fc3a4b",
              "--color-record-hover": "#3578e5",
              "--color-record-inactive": "#0088fa",
              "--color-resize-bar": "#eeeeee",
              "--color-resize-bar-active": "#dcdcdc",
              "--color-resize-bar-border": "#d1d1d1",
              "--color-resize-bar-dot": "#333333",
              "--color-timeline-internal-module": "#d1d1d1",
              "--color-timeline-internal-module-hover": "#c9c9c9",
              "--color-timeline-internal-module-text": "#444",
              "--color-timeline-native-event": "#ccc",
              "--color-timeline-native-event-hover": "#aaa",
              "--color-timeline-network-primary": "#fcf3dc",
              "--color-timeline-network-primary-hover": "#f0e7d1",
              "--color-timeline-network-secondary": "#efc457",
              "--color-timeline-network-secondary-hover": "#e3ba52",
              "--color-timeline-priority-background": "#f6f6f6",
              "--color-timeline-priority-border": "#eeeeee",
              "--color-timeline-user-timing": "#c9cacd",
              "--color-timeline-user-timing-hover": "#93959a",
              "--color-timeline-react-idle": "#d3e5f6",
              "--color-timeline-react-idle-hover": "#c3d9ef",
              "--color-timeline-react-render": "#9fc3f3",
              "--color-timeline-react-render-hover": "#83afe9",
              "--color-timeline-react-render-text": "#11365e",
              "--color-timeline-react-commit": "#c88ff0",
              "--color-timeline-react-commit-hover": "#b281d6",
              "--color-timeline-react-commit-text": "#3e2c4a",
              "--color-timeline-react-layout-effects": "#b281d6",
              "--color-timeline-react-layout-effects-hover": "#9d71bd",
              "--color-timeline-react-layout-effects-text": "#3e2c4a",
              "--color-timeline-react-passive-effects": "#b281d6",
              "--color-timeline-react-passive-effects-hover": "#9d71bd",
              "--color-timeline-react-passive-effects-text": "#3e2c4a",
              "--color-timeline-react-schedule": "#9fc3f3",
              "--color-timeline-react-schedule-hover": "#2683E2",
              "--color-timeline-react-suspense-rejected": "#f1cc14",
              "--color-timeline-react-suspense-rejected-hover": "#ffdf37",
              "--color-timeline-react-suspense-resolved": "#a6e59f",
              "--color-timeline-react-suspense-resolved-hover": "#89d281",
              "--color-timeline-react-suspense-unresolved": "#c9cacd",
              "--color-timeline-react-suspense-unresolved-hover": "#93959a",
              "--color-timeline-thrown-error": "#ee1638",
              "--color-timeline-thrown-error-hover": "#da1030",
              "--color-timeline-text-color": "#000000",
              "--color-timeline-text-dim-color": "#ccc",
              "--color-timeline-react-work-border": "#eeeeee",
              "--color-search-match": "yellow",
              "--color-search-match-current": "#f7923b",
              "--color-selected-tree-highlight-active": "rgba(0, 136, 250, 0.1)",
              "--color-selected-tree-highlight-inactive": "rgba(0, 0, 0, 0.05)",
              "--color-scroll-caret": "rgba(150, 150, 150, 0.5)",
              "--color-tab-selected-border": "#0088fa",
              "--color-text": "#000000",
              "--color-text-invalid": "#ff0000",
              "--color-text-selected": "#ffffff",
              "--color-toggle-background-invalid": "#fc3a4b",
              "--color-toggle-background-on": "#0088fa",
              "--color-toggle-background-off": "#cfd1d5",
              "--color-toggle-text": "#ffffff",
              "--color-warning-background": "#fb3655",
              "--color-warning-background-hover": "#f82042",
              "--color-warning-text-color": "#ffffff",
              "--color-warning-text-color-inverted": "#fd4d69",
              "--color-scroll-thumb": "#c2c2c2",
              "--color-scroll-track": "#fafafa",
              "--color-tooltip-background": "rgba(0, 0, 0, 0.9)",
              "--color-tooltip-text": "#ffffff"
            },
            dark: {
              "--color-attribute-name": "#9d87d2",
              "--color-attribute-name-not-editable": "#ededed",
              "--color-attribute-name-inverted": "#282828",
              "--color-attribute-value": "#cedae0",
              "--color-attribute-value-inverted": "#ffffff",
              "--color-attribute-editable-value": "yellow",
              "--color-background": "#282c34",
              "--color-background-hover": "rgba(255, 255, 255, 0.1)",
              "--color-background-inactive": "#3d424a",
              "--color-background-invalid": "#5c0000",
              "--color-background-selected": "#178fb9",
              "--color-button-background": "#282c34",
              "--color-button-background-focus": "#3d424a",
              "--color-button": "#afb3b9",
              "--color-button-active": "#61dafb",
              "--color-button-disabled": "#4f5766",
              "--color-button-focus": "#a2e9fc",
              "--color-button-hover": "#ededed",
              "--color-border": "#3d424a",
              "--color-commit-did-not-render-fill": "#777d88",
              "--color-commit-did-not-render-fill-text": "#000000",
              "--color-commit-did-not-render-pattern": "#666c77",
              "--color-commit-did-not-render-pattern-text": "#ffffff",
              "--color-commit-gradient-0": "#37afa9",
              "--color-commit-gradient-1": "#63b19e",
              "--color-commit-gradient-2": "#80b393",
              "--color-commit-gradient-3": "#97b488",
              "--color-commit-gradient-4": "#abb67d",
              "--color-commit-gradient-5": "#beb771",
              "--color-commit-gradient-6": "#cfb965",
              "--color-commit-gradient-7": "#dfba57",
              "--color-commit-gradient-8": "#efbb49",
              "--color-commit-gradient-9": "#febc38",
              "--color-commit-gradient-text": "#000000",
              "--color-component-name": "#61dafb",
              "--color-component-name-inverted": "#282828",
              "--color-component-badge-background": "rgba(255, 255, 255, 0.25)",
              "--color-component-badge-background-inverted": "rgba(0, 0, 0, 0.25)",
              "--color-component-badge-count": "#8f949d",
              "--color-component-badge-count-inverted": "rgba(255, 255, 255, 0.7)",
              "--color-console-error-badge-text": "#000000",
              "--color-console-error-background": "#290000",
              "--color-console-error-border": "#5c0000",
              "--color-console-error-icon": "#eb3941",
              "--color-console-error-text": "#fc7f7f",
              "--color-console-warning-badge-text": "#000000",
              "--color-console-warning-background": "#332b00",
              "--color-console-warning-border": "#665500",
              "--color-console-warning-icon": "#f4bd00",
              "--color-console-warning-text": "#f5f2ed",
              "--color-context-background": "rgba(255,255,255,.95)",
              "--color-context-background-hover": "rgba(0, 136, 250, 0.1)",
              "--color-context-background-selected": "#0088fa",
              "--color-context-border": "#eeeeee",
              "--color-context-text": "#000000",
              "--color-context-text-selected": "#ffffff",
              "--color-dim": "#8f949d",
              "--color-dimmer": "#777d88",
              "--color-dimmest": "#4f5766",
              "--color-error-background": "#200",
              "--color-error-border": "#900",
              "--color-error-text": "#f55",
              "--color-expand-collapse-toggle": "#8f949d",
              "--color-link": "#61dafb",
              "--color-modal-background": "rgba(0, 0, 0, 0.75)",
              "--color-bridge-version-npm-background": "rgba(0, 0, 0, 0.25)",
              "--color-bridge-version-npm-text": "#ffffff",
              "--color-bridge-version-number": "yellow",
              "--color-primitive-hook-badge-background": "rgba(0, 0, 0, 0.25)",
              "--color-primitive-hook-badge-text": "rgba(255, 255, 255, 0.7)",
              "--color-record-active": "#fc3a4b",
              "--color-record-hover": "#a2e9fc",
              "--color-record-inactive": "#61dafb",
              "--color-resize-bar": "#282c34",
              "--color-resize-bar-active": "#31363f",
              "--color-resize-bar-border": "#3d424a",
              "--color-resize-bar-dot": "#cfd1d5",
              "--color-timeline-internal-module": "#303542",
              "--color-timeline-internal-module-hover": "#363b4a",
              "--color-timeline-internal-module-text": "#7f8899",
              "--color-timeline-native-event": "#b2b2b2",
              "--color-timeline-native-event-hover": "#949494",
              "--color-timeline-network-primary": "#fcf3dc",
              "--color-timeline-network-primary-hover": "#e3dbc5",
              "--color-timeline-network-secondary": "#efc457",
              "--color-timeline-network-secondary-hover": "#d6af4d",
              "--color-timeline-priority-background": "#1d2129",
              "--color-timeline-priority-border": "#282c34",
              "--color-timeline-user-timing": "#c9cacd",
              "--color-timeline-user-timing-hover": "#93959a",
              "--color-timeline-react-idle": "#3d485b",
              "--color-timeline-react-idle-hover": "#465269",
              "--color-timeline-react-render": "#2683E2",
              "--color-timeline-react-render-hover": "#1a76d4",
              "--color-timeline-react-render-text": "#11365e",
              "--color-timeline-react-commit": "#731fad",
              "--color-timeline-react-commit-hover": "#611b94",
              "--color-timeline-react-commit-text": "#e5c1ff",
              "--color-timeline-react-layout-effects": "#611b94",
              "--color-timeline-react-layout-effects-hover": "#51167a",
              "--color-timeline-react-layout-effects-text": "#e5c1ff",
              "--color-timeline-react-passive-effects": "#611b94",
              "--color-timeline-react-passive-effects-hover": "#51167a",
              "--color-timeline-react-passive-effects-text": "#e5c1ff",
              "--color-timeline-react-schedule": "#2683E2",
              "--color-timeline-react-schedule-hover": "#1a76d4",
              "--color-timeline-react-suspense-rejected": "#f1cc14",
              "--color-timeline-react-suspense-rejected-hover": "#e4c00f",
              "--color-timeline-react-suspense-resolved": "#a6e59f",
              "--color-timeline-react-suspense-resolved-hover": "#89d281",
              "--color-timeline-react-suspense-unresolved": "#c9cacd",
              "--color-timeline-react-suspense-unresolved-hover": "#93959a",
              "--color-timeline-thrown-error": "#fb3655",
              "--color-timeline-thrown-error-hover": "#f82042",
              "--color-timeline-text-color": "#282c34",
              "--color-timeline-text-dim-color": "#555b66",
              "--color-timeline-react-work-border": "#3d424a",
              "--color-search-match": "yellow",
              "--color-search-match-current": "#f7923b",
              "--color-selected-tree-highlight-active": "rgba(23, 143, 185, 0.15)",
              "--color-selected-tree-highlight-inactive": "rgba(255, 255, 255, 0.05)",
              "--color-scroll-caret": "#4f5766",
              "--color-shadow": "rgba(0, 0, 0, 0.5)",
              "--color-tab-selected-border": "#178fb9",
              "--color-text": "#ffffff",
              "--color-text-invalid": "#ff8080",
              "--color-text-selected": "#ffffff",
              "--color-toggle-background-invalid": "#fc3a4b",
              "--color-toggle-background-on": "#178fb9",
              "--color-toggle-background-off": "#777d88",
              "--color-toggle-text": "#ffffff",
              "--color-warning-background": "#ee1638",
              "--color-warning-background-hover": "#da1030",
              "--color-warning-text-color": "#ffffff",
              "--color-warning-text-color-inverted": "#ee1638",
              "--color-scroll-thumb": "#afb3b9",
              "--color-scroll-track": "#313640",
              "--color-tooltip-background": "rgba(255, 255, 255, 0.95)",
              "--color-tooltip-text": "#000000"
            },
            compact: {
              "--font-size-monospace-small": "9px",
              "--font-size-monospace-normal": "11px",
              "--font-size-monospace-large": "15px",
              "--font-size-sans-small": "10px",
              "--font-size-sans-normal": "12px",
              "--font-size-sans-large": "14px",
              "--line-height-data": "18px"
            },
            comfortable: {
              "--font-size-monospace-small": "10px",
              "--font-size-monospace-normal": "13px",
              "--font-size-monospace-large": "17px",
              "--font-size-sans-small": "12px",
              "--font-size-sans-normal": "14px",
              "--font-size-sans-large": "16px",
              "--line-height-data": "22px"
            }
          };
          var COMFORTABLE_LINE_HEIGHT = parseInt(THEME_STYLES.comfortable["--line-height-data"], 10);
          var COMPACT_LINE_HEIGHT = parseInt(THEME_STYLES.compact["--line-height-data"], 10);
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.d(__webpack_exports__, "e", function() {
            return ElementTypeClass;
          });
          __webpack_require__.d(__webpack_exports__, "f", function() {
            return ElementTypeContext;
          });
          __webpack_require__.d(__webpack_exports__, "h", function() {
            return ElementTypeFunction;
          });
          __webpack_require__.d(__webpack_exports__, "g", function() {
            return ElementTypeForwardRef;
          });
          __webpack_require__.d(__webpack_exports__, "i", function() {
            return ElementTypeHostComponent;
          });
          __webpack_require__.d(__webpack_exports__, "j", function() {
            return ElementTypeMemo;
          });
          __webpack_require__.d(__webpack_exports__, "k", function() {
            return ElementTypeOtherOrUnknown;
          });
          __webpack_require__.d(__webpack_exports__, "l", function() {
            return ElementTypeProfiler;
          });
          __webpack_require__.d(__webpack_exports__, "m", function() {
            return ElementTypeRoot;
          });
          __webpack_require__.d(__webpack_exports__, "n", function() {
            return ElementTypeSuspense;
          });
          __webpack_require__.d(__webpack_exports__, "o", function() {
            return ElementTypeSuspenseList;
          });
          __webpack_require__.d(__webpack_exports__, "p", function() {
            return ElementTypeTracingMarker;
          });
          __webpack_require__.d(__webpack_exports__, "b", function() {
            return ComponentFilterElementType;
          });
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return ComponentFilterDisplayName;
          });
          __webpack_require__.d(__webpack_exports__, "d", function() {
            return ComponentFilterLocation;
          });
          __webpack_require__.d(__webpack_exports__, "c", function() {
            return ComponentFilterHOC;
          });
          __webpack_require__.d(__webpack_exports__, "q", function() {
            return StrictMode;
          });
          var ElementTypeClass = 1;
          var ElementTypeContext = 2;
          var ElementTypeFunction = 5;
          var ElementTypeForwardRef = 6;
          var ElementTypeHostComponent = 7;
          var ElementTypeMemo = 8;
          var ElementTypeOtherOrUnknown = 9;
          var ElementTypeProfiler = 10;
          var ElementTypeRoot = 11;
          var ElementTypeSuspense = 12;
          var ElementTypeSuspenseList = 13;
          var ElementTypeTracingMarker = 14;
          var ComponentFilterElementType = 1;
          var ComponentFilterDisplayName = 2;
          var ComponentFilterLocation = 3;
          var ComponentFilterHOC = 4;
          var StrictMode = 1;
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          (function(process2) {
            __webpack_require__.d(__webpack_exports__, "c", function() {
              return getAllEnumerableKeys;
            });
            __webpack_require__.d(__webpack_exports__, "f", function() {
              return getDisplayName;
            });
            __webpack_require__.d(__webpack_exports__, "i", function() {
              return getUID;
            });
            __webpack_require__.d(__webpack_exports__, "m", function() {
              return utfEncodeString;
            });
            __webpack_require__.d(__webpack_exports__, "j", function() {
              return printOperationsArray;
            });
            __webpack_require__.d(__webpack_exports__, "e", function() {
              return getDefaultComponentFilters;
            });
            __webpack_require__.d(__webpack_exports__, "h", function() {
              return getInObject;
            });
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return deletePathInObject;
            });
            __webpack_require__.d(__webpack_exports__, "k", function() {
              return renamePathInObject;
            });
            __webpack_require__.d(__webpack_exports__, "l", function() {
              return setInObject;
            });
            __webpack_require__.d(__webpack_exports__, "d", function() {
              return getDataType;
            });
            __webpack_require__.d(__webpack_exports__, "g", function() {
              return getDisplayNameForReactElement;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return formatDataForPreview;
            });
            var lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(20);
            var lru_cache__WEBPACK_IMPORTED_MODULE_0___default = /* @__PURE__ */ __webpack_require__.n(lru_cache__WEBPACK_IMPORTED_MODULE_0__);
            var react_is__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
            var react_is__WEBPACK_IMPORTED_MODULE_1___default = /* @__PURE__ */ __webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_1__);
            var shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(18);
            var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(0);
            var react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1);
            var _storage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5);
            var _hydration__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(11);
            var _isArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6);
            function _typeof(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof2(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof = function _typeof2(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof(obj);
            }
            function _toConsumableArray(arr) {
              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
            }
            function _nonIterableSpread() {
              throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _unsupportedIterableToArray(o2, minLen) {
              if (!o2)
                return;
              if (typeof o2 === "string")
                return _arrayLikeToArray(o2, minLen);
              var n2 = Object.prototype.toString.call(o2).slice(8, -1);
              if (n2 === "Object" && o2.constructor)
                n2 = o2.constructor.name;
              if (n2 === "Map" || n2 === "Set")
                return Array.from(o2);
              if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
                return _arrayLikeToArray(o2, minLen);
            }
            function _iterableToArray(iter) {
              if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
                return Array.from(iter);
            }
            function _arrayWithoutHoles(arr) {
              if (Array.isArray(arr))
                return _arrayLikeToArray(arr);
            }
            function _arrayLikeToArray(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
                arr2[i3] = arr[i3];
              }
              return arr2;
            }
            var cachedDisplayNames = /* @__PURE__ */ new WeakMap();
            var encodedStringCache = new lru_cache__WEBPACK_IMPORTED_MODULE_0___default.a({
              max: 1e3
            });
            function alphaSortKeys(a2, b2) {
              if (a2.toString() > b2.toString()) {
                return 1;
              } else if (b2.toString() > a2.toString()) {
                return -1;
              } else {
                return 0;
              }
            }
            function getAllEnumerableKeys(obj) {
              var keys = /* @__PURE__ */ new Set();
              var current = obj;
              var _loop = function _loop2() {
                var currentKeys = [].concat(_toConsumableArray(Object.keys(current)), _toConsumableArray(Object.getOwnPropertySymbols(current)));
                var descriptors = Object.getOwnPropertyDescriptors(current);
                currentKeys.forEach(function(key2) {
                  if (descriptors[key2].enumerable) {
                    keys.add(key2);
                  }
                });
                current = Object.getPrototypeOf(current);
              };
              while (current != null) {
                _loop();
              }
              return keys;
            }
            function getDisplayName(type2) {
              var fallbackName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "Anonymous";
              var nameFromCache = cachedDisplayNames.get(type2);
              if (nameFromCache != null) {
                return nameFromCache;
              }
              var displayName = fallbackName;
              if (typeof type2.displayName === "string") {
                displayName = type2.displayName;
              } else if (typeof type2.name === "string" && type2.name !== "") {
                displayName = type2.name;
              }
              cachedDisplayNames.set(type2, displayName);
              return displayName;
            }
            var uidCounter = 0;
            function getUID() {
              return ++uidCounter;
            }
            function utfDecodeString(array) {
              var string = "";
              for (var i3 = 0; i3 < array.length; i3++) {
                var char = array[i3];
                string += String.fromCodePoint(char);
              }
              return string;
            }
            function surrogatePairToCodePoint(charCode1, charCode2) {
              return ((charCode1 & 1023) << 10) + (charCode2 & 1023) + 65536;
            }
            function utfEncodeString(string) {
              var cached = encodedStringCache.get(string);
              if (cached !== void 0) {
                return cached;
              }
              var encoded = [];
              var i3 = 0;
              var charCode;
              while (i3 < string.length) {
                charCode = string.charCodeAt(i3);
                if ((charCode & 63488) === 55296) {
                  encoded.push(surrogatePairToCodePoint(charCode, string.charCodeAt(++i3)));
                } else {
                  encoded.push(charCode);
                }
                ++i3;
              }
              encodedStringCache.set(string, encoded);
              return encoded;
            }
            function printOperationsArray(operations) {
              var rendererID = operations[0];
              var rootID = operations[1];
              var logs = ["operations for renderer:".concat(rendererID, " and root:").concat(rootID)];
              var i3 = 2;
              var stringTable = [
                null
              ];
              var stringTableSize = operations[i3++];
              var stringTableEnd = i3 + stringTableSize;
              while (i3 < stringTableEnd) {
                var nextLength = operations[i3++];
                var nextString = utfDecodeString(operations.slice(i3, i3 + nextLength));
                stringTable.push(nextString);
                i3 += nextLength;
              }
              while (i3 < operations.length) {
                var operation = operations[i3];
                switch (operation) {
                  case _constants__WEBPACK_IMPORTED_MODULE_3__["l"]: {
                    var _id = operations[i3 + 1];
                    var type2 = operations[i3 + 2];
                    i3 += 3;
                    if (type2 === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["m"]) {
                      logs.push("Add new root node ".concat(_id));
                      i3++;
                      i3++;
                      i3++;
                      i3++;
                    } else {
                      var parentID = operations[i3];
                      i3++;
                      i3++;
                      var displayNameStringID = operations[i3];
                      var displayName = stringTable[displayNameStringID];
                      i3++;
                      i3++;
                      logs.push("Add node ".concat(_id, " (").concat(displayName || "null", ") as child of ").concat(parentID));
                    }
                    break;
                  }
                  case _constants__WEBPACK_IMPORTED_MODULE_3__["m"]: {
                    var removeLength = operations[i3 + 1];
                    i3 += 2;
                    for (var removeIndex = 0; removeIndex < removeLength; removeIndex++) {
                      var _id2 = operations[i3];
                      i3 += 1;
                      logs.push("Remove node ".concat(_id2));
                    }
                    break;
                  }
                  case _constants__WEBPACK_IMPORTED_MODULE_3__["n"]: {
                    i3 += 1;
                    logs.push("Remove root ".concat(rootID));
                    break;
                  }
                  case _constants__WEBPACK_IMPORTED_MODULE_3__["p"]: {
                    var _id3 = operations[i3 + 1];
                    var mode = operations[i3 + 1];
                    i3 += 3;
                    logs.push("Mode ".concat(mode, " set for subtree with root ").concat(_id3));
                    break;
                  }
                  case _constants__WEBPACK_IMPORTED_MODULE_3__["o"]: {
                    var _id4 = operations[i3 + 1];
                    var numChildren = operations[i3 + 2];
                    i3 += 3;
                    var children = operations.slice(i3, i3 + numChildren);
                    i3 += numChildren;
                    logs.push("Re-order node ".concat(_id4, " children ").concat(children.join(",")));
                    break;
                  }
                  case _constants__WEBPACK_IMPORTED_MODULE_3__["r"]:
                    i3 += 3;
                    break;
                  case _constants__WEBPACK_IMPORTED_MODULE_3__["q"]:
                    var id = operations[i3 + 1];
                    var numErrors = operations[i3 + 2];
                    var numWarnings = operations[i3 + 3];
                    i3 += 4;
                    logs.push("Node ".concat(id, " has ").concat(numErrors, " errors and ").concat(numWarnings, " warnings"));
                    break;
                  default:
                    throw Error('Unsupported Bridge operation "'.concat(operation, '"'));
                }
              }
              console.log(logs.join("\n  "));
            }
            function getDefaultComponentFilters() {
              return [{
                type: react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["b"],
                value: react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["i"],
                isEnabled: true
              }];
            }
            function getSavedComponentFilters() {
              try {
                var raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__["a"])(_constants__WEBPACK_IMPORTED_MODULE_3__["a"]);
                if (raw != null) {
                  return JSON.parse(raw);
                }
              } catch (error) {
              }
              return getDefaultComponentFilters();
            }
            function saveComponentFilters(componentFilters) {
              Object(_storage__WEBPACK_IMPORTED_MODULE_5__["b"])(_constants__WEBPACK_IMPORTED_MODULE_3__["a"], JSON.stringify(componentFilters));
            }
            function getAppendComponentStack() {
              try {
                var raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__["a"])(_constants__WEBPACK_IMPORTED_MODULE_3__["e"]);
                if (raw != null) {
                  return JSON.parse(raw);
                }
              } catch (error) {
              }
              return true;
            }
            function setAppendComponentStack(value) {
              Object(_storage__WEBPACK_IMPORTED_MODULE_5__["b"])(_constants__WEBPACK_IMPORTED_MODULE_3__["e"], JSON.stringify(value));
            }
            function getBreakOnConsoleErrors() {
              try {
                var raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__["a"])(_constants__WEBPACK_IMPORTED_MODULE_3__["d"]);
                if (raw != null) {
                  return JSON.parse(raw);
                }
              } catch (error) {
              }
              return false;
            }
            function setBreakOnConsoleErrors(value) {
              Object(_storage__WEBPACK_IMPORTED_MODULE_5__["b"])(_constants__WEBPACK_IMPORTED_MODULE_3__["d"], JSON.stringify(value));
            }
            function getHideConsoleLogsInStrictMode() {
              try {
                var raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__["a"])(_constants__WEBPACK_IMPORTED_MODULE_3__["b"]);
                if (raw != null) {
                  return JSON.parse(raw);
                }
              } catch (error) {
              }
              return false;
            }
            function sethideConsoleLogsInStrictMode(value) {
              Object(_storage__WEBPACK_IMPORTED_MODULE_5__["b"])(_constants__WEBPACK_IMPORTED_MODULE_3__["b"], JSON.stringify(value));
            }
            function getShowInlineWarningsAndErrors() {
              try {
                var raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__["a"])(_constants__WEBPACK_IMPORTED_MODULE_3__["f"]);
                if (raw != null) {
                  return JSON.parse(raw);
                }
              } catch (error) {
              }
              return true;
            }
            function setShowInlineWarningsAndErrors(value) {
              Object(_storage__WEBPACK_IMPORTED_MODULE_5__["b"])(_constants__WEBPACK_IMPORTED_MODULE_3__["f"], JSON.stringify(value));
            }
            function getDefaultOpenInEditorURL() {
              return typeof process2.env.EDITOR_URL === "string" ? process2.env.EDITOR_URL : "";
            }
            function getOpenInEditorURL() {
              try {
                var raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__["a"])(_constants__WEBPACK_IMPORTED_MODULE_3__["c"]);
                if (raw != null) {
                  return JSON.parse(raw);
                }
              } catch (error) {
              }
              return getDefaultOpenInEditorURL();
            }
            function separateDisplayNameAndHOCs(displayName, type2) {
              if (displayName === null) {
                return [null, null];
              }
              var hocDisplayNames = null;
              switch (type2) {
                case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["e"]:
                case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["g"]:
                case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["h"]:
                case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["j"]:
                  if (displayName.indexOf("(") >= 0) {
                    var matches = displayName.match(/[^()]+/g);
                    if (matches != null) {
                      displayName = matches.pop();
                      hocDisplayNames = matches;
                    }
                  }
                  break;
                default:
                  break;
              }
              if (type2 === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["j"]) {
                if (hocDisplayNames === null) {
                  hocDisplayNames = ["Memo"];
                } else {
                  hocDisplayNames.unshift("Memo");
                }
              } else if (type2 === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__["g"]) {
                if (hocDisplayNames === null) {
                  hocDisplayNames = ["ForwardRef"];
                } else {
                  hocDisplayNames.unshift("ForwardRef");
                }
              }
              return [displayName, hocDisplayNames];
            }
            function shallowDiffers(prev, next) {
              for (var attribute in prev) {
                if (!(attribute in next)) {
                  return true;
                }
              }
              for (var _attribute in next) {
                if (prev[_attribute] !== next[_attribute]) {
                  return true;
                }
              }
              return false;
            }
            function getInObject(object, path) {
              return path.reduce(function(reduced, attr) {
                if (reduced) {
                  if (hasOwnProperty.call(reduced, attr)) {
                    return reduced[attr];
                  }
                  if (typeof reduced[Symbol.iterator] === "function") {
                    return Array.from(reduced)[attr];
                  }
                }
                return null;
              }, object);
            }
            function deletePathInObject(object, path) {
              var length = path.length;
              var last = path[length - 1];
              if (object != null) {
                var parent = getInObject(object, path.slice(0, length - 1));
                if (parent) {
                  if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__["a"])(parent)) {
                    parent.splice(last, 1);
                  } else {
                    delete parent[last];
                  }
                }
              }
            }
            function renamePathInObject(object, oldPath, newPath) {
              var length = oldPath.length;
              if (object != null) {
                var parent = getInObject(object, oldPath.slice(0, length - 1));
                if (parent) {
                  var lastOld = oldPath[length - 1];
                  var lastNew = newPath[length - 1];
                  parent[lastNew] = parent[lastOld];
                  if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__["a"])(parent)) {
                    parent.splice(lastOld, 1);
                  } else {
                    delete parent[lastOld];
                  }
                }
              }
            }
            function setInObject(object, path, value) {
              var length = path.length;
              var last = path[length - 1];
              if (object != null) {
                var parent = getInObject(object, path.slice(0, length - 1));
                if (parent) {
                  parent[last] = value;
                }
              }
            }
            function getDataType(data) {
              if (data === null) {
                return "null";
              } else if (data === void 0) {
                return "undefined";
              }
              if (Object(react_is__WEBPACK_IMPORTED_MODULE_1__["isElement"])(data)) {
                return "react_element";
              }
              if (typeof HTMLElement !== "undefined" && data instanceof HTMLElement) {
                return "html_element";
              }
              var type2 = _typeof(data);
              switch (type2) {
                case "bigint":
                  return "bigint";
                case "boolean":
                  return "boolean";
                case "function":
                  return "function";
                case "number":
                  if (Number.isNaN(data)) {
                    return "nan";
                  } else if (!Number.isFinite(data)) {
                    return "infinity";
                  } else {
                    return "number";
                  }
                case "object":
                  if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__["a"])(data)) {
                    return "array";
                  } else if (ArrayBuffer.isView(data)) {
                    return hasOwnProperty.call(data.constructor, "BYTES_PER_ELEMENT") ? "typed_array" : "data_view";
                  } else if (data.constructor && data.constructor.name === "ArrayBuffer") {
                    return "array_buffer";
                  } else if (typeof data[Symbol.iterator] === "function") {
                    var iterator = data[Symbol.iterator]();
                    if (!iterator) {
                    } else {
                      return iterator === data ? "opaque_iterator" : "iterator";
                    }
                  } else if (data.constructor && data.constructor.name === "RegExp") {
                    return "regexp";
                  } else {
                    var toStringValue = Object.prototype.toString.call(data);
                    if (toStringValue === "[object Date]") {
                      return "date";
                    } else if (toStringValue === "[object HTMLAllCollection]") {
                      return "html_all_collection";
                    }
                  }
                  return "object";
                case "string":
                  return "string";
                case "symbol":
                  return "symbol";
                case "undefined":
                  if (Object.prototype.toString.call(data) === "[object HTMLAllCollection]") {
                    return "html_all_collection";
                  }
                  return "undefined";
                default:
                  return "unknown";
              }
            }
            function getDisplayNameForReactElement(element) {
              var elementType = Object(react_is__WEBPACK_IMPORTED_MODULE_1__["typeOf"])(element);
              switch (elementType) {
                case react_is__WEBPACK_IMPORTED_MODULE_1__["ContextConsumer"]:
                  return "ContextConsumer";
                case react_is__WEBPACK_IMPORTED_MODULE_1__["ContextProvider"]:
                  return "ContextProvider";
                case react_is__WEBPACK_IMPORTED_MODULE_1__["ForwardRef"]:
                  return "ForwardRef";
                case react_is__WEBPACK_IMPORTED_MODULE_1__["Fragment"]:
                  return "Fragment";
                case react_is__WEBPACK_IMPORTED_MODULE_1__["Lazy"]:
                  return "Lazy";
                case react_is__WEBPACK_IMPORTED_MODULE_1__["Memo"]:
                  return "Memo";
                case react_is__WEBPACK_IMPORTED_MODULE_1__["Portal"]:
                  return "Portal";
                case react_is__WEBPACK_IMPORTED_MODULE_1__["Profiler"]:
                  return "Profiler";
                case react_is__WEBPACK_IMPORTED_MODULE_1__["StrictMode"]:
                  return "StrictMode";
                case react_is__WEBPACK_IMPORTED_MODULE_1__["Suspense"]:
                  return "Suspense";
                case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_2__["a"]:
                  return "SuspenseList";
                case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_2__["b"]:
                  return "TracingMarker";
                default:
                  var type2 = element.type;
                  if (typeof type2 === "string") {
                    return type2;
                  } else if (typeof type2 === "function") {
                    return getDisplayName(type2, "Anonymous");
                  } else if (type2 != null) {
                    return "NotImplementedInDevtools";
                  } else {
                    return "Element";
                  }
              }
            }
            var MAX_PREVIEW_STRING_LENGTH = 50;
            function truncateForDisplay(string) {
              var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : MAX_PREVIEW_STRING_LENGTH;
              if (string.length > length) {
                return string.substr(0, length) + "\u2026";
              } else {
                return string;
              }
            }
            function formatDataForPreview(data, showFormattedValue) {
              if (data != null && hasOwnProperty.call(data, _hydration__WEBPACK_IMPORTED_MODULE_6__["b"].type)) {
                return showFormattedValue ? data[_hydration__WEBPACK_IMPORTED_MODULE_6__["b"].preview_long] : data[_hydration__WEBPACK_IMPORTED_MODULE_6__["b"].preview_short];
              }
              var type2 = getDataType(data);
              switch (type2) {
                case "html_element":
                  return "<".concat(truncateForDisplay(data.tagName.toLowerCase()), " />");
                case "function":
                  return truncateForDisplay("\u0192 ".concat(typeof data.name === "function" ? "" : data.name, "() {}"));
                case "string":
                  return '"'.concat(data, '"');
                case "bigint":
                  return truncateForDisplay(data.toString() + "n");
                case "regexp":
                  return truncateForDisplay(data.toString());
                case "symbol":
                  return truncateForDisplay(data.toString());
                case "react_element":
                  return "<".concat(truncateForDisplay(getDisplayNameForReactElement(data) || "Unknown"), " />");
                case "array_buffer":
                  return "ArrayBuffer(".concat(data.byteLength, ")");
                case "data_view":
                  return "DataView(".concat(data.buffer.byteLength, ")");
                case "array":
                  if (showFormattedValue) {
                    var formatted = "";
                    for (var i3 = 0; i3 < data.length; i3++) {
                      if (i3 > 0) {
                        formatted += ", ";
                      }
                      formatted += formatDataForPreview(data[i3], false);
                      if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {
                        break;
                      }
                    }
                    return "[".concat(truncateForDisplay(formatted), "]");
                  } else {
                    var length = hasOwnProperty.call(data, _hydration__WEBPACK_IMPORTED_MODULE_6__["b"].size) ? data[_hydration__WEBPACK_IMPORTED_MODULE_6__["b"].size] : data.length;
                    return "Array(".concat(length, ")");
                  }
                case "typed_array":
                  var shortName = "".concat(data.constructor.name, "(").concat(data.length, ")");
                  if (showFormattedValue) {
                    var _formatted = "";
                    for (var _i = 0; _i < data.length; _i++) {
                      if (_i > 0) {
                        _formatted += ", ";
                      }
                      _formatted += data[_i];
                      if (_formatted.length > MAX_PREVIEW_STRING_LENGTH) {
                        break;
                      }
                    }
                    return "".concat(shortName, " [").concat(truncateForDisplay(_formatted), "]");
                  } else {
                    return shortName;
                  }
                case "iterator":
                  var name = data.constructor.name;
                  if (showFormattedValue) {
                    var array = Array.from(data);
                    var _formatted2 = "";
                    for (var _i2 = 0; _i2 < array.length; _i2++) {
                      var entryOrEntries = array[_i2];
                      if (_i2 > 0) {
                        _formatted2 += ", ";
                      }
                      if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__["a"])(entryOrEntries)) {
                        var key2 = formatDataForPreview(entryOrEntries[0], true);
                        var value = formatDataForPreview(entryOrEntries[1], false);
                        _formatted2 += "".concat(key2, " => ").concat(value);
                      } else {
                        _formatted2 += formatDataForPreview(entryOrEntries, false);
                      }
                      if (_formatted2.length > MAX_PREVIEW_STRING_LENGTH) {
                        break;
                      }
                    }
                    return "".concat(name, "(").concat(data.size, ") {").concat(truncateForDisplay(_formatted2), "}");
                  } else {
                    return "".concat(name, "(").concat(data.size, ")");
                  }
                case "opaque_iterator": {
                  return data[Symbol.toStringTag];
                }
                case "date":
                  return data.toString();
                case "object":
                  if (showFormattedValue) {
                    var keys = Array.from(getAllEnumerableKeys(data)).sort(alphaSortKeys);
                    var _formatted3 = "";
                    for (var _i3 = 0; _i3 < keys.length; _i3++) {
                      var _key = keys[_i3];
                      if (_i3 > 0) {
                        _formatted3 += ", ";
                      }
                      _formatted3 += "".concat(_key.toString(), ": ").concat(formatDataForPreview(data[_key], false));
                      if (_formatted3.length > MAX_PREVIEW_STRING_LENGTH) {
                        break;
                      }
                    }
                    return "{".concat(truncateForDisplay(_formatted3), "}");
                  } else {
                    return "{\u2026}";
                  }
                case "boolean":
                case "number":
                case "infinity":
                case "nan":
                case "null":
                case "undefined":
                  return data;
                default:
                  try {
                    return truncateForDisplay(String(data));
                  } catch (error) {
                    return "unserializable";
                  }
              }
            }
          }).call(this, __webpack_require__(17));
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return CONCURRENT_MODE_NUMBER;
          });
          __webpack_require__.d(__webpack_exports__, "b", function() {
            return CONCURRENT_MODE_SYMBOL_STRING;
          });
          __webpack_require__.d(__webpack_exports__, "c", function() {
            return CONTEXT_NUMBER;
          });
          __webpack_require__.d(__webpack_exports__, "d", function() {
            return CONTEXT_SYMBOL_STRING;
          });
          __webpack_require__.d(__webpack_exports__, "r", function() {
            return SERVER_CONTEXT_SYMBOL_STRING;
          });
          __webpack_require__.d(__webpack_exports__, "e", function() {
            return DEPRECATED_ASYNC_MODE_SYMBOL_STRING;
          });
          __webpack_require__.d(__webpack_exports__, "f", function() {
            return FORWARD_REF_NUMBER;
          });
          __webpack_require__.d(__webpack_exports__, "g", function() {
            return FORWARD_REF_SYMBOL_STRING;
          });
          __webpack_require__.d(__webpack_exports__, "h", function() {
            return LAZY_NUMBER;
          });
          __webpack_require__.d(__webpack_exports__, "i", function() {
            return LAZY_SYMBOL_STRING;
          });
          __webpack_require__.d(__webpack_exports__, "j", function() {
            return MEMO_NUMBER;
          });
          __webpack_require__.d(__webpack_exports__, "k", function() {
            return MEMO_SYMBOL_STRING;
          });
          __webpack_require__.d(__webpack_exports__, "l", function() {
            return PROFILER_NUMBER;
          });
          __webpack_require__.d(__webpack_exports__, "m", function() {
            return PROFILER_SYMBOL_STRING;
          });
          __webpack_require__.d(__webpack_exports__, "n", function() {
            return PROVIDER_NUMBER;
          });
          __webpack_require__.d(__webpack_exports__, "o", function() {
            return PROVIDER_SYMBOL_STRING;
          });
          __webpack_require__.d(__webpack_exports__, "p", function() {
            return SCOPE_NUMBER;
          });
          __webpack_require__.d(__webpack_exports__, "q", function() {
            return SCOPE_SYMBOL_STRING;
          });
          __webpack_require__.d(__webpack_exports__, "s", function() {
            return STRICT_MODE_NUMBER;
          });
          __webpack_require__.d(__webpack_exports__, "t", function() {
            return STRICT_MODE_SYMBOL_STRING;
          });
          __webpack_require__.d(__webpack_exports__, "w", function() {
            return SUSPENSE_NUMBER;
          });
          __webpack_require__.d(__webpack_exports__, "x", function() {
            return SUSPENSE_SYMBOL_STRING;
          });
          __webpack_require__.d(__webpack_exports__, "u", function() {
            return SUSPENSE_LIST_NUMBER;
          });
          __webpack_require__.d(__webpack_exports__, "v", function() {
            return SUSPENSE_LIST_SYMBOL_STRING;
          });
          var CONCURRENT_MODE_NUMBER = 60111;
          var CONCURRENT_MODE_SYMBOL_STRING = "Symbol(react.concurrent_mode)";
          var CONTEXT_NUMBER = 60110;
          var CONTEXT_SYMBOL_STRING = "Symbol(react.context)";
          var SERVER_CONTEXT_SYMBOL_STRING = "Symbol(react.server_context)";
          var DEPRECATED_ASYNC_MODE_SYMBOL_STRING = "Symbol(react.async_mode)";
          var ELEMENT_NUMBER = 60103;
          var ELEMENT_SYMBOL_STRING = "Symbol(react.element)";
          var DEBUG_TRACING_MODE_NUMBER = 60129;
          var DEBUG_TRACING_MODE_SYMBOL_STRING = "Symbol(react.debug_trace_mode)";
          var FORWARD_REF_NUMBER = 60112;
          var FORWARD_REF_SYMBOL_STRING = "Symbol(react.forward_ref)";
          var FRAGMENT_NUMBER = 60107;
          var FRAGMENT_SYMBOL_STRING = "Symbol(react.fragment)";
          var LAZY_NUMBER = 60116;
          var LAZY_SYMBOL_STRING = "Symbol(react.lazy)";
          var MEMO_NUMBER = 60115;
          var MEMO_SYMBOL_STRING = "Symbol(react.memo)";
          var PORTAL_NUMBER = 60106;
          var PORTAL_SYMBOL_STRING = "Symbol(react.portal)";
          var PROFILER_NUMBER = 60114;
          var PROFILER_SYMBOL_STRING = "Symbol(react.profiler)";
          var PROVIDER_NUMBER = 60109;
          var PROVIDER_SYMBOL_STRING = "Symbol(react.provider)";
          var SCOPE_NUMBER = 60119;
          var SCOPE_SYMBOL_STRING = "Symbol(react.scope)";
          var STRICT_MODE_NUMBER = 60108;
          var STRICT_MODE_SYMBOL_STRING = "Symbol(react.strict_mode)";
          var SUSPENSE_NUMBER = 60113;
          var SUSPENSE_SYMBOL_STRING = "Symbol(react.suspense)";
          var SUSPENSE_LIST_NUMBER = 60120;
          var SUSPENSE_LIST_SYMBOL_STRING = "Symbol(react.suspense_list)";
          var SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED_SYMBOL_STRING = "Symbol(react.server_context.defaultValue)";
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return cleanForBridge;
          });
          __webpack_require__.d(__webpack_exports__, "b", function() {
            return copyToClipboard;
          });
          __webpack_require__.d(__webpack_exports__, "c", function() {
            return copyWithDelete;
          });
          __webpack_require__.d(__webpack_exports__, "d", function() {
            return copyWithRename;
          });
          __webpack_require__.d(__webpack_exports__, "e", function() {
            return copyWithSet;
          });
          __webpack_require__.d(__webpack_exports__, "h", function() {
            return getEffectDurations;
          });
          __webpack_require__.d(__webpack_exports__, "g", function() {
            return formatWithStyles;
          });
          __webpack_require__.d(__webpack_exports__, "f", function() {
            return format;
          });
          __webpack_require__.d(__webpack_exports__, "i", function() {
            return isSynchronousXHRSupported;
          });
          var clipboard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(19);
          var clipboard_js__WEBPACK_IMPORTED_MODULE_0___default = /* @__PURE__ */ __webpack_require__.n(clipboard_js__WEBPACK_IMPORTED_MODULE_0__);
          var _hydration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
          var shared_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);
          function _toConsumableArray(arr) {
            return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
          }
          function _nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function _unsupportedIterableToArray(o2, minLen) {
            if (!o2)
              return;
            if (typeof o2 === "string")
              return _arrayLikeToArray(o2, minLen);
            var n2 = Object.prototype.toString.call(o2).slice(8, -1);
            if (n2 === "Object" && o2.constructor)
              n2 = o2.constructor.name;
            if (n2 === "Map" || n2 === "Set")
              return Array.from(o2);
            if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
              return _arrayLikeToArray(o2, minLen);
          }
          function _iterableToArray(iter) {
            if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
              return Array.from(iter);
          }
          function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr))
              return _arrayLikeToArray(arr);
          }
          function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
              arr2[i3] = arr[i3];
            }
            return arr2;
          }
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys.push.apply(keys, symbols);
            }
            return keys;
          }
          function _objectSpread(target) {
            for (var i3 = 1; i3 < arguments.length; i3++) {
              var source = arguments[i3] != null ? arguments[i3] : {};
              if (i3 % 2) {
                ownKeys(Object(source), true).forEach(function(key2) {
                  _defineProperty(target, key2, source[key2]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                ownKeys(Object(source)).forEach(function(key2) {
                  Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
                });
              }
            }
            return target;
          }
          function _defineProperty(obj, key2, value) {
            if (key2 in obj) {
              Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key2] = value;
            }
            return obj;
          }
          function cleanForBridge(data, isPathAllowed) {
            var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
            if (data !== null) {
              var cleanedPaths = [];
              var unserializablePaths = [];
              var cleanedData = Object(_hydration__WEBPACK_IMPORTED_MODULE_1__["a"])(data, cleanedPaths, unserializablePaths, path, isPathAllowed);
              return {
                data: cleanedData,
                cleaned: cleanedPaths,
                unserializable: unserializablePaths
              };
            } else {
              return null;
            }
          }
          function copyToClipboard(value) {
            var safeToCopy = serializeToString(value);
            var text = safeToCopy === void 0 ? "undefined" : safeToCopy;
            var clipboardCopyText = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.clipboardCopyText;
            if (typeof clipboardCopyText === "function") {
              clipboardCopyText(text).catch(function(err2) {
              });
            } else {
              Object(clipboard_js__WEBPACK_IMPORTED_MODULE_0__["copy"])(text);
            }
          }
          function copyWithDelete(obj, path) {
            var index = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
            var key2 = path[index];
            var updated = Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__["a"])(obj) ? obj.slice() : _objectSpread({}, obj);
            if (index + 1 === path.length) {
              if (Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__["a"])(updated)) {
                updated.splice(key2, 1);
              } else {
                delete updated[key2];
              }
            } else {
              updated[key2] = copyWithDelete(obj[key2], path, index + 1);
            }
            return updated;
          }
          function copyWithRename(obj, oldPath, newPath) {
            var index = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
            var oldKey = oldPath[index];
            var updated = Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__["a"])(obj) ? obj.slice() : _objectSpread({}, obj);
            if (index + 1 === oldPath.length) {
              var newKey = newPath[index];
              updated[newKey] = updated[oldKey];
              if (Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__["a"])(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRename(obj[oldKey], oldPath, newPath, index + 1);
            }
            return updated;
          }
          function copyWithSet(obj, path, value) {
            var index = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
            if (index >= path.length) {
              return value;
            }
            var key2 = path[index];
            var updated = Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__["a"])(obj) ? obj.slice() : _objectSpread({}, obj);
            updated[key2] = copyWithSet(obj[key2], path, value, index + 1);
            return updated;
          }
          function getEffectDurations(root) {
            var effectDuration = null;
            var passiveEffectDuration = null;
            var hostRoot = root.current;
            if (hostRoot != null) {
              var stateNode = hostRoot.stateNode;
              if (stateNode != null) {
                effectDuration = stateNode.effectDuration != null ? stateNode.effectDuration : null;
                passiveEffectDuration = stateNode.passiveEffectDuration != null ? stateNode.passiveEffectDuration : null;
              }
            }
            return {
              effectDuration,
              passiveEffectDuration
            };
          }
          function serializeToString(data) {
            var cache = /* @__PURE__ */ new Set();
            return JSON.stringify(data, function(key2, value) {
              if (_typeof(value) === "object" && value !== null) {
                if (cache.has(value)) {
                  return;
                }
                cache.add(value);
              }
              if (typeof value === "bigint") {
                return value.toString() + "n";
              }
              return value;
            });
          }
          function formatWithStyles(inputArgs, style) {
            if (inputArgs === void 0 || inputArgs === null || inputArgs.length === 0 || typeof inputArgs[0] === "string" && inputArgs[0].match(/([^%]|^)(%c)/g) || style === void 0) {
              return inputArgs;
            }
            var REGEXP = /([^%]|^)((%%)*)(%([oOdisf]))/g;
            if (typeof inputArgs[0] === "string" && inputArgs[0].match(REGEXP)) {
              return ["%c".concat(inputArgs[0]), style].concat(_toConsumableArray(inputArgs.slice(1)));
            } else {
              var firstArg = inputArgs.reduce(function(formatStr, elem, i3) {
                if (i3 > 0) {
                  formatStr += " ";
                }
                switch (_typeof(elem)) {
                  case "string":
                  case "boolean":
                  case "symbol":
                    return formatStr += "%s";
                  case "number":
                    var formatting = Number.isInteger(elem) ? "%i" : "%f";
                    return formatStr += formatting;
                  default:
                    return formatStr += "%o";
                }
              }, "%c");
              return [firstArg, style].concat(_toConsumableArray(inputArgs));
            }
          }
          function format(maybeMessage) {
            for (var _len = arguments.length, inputArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              inputArgs[_key - 1] = arguments[_key];
            }
            var args = inputArgs.slice();
            var formatted = String(maybeMessage);
            if (typeof maybeMessage === "string") {
              if (args.length) {
                var REGEXP = /(%?)(%([jds]))/g;
                formatted = formatted.replace(REGEXP, function(match, escaped, ptn, flag) {
                  var arg2 = args.shift();
                  switch (flag) {
                    case "s":
                      arg2 += "";
                      break;
                    case "d":
                    case "i":
                      arg2 = parseInt(arg2, 10).toString();
                      break;
                    case "f":
                      arg2 = parseFloat(arg2).toString();
                      break;
                  }
                  if (!escaped) {
                    return arg2;
                  }
                  args.unshift(arg2);
                  return match;
                });
              }
            }
            if (args.length) {
              for (var i3 = 0; i3 < args.length; i3++) {
                formatted += " " + String(args[i3]);
              }
            }
            formatted = formatted.replace(/%{2,2}/g, "%");
            return String(formatted);
          }
          function isSynchronousXHRSupported() {
            return !!(window.document && window.document.featurePolicy && window.document.featurePolicy.allowsFeature("sync-xhr"));
          }
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return localStorageGetItem;
          });
          __webpack_require__.d(__webpack_exports__, "b", function() {
            return localStorageSetItem;
          });
          __webpack_require__.d(__webpack_exports__, "c", function() {
            return sessionStorageGetItem;
          });
          __webpack_require__.d(__webpack_exports__, "d", function() {
            return sessionStorageRemoveItem;
          });
          __webpack_require__.d(__webpack_exports__, "e", function() {
            return sessionStorageSetItem;
          });
          function localStorageGetItem(key2) {
            try {
              return localStorage.getItem(key2);
            } catch (error) {
              return null;
            }
          }
          function localStorageRemoveItem(key2) {
            try {
              localStorage.removeItem(key2);
            } catch (error) {
            }
          }
          function localStorageSetItem(key2, value) {
            try {
              return localStorage.setItem(key2, value);
            } catch (error) {
            }
          }
          function sessionStorageGetItem(key2) {
            try {
              return sessionStorage.getItem(key2);
            } catch (error) {
              return null;
            }
          }
          function sessionStorageRemoveItem(key2) {
            try {
              sessionStorage.removeItem(key2);
            } catch (error) {
            }
          }
          function sessionStorageSetItem(key2, value) {
            try {
              return sessionStorage.setItem(key2, value);
            } catch (error) {
            }
          }
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          var isArray = Array.isArray;
          __webpack_exports__["a"] = isArray;
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          if (true) {
            module3.exports = __webpack_require__(26);
          } else {
          }
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          (function(global2) {
            __webpack_require__.d(__webpack_exports__, "c", function() {
              return registerRenderer;
            });
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return patch;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return patchForStrictMode;
            });
            __webpack_require__.d(__webpack_exports__, "d", function() {
              return unpatchForStrictMode;
            });
            var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
            var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
            var _DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(16);
            var react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12);
            function _toConsumableArray(arr) {
              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
            }
            function _nonIterableSpread() {
              throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _iterableToArray(iter) {
              if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
                return Array.from(iter);
            }
            function _arrayWithoutHoles(arr) {
              if (Array.isArray(arr))
                return _arrayLikeToArray(arr);
            }
            function _createForOfIteratorHelper(o2, allowArrayLike) {
              var it;
              if (typeof Symbol === "undefined" || o2[Symbol.iterator] == null) {
                if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
                  if (it)
                    o2 = it;
                  var i3 = 0;
                  var F2 = function F3() {
                  };
                  return { s: F2, n: function n2() {
                    if (i3 >= o2.length)
                      return { done: true };
                    return { done: false, value: o2[i3++] };
                  }, e: function e(_e) {
                    throw _e;
                  }, f: F2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err2;
              return { s: function s2() {
                it = o2[Symbol.iterator]();
              }, n: function n2() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e2) {
                didErr = true;
                err2 = _e2;
              }, f: function f2() {
                try {
                  if (!normalCompletion && it.return != null)
                    it.return();
                } finally {
                  if (didErr)
                    throw err2;
                }
              } };
            }
            function _unsupportedIterableToArray(o2, minLen) {
              if (!o2)
                return;
              if (typeof o2 === "string")
                return _arrayLikeToArray(o2, minLen);
              var n2 = Object.prototype.toString.call(o2).slice(8, -1);
              if (n2 === "Object" && o2.constructor)
                n2 = o2.constructor.name;
              if (n2 === "Map" || n2 === "Set")
                return Array.from(o2);
              if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
                return _arrayLikeToArray(o2, minLen);
            }
            function _arrayLikeToArray(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
                arr2[i3] = arr[i3];
              }
              return arr2;
            }
            var OVERRIDE_CONSOLE_METHODS = ["error", "trace", "warn"];
            var DIMMED_NODE_CONSOLE_COLOR = "\x1B[2m%s\x1B[0m";
            var PREFIX_REGEX = /\s{4}(in|at)\s{1}/;
            var ROW_COLUMN_NUMBER_REGEX = /:\d+:\d+(\n|$)/;
            function isStringComponentStack(text) {
              return PREFIX_REGEX.test(text) || ROW_COLUMN_NUMBER_REGEX.test(text);
            }
            var STYLE_DIRECTIVE_REGEX = /^%c/;
            function isStrictModeOverride(args, method2) {
              return args.length >= 2 && STYLE_DIRECTIVE_REGEX.test(args[0]) && args[1] === "color: ".concat(getConsoleColor(method2) || "");
            }
            function getConsoleColor(method2) {
              switch (method2) {
                case "warn":
                  return consoleSettingsRef.browserTheme === "light" ? "rgba(250, 180, 50, 0.75)" : "rgba(250, 180, 50, 0.5)";
                case "error":
                  return consoleSettingsRef.browserTheme === "light" ? "rgba(250, 123, 130, 0.75)" : "rgba(250, 123, 130, 0.5)";
                case "log":
                default:
                  return consoleSettingsRef.browserTheme === "light" ? "rgba(125, 125, 125, 0.75)" : "rgba(125, 125, 125, 0.5)";
              }
            }
            var injectedRenderers = /* @__PURE__ */ new Map();
            var targetConsole = console;
            var targetConsoleMethods = {};
            for (var method in console) {
              targetConsoleMethods[method] = console[method];
            }
            var unpatchFn = null;
            var isNode = false;
            try {
              isNode = void 0 === global2;
            } catch (error) {
            }
            function dangerous_setTargetConsoleForTesting(targetConsoleForTesting) {
              targetConsole = targetConsoleForTesting;
              targetConsoleMethods = {};
              for (var _method in targetConsole) {
                targetConsoleMethods[_method] = console[_method];
              }
            }
            function registerRenderer(renderer, onErrorOrWarning) {
              var currentDispatcherRef = renderer.currentDispatcherRef, getCurrentFiber = renderer.getCurrentFiber, findFiberByHostInstance = renderer.findFiberByHostInstance, version = renderer.version;
              if (typeof findFiberByHostInstance !== "function") {
                return;
              }
              if (currentDispatcherRef != null && typeof getCurrentFiber === "function") {
                var _getInternalReactCons = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["b"])(version), ReactTypeOfWork = _getInternalReactCons.ReactTypeOfWork;
                injectedRenderers.set(renderer, {
                  currentDispatcherRef,
                  getCurrentFiber,
                  workTagMap: ReactTypeOfWork,
                  onErrorOrWarning
                });
              }
            }
            var consoleSettingsRef = {
              appendComponentStack: false,
              breakOnConsoleErrors: false,
              showInlineWarningsAndErrors: false,
              hideConsoleLogsInStrictMode: false,
              browserTheme: "dark"
            };
            function patch(_ref) {
              var appendComponentStack = _ref.appendComponentStack, breakOnConsoleErrors = _ref.breakOnConsoleErrors, showInlineWarningsAndErrors = _ref.showInlineWarningsAndErrors, hideConsoleLogsInStrictMode = _ref.hideConsoleLogsInStrictMode, browserTheme = _ref.browserTheme;
              consoleSettingsRef.appendComponentStack = appendComponentStack;
              consoleSettingsRef.breakOnConsoleErrors = breakOnConsoleErrors;
              consoleSettingsRef.showInlineWarningsAndErrors = showInlineWarningsAndErrors;
              consoleSettingsRef.hideConsoleLogsInStrictMode = hideConsoleLogsInStrictMode;
              consoleSettingsRef.browserTheme = browserTheme;
              if (appendComponentStack || breakOnConsoleErrors || showInlineWarningsAndErrors) {
                if (unpatchFn !== null) {
                  return;
                }
                var originalConsoleMethods = {};
                unpatchFn = function unpatchFn2() {
                  for (var _method2 in originalConsoleMethods) {
                    try {
                      targetConsole[_method2] = originalConsoleMethods[_method2];
                    } catch (error) {
                    }
                  }
                };
                OVERRIDE_CONSOLE_METHODS.forEach(function(method2) {
                  try {
                    var originalMethod = originalConsoleMethods[method2] = targetConsole[method2].__REACT_DEVTOOLS_ORIGINAL_METHOD__ ? targetConsole[method2].__REACT_DEVTOOLS_ORIGINAL_METHOD__ : targetConsole[method2];
                    var overrideMethod = function overrideMethod2() {
                      var shouldAppendWarningStack = false;
                      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                      if (method2 !== "log") {
                        if (consoleSettingsRef.appendComponentStack) {
                          var lastArg = args.length > 0 ? args[args.length - 1] : null;
                          var alreadyHasComponentStack = typeof lastArg === "string" && isStringComponentStack(lastArg);
                          shouldAppendWarningStack = !alreadyHasComponentStack;
                        }
                      }
                      var shouldShowInlineWarningsAndErrors = consoleSettingsRef.showInlineWarningsAndErrors && (method2 === "error" || method2 === "warn");
                      var _iterator = _createForOfIteratorHelper(injectedRenderers.values()), _step;
                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                          var _step$value = _step.value, currentDispatcherRef = _step$value.currentDispatcherRef, getCurrentFiber = _step$value.getCurrentFiber, onErrorOrWarning = _step$value.onErrorOrWarning, workTagMap = _step$value.workTagMap;
                          var current = getCurrentFiber();
                          if (current != null) {
                            try {
                              if (shouldShowInlineWarningsAndErrors) {
                                if (typeof onErrorOrWarning === "function") {
                                  onErrorOrWarning(
                                    current,
                                    method2,
                                    args.slice()
                                  );
                                }
                              }
                              if (shouldAppendWarningStack) {
                                var componentStack = Object(_DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_2__["b"])(workTagMap, current, currentDispatcherRef);
                                if (componentStack !== "") {
                                  if (isStrictModeOverride(args, method2)) {
                                    args[0] = "".concat(args[0], " %s");
                                    args.push(componentStack);
                                  } else {
                                    args.push(componentStack);
                                  }
                                }
                              }
                            } catch (error) {
                              setTimeout(function() {
                                throw error;
                              }, 0);
                            } finally {
                              break;
                            }
                          }
                        }
                      } catch (err2) {
                        _iterator.e(err2);
                      } finally {
                        _iterator.f();
                      }
                      if (consoleSettingsRef.breakOnConsoleErrors) {
                        debugger;
                      }
                      originalMethod.apply(void 0, args);
                    };
                    overrideMethod.__REACT_DEVTOOLS_ORIGINAL_METHOD__ = originalMethod;
                    originalMethod.__REACT_DEVTOOLS_OVERRIDE_METHOD__ = overrideMethod;
                    targetConsole[method2] = overrideMethod;
                  } catch (error) {
                  }
                });
              } else {
                unpatch();
              }
            }
            function unpatch() {
              if (unpatchFn !== null) {
                unpatchFn();
                unpatchFn = null;
              }
            }
            var unpatchForStrictModeFn = null;
            function patchForStrictMode() {
              if (react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_3__["a"]) {
                var overrideConsoleMethods = ["error", "trace", "warn", "log"];
                if (unpatchForStrictModeFn !== null) {
                  return;
                }
                var originalConsoleMethods = {};
                unpatchForStrictModeFn = function unpatchForStrictModeFn2() {
                  for (var _method3 in originalConsoleMethods) {
                    try {
                      targetConsole[_method3] = originalConsoleMethods[_method3];
                    } catch (error) {
                    }
                  }
                };
                overrideConsoleMethods.forEach(function(method2) {
                  try {
                    var originalMethod = originalConsoleMethods[method2] = targetConsole[method2].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ ? targetConsole[method2].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ : targetConsole[method2];
                    var overrideMethod = function overrideMethod2() {
                      if (!consoleSettingsRef.hideConsoleLogsInStrictMode) {
                        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                          args[_key2] = arguments[_key2];
                        }
                        if (isNode) {
                          originalMethod(DIMMED_NODE_CONSOLE_COLOR, _utils__WEBPACK_IMPORTED_MODULE_0__["f"].apply(void 0, args));
                        } else {
                          var color = getConsoleColor(method2);
                          if (color) {
                            originalMethod.apply(void 0, _toConsumableArray(Object(_utils__WEBPACK_IMPORTED_MODULE_0__["g"])(args, "color: ".concat(color))));
                          } else {
                            throw Error("Console color is not defined");
                          }
                        }
                      }
                    };
                    overrideMethod.__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ = originalMethod;
                    originalMethod.__REACT_DEVTOOLS_STRICT_MODE_OVERRIDE_METHOD__ = overrideMethod;
                    targetConsole[method2] = overrideMethod;
                  } catch (error) {
                  }
                });
              }
            }
            function unpatchForStrictMode() {
              if (react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_3__["a"]) {
                if (unpatchForStrictModeFn !== null) {
                  unpatchForStrictModeFn();
                  unpatchForStrictModeFn = null;
                }
              }
            }
          }).call(this, __webpack_require__(13));
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          __webpack_exports__["a"] = isArray;
        },
        function(module3, exports3, __webpack_require__) {
          (function(process2) {
            function _typeof(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof2(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof = function _typeof2(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof(obj);
            }
            exports3 = module3.exports = SemVer;
            var debug;
            if ((typeof process2 === "undefined" ? "undefined" : _typeof(process2)) === "object" && process2.env && process2.env.NODE_DEBUG && /\bsemver\b/i.test(process2.env.NODE_DEBUG)) {
              debug = function debug2() {
                var args = Array.prototype.slice.call(arguments, 0);
                args.unshift("SEMVER");
                console.log.apply(console, args);
              };
            } else {
              debug = function debug2() {
              };
            }
            exports3.SEMVER_SPEC_VERSION = "2.0.0";
            var MAX_LENGTH = 256;
            var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
            var MAX_SAFE_COMPONENT_LENGTH = 16;
            var re = exports3.re = [];
            var src = exports3.src = [];
            var t2 = exports3.tokens = {};
            var R2 = 0;
            function tok(n2) {
              t2[n2] = R2++;
            }
            tok("NUMERICIDENTIFIER");
            src[t2.NUMERICIDENTIFIER] = "0|[1-9]\\d*";
            tok("NUMERICIDENTIFIERLOOSE");
            src[t2.NUMERICIDENTIFIERLOOSE] = "[0-9]+";
            tok("NONNUMERICIDENTIFIER");
            src[t2.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
            tok("MAINVERSION");
            src[t2.MAINVERSION] = "(" + src[t2.NUMERICIDENTIFIER] + ")\\.(" + src[t2.NUMERICIDENTIFIER] + ")\\.(" + src[t2.NUMERICIDENTIFIER] + ")";
            tok("MAINVERSIONLOOSE");
            src[t2.MAINVERSIONLOOSE] = "(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")";
            tok("PRERELEASEIDENTIFIER");
            src[t2.PRERELEASEIDENTIFIER] = "(?:" + src[t2.NUMERICIDENTIFIER] + "|" + src[t2.NONNUMERICIDENTIFIER] + ")";
            tok("PRERELEASEIDENTIFIERLOOSE");
            src[t2.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t2.NUMERICIDENTIFIERLOOSE] + "|" + src[t2.NONNUMERICIDENTIFIER] + ")";
            tok("PRERELEASE");
            src[t2.PRERELEASE] = "(?:-(" + src[t2.PRERELEASEIDENTIFIER] + "(?:\\." + src[t2.PRERELEASEIDENTIFIER] + ")*))";
            tok("PRERELEASELOOSE");
            src[t2.PRERELEASELOOSE] = "(?:-?(" + src[t2.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t2.PRERELEASEIDENTIFIERLOOSE] + ")*))";
            tok("BUILDIDENTIFIER");
            src[t2.BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
            tok("BUILD");
            src[t2.BUILD] = "(?:\\+(" + src[t2.BUILDIDENTIFIER] + "(?:\\." + src[t2.BUILDIDENTIFIER] + ")*))";
            tok("FULL");
            tok("FULLPLAIN");
            src[t2.FULLPLAIN] = "v?" + src[t2.MAINVERSION] + src[t2.PRERELEASE] + "?" + src[t2.BUILD] + "?";
            src[t2.FULL] = "^" + src[t2.FULLPLAIN] + "$";
            tok("LOOSEPLAIN");
            src[t2.LOOSEPLAIN] = "[v=\\s]*" + src[t2.MAINVERSIONLOOSE] + src[t2.PRERELEASELOOSE] + "?" + src[t2.BUILD] + "?";
            tok("LOOSE");
            src[t2.LOOSE] = "^" + src[t2.LOOSEPLAIN] + "$";
            tok("GTLT");
            src[t2.GTLT] = "((?:<|>)?=?)";
            tok("XRANGEIDENTIFIERLOOSE");
            src[t2.XRANGEIDENTIFIERLOOSE] = src[t2.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
            tok("XRANGEIDENTIFIER");
            src[t2.XRANGEIDENTIFIER] = src[t2.NUMERICIDENTIFIER] + "|x|X|\\*";
            tok("XRANGEPLAIN");
            src[t2.XRANGEPLAIN] = "[v=\\s]*(" + src[t2.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIER] + ")(?:" + src[t2.PRERELEASE] + ")?" + src[t2.BUILD] + "?)?)?";
            tok("XRANGEPLAINLOOSE");
            src[t2.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t2.PRERELEASELOOSE] + ")?" + src[t2.BUILD] + "?)?)?";
            tok("XRANGE");
            src[t2.XRANGE] = "^" + src[t2.GTLT] + "\\s*" + src[t2.XRANGEPLAIN] + "$";
            tok("XRANGELOOSE");
            src[t2.XRANGELOOSE] = "^" + src[t2.GTLT] + "\\s*" + src[t2.XRANGEPLAINLOOSE] + "$";
            tok("COERCE");
            src[t2.COERCE] = "(^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
            tok("COERCERTL");
            re[t2.COERCERTL] = new RegExp(src[t2.COERCE], "g");
            tok("LONETILDE");
            src[t2.LONETILDE] = "(?:~>?)";
            tok("TILDETRIM");
            src[t2.TILDETRIM] = "(\\s*)" + src[t2.LONETILDE] + "\\s+";
            re[t2.TILDETRIM] = new RegExp(src[t2.TILDETRIM], "g");
            var tildeTrimReplace = "$1~";
            tok("TILDE");
            src[t2.TILDE] = "^" + src[t2.LONETILDE] + src[t2.XRANGEPLAIN] + "$";
            tok("TILDELOOSE");
            src[t2.TILDELOOSE] = "^" + src[t2.LONETILDE] + src[t2.XRANGEPLAINLOOSE] + "$";
            tok("LONECARET");
            src[t2.LONECARET] = "(?:\\^)";
            tok("CARETTRIM");
            src[t2.CARETTRIM] = "(\\s*)" + src[t2.LONECARET] + "\\s+";
            re[t2.CARETTRIM] = new RegExp(src[t2.CARETTRIM], "g");
            var caretTrimReplace = "$1^";
            tok("CARET");
            src[t2.CARET] = "^" + src[t2.LONECARET] + src[t2.XRANGEPLAIN] + "$";
            tok("CARETLOOSE");
            src[t2.CARETLOOSE] = "^" + src[t2.LONECARET] + src[t2.XRANGEPLAINLOOSE] + "$";
            tok("COMPARATORLOOSE");
            src[t2.COMPARATORLOOSE] = "^" + src[t2.GTLT] + "\\s*(" + src[t2.LOOSEPLAIN] + ")$|^$";
            tok("COMPARATOR");
            src[t2.COMPARATOR] = "^" + src[t2.GTLT] + "\\s*(" + src[t2.FULLPLAIN] + ")$|^$";
            tok("COMPARATORTRIM");
            src[t2.COMPARATORTRIM] = "(\\s*)" + src[t2.GTLT] + "\\s*(" + src[t2.LOOSEPLAIN] + "|" + src[t2.XRANGEPLAIN] + ")";
            re[t2.COMPARATORTRIM] = new RegExp(src[t2.COMPARATORTRIM], "g");
            var comparatorTrimReplace = "$1$2$3";
            tok("HYPHENRANGE");
            src[t2.HYPHENRANGE] = "^\\s*(" + src[t2.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t2.XRANGEPLAIN] + ")\\s*$";
            tok("HYPHENRANGELOOSE");
            src[t2.HYPHENRANGELOOSE] = "^\\s*(" + src[t2.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t2.XRANGEPLAINLOOSE] + ")\\s*$";
            tok("STAR");
            src[t2.STAR] = "(<|>)?=?\\s*\\*";
            for (var i3 = 0; i3 < R2; i3++) {
              debug(i3, src[i3]);
              if (!re[i3]) {
                re[i3] = new RegExp(src[i3]);
              }
            }
            exports3.parse = parse;
            function parse(version, options) {
              if (!options || _typeof(options) !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false
                };
              }
              if (version instanceof SemVer) {
                return version;
              }
              if (typeof version !== "string") {
                return null;
              }
              if (version.length > MAX_LENGTH) {
                return null;
              }
              var r2 = options.loose ? re[t2.LOOSE] : re[t2.FULL];
              if (!r2.test(version)) {
                return null;
              }
              try {
                return new SemVer(version, options);
              } catch (er) {
                return null;
              }
            }
            exports3.valid = valid;
            function valid(version, options) {
              var v2 = parse(version, options);
              return v2 ? v2.version : null;
            }
            exports3.clean = clean;
            function clean(version, options) {
              var s2 = parse(version.trim().replace(/^[=v]+/, ""), options);
              return s2 ? s2.version : null;
            }
            exports3.SemVer = SemVer;
            function SemVer(version, options) {
              if (!options || _typeof(options) !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false
                };
              }
              if (version instanceof SemVer) {
                if (version.loose === options.loose) {
                  return version;
                } else {
                  version = version.version;
                }
              } else if (typeof version !== "string") {
                throw new TypeError("Invalid Version: " + version);
              }
              if (version.length > MAX_LENGTH) {
                throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
              }
              if (!(this instanceof SemVer)) {
                return new SemVer(version, options);
              }
              debug("SemVer", version, options);
              this.options = options;
              this.loose = !!options.loose;
              var m2 = version.trim().match(options.loose ? re[t2.LOOSE] : re[t2.FULL]);
              if (!m2) {
                throw new TypeError("Invalid Version: " + version);
              }
              this.raw = version;
              this.major = +m2[1];
              this.minor = +m2[2];
              this.patch = +m2[3];
              if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
                throw new TypeError("Invalid major version");
              }
              if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
                throw new TypeError("Invalid minor version");
              }
              if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
                throw new TypeError("Invalid patch version");
              }
              if (!m2[4]) {
                this.prerelease = [];
              } else {
                this.prerelease = m2[4].split(".").map(function(id) {
                  if (/^[0-9]+$/.test(id)) {
                    var num2 = +id;
                    if (num2 >= 0 && num2 < MAX_SAFE_INTEGER) {
                      return num2;
                    }
                  }
                  return id;
                });
              }
              this.build = m2[5] ? m2[5].split(".") : [];
              this.format();
            }
            SemVer.prototype.format = function() {
              this.version = this.major + "." + this.minor + "." + this.patch;
              if (this.prerelease.length) {
                this.version += "-" + this.prerelease.join(".");
              }
              return this.version;
            };
            SemVer.prototype.toString = function() {
              return this.version;
            };
            SemVer.prototype.compare = function(other) {
              debug("SemVer.compare", this.version, this.options, other);
              if (!(other instanceof SemVer)) {
                other = new SemVer(other, this.options);
              }
              return this.compareMain(other) || this.comparePre(other);
            };
            SemVer.prototype.compareMain = function(other) {
              if (!(other instanceof SemVer)) {
                other = new SemVer(other, this.options);
              }
              return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
            };
            SemVer.prototype.comparePre = function(other) {
              if (!(other instanceof SemVer)) {
                other = new SemVer(other, this.options);
              }
              if (this.prerelease.length && !other.prerelease.length) {
                return -1;
              } else if (!this.prerelease.length && other.prerelease.length) {
                return 1;
              } else if (!this.prerelease.length && !other.prerelease.length) {
                return 0;
              }
              var i4 = 0;
              do {
                var a2 = this.prerelease[i4];
                var b2 = other.prerelease[i4];
                debug("prerelease compare", i4, a2, b2);
                if (a2 === void 0 && b2 === void 0) {
                  return 0;
                } else if (b2 === void 0) {
                  return 1;
                } else if (a2 === void 0) {
                  return -1;
                } else if (a2 === b2) {
                  continue;
                } else {
                  return compareIdentifiers(a2, b2);
                }
              } while (++i4);
            };
            SemVer.prototype.compareBuild = function(other) {
              if (!(other instanceof SemVer)) {
                other = new SemVer(other, this.options);
              }
              var i4 = 0;
              do {
                var a2 = this.build[i4];
                var b2 = other.build[i4];
                debug("prerelease compare", i4, a2, b2);
                if (a2 === void 0 && b2 === void 0) {
                  return 0;
                } else if (b2 === void 0) {
                  return 1;
                } else if (a2 === void 0) {
                  return -1;
                } else if (a2 === b2) {
                  continue;
                } else {
                  return compareIdentifiers(a2, b2);
                }
              } while (++i4);
            };
            SemVer.prototype.inc = function(release, identifier) {
              switch (release) {
                case "premajor":
                  this.prerelease.length = 0;
                  this.patch = 0;
                  this.minor = 0;
                  this.major++;
                  this.inc("pre", identifier);
                  break;
                case "preminor":
                  this.prerelease.length = 0;
                  this.patch = 0;
                  this.minor++;
                  this.inc("pre", identifier);
                  break;
                case "prepatch":
                  this.prerelease.length = 0;
                  this.inc("patch", identifier);
                  this.inc("pre", identifier);
                  break;
                case "prerelease":
                  if (this.prerelease.length === 0) {
                    this.inc("patch", identifier);
                  }
                  this.inc("pre", identifier);
                  break;
                case "major":
                  if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                    this.major++;
                  }
                  this.minor = 0;
                  this.patch = 0;
                  this.prerelease = [];
                  break;
                case "minor":
                  if (this.patch !== 0 || this.prerelease.length === 0) {
                    this.minor++;
                  }
                  this.patch = 0;
                  this.prerelease = [];
                  break;
                case "patch":
                  if (this.prerelease.length === 0) {
                    this.patch++;
                  }
                  this.prerelease = [];
                  break;
                case "pre":
                  if (this.prerelease.length === 0) {
                    this.prerelease = [0];
                  } else {
                    var i4 = this.prerelease.length;
                    while (--i4 >= 0) {
                      if (typeof this.prerelease[i4] === "number") {
                        this.prerelease[i4]++;
                        i4 = -2;
                      }
                    }
                    if (i4 === -1) {
                      this.prerelease.push(0);
                    }
                  }
                  if (identifier) {
                    if (this.prerelease[0] === identifier) {
                      if (isNaN(this.prerelease[1])) {
                        this.prerelease = [identifier, 0];
                      }
                    } else {
                      this.prerelease = [identifier, 0];
                    }
                  }
                  break;
                default:
                  throw new Error("invalid increment argument: " + release);
              }
              this.format();
              this.raw = this.version;
              return this;
            };
            exports3.inc = inc;
            function inc(version, release, loose, identifier) {
              if (typeof loose === "string") {
                identifier = loose;
                loose = void 0;
              }
              try {
                return new SemVer(version, loose).inc(release, identifier).version;
              } catch (er) {
                return null;
              }
            }
            exports3.diff = diff;
            function diff(version1, version2) {
              if (eq(version1, version2)) {
                return null;
              } else {
                var v1 = parse(version1);
                var v2 = parse(version2);
                var prefix2 = "";
                if (v1.prerelease.length || v2.prerelease.length) {
                  prefix2 = "pre";
                  var defaultResult = "prerelease";
                }
                for (var key2 in v1) {
                  if (key2 === "major" || key2 === "minor" || key2 === "patch") {
                    if (v1[key2] !== v2[key2]) {
                      return prefix2 + key2;
                    }
                  }
                }
                return defaultResult;
              }
            }
            exports3.compareIdentifiers = compareIdentifiers;
            var numeric = /^[0-9]+$/;
            function compareIdentifiers(a2, b2) {
              var anum = numeric.test(a2);
              var bnum = numeric.test(b2);
              if (anum && bnum) {
                a2 = +a2;
                b2 = +b2;
              }
              return a2 === b2 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a2 < b2 ? -1 : 1;
            }
            exports3.rcompareIdentifiers = rcompareIdentifiers;
            function rcompareIdentifiers(a2, b2) {
              return compareIdentifiers(b2, a2);
            }
            exports3.major = major;
            function major(a2, loose) {
              return new SemVer(a2, loose).major;
            }
            exports3.minor = minor;
            function minor(a2, loose) {
              return new SemVer(a2, loose).minor;
            }
            exports3.patch = patch;
            function patch(a2, loose) {
              return new SemVer(a2, loose).patch;
            }
            exports3.compare = compare;
            function compare(a2, b2, loose) {
              return new SemVer(a2, loose).compare(new SemVer(b2, loose));
            }
            exports3.compareLoose = compareLoose;
            function compareLoose(a2, b2) {
              return compare(a2, b2, true);
            }
            exports3.compareBuild = compareBuild;
            function compareBuild(a2, b2, loose) {
              var versionA = new SemVer(a2, loose);
              var versionB = new SemVer(b2, loose);
              return versionA.compare(versionB) || versionA.compareBuild(versionB);
            }
            exports3.rcompare = rcompare;
            function rcompare(a2, b2, loose) {
              return compare(b2, a2, loose);
            }
            exports3.sort = sort;
            function sort(list, loose) {
              return list.sort(function(a2, b2) {
                return exports3.compareBuild(a2, b2, loose);
              });
            }
            exports3.rsort = rsort;
            function rsort(list, loose) {
              return list.sort(function(a2, b2) {
                return exports3.compareBuild(b2, a2, loose);
              });
            }
            exports3.gt = gt;
            function gt(a2, b2, loose) {
              return compare(a2, b2, loose) > 0;
            }
            exports3.lt = lt;
            function lt(a2, b2, loose) {
              return compare(a2, b2, loose) < 0;
            }
            exports3.eq = eq;
            function eq(a2, b2, loose) {
              return compare(a2, b2, loose) === 0;
            }
            exports3.neq = neq;
            function neq(a2, b2, loose) {
              return compare(a2, b2, loose) !== 0;
            }
            exports3.gte = gte;
            function gte(a2, b2, loose) {
              return compare(a2, b2, loose) >= 0;
            }
            exports3.lte = lte;
            function lte(a2, b2, loose) {
              return compare(a2, b2, loose) <= 0;
            }
            exports3.cmp = cmp;
            function cmp(a2, op, b2, loose) {
              switch (op) {
                case "===":
                  if (_typeof(a2) === "object")
                    a2 = a2.version;
                  if (_typeof(b2) === "object")
                    b2 = b2.version;
                  return a2 === b2;
                case "!==":
                  if (_typeof(a2) === "object")
                    a2 = a2.version;
                  if (_typeof(b2) === "object")
                    b2 = b2.version;
                  return a2 !== b2;
                case "":
                case "=":
                case "==":
                  return eq(a2, b2, loose);
                case "!=":
                  return neq(a2, b2, loose);
                case ">":
                  return gt(a2, b2, loose);
                case ">=":
                  return gte(a2, b2, loose);
                case "<":
                  return lt(a2, b2, loose);
                case "<=":
                  return lte(a2, b2, loose);
                default:
                  throw new TypeError("Invalid operator: " + op);
              }
            }
            exports3.Comparator = Comparator;
            function Comparator(comp, options) {
              if (!options || _typeof(options) !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false
                };
              }
              if (comp instanceof Comparator) {
                if (comp.loose === !!options.loose) {
                  return comp;
                } else {
                  comp = comp.value;
                }
              }
              if (!(this instanceof Comparator)) {
                return new Comparator(comp, options);
              }
              debug("comparator", comp, options);
              this.options = options;
              this.loose = !!options.loose;
              this.parse(comp);
              if (this.semver === ANY) {
                this.value = "";
              } else {
                this.value = this.operator + this.semver.version;
              }
              debug("comp", this);
            }
            var ANY = {};
            Comparator.prototype.parse = function(comp) {
              var r2 = this.options.loose ? re[t2.COMPARATORLOOSE] : re[t2.COMPARATOR];
              var m2 = comp.match(r2);
              if (!m2) {
                throw new TypeError("Invalid comparator: " + comp);
              }
              this.operator = m2[1] !== void 0 ? m2[1] : "";
              if (this.operator === "=") {
                this.operator = "";
              }
              if (!m2[2]) {
                this.semver = ANY;
              } else {
                this.semver = new SemVer(m2[2], this.options.loose);
              }
            };
            Comparator.prototype.toString = function() {
              return this.value;
            };
            Comparator.prototype.test = function(version) {
              debug("Comparator.test", version, this.options.loose);
              if (this.semver === ANY || version === ANY) {
                return true;
              }
              if (typeof version === "string") {
                try {
                  version = new SemVer(version, this.options);
                } catch (er) {
                  return false;
                }
              }
              return cmp(version, this.operator, this.semver, this.options);
            };
            Comparator.prototype.intersects = function(comp, options) {
              if (!(comp instanceof Comparator)) {
                throw new TypeError("a Comparator is required");
              }
              if (!options || _typeof(options) !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false
                };
              }
              var rangeTmp;
              if (this.operator === "") {
                if (this.value === "") {
                  return true;
                }
                rangeTmp = new Range(comp.value, options);
                return satisfies(this.value, rangeTmp, options);
              } else if (comp.operator === "") {
                if (comp.value === "") {
                  return true;
                }
                rangeTmp = new Range(this.value, options);
                return satisfies(comp.semver, rangeTmp, options);
              }
              var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
              var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
              var sameSemVer = this.semver.version === comp.semver.version;
              var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
              var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<");
              var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
              return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
            };
            exports3.Range = Range;
            function Range(range, options) {
              if (!options || _typeof(options) !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false
                };
              }
              if (range instanceof Range) {
                if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
                  return range;
                } else {
                  return new Range(range.raw, options);
                }
              }
              if (range instanceof Comparator) {
                return new Range(range.value, options);
              }
              if (!(this instanceof Range)) {
                return new Range(range, options);
              }
              this.options = options;
              this.loose = !!options.loose;
              this.includePrerelease = !!options.includePrerelease;
              this.raw = range;
              this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
                return this.parseRange(range2.trim());
              }, this).filter(function(c2) {
                return c2.length;
              });
              if (!this.set.length) {
                throw new TypeError("Invalid SemVer Range: " + range);
              }
              this.format();
            }
            Range.prototype.format = function() {
              this.range = this.set.map(function(comps) {
                return comps.join(" ").trim();
              }).join("||").trim();
              return this.range;
            };
            Range.prototype.toString = function() {
              return this.range;
            };
            Range.prototype.parseRange = function(range) {
              var loose = this.options.loose;
              range = range.trim();
              var hr = loose ? re[t2.HYPHENRANGELOOSE] : re[t2.HYPHENRANGE];
              range = range.replace(hr, hyphenReplace);
              debug("hyphen replace", range);
              range = range.replace(re[t2.COMPARATORTRIM], comparatorTrimReplace);
              debug("comparator trim", range, re[t2.COMPARATORTRIM]);
              range = range.replace(re[t2.TILDETRIM], tildeTrimReplace);
              range = range.replace(re[t2.CARETTRIM], caretTrimReplace);
              range = range.split(/\s+/).join(" ");
              var compRe = loose ? re[t2.COMPARATORLOOSE] : re[t2.COMPARATOR];
              var set = range.split(" ").map(function(comp) {
                return parseComparator(comp, this.options);
              }, this).join(" ").split(/\s+/);
              if (this.options.loose) {
                set = set.filter(function(comp) {
                  return !!comp.match(compRe);
                });
              }
              set = set.map(function(comp) {
                return new Comparator(comp, this.options);
              }, this);
              return set;
            };
            Range.prototype.intersects = function(range, options) {
              if (!(range instanceof Range)) {
                throw new TypeError("a Range is required");
              }
              return this.set.some(function(thisComparators) {
                return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
                  return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
                    return rangeComparators.every(function(rangeComparator) {
                      return thisComparator.intersects(rangeComparator, options);
                    });
                  });
                });
              });
            };
            function isSatisfiable(comparators, options) {
              var result = true;
              var remainingComparators = comparators.slice();
              var testComparator = remainingComparators.pop();
              while (result && remainingComparators.length) {
                result = remainingComparators.every(function(otherComparator) {
                  return testComparator.intersects(otherComparator, options);
                });
                testComparator = remainingComparators.pop();
              }
              return result;
            }
            exports3.toComparators = toComparators;
            function toComparators(range, options) {
              return new Range(range, options).set.map(function(comp) {
                return comp.map(function(c2) {
                  return c2.value;
                }).join(" ").trim().split(" ");
              });
            }
            function parseComparator(comp, options) {
              debug("comp", comp, options);
              comp = replaceCarets(comp, options);
              debug("caret", comp);
              comp = replaceTildes(comp, options);
              debug("tildes", comp);
              comp = replaceXRanges(comp, options);
              debug("xrange", comp);
              comp = replaceStars(comp, options);
              debug("stars", comp);
              return comp;
            }
            function isX(id) {
              return !id || id.toLowerCase() === "x" || id === "*";
            }
            function replaceTildes(comp, options) {
              return comp.trim().split(/\s+/).map(function(comp2) {
                return replaceTilde(comp2, options);
              }).join(" ");
            }
            function replaceTilde(comp, options) {
              var r2 = options.loose ? re[t2.TILDELOOSE] : re[t2.TILDE];
              return comp.replace(r2, function(_2, M2, m2, p2, pr) {
                debug("tilde", comp, _2, M2, m2, p2, pr);
                var ret;
                if (isX(M2)) {
                  ret = "";
                } else if (isX(m2)) {
                  ret = ">=" + M2 + ".0.0 <" + (+M2 + 1) + ".0.0";
                } else if (isX(p2)) {
                  ret = ">=" + M2 + "." + m2 + ".0 <" + M2 + "." + (+m2 + 1) + ".0";
                } else if (pr) {
                  debug("replaceTilde pr", pr);
                  ret = ">=" + M2 + "." + m2 + "." + p2 + "-" + pr + " <" + M2 + "." + (+m2 + 1) + ".0";
                } else {
                  ret = ">=" + M2 + "." + m2 + "." + p2 + " <" + M2 + "." + (+m2 + 1) + ".0";
                }
                debug("tilde return", ret);
                return ret;
              });
            }
            function replaceCarets(comp, options) {
              return comp.trim().split(/\s+/).map(function(comp2) {
                return replaceCaret(comp2, options);
              }).join(" ");
            }
            function replaceCaret(comp, options) {
              debug("caret", comp, options);
              var r2 = options.loose ? re[t2.CARETLOOSE] : re[t2.CARET];
              return comp.replace(r2, function(_2, M2, m2, p2, pr) {
                debug("caret", comp, _2, M2, m2, p2, pr);
                var ret;
                if (isX(M2)) {
                  ret = "";
                } else if (isX(m2)) {
                  ret = ">=" + M2 + ".0.0 <" + (+M2 + 1) + ".0.0";
                } else if (isX(p2)) {
                  if (M2 === "0") {
                    ret = ">=" + M2 + "." + m2 + ".0 <" + M2 + "." + (+m2 + 1) + ".0";
                  } else {
                    ret = ">=" + M2 + "." + m2 + ".0 <" + (+M2 + 1) + ".0.0";
                  }
                } else if (pr) {
                  debug("replaceCaret pr", pr);
                  if (M2 === "0") {
                    if (m2 === "0") {
                      ret = ">=" + M2 + "." + m2 + "." + p2 + "-" + pr + " <" + M2 + "." + m2 + "." + (+p2 + 1);
                    } else {
                      ret = ">=" + M2 + "." + m2 + "." + p2 + "-" + pr + " <" + M2 + "." + (+m2 + 1) + ".0";
                    }
                  } else {
                    ret = ">=" + M2 + "." + m2 + "." + p2 + "-" + pr + " <" + (+M2 + 1) + ".0.0";
                  }
                } else {
                  debug("no pr");
                  if (M2 === "0") {
                    if (m2 === "0") {
                      ret = ">=" + M2 + "." + m2 + "." + p2 + " <" + M2 + "." + m2 + "." + (+p2 + 1);
                    } else {
                      ret = ">=" + M2 + "." + m2 + "." + p2 + " <" + M2 + "." + (+m2 + 1) + ".0";
                    }
                  } else {
                    ret = ">=" + M2 + "." + m2 + "." + p2 + " <" + (+M2 + 1) + ".0.0";
                  }
                }
                debug("caret return", ret);
                return ret;
              });
            }
            function replaceXRanges(comp, options) {
              debug("replaceXRanges", comp, options);
              return comp.split(/\s+/).map(function(comp2) {
                return replaceXRange(comp2, options);
              }).join(" ");
            }
            function replaceXRange(comp, options) {
              comp = comp.trim();
              var r2 = options.loose ? re[t2.XRANGELOOSE] : re[t2.XRANGE];
              return comp.replace(r2, function(ret, gtlt, M2, m2, p2, pr) {
                debug("xRange", comp, ret, gtlt, M2, m2, p2, pr);
                var xM = isX(M2);
                var xm = xM || isX(m2);
                var xp = xm || isX(p2);
                var anyX = xp;
                if (gtlt === "=" && anyX) {
                  gtlt = "";
                }
                pr = options.includePrerelease ? "-0" : "";
                if (xM) {
                  if (gtlt === ">" || gtlt === "<") {
                    ret = "<0.0.0-0";
                  } else {
                    ret = "*";
                  }
                } else if (gtlt && anyX) {
                  if (xm) {
                    m2 = 0;
                  }
                  p2 = 0;
                  if (gtlt === ">") {
                    gtlt = ">=";
                    if (xm) {
                      M2 = +M2 + 1;
                      m2 = 0;
                      p2 = 0;
                    } else {
                      m2 = +m2 + 1;
                      p2 = 0;
                    }
                  } else if (gtlt === "<=") {
                    gtlt = "<";
                    if (xm) {
                      M2 = +M2 + 1;
                    } else {
                      m2 = +m2 + 1;
                    }
                  }
                  ret = gtlt + M2 + "." + m2 + "." + p2 + pr;
                } else if (xm) {
                  ret = ">=" + M2 + ".0.0" + pr + " <" + (+M2 + 1) + ".0.0" + pr;
                } else if (xp) {
                  ret = ">=" + M2 + "." + m2 + ".0" + pr + " <" + M2 + "." + (+m2 + 1) + ".0" + pr;
                }
                debug("xRange return", ret);
                return ret;
              });
            }
            function replaceStars(comp, options) {
              debug("replaceStars", comp, options);
              return comp.trim().replace(re[t2.STAR], "");
            }
            function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
              if (isX(fM)) {
                from = "";
              } else if (isX(fm)) {
                from = ">=" + fM + ".0.0";
              } else if (isX(fp)) {
                from = ">=" + fM + "." + fm + ".0";
              } else {
                from = ">=" + from;
              }
              if (isX(tM)) {
                to = "";
              } else if (isX(tm)) {
                to = "<" + (+tM + 1) + ".0.0";
              } else if (isX(tp)) {
                to = "<" + tM + "." + (+tm + 1) + ".0";
              } else if (tpr) {
                to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
              } else {
                to = "<=" + to;
              }
              return (from + " " + to).trim();
            }
            Range.prototype.test = function(version) {
              if (!version) {
                return false;
              }
              if (typeof version === "string") {
                try {
                  version = new SemVer(version, this.options);
                } catch (er) {
                  return false;
                }
              }
              for (var i4 = 0; i4 < this.set.length; i4++) {
                if (testSet(this.set[i4], version, this.options)) {
                  return true;
                }
              }
              return false;
            };
            function testSet(set, version, options) {
              for (var i4 = 0; i4 < set.length; i4++) {
                if (!set[i4].test(version)) {
                  return false;
                }
              }
              if (version.prerelease.length && !options.includePrerelease) {
                for (i4 = 0; i4 < set.length; i4++) {
                  debug(set[i4].semver);
                  if (set[i4].semver === ANY) {
                    continue;
                  }
                  if (set[i4].semver.prerelease.length > 0) {
                    var allowed = set[i4].semver;
                    if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
                      return true;
                    }
                  }
                }
                return false;
              }
              return true;
            }
            exports3.satisfies = satisfies;
            function satisfies(version, range, options) {
              try {
                range = new Range(range, options);
              } catch (er) {
                return false;
              }
              return range.test(version);
            }
            exports3.maxSatisfying = maxSatisfying;
            function maxSatisfying(versions, range, options) {
              var max = null;
              var maxSV = null;
              try {
                var rangeObj = new Range(range, options);
              } catch (er) {
                return null;
              }
              versions.forEach(function(v2) {
                if (rangeObj.test(v2)) {
                  if (!max || maxSV.compare(v2) === -1) {
                    max = v2;
                    maxSV = new SemVer(max, options);
                  }
                }
              });
              return max;
            }
            exports3.minSatisfying = minSatisfying;
            function minSatisfying(versions, range, options) {
              var min = null;
              var minSV = null;
              try {
                var rangeObj = new Range(range, options);
              } catch (er) {
                return null;
              }
              versions.forEach(function(v2) {
                if (rangeObj.test(v2)) {
                  if (!min || minSV.compare(v2) === 1) {
                    min = v2;
                    minSV = new SemVer(min, options);
                  }
                }
              });
              return min;
            }
            exports3.minVersion = minVersion;
            function minVersion(range, loose) {
              range = new Range(range, loose);
              var minver = new SemVer("0.0.0");
              if (range.test(minver)) {
                return minver;
              }
              minver = new SemVer("0.0.0-0");
              if (range.test(minver)) {
                return minver;
              }
              minver = null;
              for (var i4 = 0; i4 < range.set.length; ++i4) {
                var comparators = range.set[i4];
                comparators.forEach(function(comparator) {
                  var compver = new SemVer(comparator.semver.version);
                  switch (comparator.operator) {
                    case ">":
                      if (compver.prerelease.length === 0) {
                        compver.patch++;
                      } else {
                        compver.prerelease.push(0);
                      }
                      compver.raw = compver.format();
                    case "":
                    case ">=":
                      if (!minver || gt(minver, compver)) {
                        minver = compver;
                      }
                      break;
                    case "<":
                    case "<=":
                      break;
                    default:
                      throw new Error("Unexpected operation: " + comparator.operator);
                  }
                });
              }
              if (minver && range.test(minver)) {
                return minver;
              }
              return null;
            }
            exports3.validRange = validRange;
            function validRange(range, options) {
              try {
                return new Range(range, options).range || "*";
              } catch (er) {
                return null;
              }
            }
            exports3.ltr = ltr;
            function ltr(version, range, options) {
              return outside(version, range, "<", options);
            }
            exports3.gtr = gtr;
            function gtr(version, range, options) {
              return outside(version, range, ">", options);
            }
            exports3.outside = outside;
            function outside(version, range, hilo, options) {
              version = new SemVer(version, options);
              range = new Range(range, options);
              var gtfn, ltefn, ltfn, comp, ecomp;
              switch (hilo) {
                case ">":
                  gtfn = gt;
                  ltefn = lte;
                  ltfn = lt;
                  comp = ">";
                  ecomp = ">=";
                  break;
                case "<":
                  gtfn = lt;
                  ltefn = gte;
                  ltfn = gt;
                  comp = "<";
                  ecomp = "<=";
                  break;
                default:
                  throw new TypeError('Must provide a hilo val of "<" or ">"');
              }
              if (satisfies(version, range, options)) {
                return false;
              }
              for (var i4 = 0; i4 < range.set.length; ++i4) {
                var comparators = range.set[i4];
                var high = null;
                var low = null;
                comparators.forEach(function(comparator) {
                  if (comparator.semver === ANY) {
                    comparator = new Comparator(">=0.0.0");
                  }
                  high = high || comparator;
                  low = low || comparator;
                  if (gtfn(comparator.semver, high.semver, options)) {
                    high = comparator;
                  } else if (ltfn(comparator.semver, low.semver, options)) {
                    low = comparator;
                  }
                });
                if (high.operator === comp || high.operator === ecomp) {
                  return false;
                }
                if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
                  return false;
                } else if (low.operator === ecomp && ltfn(version, low.semver)) {
                  return false;
                }
              }
              return true;
            }
            exports3.prerelease = prerelease;
            function prerelease(version, options) {
              var parsed = parse(version, options);
              return parsed && parsed.prerelease.length ? parsed.prerelease : null;
            }
            exports3.intersects = intersects;
            function intersects(r1, r2, options) {
              r1 = new Range(r1, options);
              r2 = new Range(r2, options);
              return r1.intersects(r2);
            }
            exports3.coerce = coerce;
            function coerce(version, options) {
              if (version instanceof SemVer) {
                return version;
              }
              if (typeof version === "number") {
                version = String(version);
              }
              if (typeof version !== "string") {
                return null;
              }
              options = options || {};
              var match = null;
              if (!options.rtl) {
                match = version.match(re[t2.COERCE]);
              } else {
                var next;
                while ((next = re[t2.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
                  if (!match || next.index + next[0].length !== match.index + match[0].length) {
                    match = next;
                  }
                  re[t2.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
                }
                re[t2.COERCERTL].lastIndex = -1;
              }
              if (match === null) {
                return null;
              }
              return parse(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
            }
          }).call(this, __webpack_require__(17));
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.d(__webpack_exports__, "b", function() {
            return meta;
          });
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return dehydrate;
          });
          var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
          function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys.push.apply(keys, symbols);
            }
            return keys;
          }
          function _objectSpread(target) {
            for (var i3 = 1; i3 < arguments.length; i3++) {
              var source = arguments[i3] != null ? arguments[i3] : {};
              if (i3 % 2) {
                ownKeys(Object(source), true).forEach(function(key2) {
                  _defineProperty(target, key2, source[key2]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                ownKeys(Object(source)).forEach(function(key2) {
                  Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
                });
              }
            }
            return target;
          }
          function _defineProperty(obj, key2, value) {
            if (key2 in obj) {
              Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key2] = value;
            }
            return obj;
          }
          var meta = {
            inspectable: Symbol("inspectable"),
            inspected: Symbol("inspected"),
            name: Symbol("name"),
            preview_long: Symbol("preview_long"),
            preview_short: Symbol("preview_short"),
            readonly: Symbol("readonly"),
            size: Symbol("size"),
            type: Symbol("type"),
            unserializable: Symbol("unserializable")
          };
          var LEVEL_THRESHOLD = 2;
          function createDehydrated(type2, inspectable, data, cleaned, path) {
            cleaned.push(path);
            var dehydrated = {
              inspectable,
              type: type2,
              preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
              preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
              name: !data.constructor || data.constructor.name === "Object" ? "" : data.constructor.name
            };
            if (type2 === "array" || type2 === "typed_array") {
              dehydrated.size = data.length;
            } else if (type2 === "object") {
              dehydrated.size = Object.keys(data).length;
            }
            if (type2 === "iterator" || type2 === "typed_array") {
              dehydrated.readonly = true;
            }
            return dehydrated;
          }
          function dehydrate(data, cleaned, unserializable, path, isPathAllowed) {
            var level = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0;
            var type2 = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["d"])(data);
            var isPathAllowedCheck;
            switch (type2) {
              case "html_element":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
                  preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
                  name: data.tagName,
                  type: type2
                };
              case "function":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
                  preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
                  name: typeof data.name === "function" || !data.name ? "function" : data.name,
                  type: type2
                };
              case "string":
                isPathAllowedCheck = isPathAllowed(path);
                if (isPathAllowedCheck) {
                  return data;
                } else {
                  return data.length <= 500 ? data : data.slice(0, 500) + "...";
                }
              case "bigint":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
                  preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
                  name: data.toString(),
                  type: type2
                };
              case "symbol":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
                  preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
                  name: data.toString(),
                  type: type2
                };
              case "react_element":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
                  preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
                  name: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["g"])(data) || "Unknown",
                  type: type2
                };
              case "array_buffer":
              case "data_view":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
                  preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
                  name: type2 === "data_view" ? "DataView" : "ArrayBuffer",
                  size: data.byteLength,
                  type: type2
                };
              case "array":
                isPathAllowedCheck = isPathAllowed(path);
                if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
                  return createDehydrated(type2, true, data, cleaned, path);
                }
                return data.map(function(item, i3) {
                  return dehydrate(item, cleaned, unserializable, path.concat([i3]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
                });
              case "html_all_collection":
              case "typed_array":
              case "iterator":
                isPathAllowedCheck = isPathAllowed(path);
                if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
                  return createDehydrated(type2, true, data, cleaned, path);
                } else {
                  var unserializableValue = {
                    unserializable: true,
                    type: type2,
                    readonly: true,
                    size: type2 === "typed_array" ? data.length : void 0,
                    preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
                    preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
                    name: !data.constructor || data.constructor.name === "Object" ? "" : data.constructor.name
                  };
                  Array.from(data).forEach(function(item, i3) {
                    return unserializableValue[i3] = dehydrate(item, cleaned, unserializable, path.concat([i3]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
                  });
                  unserializable.push(path);
                  return unserializableValue;
                }
              case "opaque_iterator":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
                  preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
                  name: data[Symbol.toStringTag],
                  type: type2
                };
              case "date":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
                  preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
                  name: data.toString(),
                  type: type2
                };
              case "regexp":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, false),
                  preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__["b"])(data, true),
                  name: data.toString(),
                  type: type2
                };
              case "object":
                isPathAllowedCheck = isPathAllowed(path);
                if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
                  return createDehydrated(type2, true, data, cleaned, path);
                } else {
                  var object = {};
                  Object(_utils__WEBPACK_IMPORTED_MODULE_0__["c"])(data).forEach(function(key2) {
                    var name = key2.toString();
                    object[name] = dehydrate(data[key2], cleaned, unserializable, path.concat([name]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
                  });
                  return object;
                }
              case "infinity":
              case "nan":
              case "undefined":
                cleaned.push(path);
                return {
                  type: type2
                };
              default:
                return data;
            }
          }
          function fillInPath(object, data, path, value) {
            var target = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["h"])(object, path);
            if (target != null) {
              if (!target[meta.unserializable]) {
                delete target[meta.inspectable];
                delete target[meta.inspected];
                delete target[meta.name];
                delete target[meta.preview_long];
                delete target[meta.preview_short];
                delete target[meta.readonly];
                delete target[meta.size];
                delete target[meta.type];
              }
            }
            if (value !== null && data.unserializable.length > 0) {
              var unserializablePath = data.unserializable[0];
              var isMatch = unserializablePath.length === path.length;
              for (var i3 = 0; i3 < path.length; i3++) {
                if (path[i3] !== unserializablePath[i3]) {
                  isMatch = false;
                  break;
                }
              }
              if (isMatch) {
                upgradeUnserializable(value, value);
              }
            }
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["l"])(object, path, value);
          }
          function hydrate(object, cleaned, unserializable) {
            cleaned.forEach(function(path) {
              var length = path.length;
              var last = path[length - 1];
              var parent = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["h"])(object, path.slice(0, length - 1));
              if (!parent || !parent.hasOwnProperty(last)) {
                return;
              }
              var value = parent[last];
              if (!value) {
                return;
              } else if (value.type === "infinity") {
                parent[last] = Infinity;
              } else if (value.type === "nan") {
                parent[last] = NaN;
              } else if (value.type === "undefined") {
                parent[last] = void 0;
              } else {
                var replaced = {};
                replaced[meta.inspectable] = !!value.inspectable;
                replaced[meta.inspected] = false;
                replaced[meta.name] = value.name;
                replaced[meta.preview_long] = value.preview_long;
                replaced[meta.preview_short] = value.preview_short;
                replaced[meta.size] = value.size;
                replaced[meta.readonly] = !!value.readonly;
                replaced[meta.type] = value.type;
                parent[last] = replaced;
              }
            });
            unserializable.forEach(function(path) {
              var length = path.length;
              var last = path[length - 1];
              var parent = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["h"])(object, path.slice(0, length - 1));
              if (!parent || !parent.hasOwnProperty(last)) {
                return;
              }
              var node = parent[last];
              var replacement = _objectSpread({}, node);
              upgradeUnserializable(replacement, node);
              parent[last] = replacement;
            });
            return object;
          }
          function upgradeUnserializable(destination, source) {
            var _Object$definePropert;
            Object.defineProperties(destination, (_Object$definePropert = {}, _defineProperty(_Object$definePropert, meta.inspected, {
              configurable: true,
              enumerable: false,
              value: !!source.inspected
            }), _defineProperty(_Object$definePropert, meta.name, {
              configurable: true,
              enumerable: false,
              value: source.name
            }), _defineProperty(_Object$definePropert, meta.preview_long, {
              configurable: true,
              enumerable: false,
              value: source.preview_long
            }), _defineProperty(_Object$definePropert, meta.preview_short, {
              configurable: true,
              enumerable: false,
              value: source.preview_short
            }), _defineProperty(_Object$definePropert, meta.size, {
              configurable: true,
              enumerable: false,
              value: source.size
            }), _defineProperty(_Object$definePropert, meta.readonly, {
              configurable: true,
              enumerable: false,
              value: !!source.readonly
            }), _defineProperty(_Object$definePropert, meta.type, {
              configurable: true,
              enumerable: false,
              value: source.type
            }), _defineProperty(_Object$definePropert, meta.unserializable, {
              configurable: true,
              enumerable: false,
              value: !!source.unserializable
            }), _Object$definePropert));
            delete destination.inspected;
            delete destination.name;
            delete destination.preview_long;
            delete destination.preview_short;
            delete destination.size;
            delete destination.readonly;
            delete destination.type;
            delete destination.unserializable;
          }
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return consoleManagedByDevToolsDuringStrictMode;
          });
          __webpack_require__.d(__webpack_exports__, "b", function() {
            return enableProfilerChangedHookIndices;
          });
          __webpack_require__.d(__webpack_exports__, "c", function() {
            return enableStyleXFeatures;
          });
          var consoleManagedByDevToolsDuringStrictMode = false;
          var enableLogger = false;
          var enableNamedHooksFeature = true;
          var enableProfilerChangedHookIndices = true;
          var enableStyleXFeatures = false;
          var isInternalFacebookBuild = false;
          var enableProfilerComponentTree = true;
          null;
        },
        function(module3, exports3) {
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var g2;
          g2 = function() {
            return this;
          }();
          try {
            g2 = g2 || new Function("return this")();
          } catch (e) {
            if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object")
              g2 = window;
          }
          module3.exports = g2;
        },
        function(module3, exports3, __webpack_require__) {
          (function(global2) {
            function _typeof(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof2(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof = function _typeof2(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof(obj);
            }
            var FUNC_ERROR_TEXT = "Expected a function";
            var NAN = 0 / 0;
            var symbolTag = "[object Symbol]";
            var reTrim = /^\s+|\s+$/g;
            var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
            var reIsBinary = /^0b[01]+$/i;
            var reIsOctal = /^0o[0-7]+$/i;
            var freeParseInt = parseInt;
            var freeGlobal = (typeof global2 === "undefined" ? "undefined" : _typeof(global2)) == "object" && global2 && global2.Object === Object && global2;
            var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == "object" && self && self.Object === Object && self;
            var root = freeGlobal || freeSelf || Function("return this")();
            var objectProto = Object.prototype;
            var objectToString = objectProto.toString;
            var nativeMax = Math.max, nativeMin = Math.min;
            var now = function now2() {
              return root.Date.now();
            };
            function debounce(func2, wait, options) {
              var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
              if (typeof func2 != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              wait = toNumber(wait) || 0;
              if (isObject(options)) {
                leading = !!options.leading;
                maxing = "maxWait" in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = "trailing" in options ? !!options.trailing : trailing;
              }
              function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = void 0;
                lastInvokeTime = time;
                result = func2.apply(thisArg, args);
                return result;
              }
              function leadingEdge(time) {
                lastInvokeTime = time;
                timerId = setTimeout(timerExpired, wait);
                return leading ? invokeFunc(time) : result;
              }
              function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
                return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
              }
              function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
              }
              function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                  return trailingEdge(time);
                }
                timerId = setTimeout(timerExpired, remainingWait(time));
              }
              function trailingEdge(time) {
                timerId = void 0;
                if (trailing && lastArgs) {
                  return invokeFunc(time);
                }
                lastArgs = lastThis = void 0;
                return result;
              }
              function cancel() {
                if (timerId !== void 0) {
                  clearTimeout(timerId);
                }
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = void 0;
              }
              function flush() {
                return timerId === void 0 ? result : trailingEdge(now());
              }
              function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                  if (timerId === void 0) {
                    return leadingEdge(lastCallTime);
                  }
                  if (maxing) {
                    timerId = setTimeout(timerExpired, wait);
                    return invokeFunc(lastCallTime);
                  }
                }
                if (timerId === void 0) {
                  timerId = setTimeout(timerExpired, wait);
                }
                return result;
              }
              debounced.cancel = cancel;
              debounced.flush = flush;
              return debounced;
            }
            function throttle2(func2, wait, options) {
              var leading = true, trailing = true;
              if (typeof func2 != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing = "trailing" in options ? !!options.trailing : trailing;
              }
              return debounce(func2, wait, {
                "leading": leading,
                "maxWait": wait,
                "trailing": trailing
              });
            }
            function isObject(value) {
              var type2 = _typeof(value);
              return !!value && (type2 == "object" || type2 == "function");
            }
            function isObjectLike(value) {
              return !!value && _typeof(value) == "object";
            }
            function isSymbol(value) {
              return _typeof(value) == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
            }
            function toNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              if (isObject(value)) {
                var other = typeof value.valueOf == "function" ? value.valueOf() : value;
                value = isObject(other) ? other + "" : other;
              }
              if (typeof value != "string") {
                return value === 0 ? value : +value;
              }
              value = value.replace(reTrim, "");
              var isBinary = reIsBinary.test(value);
              return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
            }
            module3.exports = throttle2;
          }).call(this, __webpack_require__(13));
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.d(__webpack_exports__, "b", function() {
            return getInternalReactConstants;
          });
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return attach;
          });
          var semver = __webpack_require__(10);
          var types = __webpack_require__(1);
          var utils = __webpack_require__(2);
          var storage = __webpack_require__(5);
          var backend_utils = __webpack_require__(4);
          var constants = __webpack_require__(0);
          var react_debug_tools = __webpack_require__(21);
          var backend_console = __webpack_require__(8);
          var ReactSymbols = __webpack_require__(3);
          var DevToolsFeatureFlags_core_oss = __webpack_require__(12);
          function is(x2, y2) {
            return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var shared_objectIs = objectIs;
          var hasOwnProperty_hasOwnProperty = Object.prototype.hasOwnProperty;
          var shared_hasOwnProperty = hasOwnProperty_hasOwnProperty;
          var isArray = __webpack_require__(6);
          var cachedStyleNameToValueMap = /* @__PURE__ */ new Map();
          function getStyleXData(data) {
            var sources = /* @__PURE__ */ new Set();
            var resolvedStyles = {};
            crawlData(data, sources, resolvedStyles);
            return {
              sources: Array.from(sources).sort(),
              resolvedStyles
            };
          }
          function crawlData(data, sources, resolvedStyles) {
            if (data == null) {
              return;
            }
            if (Object(isArray["a"])(data)) {
              data.forEach(function(entry) {
                if (entry == null) {
                  return;
                }
                if (Object(isArray["a"])(entry)) {
                  crawlData(entry, sources, resolvedStyles);
                } else {
                  crawlObjectProperties(entry, sources, resolvedStyles);
                }
              });
            } else {
              crawlObjectProperties(data, sources, resolvedStyles);
            }
            resolvedStyles = Object.fromEntries(Object.entries(resolvedStyles).sort());
          }
          function crawlObjectProperties(entry, sources, resolvedStyles) {
            var keys = Object.keys(entry);
            keys.forEach(function(key2) {
              var value = entry[key2];
              if (typeof value === "string") {
                if (key2 === value) {
                  sources.add(key2);
                } else {
                  resolvedStyles[key2] = getPropertyValueForStyleName(value);
                }
              } else {
                var nestedStyle = {};
                resolvedStyles[key2] = nestedStyle;
                crawlData([value], sources, nestedStyle);
              }
            });
          }
          function getPropertyValueForStyleName(styleName) {
            if (cachedStyleNameToValueMap.has(styleName)) {
              return cachedStyleNameToValueMap.get(styleName);
            }
            for (var styleSheetIndex = 0; styleSheetIndex < document.styleSheets.length; styleSheetIndex++) {
              var styleSheet = document.styleSheets[styleSheetIndex];
              var rules = styleSheet.rules || styleSheet.cssRules;
              for (var ruleIndex = 0; ruleIndex < rules.length; ruleIndex++) {
                var rule = rules[ruleIndex];
                var cssText = rule.cssText, selectorText = rule.selectorText, style = rule.style;
                if (selectorText != null) {
                  if (selectorText.startsWith(".".concat(styleName))) {
                    var match = cssText.match(/{ *([a-z\-]+):/);
                    if (match !== null) {
                      var property = match[1];
                      var value = style.getPropertyValue(property);
                      cachedStyleNameToValueMap.set(styleName, value);
                      return value;
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
            return null;
          }
          var shared_isArray = __webpack_require__(9);
          var REACT_TOTAL_NUM_LANES = 31;
          var SCHEDULING_PROFILER_VERSION = 1;
          var SNAPSHOT_MAX_HEIGHT = 60;
          var DevToolsFiberComponentStack = __webpack_require__(16);
          function _slicedToArray(arr, i3) {
            return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i3) || _unsupportedIterableToArray(arr, i3) || _nonIterableRest();
          }
          function _nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function _unsupportedIterableToArray(o2, minLen) {
            if (!o2)
              return;
            if (typeof o2 === "string")
              return _arrayLikeToArray(o2, minLen);
            var n2 = Object.prototype.toString.call(o2).slice(8, -1);
            if (n2 === "Object" && o2.constructor)
              n2 = o2.constructor.name;
            if (n2 === "Map" || n2 === "Set")
              return Array.from(o2);
            if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
              return _arrayLikeToArray(o2, minLen);
          }
          function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
              arr2[i3] = arr[i3];
            }
            return arr2;
          }
          function _iterableToArrayLimit(arr, i3) {
            if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
              return;
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i3 && _arr.length === i3)
                  break;
              }
            } catch (err2) {
              _d = true;
              _e = err2;
            } finally {
              try {
                if (!_n && _i["return"] != null)
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          function _arrayWithHoles(arr) {
            if (Array.isArray(arr))
              return arr;
          }
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var TIME_OFFSET = 10;
          var performanceTarget = null;
          var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function";
          var supportsUserTimingV3 = false;
          if (supportsUserTiming) {
            var CHECK_V3_MARK = "__v3";
            var markOptions = {};
            Object.defineProperty(markOptions, "startTime", {
              get: function get() {
                supportsUserTimingV3 = true;
                return 0;
              },
              set: function set() {
              }
            });
            try {
              performance.mark(CHECK_V3_MARK, markOptions);
            } catch (error) {
            } finally {
              performance.clearMarks(CHECK_V3_MARK);
            }
          }
          if (supportsUserTimingV3) {
            performanceTarget = performance;
          }
          var getCurrentTime = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && typeof performance.now === "function" ? function() {
            return performance.now();
          } : function() {
            return Date.now();
          };
          function setPerformanceMock_ONLY_FOR_TESTING(performanceMock) {
            performanceTarget = performanceMock;
            supportsUserTiming = performanceMock !== null;
            supportsUserTimingV3 = performanceMock !== null;
          }
          function createProfilingHooks(_ref) {
            var getDisplayNameForFiber = _ref.getDisplayNameForFiber, getIsProfiling = _ref.getIsProfiling, getLaneLabelMap = _ref.getLaneLabelMap, workTagMap = _ref.workTagMap, currentDispatcherRef = _ref.currentDispatcherRef, reactVersion = _ref.reactVersion;
            var currentBatchUID = 0;
            var currentReactComponentMeasure = null;
            var currentReactMeasuresStack = [];
            var currentTimelineData = null;
            var currentFiberStacks = /* @__PURE__ */ new Map();
            var isProfiling = false;
            var nextRenderShouldStartNewBatch = false;
            function getRelativeTime() {
              var currentTime = getCurrentTime();
              if (currentTimelineData) {
                if (currentTimelineData.startTime === 0) {
                  currentTimelineData.startTime = currentTime - TIME_OFFSET;
                }
                return currentTime - currentTimelineData.startTime;
              }
              return 0;
            }
            function getInternalModuleRanges() {
              if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.getInternalModuleRanges === "function") {
                var ranges = __REACT_DEVTOOLS_GLOBAL_HOOK__.getInternalModuleRanges();
                if (Object(shared_isArray["a"])(ranges)) {
                  return ranges;
                }
              }
              return null;
            }
            function getTimelineData() {
              return currentTimelineData;
            }
            function laneToLanesArray(lanes) {
              var lanesArray = [];
              var lane = 1;
              for (var index = 0; index < REACT_TOTAL_NUM_LANES; index++) {
                if (lane & lanes) {
                  lanesArray.push(lane);
                }
                lane *= 2;
              }
              return lanesArray;
            }
            var laneToLabelMap = typeof getLaneLabelMap === "function" ? getLaneLabelMap() : null;
            function markMetadata() {
              markAndClear("--react-version-".concat(reactVersion));
              markAndClear("--profiler-version-".concat(SCHEDULING_PROFILER_VERSION));
              var ranges = getInternalModuleRanges();
              if (ranges) {
                for (var i3 = 0; i3 < ranges.length; i3++) {
                  var range = ranges[i3];
                  if (Object(shared_isArray["a"])(range) && range.length === 2) {
                    var _ranges$i = _slicedToArray(ranges[i3], 2), startStackFrame = _ranges$i[0], stopStackFrame = _ranges$i[1];
                    markAndClear("--react-internal-module-start-".concat(startStackFrame));
                    markAndClear("--react-internal-module-stop-".concat(stopStackFrame));
                  }
                }
              }
              if (laneToLabelMap != null) {
                var labels = Array.from(laneToLabelMap.values()).join(",");
                markAndClear("--react-lane-labels-".concat(labels));
              }
            }
            function markAndClear(markName) {
              performanceTarget.mark(markName);
              performanceTarget.clearMarks(markName);
            }
            function recordReactMeasureStarted(type2, lanes) {
              var depth = 0;
              if (currentReactMeasuresStack.length > 0) {
                var top = currentReactMeasuresStack[currentReactMeasuresStack.length - 1];
                depth = top.type === "render-idle" ? top.depth : top.depth + 1;
              }
              var lanesArray = laneToLanesArray(lanes);
              var reactMeasure = {
                type: type2,
                batchUID: currentBatchUID,
                depth,
                lanes: lanesArray,
                timestamp: getRelativeTime(),
                duration: 0
              };
              currentReactMeasuresStack.push(reactMeasure);
              if (currentTimelineData) {
                var _currentTimelineData = currentTimelineData, batchUIDToMeasuresMap = _currentTimelineData.batchUIDToMeasuresMap, laneToReactMeasureMap = _currentTimelineData.laneToReactMeasureMap;
                var reactMeasures = batchUIDToMeasuresMap.get(currentBatchUID);
                if (reactMeasures != null) {
                  reactMeasures.push(reactMeasure);
                } else {
                  batchUIDToMeasuresMap.set(currentBatchUID, [reactMeasure]);
                }
                lanesArray.forEach(function(lane) {
                  reactMeasures = laneToReactMeasureMap.get(lane);
                  if (reactMeasures) {
                    reactMeasures.push(reactMeasure);
                  }
                });
              }
            }
            function recordReactMeasureCompleted(type2) {
              var currentTime = getRelativeTime();
              if (currentReactMeasuresStack.length === 0) {
                console.error('Unexpected type "%s" completed at %sms while currentReactMeasuresStack is empty.', type2, currentTime);
                return;
              }
              var top = currentReactMeasuresStack.pop();
              if (top.type !== type2) {
                console.error('Unexpected type "%s" completed at %sms before "%s" completed.', type2, currentTime, top.type);
              }
              top.duration = currentTime - top.timestamp;
              if (currentTimelineData) {
                currentTimelineData.duration = getRelativeTime() + TIME_OFFSET;
              }
            }
            function markCommitStarted(lanes) {
              if (isProfiling) {
                recordReactMeasureStarted("commit", lanes);
                nextRenderShouldStartNewBatch = true;
              }
              if (supportsUserTimingV3) {
                markAndClear("--commit-start-".concat(lanes));
                markMetadata();
              }
            }
            function markCommitStopped() {
              if (isProfiling) {
                recordReactMeasureCompleted("commit");
                recordReactMeasureCompleted("render-idle");
              }
              if (supportsUserTimingV3) {
                markAndClear("--commit-stop");
              }
            }
            function markComponentRenderStarted(fiber) {
              if (isProfiling || supportsUserTimingV3) {
                var componentName = getDisplayNameForFiber(fiber) || "Unknown";
                if (isProfiling) {
                  if (isProfiling) {
                    currentReactComponentMeasure = {
                      componentName,
                      duration: 0,
                      timestamp: getRelativeTime(),
                      type: "render",
                      warning: null
                    };
                  }
                }
                if (supportsUserTimingV3) {
                  markAndClear("--component-render-start-".concat(componentName));
                }
              }
            }
            function markComponentRenderStopped() {
              if (isProfiling) {
                if (currentReactComponentMeasure) {
                  if (currentTimelineData) {
                    currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
                  }
                  currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
                  currentReactComponentMeasure = null;
                }
              }
              if (supportsUserTimingV3) {
                markAndClear("--component-render-stop");
              }
            }
            function markComponentLayoutEffectMountStarted(fiber) {
              if (isProfiling || supportsUserTimingV3) {
                var componentName = getDisplayNameForFiber(fiber) || "Unknown";
                if (isProfiling) {
                  if (isProfiling) {
                    currentReactComponentMeasure = {
                      componentName,
                      duration: 0,
                      timestamp: getRelativeTime(),
                      type: "layout-effect-mount",
                      warning: null
                    };
                  }
                }
                if (supportsUserTimingV3) {
                  markAndClear("--component-layout-effect-mount-start-".concat(componentName));
                }
              }
            }
            function markComponentLayoutEffectMountStopped() {
              if (isProfiling) {
                if (currentReactComponentMeasure) {
                  if (currentTimelineData) {
                    currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
                  }
                  currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
                  currentReactComponentMeasure = null;
                }
              }
              if (supportsUserTimingV3) {
                markAndClear("--component-layout-effect-mount-stop");
              }
            }
            function markComponentLayoutEffectUnmountStarted(fiber) {
              if (isProfiling || supportsUserTimingV3) {
                var componentName = getDisplayNameForFiber(fiber) || "Unknown";
                if (isProfiling) {
                  if (isProfiling) {
                    currentReactComponentMeasure = {
                      componentName,
                      duration: 0,
                      timestamp: getRelativeTime(),
                      type: "layout-effect-unmount",
                      warning: null
                    };
                  }
                }
                if (supportsUserTimingV3) {
                  markAndClear("--component-layout-effect-unmount-start-".concat(componentName));
                }
              }
            }
            function markComponentLayoutEffectUnmountStopped() {
              if (isProfiling) {
                if (currentReactComponentMeasure) {
                  if (currentTimelineData) {
                    currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
                  }
                  currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
                  currentReactComponentMeasure = null;
                }
              }
              if (supportsUserTimingV3) {
                markAndClear("--component-layout-effect-unmount-stop");
              }
            }
            function markComponentPassiveEffectMountStarted(fiber) {
              if (isProfiling || supportsUserTimingV3) {
                var componentName = getDisplayNameForFiber(fiber) || "Unknown";
                if (isProfiling) {
                  if (isProfiling) {
                    currentReactComponentMeasure = {
                      componentName,
                      duration: 0,
                      timestamp: getRelativeTime(),
                      type: "passive-effect-mount",
                      warning: null
                    };
                  }
                }
                if (supportsUserTimingV3) {
                  markAndClear("--component-passive-effect-mount-start-".concat(componentName));
                }
              }
            }
            function markComponentPassiveEffectMountStopped() {
              if (isProfiling) {
                if (currentReactComponentMeasure) {
                  if (currentTimelineData) {
                    currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
                  }
                  currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
                  currentReactComponentMeasure = null;
                }
              }
              if (supportsUserTimingV3) {
                markAndClear("--component-passive-effect-mount-stop");
              }
            }
            function markComponentPassiveEffectUnmountStarted(fiber) {
              if (isProfiling || supportsUserTimingV3) {
                var componentName = getDisplayNameForFiber(fiber) || "Unknown";
                if (isProfiling) {
                  if (isProfiling) {
                    currentReactComponentMeasure = {
                      componentName,
                      duration: 0,
                      timestamp: getRelativeTime(),
                      type: "passive-effect-unmount",
                      warning: null
                    };
                  }
                }
                if (supportsUserTimingV3) {
                  markAndClear("--component-passive-effect-unmount-start-".concat(componentName));
                }
              }
            }
            function markComponentPassiveEffectUnmountStopped() {
              if (isProfiling) {
                if (currentReactComponentMeasure) {
                  if (currentTimelineData) {
                    currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
                  }
                  currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
                  currentReactComponentMeasure = null;
                }
              }
              if (supportsUserTimingV3) {
                markAndClear("--component-passive-effect-unmount-stop");
              }
            }
            function markComponentErrored(fiber, thrownValue, lanes) {
              if (isProfiling || supportsUserTimingV3) {
                var componentName = getDisplayNameForFiber(fiber) || "Unknown";
                var phase = fiber.alternate === null ? "mount" : "update";
                var message = "";
                if (thrownValue !== null && _typeof(thrownValue) === "object" && typeof thrownValue.message === "string") {
                  message = thrownValue.message;
                } else if (typeof thrownValue === "string") {
                  message = thrownValue;
                }
                if (isProfiling) {
                  if (currentTimelineData) {
                    currentTimelineData.thrownErrors.push({
                      componentName,
                      message,
                      phase,
                      timestamp: getRelativeTime(),
                      type: "thrown-error"
                    });
                  }
                }
                if (supportsUserTimingV3) {
                  markAndClear("--error-".concat(componentName, "-").concat(phase, "-").concat(message));
                }
              }
            }
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            var wakeableIDs = new PossiblyWeakMap();
            var wakeableID = 0;
            function getWakeableID(wakeable) {
              if (!wakeableIDs.has(wakeable)) {
                wakeableIDs.set(wakeable, wakeableID++);
              }
              return wakeableIDs.get(wakeable);
            }
            function markComponentSuspended(fiber, wakeable, lanes) {
              if (isProfiling || supportsUserTimingV3) {
                var eventType = wakeableIDs.has(wakeable) ? "resuspend" : "suspend";
                var id = getWakeableID(wakeable);
                var componentName = getDisplayNameForFiber(fiber) || "Unknown";
                var phase = fiber.alternate === null ? "mount" : "update";
                var displayName = wakeable.displayName || "";
                var suspenseEvent = null;
                if (isProfiling) {
                  suspenseEvent = {
                    componentName,
                    depth: 0,
                    duration: 0,
                    id: "".concat(id),
                    phase,
                    promiseName: displayName,
                    resolution: "unresolved",
                    timestamp: getRelativeTime(),
                    type: "suspense",
                    warning: null
                  };
                  if (currentTimelineData) {
                    currentTimelineData.suspenseEvents.push(suspenseEvent);
                  }
                }
                if (supportsUserTimingV3) {
                  markAndClear("--suspense-".concat(eventType, "-").concat(id, "-").concat(componentName, "-").concat(phase, "-").concat(lanes, "-").concat(displayName));
                }
                wakeable.then(function() {
                  if (suspenseEvent) {
                    suspenseEvent.duration = getRelativeTime() - suspenseEvent.timestamp;
                    suspenseEvent.resolution = "resolved";
                  }
                  if (supportsUserTimingV3) {
                    markAndClear("--suspense-resolved-".concat(id, "-").concat(componentName));
                  }
                }, function() {
                  if (suspenseEvent) {
                    suspenseEvent.duration = getRelativeTime() - suspenseEvent.timestamp;
                    suspenseEvent.resolution = "rejected";
                  }
                  if (supportsUserTimingV3) {
                    markAndClear("--suspense-rejected-".concat(id, "-").concat(componentName));
                  }
                });
              }
            }
            function markLayoutEffectsStarted(lanes) {
              if (isProfiling) {
                recordReactMeasureStarted("layout-effects", lanes);
              }
              if (supportsUserTimingV3) {
                markAndClear("--layout-effects-start-".concat(lanes));
              }
            }
            function markLayoutEffectsStopped() {
              if (isProfiling) {
                recordReactMeasureCompleted("layout-effects");
              }
              if (supportsUserTimingV3) {
                markAndClear("--layout-effects-stop");
              }
            }
            function markPassiveEffectsStarted(lanes) {
              if (isProfiling) {
                recordReactMeasureStarted("passive-effects", lanes);
              }
              if (supportsUserTimingV3) {
                markAndClear("--passive-effects-start-".concat(lanes));
              }
            }
            function markPassiveEffectsStopped() {
              if (isProfiling) {
                recordReactMeasureCompleted("passive-effects");
              }
              if (supportsUserTimingV3) {
                markAndClear("--passive-effects-stop");
              }
            }
            function markRenderStarted(lanes) {
              if (isProfiling) {
                if (nextRenderShouldStartNewBatch) {
                  nextRenderShouldStartNewBatch = false;
                  currentBatchUID++;
                }
                if (currentReactMeasuresStack.length === 0 || currentReactMeasuresStack[currentReactMeasuresStack.length - 1].type !== "render-idle") {
                  recordReactMeasureStarted("render-idle", lanes);
                }
                recordReactMeasureStarted("render", lanes);
              }
              if (supportsUserTimingV3) {
                markAndClear("--render-start-".concat(lanes));
              }
            }
            function markRenderYielded() {
              if (isProfiling) {
                recordReactMeasureCompleted("render");
              }
              if (supportsUserTimingV3) {
                markAndClear("--render-yield");
              }
            }
            function markRenderStopped() {
              if (isProfiling) {
                recordReactMeasureCompleted("render");
              }
              if (supportsUserTimingV3) {
                markAndClear("--render-stop");
              }
            }
            function markRenderScheduled(lane) {
              if (isProfiling) {
                if (currentTimelineData) {
                  currentTimelineData.schedulingEvents.push({
                    lanes: laneToLanesArray(lane),
                    timestamp: getRelativeTime(),
                    type: "schedule-render",
                    warning: null
                  });
                }
              }
              if (supportsUserTimingV3) {
                markAndClear("--schedule-render-".concat(lane));
              }
            }
            function markForceUpdateScheduled(fiber, lane) {
              if (isProfiling || supportsUserTimingV3) {
                var componentName = getDisplayNameForFiber(fiber) || "Unknown";
                if (isProfiling) {
                  if (currentTimelineData) {
                    currentTimelineData.schedulingEvents.push({
                      componentName,
                      lanes: laneToLanesArray(lane),
                      timestamp: getRelativeTime(),
                      type: "schedule-force-update",
                      warning: null
                    });
                  }
                }
                if (supportsUserTimingV3) {
                  markAndClear("--schedule-forced-update-".concat(lane, "-").concat(componentName));
                }
              }
            }
            function getParentFibers(fiber) {
              var parents = [];
              var parent = fiber;
              while (parent !== null) {
                parents.push(parent);
                parent = parent.return;
              }
              return parents;
            }
            function markStateUpdateScheduled(fiber, lane) {
              if (isProfiling || supportsUserTimingV3) {
                var componentName = getDisplayNameForFiber(fiber) || "Unknown";
                if (isProfiling) {
                  if (currentTimelineData) {
                    var event = {
                      componentName,
                      lanes: laneToLanesArray(lane),
                      timestamp: getRelativeTime(),
                      type: "schedule-state-update",
                      warning: null
                    };
                    currentFiberStacks.set(event, getParentFibers(fiber));
                    currentTimelineData.schedulingEvents.push(event);
                  }
                }
                if (supportsUserTimingV3) {
                  markAndClear("--schedule-state-update-".concat(lane, "-").concat(componentName));
                }
              }
            }
            function toggleProfilingStatus(value) {
              if (isProfiling !== value) {
                isProfiling = value;
                if (isProfiling) {
                  var internalModuleSourceToRanges = /* @__PURE__ */ new Map();
                  if (supportsUserTimingV3) {
                    var ranges = getInternalModuleRanges();
                    if (ranges) {
                      for (var i3 = 0; i3 < ranges.length; i3++) {
                        var range = ranges[i3];
                        if (Object(shared_isArray["a"])(range) && range.length === 2) {
                          var _ranges$i2 = _slicedToArray(ranges[i3], 2), startStackFrame = _ranges$i2[0], stopStackFrame = _ranges$i2[1];
                          markAndClear("--react-internal-module-start-".concat(startStackFrame));
                          markAndClear("--react-internal-module-stop-".concat(stopStackFrame));
                        }
                      }
                    }
                  }
                  var laneToReactMeasureMap = /* @__PURE__ */ new Map();
                  var lane = 1;
                  for (var index = 0; index < REACT_TOTAL_NUM_LANES; index++) {
                    laneToReactMeasureMap.set(lane, []);
                    lane *= 2;
                  }
                  currentBatchUID = 0;
                  currentReactComponentMeasure = null;
                  currentReactMeasuresStack = [];
                  currentFiberStacks = /* @__PURE__ */ new Map();
                  currentTimelineData = {
                    internalModuleSourceToRanges,
                    laneToLabelMap: laneToLabelMap || /* @__PURE__ */ new Map(),
                    reactVersion,
                    componentMeasures: [],
                    schedulingEvents: [],
                    suspenseEvents: [],
                    thrownErrors: [],
                    batchUIDToMeasuresMap: /* @__PURE__ */ new Map(),
                    duration: 0,
                    laneToReactMeasureMap,
                    startTime: 0,
                    flamechart: [],
                    nativeEvents: [],
                    networkMeasures: [],
                    otherUserTimingMarks: [],
                    snapshots: [],
                    snapshotHeight: 0
                  };
                  nextRenderShouldStartNewBatch = true;
                } else {
                  if (currentTimelineData !== null) {
                    currentTimelineData.schedulingEvents.forEach(function(event) {
                      if (event.type === "schedule-state-update") {
                        var fiberStack = currentFiberStacks.get(event);
                        if (fiberStack && currentDispatcherRef != null) {
                          event.componentStack = fiberStack.reduce(function(trace, fiber) {
                            return trace + Object(DevToolsFiberComponentStack["a"])(workTagMap, fiber, currentDispatcherRef);
                          }, "");
                        }
                      }
                    });
                  }
                  currentFiberStacks.clear();
                }
              }
            }
            return {
              getTimelineData,
              profilingHooks: {
                markCommitStarted,
                markCommitStopped,
                markComponentRenderStarted,
                markComponentRenderStopped,
                markComponentPassiveEffectMountStarted,
                markComponentPassiveEffectMountStopped,
                markComponentPassiveEffectUnmountStarted,
                markComponentPassiveEffectUnmountStopped,
                markComponentLayoutEffectMountStarted,
                markComponentLayoutEffectMountStopped,
                markComponentLayoutEffectUnmountStarted,
                markComponentLayoutEffectUnmountStopped,
                markComponentErrored,
                markComponentSuspended,
                markLayoutEffectsStarted,
                markLayoutEffectsStopped,
                markPassiveEffectsStarted,
                markPassiveEffectsStopped,
                markRenderStarted,
                markRenderYielded,
                markRenderStopped,
                markRenderScheduled,
                markForceUpdateScheduled,
                markStateUpdateScheduled
              },
              toggleProfilingStatus
            };
          }
          function _objectWithoutProperties(source, excluded) {
            if (source == null)
              return {};
            var target = _objectWithoutPropertiesLoose(source, excluded);
            var key2, i3;
            if (Object.getOwnPropertySymbols) {
              var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
              for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
                key2 = sourceSymbolKeys[i3];
                if (excluded.indexOf(key2) >= 0)
                  continue;
                if (!Object.prototype.propertyIsEnumerable.call(source, key2))
                  continue;
                target[key2] = source[key2];
              }
            }
            return target;
          }
          function _objectWithoutPropertiesLoose(source, excluded) {
            if (source == null)
              return {};
            var target = {};
            var sourceKeys = Object.keys(source);
            var key2, i3;
            for (i3 = 0; i3 < sourceKeys.length; i3++) {
              key2 = sourceKeys[i3];
              if (excluded.indexOf(key2) >= 0)
                continue;
              target[key2] = source[key2];
            }
            return target;
          }
          function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys.push.apply(keys, symbols);
            }
            return keys;
          }
          function _objectSpread(target) {
            for (var i3 = 1; i3 < arguments.length; i3++) {
              var source = arguments[i3] != null ? arguments[i3] : {};
              if (i3 % 2) {
                ownKeys(Object(source), true).forEach(function(key2) {
                  _defineProperty(target, key2, source[key2]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                ownKeys(Object(source)).forEach(function(key2) {
                  Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
                });
              }
            }
            return target;
          }
          function _defineProperty(obj, key2, value) {
            if (key2 in obj) {
              Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key2] = value;
            }
            return obj;
          }
          function renderer_slicedToArray(arr, i3) {
            return renderer_arrayWithHoles(arr) || renderer_iterableToArrayLimit(arr, i3) || renderer_unsupportedIterableToArray(arr, i3) || renderer_nonIterableRest();
          }
          function renderer_nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function renderer_iterableToArrayLimit(arr, i3) {
            if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
              return;
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i3 && _arr.length === i3)
                  break;
              }
            } catch (err2) {
              _d = true;
              _e = err2;
            } finally {
              try {
                if (!_n && _i["return"] != null)
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          function renderer_arrayWithHoles(arr) {
            if (Array.isArray(arr))
              return arr;
          }
          function _toConsumableArray(arr) {
            return _arrayWithoutHoles(arr) || _iterableToArray(arr) || renderer_unsupportedIterableToArray(arr) || _nonIterableSpread();
          }
          function _nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function _iterableToArray(iter) {
            if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
              return Array.from(iter);
          }
          function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr))
              return renderer_arrayLikeToArray(arr);
          }
          function _createForOfIteratorHelper(o2, allowArrayLike) {
            var it;
            if (typeof Symbol === "undefined" || o2[Symbol.iterator] == null) {
              if (Array.isArray(o2) || (it = renderer_unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
                if (it)
                  o2 = it;
                var i3 = 0;
                var F2 = function F3() {
                };
                return { s: F2, n: function n2() {
                  if (i3 >= o2.length)
                    return { done: true };
                  return { done: false, value: o2[i3++] };
                }, e: function e(_e2) {
                  throw _e2;
                }, f: F2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var normalCompletion = true, didErr = false, err2;
            return { s: function s2() {
              it = o2[Symbol.iterator]();
            }, n: function n2() {
              var step = it.next();
              normalCompletion = step.done;
              return step;
            }, e: function e(_e3) {
              didErr = true;
              err2 = _e3;
            }, f: function f2() {
              try {
                if (!normalCompletion && it.return != null)
                  it.return();
              } finally {
                if (didErr)
                  throw err2;
              }
            } };
          }
          function renderer_unsupportedIterableToArray(o2, minLen) {
            if (!o2)
              return;
            if (typeof o2 === "string")
              return renderer_arrayLikeToArray(o2, minLen);
            var n2 = Object.prototype.toString.call(o2).slice(8, -1);
            if (n2 === "Object" && o2.constructor)
              n2 = o2.constructor.name;
            if (n2 === "Map" || n2 === "Set")
              return Array.from(o2);
            if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
              return renderer_arrayLikeToArray(o2, minLen);
          }
          function renderer_arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
              arr2[i3] = arr[i3];
            }
            return arr2;
          }
          function renderer_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              renderer_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              renderer_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return renderer_typeof(obj);
          }
          function getFiberFlags(fiber) {
            return fiber.flags !== void 0 ? fiber.flags : fiber.effectTag;
          }
          var renderer_getCurrentTime = (typeof performance === "undefined" ? "undefined" : renderer_typeof(performance)) === "object" && typeof performance.now === "function" ? function() {
            return performance.now();
          } : function() {
            return Date.now();
          };
          function getInternalReactConstants(version) {
            var ReactTypeOfSideEffect = {
              DidCapture: 128,
              NoFlags: 0,
              PerformedWork: 1,
              Placement: 2,
              Incomplete: 8192,
              Hydrating: 4096
            };
            var ReactPriorityLevels = {
              ImmediatePriority: 99,
              UserBlockingPriority: 98,
              NormalPriority: 97,
              LowPriority: 96,
              IdlePriority: 95,
              NoPriority: 90
            };
            if (Object(semver["gt"])(version, "17.0.2")) {
              ReactPriorityLevels = {
                ImmediatePriority: 1,
                UserBlockingPriority: 2,
                NormalPriority: 3,
                LowPriority: 4,
                IdlePriority: 5,
                NoPriority: 0
              };
            }
            var StrictModeBits = 0;
            if (Object(semver["gte"])(version, "18.0.0-alpha")) {
              StrictModeBits = 24;
            } else if (Object(semver["gte"])(version, "16.9.0")) {
              StrictModeBits = 1;
            } else if (Object(semver["gte"])(version, "16.3.0")) {
              StrictModeBits = 2;
            }
            var ReactTypeOfWork = null;
            if (Object(semver["gt"])(version, "17.0.1")) {
              ReactTypeOfWork = {
                CacheComponent: 24,
                ClassComponent: 1,
                ContextConsumer: 9,
                ContextProvider: 10,
                CoroutineComponent: -1,
                CoroutineHandlerPhase: -1,
                DehydratedSuspenseComponent: 18,
                ForwardRef: 11,
                Fragment: 7,
                FunctionComponent: 0,
                HostComponent: 5,
                HostPortal: 4,
                HostRoot: 3,
                HostText: 6,
                IncompleteClassComponent: 17,
                IndeterminateComponent: 2,
                LazyComponent: 16,
                LegacyHiddenComponent: 23,
                MemoComponent: 14,
                Mode: 8,
                OffscreenComponent: 22,
                Profiler: 12,
                ScopeComponent: 21,
                SimpleMemoComponent: 15,
                SuspenseComponent: 13,
                SuspenseListComponent: 19,
                TracingMarkerComponent: 25,
                YieldComponent: -1
              };
            } else if (Object(semver["gte"])(version, "17.0.0-alpha")) {
              ReactTypeOfWork = {
                CacheComponent: -1,
                ClassComponent: 1,
                ContextConsumer: 9,
                ContextProvider: 10,
                CoroutineComponent: -1,
                CoroutineHandlerPhase: -1,
                DehydratedSuspenseComponent: 18,
                ForwardRef: 11,
                Fragment: 7,
                FunctionComponent: 0,
                HostComponent: 5,
                HostPortal: 4,
                HostRoot: 3,
                HostText: 6,
                IncompleteClassComponent: 17,
                IndeterminateComponent: 2,
                LazyComponent: 16,
                LegacyHiddenComponent: 24,
                MemoComponent: 14,
                Mode: 8,
                OffscreenComponent: 23,
                Profiler: 12,
                ScopeComponent: 21,
                SimpleMemoComponent: 15,
                SuspenseComponent: 13,
                SuspenseListComponent: 19,
                TracingMarkerComponent: -1,
                YieldComponent: -1
              };
            } else if (Object(semver["gte"])(version, "16.6.0-beta.0")) {
              ReactTypeOfWork = {
                CacheComponent: -1,
                ClassComponent: 1,
                ContextConsumer: 9,
                ContextProvider: 10,
                CoroutineComponent: -1,
                CoroutineHandlerPhase: -1,
                DehydratedSuspenseComponent: 18,
                ForwardRef: 11,
                Fragment: 7,
                FunctionComponent: 0,
                HostComponent: 5,
                HostPortal: 4,
                HostRoot: 3,
                HostText: 6,
                IncompleteClassComponent: 17,
                IndeterminateComponent: 2,
                LazyComponent: 16,
                LegacyHiddenComponent: -1,
                MemoComponent: 14,
                Mode: 8,
                OffscreenComponent: -1,
                Profiler: 12,
                ScopeComponent: -1,
                SimpleMemoComponent: 15,
                SuspenseComponent: 13,
                SuspenseListComponent: 19,
                TracingMarkerComponent: -1,
                YieldComponent: -1
              };
            } else if (Object(semver["gte"])(version, "16.4.3-alpha")) {
              ReactTypeOfWork = {
                CacheComponent: -1,
                ClassComponent: 2,
                ContextConsumer: 11,
                ContextProvider: 12,
                CoroutineComponent: -1,
                CoroutineHandlerPhase: -1,
                DehydratedSuspenseComponent: -1,
                ForwardRef: 13,
                Fragment: 9,
                FunctionComponent: 0,
                HostComponent: 7,
                HostPortal: 6,
                HostRoot: 5,
                HostText: 8,
                IncompleteClassComponent: -1,
                IndeterminateComponent: 4,
                LazyComponent: -1,
                LegacyHiddenComponent: -1,
                MemoComponent: -1,
                Mode: 10,
                OffscreenComponent: -1,
                Profiler: 15,
                ScopeComponent: -1,
                SimpleMemoComponent: -1,
                SuspenseComponent: 16,
                SuspenseListComponent: -1,
                TracingMarkerComponent: -1,
                YieldComponent: -1
              };
            } else {
              ReactTypeOfWork = {
                CacheComponent: -1,
                ClassComponent: 2,
                ContextConsumer: 12,
                ContextProvider: 13,
                CoroutineComponent: 7,
                CoroutineHandlerPhase: 8,
                DehydratedSuspenseComponent: -1,
                ForwardRef: 14,
                Fragment: 10,
                FunctionComponent: 1,
                HostComponent: 5,
                HostPortal: 4,
                HostRoot: 3,
                HostText: 6,
                IncompleteClassComponent: -1,
                IndeterminateComponent: 0,
                LazyComponent: -1,
                LegacyHiddenComponent: -1,
                MemoComponent: -1,
                Mode: 11,
                OffscreenComponent: -1,
                Profiler: 15,
                ScopeComponent: -1,
                SimpleMemoComponent: -1,
                SuspenseComponent: 16,
                SuspenseListComponent: -1,
                TracingMarkerComponent: -1,
                YieldComponent: 9
              };
            }
            function getTypeSymbol(type2) {
              var symbolOrNumber = renderer_typeof(type2) === "object" && type2 !== null ? type2.$$typeof : type2;
              return renderer_typeof(symbolOrNumber) === "symbol" ? symbolOrNumber.toString() : symbolOrNumber;
            }
            var _ReactTypeOfWork = ReactTypeOfWork, CacheComponent = _ReactTypeOfWork.CacheComponent, ClassComponent = _ReactTypeOfWork.ClassComponent, IncompleteClassComponent = _ReactTypeOfWork.IncompleteClassComponent, FunctionComponent = _ReactTypeOfWork.FunctionComponent, IndeterminateComponent = _ReactTypeOfWork.IndeterminateComponent, ForwardRef = _ReactTypeOfWork.ForwardRef, HostRoot = _ReactTypeOfWork.HostRoot, HostComponent = _ReactTypeOfWork.HostComponent, HostPortal = _ReactTypeOfWork.HostPortal, HostText = _ReactTypeOfWork.HostText, Fragment = _ReactTypeOfWork.Fragment, LazyComponent = _ReactTypeOfWork.LazyComponent, LegacyHiddenComponent = _ReactTypeOfWork.LegacyHiddenComponent, MemoComponent = _ReactTypeOfWork.MemoComponent, OffscreenComponent = _ReactTypeOfWork.OffscreenComponent, Profiler = _ReactTypeOfWork.Profiler, ScopeComponent = _ReactTypeOfWork.ScopeComponent, SimpleMemoComponent = _ReactTypeOfWork.SimpleMemoComponent, SuspenseComponent = _ReactTypeOfWork.SuspenseComponent, SuspenseListComponent = _ReactTypeOfWork.SuspenseListComponent, TracingMarkerComponent = _ReactTypeOfWork.TracingMarkerComponent;
            function resolveFiberType(type2) {
              var typeSymbol = getTypeSymbol(type2);
              switch (typeSymbol) {
                case ReactSymbols["j"]:
                case ReactSymbols["k"]:
                  return resolveFiberType(type2.type);
                case ReactSymbols["f"]:
                case ReactSymbols["g"]:
                  return type2.render;
                default:
                  return type2;
              }
            }
            function getDisplayNameForFiber(fiber) {
              var elementType = fiber.elementType, type2 = fiber.type, tag = fiber.tag;
              var resolvedType = type2;
              if (renderer_typeof(type2) === "object" && type2 !== null) {
                resolvedType = resolveFiberType(type2);
              }
              var resolvedContext = null;
              switch (tag) {
                case CacheComponent:
                  return "Cache";
                case ClassComponent:
                case IncompleteClassComponent:
                  return Object(utils["f"])(resolvedType);
                case FunctionComponent:
                case IndeterminateComponent:
                  return Object(utils["f"])(resolvedType);
                case ForwardRef:
                  return type2 && type2.displayName || Object(utils["f"])(resolvedType, "Anonymous");
                case HostRoot:
                  var fiberRoot = fiber.stateNode;
                  if (fiberRoot != null && fiberRoot._debugRootType !== null) {
                    return fiberRoot._debugRootType;
                  }
                  return null;
                case HostComponent:
                  return type2;
                case HostPortal:
                case HostText:
                case Fragment:
                  return null;
                case LazyComponent:
                  return "Lazy";
                case MemoComponent:
                case SimpleMemoComponent:
                  return elementType && elementType.displayName || type2 && type2.displayName || Object(utils["f"])(resolvedType, "Anonymous");
                case SuspenseComponent:
                  return "Suspense";
                case LegacyHiddenComponent:
                  return "LegacyHidden";
                case OffscreenComponent:
                  return "Offscreen";
                case ScopeComponent:
                  return "Scope";
                case SuspenseListComponent:
                  return "SuspenseList";
                case Profiler:
                  return "Profiler";
                case TracingMarkerComponent:
                  return "TracingMarker";
                default:
                  var typeSymbol = getTypeSymbol(type2);
                  switch (typeSymbol) {
                    case ReactSymbols["a"]:
                    case ReactSymbols["b"]:
                    case ReactSymbols["e"]:
                      return null;
                    case ReactSymbols["n"]:
                    case ReactSymbols["o"]:
                      resolvedContext = fiber.type._context || fiber.type.context;
                      return "".concat(resolvedContext.displayName || "Context", ".Provider");
                    case ReactSymbols["c"]:
                    case ReactSymbols["d"]:
                    case ReactSymbols["r"]:
                      resolvedContext = fiber.type._context || fiber.type;
                      return "".concat(resolvedContext.displayName || "Context", ".Consumer");
                    case ReactSymbols["s"]:
                    case ReactSymbols["t"]:
                      return null;
                    case ReactSymbols["l"]:
                    case ReactSymbols["m"]:
                      return "Profiler(".concat(fiber.memoizedProps.id, ")");
                    case ReactSymbols["p"]:
                    case ReactSymbols["q"]:
                      return "Scope";
                    default:
                      return null;
                  }
              }
            }
            return {
              getDisplayNameForFiber,
              getTypeSymbol,
              ReactPriorityLevels,
              ReactTypeOfWork,
              ReactTypeOfSideEffect,
              StrictModeBits
            };
          }
          var fiberToIDMap = /* @__PURE__ */ new Map();
          var idToArbitraryFiberMap = /* @__PURE__ */ new Map();
          function attach(hook, rendererID, renderer, global2) {
            var version = renderer.reconcilerVersion || renderer.version;
            var _getInternalReactCons = getInternalReactConstants(version), getDisplayNameForFiber = _getInternalReactCons.getDisplayNameForFiber, getTypeSymbol = _getInternalReactCons.getTypeSymbol, ReactPriorityLevels = _getInternalReactCons.ReactPriorityLevels, ReactTypeOfWork = _getInternalReactCons.ReactTypeOfWork, ReactTypeOfSideEffect = _getInternalReactCons.ReactTypeOfSideEffect, StrictModeBits = _getInternalReactCons.StrictModeBits;
            var DidCapture = ReactTypeOfSideEffect.DidCapture, Hydrating = ReactTypeOfSideEffect.Hydrating, NoFlags = ReactTypeOfSideEffect.NoFlags, PerformedWork = ReactTypeOfSideEffect.PerformedWork, Placement = ReactTypeOfSideEffect.Placement;
            var CacheComponent = ReactTypeOfWork.CacheComponent, ClassComponent = ReactTypeOfWork.ClassComponent, ContextConsumer = ReactTypeOfWork.ContextConsumer, DehydratedSuspenseComponent = ReactTypeOfWork.DehydratedSuspenseComponent, ForwardRef = ReactTypeOfWork.ForwardRef, Fragment = ReactTypeOfWork.Fragment, FunctionComponent = ReactTypeOfWork.FunctionComponent, HostRoot = ReactTypeOfWork.HostRoot, HostPortal = ReactTypeOfWork.HostPortal, HostComponent = ReactTypeOfWork.HostComponent, HostText = ReactTypeOfWork.HostText, IncompleteClassComponent = ReactTypeOfWork.IncompleteClassComponent, IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent, LegacyHiddenComponent = ReactTypeOfWork.LegacyHiddenComponent, MemoComponent = ReactTypeOfWork.MemoComponent, OffscreenComponent = ReactTypeOfWork.OffscreenComponent, SimpleMemoComponent = ReactTypeOfWork.SimpleMemoComponent, SuspenseComponent = ReactTypeOfWork.SuspenseComponent, SuspenseListComponent = ReactTypeOfWork.SuspenseListComponent, TracingMarkerComponent = ReactTypeOfWork.TracingMarkerComponent;
            var ImmediatePriority = ReactPriorityLevels.ImmediatePriority, UserBlockingPriority = ReactPriorityLevels.UserBlockingPriority, NormalPriority = ReactPriorityLevels.NormalPriority, LowPriority = ReactPriorityLevels.LowPriority, IdlePriority = ReactPriorityLevels.IdlePriority, NoPriority = ReactPriorityLevels.NoPriority;
            var getLaneLabelMap = renderer.getLaneLabelMap, injectProfilingHooks = renderer.injectProfilingHooks, overrideHookState = renderer.overrideHookState, overrideHookStateDeletePath = renderer.overrideHookStateDeletePath, overrideHookStateRenamePath = renderer.overrideHookStateRenamePath, overrideProps = renderer.overrideProps, overridePropsDeletePath = renderer.overridePropsDeletePath, overridePropsRenamePath = renderer.overridePropsRenamePath, scheduleRefresh = renderer.scheduleRefresh, setErrorHandler = renderer.setErrorHandler, setSuspenseHandler = renderer.setSuspenseHandler, scheduleUpdate = renderer.scheduleUpdate;
            var supportsTogglingError = typeof setErrorHandler === "function" && typeof scheduleUpdate === "function";
            var supportsTogglingSuspense = typeof setSuspenseHandler === "function" && typeof scheduleUpdate === "function";
            if (typeof scheduleRefresh === "function") {
              renderer.scheduleRefresh = function() {
                try {
                  hook.emit("fastRefreshScheduled");
                } finally {
                  return scheduleRefresh.apply(void 0, arguments);
                }
              };
            }
            var getTimelineData = null;
            var toggleProfilingStatus = null;
            if (typeof injectProfilingHooks === "function") {
              var response = createProfilingHooks({
                getDisplayNameForFiber,
                getIsProfiling: function getIsProfiling() {
                  return isProfiling;
                },
                getLaneLabelMap,
                currentDispatcherRef: renderer.currentDispatcherRef,
                workTagMap: ReactTypeOfWork,
                reactVersion: version
              });
              injectProfilingHooks(response.profilingHooks);
              getTimelineData = response.getTimelineData;
              toggleProfilingStatus = response.toggleProfilingStatus;
            }
            var fibersWithChangedErrorOrWarningCounts = /* @__PURE__ */ new Set();
            var pendingFiberToErrorsMap = /* @__PURE__ */ new Map();
            var pendingFiberToWarningsMap = /* @__PURE__ */ new Map();
            var fiberIDToErrorsMap = /* @__PURE__ */ new Map();
            var fiberIDToWarningsMap = /* @__PURE__ */ new Map();
            function clearErrorsAndWarnings() {
              var _iterator = _createForOfIteratorHelper(fiberIDToErrorsMap.keys()), _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var id = _step.value;
                  var _fiber = idToArbitraryFiberMap.get(id);
                  if (_fiber != null) {
                    fibersWithChangedErrorOrWarningCounts.add(_fiber);
                    updateMostRecentlyInspectedElementIfNecessary(id);
                  }
                }
              } catch (err2) {
                _iterator.e(err2);
              } finally {
                _iterator.f();
              }
              var _iterator2 = _createForOfIteratorHelper(fiberIDToWarningsMap.keys()), _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                  var _id = _step2.value;
                  var _fiber2 = idToArbitraryFiberMap.get(_id);
                  if (_fiber2 != null) {
                    fibersWithChangedErrorOrWarningCounts.add(_fiber2);
                    updateMostRecentlyInspectedElementIfNecessary(_id);
                  }
                }
              } catch (err2) {
                _iterator2.e(err2);
              } finally {
                _iterator2.f();
              }
              fiberIDToErrorsMap.clear();
              fiberIDToWarningsMap.clear();
              flushPendingEvents();
            }
            function clearMessageCountHelper(fiberID, pendingFiberToMessageCountMap, fiberIDToMessageCountMap) {
              var fiber = idToArbitraryFiberMap.get(fiberID);
              if (fiber != null) {
                pendingFiberToErrorsMap.delete(fiber);
                if (fiberIDToMessageCountMap.has(fiberID)) {
                  fiberIDToMessageCountMap.delete(fiberID);
                  fibersWithChangedErrorOrWarningCounts.add(fiber);
                  flushPendingEvents();
                  updateMostRecentlyInspectedElementIfNecessary(fiberID);
                } else {
                  fibersWithChangedErrorOrWarningCounts.delete(fiber);
                }
              }
            }
            function clearErrorsForFiberID(fiberID) {
              clearMessageCountHelper(fiberID, pendingFiberToErrorsMap, fiberIDToErrorsMap);
            }
            function clearWarningsForFiberID(fiberID) {
              clearMessageCountHelper(fiberID, pendingFiberToWarningsMap, fiberIDToWarningsMap);
            }
            function updateMostRecentlyInspectedElementIfNecessary(fiberID) {
              if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === fiberID) {
                hasElementUpdatedSinceLastInspected = true;
              }
            }
            function onErrorOrWarning(fiber, type2, args) {
              if (type2 === "error") {
                var maybeID = getFiberIDUnsafe(fiber);
                if (maybeID != null && forceErrorForFiberIDs.get(maybeID) === true) {
                  return;
                }
              }
              var message = backend_utils["f"].apply(void 0, _toConsumableArray(args));
              if (constants["s"]) {
                debug("onErrorOrWarning", fiber, null, "".concat(type2, ': "').concat(message, '"'));
              }
              fibersWithChangedErrorOrWarningCounts.add(fiber);
              var fiberMap = type2 === "error" ? pendingFiberToErrorsMap : pendingFiberToWarningsMap;
              var messageMap = fiberMap.get(fiber);
              if (messageMap != null) {
                var count = messageMap.get(message) || 0;
                messageMap.set(message, count + 1);
              } else {
                fiberMap.set(fiber, /* @__PURE__ */ new Map([[message, 1]]));
              }
              flushPendingErrorsAndWarningsAfterDelay();
            }
            if (true) {
              Object(backend_console["c"])(renderer, onErrorOrWarning);
              var appendComponentStack = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false;
              var breakOnConsoleErrors = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;
              var showInlineWarningsAndErrors = window.__REACT_DEVTOOLS_SHOW_INLINE_WARNINGS_AND_ERRORS__ !== false;
              var hideConsoleLogsInStrictMode = window.__REACT_DEVTOOLS_HIDE_CONSOLE_LOGS_IN_STRICT_MODE__ === true;
              var browserTheme = window.__REACT_DEVTOOLS_BROWSER_THEME__;
              Object(backend_console["a"])({
                appendComponentStack,
                breakOnConsoleErrors,
                showInlineWarningsAndErrors,
                hideConsoleLogsInStrictMode,
                browserTheme
              });
            }
            var debug = function debug2(name, fiber, parentFiber) {
              var extraString = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "";
              if (constants["s"]) {
                var displayName = fiber.tag + ":" + (getDisplayNameForFiber(fiber) || "null");
                var maybeID = getFiberIDUnsafe(fiber) || "<no id>";
                var parentDisplayName = parentFiber ? parentFiber.tag + ":" + (getDisplayNameForFiber(parentFiber) || "null") : "";
                var maybeParentID = parentFiber ? getFiberIDUnsafe(parentFiber) || "<no-id>" : "";
                console.groupCollapsed("[renderer] %c".concat(name, " %c").concat(displayName, " (").concat(maybeID, ") %c").concat(parentFiber ? "".concat(parentDisplayName, " (").concat(maybeParentID, ")") : "", " %c").concat(extraString), "color: red; font-weight: bold;", "color: blue;", "color: purple;", "color: black;");
                console.log(new Error().stack.split("\n").slice(1).join("\n"));
                console.groupEnd();
              }
            };
            var hideElementsWithDisplayNames = /* @__PURE__ */ new Set();
            var hideElementsWithPaths = /* @__PURE__ */ new Set();
            var hideElementsWithTypes = /* @__PURE__ */ new Set();
            var traceUpdatesEnabled = false;
            var traceUpdatesForNodes = /* @__PURE__ */ new Set();
            function applyComponentFilters(componentFilters) {
              hideElementsWithTypes.clear();
              hideElementsWithDisplayNames.clear();
              hideElementsWithPaths.clear();
              componentFilters.forEach(function(componentFilter) {
                if (!componentFilter.isEnabled) {
                  return;
                }
                switch (componentFilter.type) {
                  case types["a"]:
                    if (componentFilter.isValid && componentFilter.value !== "") {
                      hideElementsWithDisplayNames.add(new RegExp(componentFilter.value, "i"));
                    }
                    break;
                  case types["b"]:
                    hideElementsWithTypes.add(componentFilter.value);
                    break;
                  case types["d"]:
                    if (componentFilter.isValid && componentFilter.value !== "") {
                      hideElementsWithPaths.add(new RegExp(componentFilter.value, "i"));
                    }
                    break;
                  case types["c"]:
                    hideElementsWithDisplayNames.add(new RegExp("\\("));
                    break;
                  default:
                    console.warn('Invalid component filter type "'.concat(componentFilter.type, '"'));
                    break;
                }
              });
            }
            if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ != null) {
              applyComponentFilters(window.__REACT_DEVTOOLS_COMPONENT_FILTERS__);
            } else {
              applyComponentFilters(Object(utils["e"])());
            }
            function updateComponentFilters(componentFilters) {
              if (isProfiling) {
                throw Error("Cannot modify filter preferences while profiling");
              }
              hook.getFiberRoots(rendererID).forEach(function(root) {
                currentRootID = getOrGenerateFiberID(root.current);
                pushOperation(constants["n"]);
                flushPendingEvents(root);
                currentRootID = -1;
              });
              applyComponentFilters(componentFilters);
              rootDisplayNameCounter.clear();
              hook.getFiberRoots(rendererID).forEach(function(root) {
                currentRootID = getOrGenerateFiberID(root.current);
                setRootPseudoKey(currentRootID, root.current);
                mountFiberRecursively(root.current, null, false, false);
                flushPendingEvents(root);
                currentRootID = -1;
              });
              reevaluateErrorsAndWarnings();
              flushPendingEvents();
            }
            function shouldFilterFiber(fiber) {
              var _debugSource = fiber._debugSource, tag = fiber.tag, type2 = fiber.type;
              switch (tag) {
                case DehydratedSuspenseComponent:
                  return true;
                case HostPortal:
                case HostText:
                case Fragment:
                case LegacyHiddenComponent:
                case OffscreenComponent:
                  return true;
                case HostRoot:
                  return false;
                default:
                  var typeSymbol = getTypeSymbol(type2);
                  switch (typeSymbol) {
                    case ReactSymbols["a"]:
                    case ReactSymbols["b"]:
                    case ReactSymbols["e"]:
                    case ReactSymbols["s"]:
                    case ReactSymbols["t"]:
                      return true;
                    default:
                      break;
                  }
              }
              var elementType = getElementTypeForFiber(fiber);
              if (hideElementsWithTypes.has(elementType)) {
                return true;
              }
              if (hideElementsWithDisplayNames.size > 0) {
                var displayName = getDisplayNameForFiber(fiber);
                if (displayName != null) {
                  var _iterator3 = _createForOfIteratorHelper(hideElementsWithDisplayNames), _step3;
                  try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                      var displayNameRegExp = _step3.value;
                      if (displayNameRegExp.test(displayName)) {
                        return true;
                      }
                    }
                  } catch (err2) {
                    _iterator3.e(err2);
                  } finally {
                    _iterator3.f();
                  }
                }
              }
              if (_debugSource != null && hideElementsWithPaths.size > 0) {
                var fileName = _debugSource.fileName;
                var _iterator4 = _createForOfIteratorHelper(hideElementsWithPaths), _step4;
                try {
                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                    var pathRegExp = _step4.value;
                    if (pathRegExp.test(fileName)) {
                      return true;
                    }
                  }
                } catch (err2) {
                  _iterator4.e(err2);
                } finally {
                  _iterator4.f();
                }
              }
              return false;
            }
            function getElementTypeForFiber(fiber) {
              var type2 = fiber.type, tag = fiber.tag;
              switch (tag) {
                case ClassComponent:
                case IncompleteClassComponent:
                  return types["e"];
                case FunctionComponent:
                case IndeterminateComponent:
                  return types["h"];
                case ForwardRef:
                  return types["g"];
                case HostRoot:
                  return types["m"];
                case HostComponent:
                  return types["i"];
                case HostPortal:
                case HostText:
                case Fragment:
                  return types["k"];
                case MemoComponent:
                case SimpleMemoComponent:
                  return types["j"];
                case SuspenseComponent:
                  return types["n"];
                case SuspenseListComponent:
                  return types["o"];
                case TracingMarkerComponent:
                  return types["p"];
                default:
                  var typeSymbol = getTypeSymbol(type2);
                  switch (typeSymbol) {
                    case ReactSymbols["a"]:
                    case ReactSymbols["b"]:
                    case ReactSymbols["e"]:
                      return types["k"];
                    case ReactSymbols["n"]:
                    case ReactSymbols["o"]:
                      return types["f"];
                    case ReactSymbols["c"]:
                    case ReactSymbols["d"]:
                      return types["f"];
                    case ReactSymbols["s"]:
                    case ReactSymbols["t"]:
                      return types["k"];
                    case ReactSymbols["l"]:
                    case ReactSymbols["m"]:
                      return types["l"];
                    default:
                      return types["k"];
                  }
              }
            }
            var idToTreeBaseDurationMap = /* @__PURE__ */ new Map();
            var idToRootMap = /* @__PURE__ */ new Map();
            var currentRootID = -1;
            function getOrGenerateFiberID(fiber) {
              var id = null;
              if (fiberToIDMap.has(fiber)) {
                id = fiberToIDMap.get(fiber);
              } else {
                var _alternate = fiber.alternate;
                if (_alternate !== null && fiberToIDMap.has(_alternate)) {
                  id = fiberToIDMap.get(_alternate);
                }
              }
              var didGenerateID = false;
              if (id === null) {
                didGenerateID = true;
                id = Object(utils["i"])();
              }
              var refinedID = id;
              if (!fiberToIDMap.has(fiber)) {
                fiberToIDMap.set(fiber, refinedID);
                idToArbitraryFiberMap.set(refinedID, fiber);
              }
              var alternate = fiber.alternate;
              if (alternate !== null) {
                if (!fiberToIDMap.has(alternate)) {
                  fiberToIDMap.set(alternate, refinedID);
                }
              }
              if (constants["s"]) {
                if (didGenerateID) {
                  debug("getOrGenerateFiberID()", fiber, fiber.return, "Generated a new UID");
                }
              }
              return refinedID;
            }
            function getFiberIDThrows(fiber) {
              var maybeID = getFiberIDUnsafe(fiber);
              if (maybeID !== null) {
                return maybeID;
              }
              throw Error('Could not find ID for Fiber "'.concat(getDisplayNameForFiber(fiber) || "", '"'));
            }
            function getFiberIDUnsafe(fiber) {
              if (fiberToIDMap.has(fiber)) {
                return fiberToIDMap.get(fiber);
              } else {
                var alternate = fiber.alternate;
                if (alternate !== null && fiberToIDMap.has(alternate)) {
                  return fiberToIDMap.get(alternate);
                }
              }
              return null;
            }
            function untrackFiberID(fiber) {
              if (constants["s"]) {
                debug("untrackFiberID()", fiber, fiber.return, "schedule after delay");
              }
              untrackFibersSet.add(fiber);
              var alternate = fiber.alternate;
              if (alternate !== null) {
                untrackFibersSet.add(alternate);
              }
              if (untrackFibersTimeoutID === null) {
                untrackFibersTimeoutID = setTimeout(untrackFibers, 1e3);
              }
            }
            var untrackFibersSet = /* @__PURE__ */ new Set();
            var untrackFibersTimeoutID = null;
            function untrackFibers() {
              if (untrackFibersTimeoutID !== null) {
                clearTimeout(untrackFibersTimeoutID);
                untrackFibersTimeoutID = null;
              }
              untrackFibersSet.forEach(function(fiber) {
                var fiberID = getFiberIDUnsafe(fiber);
                if (fiberID !== null) {
                  idToArbitraryFiberMap.delete(fiberID);
                  clearErrorsForFiberID(fiberID);
                  clearWarningsForFiberID(fiberID);
                }
                fiberToIDMap.delete(fiber);
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  fiberToIDMap.delete(alternate);
                }
                if (forceErrorForFiberIDs.has(fiberID)) {
                  forceErrorForFiberIDs.delete(fiberID);
                  if (forceErrorForFiberIDs.size === 0 && setErrorHandler != null) {
                    setErrorHandler(shouldErrorFiberAlwaysNull);
                  }
                }
              });
              untrackFibersSet.clear();
            }
            function getChangeDescription(prevFiber, nextFiber) {
              switch (getElementTypeForFiber(nextFiber)) {
                case types["e"]:
                case types["h"]:
                case types["j"]:
                case types["g"]:
                  if (prevFiber === null) {
                    return {
                      context: null,
                      didHooksChange: false,
                      isFirstMount: true,
                      props: null,
                      state: null
                    };
                  } else {
                    var data = {
                      context: getContextChangedKeys(nextFiber),
                      didHooksChange: false,
                      isFirstMount: false,
                      props: getChangedKeys(prevFiber.memoizedProps, nextFiber.memoizedProps),
                      state: getChangedKeys(prevFiber.memoizedState, nextFiber.memoizedState)
                    };
                    if (DevToolsFeatureFlags_core_oss["b"]) {
                      var indices = getChangedHooksIndices(prevFiber.memoizedState, nextFiber.memoizedState);
                      data.hooks = indices;
                      data.didHooksChange = indices !== null && indices.length > 0;
                    } else {
                      data.didHooksChange = didHooksChange(prevFiber.memoizedState, nextFiber.memoizedState);
                    }
                    return data;
                  }
                default:
                  return null;
              }
            }
            function updateContextsForFiber(fiber) {
              switch (getElementTypeForFiber(fiber)) {
                case types["e"]:
                case types["g"]:
                case types["h"]:
                case types["j"]:
                  if (idToContextsMap !== null) {
                    var id = getFiberIDThrows(fiber);
                    var contexts = getContextsForFiber(fiber);
                    if (contexts !== null) {
                      idToContextsMap.set(id, contexts);
                    }
                  }
                  break;
                default:
                  break;
              }
            }
            var NO_CONTEXT = {};
            function getContextsForFiber(fiber) {
              var legacyContext = NO_CONTEXT;
              var modernContext = NO_CONTEXT;
              switch (getElementTypeForFiber(fiber)) {
                case types["e"]:
                  var instance = fiber.stateNode;
                  if (instance != null) {
                    if (instance.constructor && instance.constructor.contextType != null) {
                      modernContext = instance.context;
                    } else {
                      legacyContext = instance.context;
                      if (legacyContext && Object.keys(legacyContext).length === 0) {
                        legacyContext = NO_CONTEXT;
                      }
                    }
                  }
                  return [legacyContext, modernContext];
                case types["g"]:
                case types["h"]:
                case types["j"]:
                  var dependencies = fiber.dependencies;
                  if (dependencies && dependencies.firstContext) {
                    modernContext = dependencies.firstContext;
                  }
                  return [legacyContext, modernContext];
                default:
                  return null;
              }
            }
            function crawlToInitializeContextsMap(fiber) {
              var id = getFiberIDUnsafe(fiber);
              if (id !== null) {
                updateContextsForFiber(fiber);
                var current = fiber.child;
                while (current !== null) {
                  crawlToInitializeContextsMap(current);
                  current = current.sibling;
                }
              }
            }
            function getContextChangedKeys(fiber) {
              if (idToContextsMap !== null) {
                var id = getFiberIDThrows(fiber);
                var prevContexts = idToContextsMap.has(id) ? idToContextsMap.get(id) : null;
                var nextContexts = getContextsForFiber(fiber);
                if (prevContexts == null || nextContexts == null) {
                  return null;
                }
                var _prevContexts = renderer_slicedToArray(prevContexts, 2), prevLegacyContext = _prevContexts[0], prevModernContext = _prevContexts[1];
                var _nextContexts = renderer_slicedToArray(nextContexts, 2), nextLegacyContext = _nextContexts[0], nextModernContext = _nextContexts[1];
                switch (getElementTypeForFiber(fiber)) {
                  case types["e"]:
                    if (prevContexts && nextContexts) {
                      if (nextLegacyContext !== NO_CONTEXT) {
                        return getChangedKeys(prevLegacyContext, nextLegacyContext);
                      } else if (nextModernContext !== NO_CONTEXT) {
                        return prevModernContext !== nextModernContext;
                      }
                    }
                    break;
                  case types["g"]:
                  case types["h"]:
                  case types["j"]:
                    if (nextModernContext !== NO_CONTEXT) {
                      var prevContext = prevModernContext;
                      var nextContext = nextModernContext;
                      while (prevContext && nextContext) {
                        if (!shared_objectIs(prevContext.memoizedValue, nextContext.memoizedValue)) {
                          return true;
                        }
                        prevContext = prevContext.next;
                        nextContext = nextContext.next;
                      }
                      return false;
                    }
                    break;
                  default:
                    break;
                }
              }
              return null;
            }
            function isHookThatCanScheduleUpdate(hookObject) {
              var queue = hookObject.queue;
              if (!queue) {
                return false;
              }
              var boundHasOwnProperty = shared_hasOwnProperty.bind(queue);
              var isStateOrReducer = boundHasOwnProperty("pending") && boundHasOwnProperty("dispatch") && typeof queue.dispatch === "function";
              var isSyncExternalStore = boundHasOwnProperty("value") && boundHasOwnProperty("getSnapshot") && typeof queue.getSnapshot === "function";
              return isStateOrReducer || isSyncExternalStore;
            }
            function didStatefulHookChange(prev, next) {
              var prevMemoizedState = prev.memoizedState;
              var nextMemoizedState = next.memoizedState;
              if (isHookThatCanScheduleUpdate(prev)) {
                return prevMemoizedState !== nextMemoizedState;
              }
              return false;
            }
            function didHooksChange(prev, next) {
              if (prev == null || next == null) {
                return false;
              }
              if (next.hasOwnProperty("baseState") && next.hasOwnProperty("memoizedState") && next.hasOwnProperty("next") && next.hasOwnProperty("queue")) {
                while (next !== null) {
                  if (didStatefulHookChange(prev, next)) {
                    return true;
                  } else {
                    next = next.next;
                    prev = prev.next;
                  }
                }
              }
              return false;
            }
            function getChangedHooksIndices(prev, next) {
              if (DevToolsFeatureFlags_core_oss["b"]) {
                if (prev == null || next == null) {
                  return null;
                }
                var indices = [];
                var index = 0;
                if (next.hasOwnProperty("baseState") && next.hasOwnProperty("memoizedState") && next.hasOwnProperty("next") && next.hasOwnProperty("queue")) {
                  while (next !== null) {
                    if (didStatefulHookChange(prev, next)) {
                      indices.push(index);
                    }
                    next = next.next;
                    prev = prev.next;
                    index++;
                  }
                }
                return indices;
              }
              return null;
            }
            function getChangedKeys(prev, next) {
              if (prev == null || next == null) {
                return null;
              }
              if (next.hasOwnProperty("baseState") && next.hasOwnProperty("memoizedState") && next.hasOwnProperty("next") && next.hasOwnProperty("queue")) {
                return null;
              }
              var keys = new Set([].concat(_toConsumableArray(Object.keys(prev)), _toConsumableArray(Object.keys(next))));
              var changedKeys = [];
              var _iterator5 = _createForOfIteratorHelper(keys), _step5;
              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                  var key2 = _step5.value;
                  if (prev[key2] !== next[key2]) {
                    changedKeys.push(key2);
                  }
                }
              } catch (err2) {
                _iterator5.e(err2);
              } finally {
                _iterator5.f();
              }
              return changedKeys;
            }
            function didFiberRender(prevFiber, nextFiber) {
              switch (nextFiber.tag) {
                case ClassComponent:
                case FunctionComponent:
                case ContextConsumer:
                case MemoComponent:
                case SimpleMemoComponent:
                case ForwardRef:
                  return (getFiberFlags(nextFiber) & PerformedWork) === PerformedWork;
                default:
                  return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref;
              }
            }
            var pendingOperations = [];
            var pendingRealUnmountedIDs = [];
            var pendingSimulatedUnmountedIDs = [];
            var pendingOperationsQueue = [];
            var pendingStringTable = /* @__PURE__ */ new Map();
            var pendingStringTableLength = 0;
            var pendingUnmountedRootID = null;
            function pushOperation(op) {
              if (false) {
              }
              pendingOperations.push(op);
            }
            function shouldBailoutWithPendingOperations() {
              if (isProfiling) {
                if (currentCommitProfilingMetadata != null && currentCommitProfilingMetadata.durations.length > 0) {
                  return false;
                }
              }
              return pendingOperations.length === 0 && pendingRealUnmountedIDs.length === 0 && pendingSimulatedUnmountedIDs.length === 0 && pendingUnmountedRootID === null;
            }
            function flushOrQueueOperations(operations) {
              if (shouldBailoutWithPendingOperations()) {
                return;
              }
              if (pendingOperationsQueue !== null) {
                pendingOperationsQueue.push(operations);
              } else {
                hook.emit("operations", operations);
              }
            }
            var flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;
            function clearPendingErrorsAndWarningsAfterDelay() {
              if (flushPendingErrorsAndWarningsAfterDelayTimeoutID !== null) {
                clearTimeout(flushPendingErrorsAndWarningsAfterDelayTimeoutID);
                flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;
              }
            }
            function flushPendingErrorsAndWarningsAfterDelay() {
              clearPendingErrorsAndWarningsAfterDelay();
              flushPendingErrorsAndWarningsAfterDelayTimeoutID = setTimeout(function() {
                flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;
                if (pendingOperations.length > 0) {
                  return;
                }
                recordPendingErrorsAndWarnings();
                if (shouldBailoutWithPendingOperations()) {
                  return;
                }
                var operations = new Array(3 + pendingOperations.length);
                operations[0] = rendererID;
                operations[1] = currentRootID;
                operations[2] = 0;
                for (var j2 = 0; j2 < pendingOperations.length; j2++) {
                  operations[3 + j2] = pendingOperations[j2];
                }
                flushOrQueueOperations(operations);
                pendingOperations.length = 0;
              }, 1e3);
            }
            function reevaluateErrorsAndWarnings() {
              fibersWithChangedErrorOrWarningCounts.clear();
              fiberIDToErrorsMap.forEach(function(countMap, fiberID) {
                var fiber = idToArbitraryFiberMap.get(fiberID);
                if (fiber != null) {
                  fibersWithChangedErrorOrWarningCounts.add(fiber);
                }
              });
              fiberIDToWarningsMap.forEach(function(countMap, fiberID) {
                var fiber = idToArbitraryFiberMap.get(fiberID);
                if (fiber != null) {
                  fibersWithChangedErrorOrWarningCounts.add(fiber);
                }
              });
              recordPendingErrorsAndWarnings();
            }
            function mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToMessageCountMap, fiberIDToMessageCountMap) {
              var newCount = 0;
              var messageCountMap = fiberIDToMessageCountMap.get(fiberID);
              var pendingMessageCountMap = pendingFiberToMessageCountMap.get(fiber);
              if (pendingMessageCountMap != null) {
                if (messageCountMap == null) {
                  messageCountMap = pendingMessageCountMap;
                  fiberIDToMessageCountMap.set(fiberID, pendingMessageCountMap);
                } else {
                  var refinedMessageCountMap = messageCountMap;
                  pendingMessageCountMap.forEach(function(pendingCount, message) {
                    var previousCount = refinedMessageCountMap.get(message) || 0;
                    refinedMessageCountMap.set(message, previousCount + pendingCount);
                  });
                }
              }
              if (!shouldFilterFiber(fiber)) {
                if (messageCountMap != null) {
                  messageCountMap.forEach(function(count) {
                    newCount += count;
                  });
                }
              }
              pendingFiberToMessageCountMap.delete(fiber);
              return newCount;
            }
            function recordPendingErrorsAndWarnings() {
              clearPendingErrorsAndWarningsAfterDelay();
              fibersWithChangedErrorOrWarningCounts.forEach(function(fiber) {
                var fiberID = getFiberIDUnsafe(fiber);
                if (fiberID === null) {
                } else {
                  var errorCount = mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToErrorsMap, fiberIDToErrorsMap);
                  var warningCount = mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToWarningsMap, fiberIDToWarningsMap);
                  pushOperation(constants["q"]);
                  pushOperation(fiberID);
                  pushOperation(errorCount);
                  pushOperation(warningCount);
                }
                pendingFiberToErrorsMap.delete(fiber);
                pendingFiberToWarningsMap.delete(fiber);
              });
              fibersWithChangedErrorOrWarningCounts.clear();
            }
            function flushPendingEvents(root) {
              recordPendingErrorsAndWarnings();
              if (shouldBailoutWithPendingOperations()) {
                return;
              }
              var numUnmountIDs = pendingRealUnmountedIDs.length + pendingSimulatedUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);
              var operations = new Array(
                2 + 1 + pendingStringTableLength + (numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + pendingOperations.length
              );
              var i3 = 0;
              operations[i3++] = rendererID;
              operations[i3++] = currentRootID;
              operations[i3++] = pendingStringTableLength;
              pendingStringTable.forEach(function(entry, stringKey) {
                var encodedString = entry.encodedString;
                var length = encodedString.length;
                operations[i3++] = length;
                for (var j3 = 0; j3 < length; j3++) {
                  operations[i3 + j3] = encodedString[j3];
                }
                i3 += length;
              });
              if (numUnmountIDs > 0) {
                operations[i3++] = constants["m"];
                operations[i3++] = numUnmountIDs;
                for (var j2 = pendingRealUnmountedIDs.length - 1; j2 >= 0; j2--) {
                  operations[i3++] = pendingRealUnmountedIDs[j2];
                }
                for (var _j = 0; _j < pendingSimulatedUnmountedIDs.length; _j++) {
                  operations[i3 + _j] = pendingSimulatedUnmountedIDs[_j];
                }
                i3 += pendingSimulatedUnmountedIDs.length;
                if (pendingUnmountedRootID !== null) {
                  operations[i3] = pendingUnmountedRootID;
                  i3++;
                }
              }
              for (var _j2 = 0; _j2 < pendingOperations.length; _j2++) {
                operations[i3 + _j2] = pendingOperations[_j2];
              }
              i3 += pendingOperations.length;
              flushOrQueueOperations(operations);
              pendingOperations.length = 0;
              pendingRealUnmountedIDs.length = 0;
              pendingSimulatedUnmountedIDs.length = 0;
              pendingUnmountedRootID = null;
              pendingStringTable.clear();
              pendingStringTableLength = 0;
            }
            function getStringID(string) {
              if (string === null) {
                return 0;
              }
              var existingEntry = pendingStringTable.get(string);
              if (existingEntry !== void 0) {
                return existingEntry.id;
              }
              var id = pendingStringTable.size + 1;
              var encodedString = Object(utils["m"])(string);
              pendingStringTable.set(string, {
                encodedString,
                id
              });
              pendingStringTableLength += encodedString.length + 1;
              return id;
            }
            function recordMount(fiber, parentFiber) {
              var isRoot = fiber.tag === HostRoot;
              var id = getOrGenerateFiberID(fiber);
              if (constants["s"]) {
                debug("recordMount()", fiber, parentFiber);
              }
              var hasOwnerMetadata = fiber.hasOwnProperty("_debugOwner");
              var isProfilingSupported = fiber.hasOwnProperty("treeBaseDuration");
              var profilingFlags = 0;
              if (isProfilingSupported) {
                profilingFlags = constants["g"];
                if (typeof injectProfilingHooks === "function") {
                  profilingFlags |= constants["h"];
                }
              }
              if (isRoot) {
                pushOperation(constants["l"]);
                pushOperation(id);
                pushOperation(types["m"]);
                pushOperation((fiber.mode & StrictModeBits) !== 0 ? 1 : 0);
                pushOperation(profilingFlags);
                pushOperation(StrictModeBits !== 0 ? 1 : 0);
                pushOperation(hasOwnerMetadata ? 1 : 0);
                if (isProfiling) {
                  if (displayNamesByRootID !== null) {
                    displayNamesByRootID.set(id, getDisplayNameForRoot(fiber));
                  }
                }
              } else {
                var key2 = fiber.key;
                var displayName = getDisplayNameForFiber(fiber);
                var elementType = getElementTypeForFiber(fiber);
                var _debugOwner = fiber._debugOwner;
                var ownerID = _debugOwner != null ? getOrGenerateFiberID(_debugOwner) : 0;
                var parentID = parentFiber ? getFiberIDThrows(parentFiber) : 0;
                var displayNameStringID = getStringID(displayName);
                var keyString = key2 === null ? null : String(key2);
                var keyStringID = getStringID(keyString);
                pushOperation(constants["l"]);
                pushOperation(id);
                pushOperation(elementType);
                pushOperation(parentID);
                pushOperation(ownerID);
                pushOperation(displayNameStringID);
                pushOperation(keyStringID);
                if ((fiber.mode & StrictModeBits) !== 0 && (parentFiber.mode & StrictModeBits) === 0) {
                  pushOperation(constants["p"]);
                  pushOperation(id);
                  pushOperation(types["q"]);
                }
              }
              if (isProfilingSupported) {
                idToRootMap.set(id, currentRootID);
                recordProfilingDurations(fiber);
              }
            }
            function recordUnmount(fiber, isSimulated) {
              if (constants["s"]) {
                debug("recordUnmount()", fiber, null, isSimulated ? "unmount is simulated" : "");
              }
              if (trackedPathMatchFiber !== null) {
                if (fiber === trackedPathMatchFiber || fiber === trackedPathMatchFiber.alternate) {
                  setTrackedPath(null);
                }
              }
              var unsafeID = getFiberIDUnsafe(fiber);
              if (unsafeID === null) {
                return;
              }
              var id = unsafeID;
              var isRoot = fiber.tag === HostRoot;
              if (isRoot) {
                pendingUnmountedRootID = id;
              } else if (!shouldFilterFiber(fiber)) {
                if (isSimulated) {
                  pendingSimulatedUnmountedIDs.push(id);
                } else {
                  pendingRealUnmountedIDs.push(id);
                }
              }
              if (!fiber._debugNeedsRemount) {
                untrackFiberID(fiber);
                var isProfilingSupported = fiber.hasOwnProperty("treeBaseDuration");
                if (isProfilingSupported) {
                  idToRootMap.delete(id);
                  idToTreeBaseDurationMap.delete(id);
                }
              }
            }
            function mountFiberRecursively(firstChild, parentFiber, traverseSiblings, traceNearestHostComponentUpdate) {
              var fiber = firstChild;
              while (fiber !== null) {
                getOrGenerateFiberID(fiber);
                if (constants["s"]) {
                  debug("mountFiberRecursively()", fiber, parentFiber);
                }
                var mightSiblingsBeOnTrackedPath = updateTrackedPathStateBeforeMount(fiber);
                var shouldIncludeInTree = !shouldFilterFiber(fiber);
                if (shouldIncludeInTree) {
                  recordMount(fiber, parentFiber);
                }
                if (traceUpdatesEnabled) {
                  if (traceNearestHostComponentUpdate) {
                    var elementType = getElementTypeForFiber(fiber);
                    if (elementType === types["i"]) {
                      traceUpdatesForNodes.add(fiber.stateNode);
                      traceNearestHostComponentUpdate = false;
                    }
                  }
                }
                var isSuspense = fiber.tag === ReactTypeOfWork.SuspenseComponent;
                if (isSuspense) {
                  var isTimedOut = fiber.memoizedState !== null;
                  if (isTimedOut) {
                    var primaryChildFragment = fiber.child;
                    var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
                    var fallbackChild = fallbackChildFragment ? fallbackChildFragment.child : null;
                    if (fallbackChild !== null) {
                      mountFiberRecursively(fallbackChild, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
                    }
                  } else {
                    var primaryChild = null;
                    var areSuspenseChildrenConditionallyWrapped = OffscreenComponent === -1;
                    if (areSuspenseChildrenConditionallyWrapped) {
                      primaryChild = fiber.child;
                    } else if (fiber.child !== null) {
                      primaryChild = fiber.child.child;
                    }
                    if (primaryChild !== null) {
                      mountFiberRecursively(primaryChild, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
                    }
                  }
                } else {
                  if (fiber.child !== null) {
                    mountFiberRecursively(fiber.child, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
                  }
                }
                updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath);
                fiber = traverseSiblings ? fiber.sibling : null;
              }
            }
            function unmountFiberChildrenRecursively(fiber) {
              if (constants["s"]) {
                debug("unmountFiberChildrenRecursively()", fiber);
              }
              var isTimedOutSuspense = fiber.tag === ReactTypeOfWork.SuspenseComponent && fiber.memoizedState !== null;
              var child = fiber.child;
              if (isTimedOutSuspense) {
                var primaryChildFragment = fiber.child;
                var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
                child = fallbackChildFragment ? fallbackChildFragment.child : null;
              }
              while (child !== null) {
                if (child.return !== null) {
                  unmountFiberChildrenRecursively(child);
                  recordUnmount(child, true);
                }
                child = child.sibling;
              }
            }
            function recordProfilingDurations(fiber) {
              var id = getFiberIDThrows(fiber);
              var actualDuration = fiber.actualDuration, treeBaseDuration = fiber.treeBaseDuration;
              idToTreeBaseDurationMap.set(id, treeBaseDuration || 0);
              if (isProfiling) {
                var alternate = fiber.alternate;
                if (alternate == null || treeBaseDuration !== alternate.treeBaseDuration) {
                  var convertedTreeBaseDuration = Math.floor((treeBaseDuration || 0) * 1e3);
                  pushOperation(constants["r"]);
                  pushOperation(id);
                  pushOperation(convertedTreeBaseDuration);
                }
                if (alternate == null || didFiberRender(alternate, fiber)) {
                  if (actualDuration != null) {
                    var selfDuration = actualDuration;
                    var child = fiber.child;
                    while (child !== null) {
                      selfDuration -= child.actualDuration || 0;
                      child = child.sibling;
                    }
                    var metadata = currentCommitProfilingMetadata;
                    metadata.durations.push(id, actualDuration, selfDuration);
                    metadata.maxActualDuration = Math.max(metadata.maxActualDuration, actualDuration);
                    if (recordChangeDescriptions) {
                      var changeDescription = getChangeDescription(alternate, fiber);
                      if (changeDescription !== null) {
                        if (metadata.changeDescriptions !== null) {
                          metadata.changeDescriptions.set(id, changeDescription);
                        }
                      }
                      updateContextsForFiber(fiber);
                    }
                  }
                }
              }
            }
            function recordResetChildren(fiber, childSet) {
              if (constants["s"]) {
                debug("recordResetChildren()", childSet, fiber);
              }
              var nextChildren = [];
              var child = childSet;
              while (child !== null) {
                findReorderedChildrenRecursively(child, nextChildren);
                child = child.sibling;
              }
              var numChildren = nextChildren.length;
              if (numChildren < 2) {
                return;
              }
              pushOperation(constants["o"]);
              pushOperation(getFiberIDThrows(fiber));
              pushOperation(numChildren);
              for (var i3 = 0; i3 < nextChildren.length; i3++) {
                pushOperation(nextChildren[i3]);
              }
            }
            function findReorderedChildrenRecursively(fiber, nextChildren) {
              if (!shouldFilterFiber(fiber)) {
                nextChildren.push(getFiberIDThrows(fiber));
              } else {
                var child = fiber.child;
                var isTimedOutSuspense = fiber.tag === SuspenseComponent && fiber.memoizedState !== null;
                if (isTimedOutSuspense) {
                  var primaryChildFragment = fiber.child;
                  var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
                  var fallbackChild = fallbackChildFragment ? fallbackChildFragment.child : null;
                  if (fallbackChild !== null) {
                    child = fallbackChild;
                  }
                }
                while (child !== null) {
                  findReorderedChildrenRecursively(child, nextChildren);
                  child = child.sibling;
                }
              }
            }
            function updateFiberRecursively(nextFiber, prevFiber, parentFiber, traceNearestHostComponentUpdate) {
              var id = getOrGenerateFiberID(nextFiber);
              if (constants["s"]) {
                debug("updateFiberRecursively()", nextFiber, parentFiber);
              }
              if (traceUpdatesEnabled) {
                var elementType = getElementTypeForFiber(nextFiber);
                if (traceNearestHostComponentUpdate) {
                  if (elementType === types["i"]) {
                    traceUpdatesForNodes.add(nextFiber.stateNode);
                    traceNearestHostComponentUpdate = false;
                  }
                } else {
                  if (elementType === types["h"] || elementType === types["e"] || elementType === types["f"] || elementType === types["j"] || elementType === types["g"]) {
                    traceNearestHostComponentUpdate = didFiberRender(prevFiber, nextFiber);
                  }
                }
              }
              if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id && didFiberRender(prevFiber, nextFiber)) {
                hasElementUpdatedSinceLastInspected = true;
              }
              var shouldIncludeInTree = !shouldFilterFiber(nextFiber);
              var isSuspense = nextFiber.tag === SuspenseComponent;
              var shouldResetChildren = false;
              var prevDidTimeout = isSuspense && prevFiber.memoizedState !== null;
              var nextDidTimeOut = isSuspense && nextFiber.memoizedState !== null;
              if (prevDidTimeout && nextDidTimeOut) {
                var nextFiberChild = nextFiber.child;
                var nextFallbackChildSet = nextFiberChild ? nextFiberChild.sibling : null;
                var prevFiberChild = prevFiber.child;
                var prevFallbackChildSet = prevFiberChild ? prevFiberChild.sibling : null;
                if (nextFallbackChildSet != null && prevFallbackChildSet != null && updateFiberRecursively(nextFallbackChildSet, prevFallbackChildSet, nextFiber, traceNearestHostComponentUpdate)) {
                  shouldResetChildren = true;
                }
              } else if (prevDidTimeout && !nextDidTimeOut) {
                var nextPrimaryChildSet = nextFiber.child;
                if (nextPrimaryChildSet !== null) {
                  mountFiberRecursively(nextPrimaryChildSet, shouldIncludeInTree ? nextFiber : parentFiber, true, traceNearestHostComponentUpdate);
                }
                shouldResetChildren = true;
              } else if (!prevDidTimeout && nextDidTimeOut) {
                unmountFiberChildrenRecursively(prevFiber);
                var _nextFiberChild = nextFiber.child;
                var _nextFallbackChildSet = _nextFiberChild ? _nextFiberChild.sibling : null;
                if (_nextFallbackChildSet != null) {
                  mountFiberRecursively(_nextFallbackChildSet, shouldIncludeInTree ? nextFiber : parentFiber, true, traceNearestHostComponentUpdate);
                  shouldResetChildren = true;
                }
              } else {
                if (nextFiber.child !== prevFiber.child) {
                  var nextChild = nextFiber.child;
                  var prevChildAtSameIndex = prevFiber.child;
                  while (nextChild) {
                    if (nextChild.alternate) {
                      var prevChild = nextChild.alternate;
                      if (updateFiberRecursively(nextChild, prevChild, shouldIncludeInTree ? nextFiber : parentFiber, traceNearestHostComponentUpdate)) {
                        shouldResetChildren = true;
                      }
                      if (prevChild !== prevChildAtSameIndex) {
                        shouldResetChildren = true;
                      }
                    } else {
                      mountFiberRecursively(nextChild, shouldIncludeInTree ? nextFiber : parentFiber, false, traceNearestHostComponentUpdate);
                      shouldResetChildren = true;
                    }
                    nextChild = nextChild.sibling;
                    if (!shouldResetChildren && prevChildAtSameIndex !== null) {
                      prevChildAtSameIndex = prevChildAtSameIndex.sibling;
                    }
                  }
                  if (prevChildAtSameIndex !== null) {
                    shouldResetChildren = true;
                  }
                } else {
                  if (traceUpdatesEnabled) {
                    if (traceNearestHostComponentUpdate) {
                      var hostFibers = findAllCurrentHostFibers(getFiberIDThrows(nextFiber));
                      hostFibers.forEach(function(hostFiber) {
                        traceUpdatesForNodes.add(hostFiber.stateNode);
                      });
                    }
                  }
                }
              }
              if (shouldIncludeInTree) {
                var isProfilingSupported = nextFiber.hasOwnProperty("treeBaseDuration");
                if (isProfilingSupported) {
                  recordProfilingDurations(nextFiber);
                }
              }
              if (shouldResetChildren) {
                if (shouldIncludeInTree) {
                  var nextChildSet = nextFiber.child;
                  if (nextDidTimeOut) {
                    var _nextFiberChild2 = nextFiber.child;
                    nextChildSet = _nextFiberChild2 ? _nextFiberChild2.sibling : null;
                  }
                  if (nextChildSet != null) {
                    recordResetChildren(nextFiber, nextChildSet);
                  }
                  return false;
                } else {
                  return true;
                }
              } else {
                return false;
              }
            }
            function cleanup() {
            }
            function rootSupportsProfiling(root) {
              if (root.memoizedInteractions != null) {
                return true;
              } else if (root.current != null && root.current.hasOwnProperty("treeBaseDuration")) {
                return true;
              } else {
                return false;
              }
            }
            function flushInitialOperations() {
              var localPendingOperationsQueue = pendingOperationsQueue;
              pendingOperationsQueue = null;
              if (localPendingOperationsQueue !== null && localPendingOperationsQueue.length > 0) {
                localPendingOperationsQueue.forEach(function(operations) {
                  hook.emit("operations", operations);
                });
              } else {
                if (trackedPath !== null) {
                  mightBeOnTrackedPath = true;
                }
                hook.getFiberRoots(rendererID).forEach(function(root) {
                  currentRootID = getOrGenerateFiberID(root.current);
                  setRootPseudoKey(currentRootID, root.current);
                  if (isProfiling && rootSupportsProfiling(root)) {
                    currentCommitProfilingMetadata = {
                      changeDescriptions: recordChangeDescriptions ? /* @__PURE__ */ new Map() : null,
                      durations: [],
                      commitTime: renderer_getCurrentTime() - profilingStartTime,
                      maxActualDuration: 0,
                      priorityLevel: null,
                      updaters: getUpdatersList(root),
                      effectDuration: null,
                      passiveEffectDuration: null
                    };
                  }
                  mountFiberRecursively(root.current, null, false, false);
                  flushPendingEvents(root);
                  currentRootID = -1;
                });
              }
            }
            function getUpdatersList(root) {
              return root.memoizedUpdaters != null ? Array.from(root.memoizedUpdaters).filter(function(fiber) {
                return getFiberIDUnsafe(fiber) !== null;
              }).map(fiberToSerializedElement) : null;
            }
            function handleCommitFiberUnmount(fiber) {
              if (!untrackFibersSet.has(fiber)) {
                recordUnmount(fiber, false);
              }
            }
            function handlePostCommitFiberRoot(root) {
              if (isProfiling && rootSupportsProfiling(root)) {
                if (currentCommitProfilingMetadata !== null) {
                  var _getEffectDurations = Object(backend_utils["h"])(root), effectDuration = _getEffectDurations.effectDuration, passiveEffectDuration = _getEffectDurations.passiveEffectDuration;
                  currentCommitProfilingMetadata.effectDuration = effectDuration;
                  currentCommitProfilingMetadata.passiveEffectDuration = passiveEffectDuration;
                }
              }
            }
            function handleCommitFiberRoot(root, priorityLevel) {
              var current = root.current;
              var alternate = current.alternate;
              untrackFibers();
              currentRootID = getOrGenerateFiberID(current);
              if (trackedPath !== null) {
                mightBeOnTrackedPath = true;
              }
              if (traceUpdatesEnabled) {
                traceUpdatesForNodes.clear();
              }
              var isProfilingSupported = rootSupportsProfiling(root);
              if (isProfiling && isProfilingSupported) {
                currentCommitProfilingMetadata = {
                  changeDescriptions: recordChangeDescriptions ? /* @__PURE__ */ new Map() : null,
                  durations: [],
                  commitTime: renderer_getCurrentTime() - profilingStartTime,
                  maxActualDuration: 0,
                  priorityLevel: priorityLevel == null ? null : formatPriorityLevel(priorityLevel),
                  updaters: getUpdatersList(root),
                  effectDuration: null,
                  passiveEffectDuration: null
                };
              }
              if (alternate) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null && alternate.memoizedState.isDehydrated !== true;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null && current.memoizedState.isDehydrated !== true;
                if (!wasMounted && isMounted) {
                  setRootPseudoKey(currentRootID, current);
                  mountFiberRecursively(current, null, false, false);
                } else if (wasMounted && isMounted) {
                  updateFiberRecursively(current, alternate, null, false);
                } else if (wasMounted && !isMounted) {
                  removeRootPseudoKey(currentRootID);
                  recordUnmount(current, false);
                }
              } else {
                setRootPseudoKey(currentRootID, current);
                mountFiberRecursively(current, null, false, false);
              }
              if (isProfiling && isProfilingSupported) {
                if (!shouldBailoutWithPendingOperations()) {
                  var commitProfilingMetadata = rootToCommitProfilingMetadataMap.get(currentRootID);
                  if (commitProfilingMetadata != null) {
                    commitProfilingMetadata.push(currentCommitProfilingMetadata);
                  } else {
                    rootToCommitProfilingMetadataMap.set(currentRootID, [currentCommitProfilingMetadata]);
                  }
                }
              }
              flushPendingEvents(root);
              if (traceUpdatesEnabled) {
                hook.emit("traceUpdates", traceUpdatesForNodes);
              }
              currentRootID = -1;
            }
            function findAllCurrentHostFibers(id) {
              var fibers = [];
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (!fiber) {
                return fibers;
              }
              var node = fiber;
              while (true) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  fibers.push(node);
                } else if (node.child) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return fibers;
                }
                while (!node.sibling) {
                  if (!node.return || node.return === fiber) {
                    return fibers;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
              return fibers;
            }
            function findNativeNodesForFiberID(id) {
              try {
                var _fiber3 = findCurrentFiberUsingSlowPathById(id);
                if (_fiber3 === null) {
                  return null;
                }
                var isTimedOutSuspense = _fiber3.tag === SuspenseComponent && _fiber3.memoizedState !== null;
                if (isTimedOutSuspense) {
                  var maybeFallbackFiber = _fiber3.child && _fiber3.child.sibling;
                  if (maybeFallbackFiber != null) {
                    _fiber3 = maybeFallbackFiber;
                  }
                }
                var hostFibers = findAllCurrentHostFibers(id);
                return hostFibers.map(function(hostFiber) {
                  return hostFiber.stateNode;
                }).filter(Boolean);
              } catch (err2) {
                return null;
              }
            }
            function getDisplayNameForFiberID(id) {
              var fiber = idToArbitraryFiberMap.get(id);
              return fiber != null ? getDisplayNameForFiber(fiber) : null;
            }
            function getFiberForNative(hostInstance) {
              return renderer.findFiberByHostInstance(hostInstance);
            }
            function getFiberIDForNative(hostInstance) {
              var findNearestUnfilteredAncestor = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              var fiber = renderer.findFiberByHostInstance(hostInstance);
              if (fiber != null) {
                if (findNearestUnfilteredAncestor) {
                  while (fiber !== null && shouldFilterFiber(fiber)) {
                    fiber = fiber.return;
                  }
                }
                return getFiberIDThrows(fiber);
              }
              return null;
            }
            function assertIsMounted(fiber) {
              if (getNearestMountedFiber(fiber) !== fiber) {
                throw new Error("Unable to find node on an unmounted component.");
              }
            }
            function getNearestMountedFiber(fiber) {
              var node = fiber;
              var nearestMounted = fiber;
              if (!fiber.alternate) {
                var nextNode = node;
                do {
                  node = nextNode;
                  if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                    nearestMounted = node.return;
                  }
                  nextNode = node.return;
                } while (nextNode);
              } else {
                while (node.return) {
                  node = node.return;
                }
              }
              if (node.tag === HostRoot) {
                return nearestMounted;
              }
              return null;
            }
            function findCurrentFiberUsingSlowPathById(id) {
              var fiber = idToArbitraryFiberMap.get(id);
              if (fiber == null) {
                console.warn('Could not find Fiber with id "'.concat(id, '"'));
                return null;
              }
              var alternate = fiber.alternate;
              if (!alternate) {
                var nearestMounted = getNearestMountedFiber(fiber);
                if (nearestMounted === null) {
                  throw new Error("Unable to find node on an unmounted component.");
                }
                if (nearestMounted !== fiber) {
                  return null;
                }
                return fiber;
              }
              var a2 = fiber;
              var b2 = alternate;
              while (true) {
                var parentA = a2.return;
                if (parentA === null) {
                  break;
                }
                var parentB = parentA.alternate;
                if (parentB === null) {
                  var nextParent = parentA.return;
                  if (nextParent !== null) {
                    a2 = b2 = nextParent;
                    continue;
                  }
                  break;
                }
                if (parentA.child === parentB.child) {
                  var child = parentA.child;
                  while (child) {
                    if (child === a2) {
                      assertIsMounted(parentA);
                      return fiber;
                    }
                    if (child === b2) {
                      assertIsMounted(parentA);
                      return alternate;
                    }
                    child = child.sibling;
                  }
                  throw new Error("Unable to find node on an unmounted component.");
                }
                if (a2.return !== b2.return) {
                  a2 = parentA;
                  b2 = parentB;
                } else {
                  var didFindChild = false;
                  var _child = parentA.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentA;
                      b2 = parentB;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentA;
                      a2 = parentB;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    _child = parentB.child;
                    while (_child) {
                      if (_child === a2) {
                        didFindChild = true;
                        a2 = parentB;
                        b2 = parentA;
                        break;
                      }
                      if (_child === b2) {
                        didFindChild = true;
                        b2 = parentB;
                        a2 = parentA;
                        break;
                      }
                      _child = _child.sibling;
                    }
                    if (!didFindChild) {
                      throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
                if (a2.alternate !== b2) {
                  throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (a2.tag !== HostRoot) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.stateNode.current === a2) {
                return fiber;
              }
              return alternate;
            }
            function prepareViewAttributeSource(id, path) {
              if (isMostRecentlyInspectedElement(id)) {
                window.$attribute = Object(utils["h"])(mostRecentlyInspectedElement, path);
              }
            }
            function prepareViewElementSource(id) {
              var fiber = idToArbitraryFiberMap.get(id);
              if (fiber == null) {
                console.warn('Could not find Fiber with id "'.concat(id, '"'));
                return;
              }
              var elementType = fiber.elementType, tag = fiber.tag, type2 = fiber.type;
              switch (tag) {
                case ClassComponent:
                case IncompleteClassComponent:
                case IndeterminateComponent:
                case FunctionComponent:
                  global2.$type = type2;
                  break;
                case ForwardRef:
                  global2.$type = type2.render;
                  break;
                case MemoComponent:
                case SimpleMemoComponent:
                  global2.$type = elementType != null && elementType.type != null ? elementType.type : type2;
                  break;
                default:
                  global2.$type = null;
                  break;
              }
            }
            function fiberToSerializedElement(fiber) {
              return {
                displayName: getDisplayNameForFiber(fiber) || "Anonymous",
                id: getFiberIDThrows(fiber),
                key: fiber.key,
                type: getElementTypeForFiber(fiber)
              };
            }
            function getOwnersList(id) {
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (fiber == null) {
                return null;
              }
              var _debugOwner = fiber._debugOwner;
              var owners = [fiberToSerializedElement(fiber)];
              if (_debugOwner) {
                var owner = _debugOwner;
                while (owner !== null) {
                  owners.unshift(fiberToSerializedElement(owner));
                  owner = owner._debugOwner || null;
                }
              }
              return owners;
            }
            function getInstanceAndStyle(id) {
              var instance = null;
              var style = null;
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (fiber !== null) {
                instance = fiber.stateNode;
                if (fiber.memoizedProps !== null) {
                  style = fiber.memoizedProps.style;
                }
              }
              return {
                instance,
                style
              };
            }
            function isErrorBoundary(fiber) {
              var tag = fiber.tag, type2 = fiber.type;
              switch (tag) {
                case ClassComponent:
                case IncompleteClassComponent:
                  var instance = fiber.stateNode;
                  return typeof type2.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function";
                default:
                  return false;
              }
            }
            function getNearestErrorBoundaryID(fiber) {
              var parent = fiber.return;
              while (parent !== null) {
                if (isErrorBoundary(parent)) {
                  return getFiberIDUnsafe(parent);
                }
                parent = parent.return;
              }
              return null;
            }
            function inspectElementRaw(id) {
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (fiber == null) {
                return null;
              }
              var _debugOwner = fiber._debugOwner, _debugSource = fiber._debugSource, stateNode = fiber.stateNode, key2 = fiber.key, memoizedProps = fiber.memoizedProps, memoizedState = fiber.memoizedState, dependencies = fiber.dependencies, tag = fiber.tag, type2 = fiber.type;
              var elementType = getElementTypeForFiber(fiber);
              var usesHooks = (tag === FunctionComponent || tag === SimpleMemoComponent || tag === ForwardRef) && (!!memoizedState || !!dependencies);
              var showState = !usesHooks && tag !== CacheComponent;
              var typeSymbol = getTypeSymbol(type2);
              var canViewSource = false;
              var context = null;
              if (tag === ClassComponent || tag === FunctionComponent || tag === IncompleteClassComponent || tag === IndeterminateComponent || tag === MemoComponent || tag === ForwardRef || tag === SimpleMemoComponent) {
                canViewSource = true;
                if (stateNode && stateNode.context != null) {
                  var shouldHideContext = elementType === types["e"] && !(type2.contextTypes || type2.contextType);
                  if (!shouldHideContext) {
                    context = stateNode.context;
                  }
                }
              } else if (typeSymbol === ReactSymbols["c"] || typeSymbol === ReactSymbols["d"]) {
                var consumerResolvedContext = type2._context || type2;
                context = consumerResolvedContext._currentValue || null;
                var _current = fiber.return;
                while (_current !== null) {
                  var currentType = _current.type;
                  var currentTypeSymbol = getTypeSymbol(currentType);
                  if (currentTypeSymbol === ReactSymbols["n"] || currentTypeSymbol === ReactSymbols["o"]) {
                    var providerResolvedContext = currentType._context || currentType.context;
                    if (providerResolvedContext === consumerResolvedContext) {
                      context = _current.memoizedProps.value;
                      break;
                    }
                  }
                  _current = _current.return;
                }
              }
              var hasLegacyContext = false;
              if (context !== null) {
                hasLegacyContext = !!type2.contextTypes;
                context = {
                  value: context
                };
              }
              var owners = null;
              if (_debugOwner) {
                owners = [];
                var owner = _debugOwner;
                while (owner !== null) {
                  owners.push(fiberToSerializedElement(owner));
                  owner = owner._debugOwner || null;
                }
              }
              var isTimedOutSuspense = tag === SuspenseComponent && memoizedState !== null;
              var hooks = null;
              if (usesHooks) {
                var originalConsoleMethods = {};
                for (var method in console) {
                  try {
                    originalConsoleMethods[method] = console[method];
                    console[method] = function() {
                    };
                  } catch (error) {
                  }
                }
                try {
                  hooks = Object(react_debug_tools["inspectHooksOfFiber"])(
                    fiber,
                    renderer.currentDispatcherRef,
                    true
                  );
                } finally {
                  for (var _method in originalConsoleMethods) {
                    try {
                      console[_method] = originalConsoleMethods[_method];
                    } catch (error) {
                    }
                  }
                }
              }
              var rootType = null;
              var current = fiber;
              while (current.return !== null) {
                current = current.return;
              }
              var fiberRoot = current.stateNode;
              if (fiberRoot != null && fiberRoot._debugRootType !== null) {
                rootType = fiberRoot._debugRootType;
              }
              var errors = fiberIDToErrorsMap.get(id) || /* @__PURE__ */ new Map();
              var warnings = fiberIDToWarningsMap.get(id) || /* @__PURE__ */ new Map();
              var isErrored = (fiber.flags & DidCapture) !== NoFlags || forceErrorForFiberIDs.get(id) === true;
              var targetErrorBoundaryID;
              if (isErrorBoundary(fiber)) {
                targetErrorBoundaryID = isErrored ? id : getNearestErrorBoundaryID(fiber);
              } else {
                targetErrorBoundaryID = getNearestErrorBoundaryID(fiber);
              }
              var plugins = {
                stylex: null
              };
              if (DevToolsFeatureFlags_core_oss["c"]) {
                if (memoizedProps.hasOwnProperty("xstyle")) {
                  plugins.stylex = getStyleXData(memoizedProps.xstyle);
                }
              }
              return {
                id,
                canEditHooks: typeof overrideHookState === "function",
                canEditFunctionProps: typeof overrideProps === "function",
                canEditHooksAndDeletePaths: typeof overrideHookStateDeletePath === "function",
                canEditHooksAndRenamePaths: typeof overrideHookStateRenamePath === "function",
                canEditFunctionPropsDeletePaths: typeof overridePropsDeletePath === "function",
                canEditFunctionPropsRenamePaths: typeof overridePropsRenamePath === "function",
                canToggleError: supportsTogglingError && targetErrorBoundaryID != null,
                isErrored,
                targetErrorBoundaryID,
                canToggleSuspense: supportsTogglingSuspense && (!isTimedOutSuspense || forceFallbackForSuspenseIDs.has(id)),
                canViewSource,
                hasLegacyContext,
                key: key2 != null ? key2 : null,
                displayName: getDisplayNameForFiber(fiber),
                type: elementType,
                context,
                hooks,
                props: memoizedProps,
                state: showState ? memoizedState : null,
                errors: Array.from(errors.entries()),
                warnings: Array.from(warnings.entries()),
                owners,
                source: _debugSource || null,
                rootType,
                rendererPackageName: renderer.rendererPackageName,
                rendererVersion: renderer.version,
                plugins
              };
            }
            var mostRecentlyInspectedElement = null;
            var hasElementUpdatedSinceLastInspected = false;
            var currentlyInspectedPaths = {};
            function isMostRecentlyInspectedElement(id) {
              return mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id;
            }
            function isMostRecentlyInspectedElementCurrent(id) {
              return isMostRecentlyInspectedElement(id) && !hasElementUpdatedSinceLastInspected;
            }
            function mergeInspectedPaths(path) {
              var current = currentlyInspectedPaths;
              path.forEach(function(key2) {
                if (!current[key2]) {
                  current[key2] = {};
                }
                current = current[key2];
              });
            }
            function createIsPathAllowed(key2, secondaryCategory) {
              return function isPathAllowed(path) {
                switch (secondaryCategory) {
                  case "hooks":
                    if (path.length === 1) {
                      return true;
                    }
                    if (path[path.length - 2] === "hookSource" && path[path.length - 1] === "fileName") {
                      return true;
                    }
                    if (path[path.length - 1] === "subHooks" || path[path.length - 2] === "subHooks") {
                      return true;
                    }
                    break;
                  default:
                    break;
                }
                var current = key2 === null ? currentlyInspectedPaths : currentlyInspectedPaths[key2];
                if (!current) {
                  return false;
                }
                for (var i3 = 0; i3 < path.length; i3++) {
                  current = current[path[i3]];
                  if (!current) {
                    return false;
                  }
                }
                return true;
              };
            }
            function updateSelectedElement(inspectedElement) {
              var hooks = inspectedElement.hooks, id = inspectedElement.id, props = inspectedElement.props;
              var fiber = idToArbitraryFiberMap.get(id);
              if (fiber == null) {
                console.warn('Could not find Fiber with id "'.concat(id, '"'));
                return;
              }
              var elementType = fiber.elementType, stateNode = fiber.stateNode, tag = fiber.tag, type2 = fiber.type;
              switch (tag) {
                case ClassComponent:
                case IncompleteClassComponent:
                case IndeterminateComponent:
                  global2.$r = stateNode;
                  break;
                case FunctionComponent:
                  global2.$r = {
                    hooks,
                    props,
                    type: type2
                  };
                  break;
                case ForwardRef:
                  global2.$r = {
                    hooks,
                    props,
                    type: type2.render
                  };
                  break;
                case MemoComponent:
                case SimpleMemoComponent:
                  global2.$r = {
                    hooks,
                    props,
                    type: elementType != null && elementType.type != null ? elementType.type : type2
                  };
                  break;
                default:
                  global2.$r = null;
                  break;
              }
            }
            function storeAsGlobal(id, path, count) {
              if (isMostRecentlyInspectedElement(id)) {
                var value = Object(utils["h"])(mostRecentlyInspectedElement, path);
                var key2 = "$reactTemp".concat(count);
                window[key2] = value;
                console.log(key2);
                console.log(value);
              }
            }
            function copyElementPath(id, path) {
              if (isMostRecentlyInspectedElement(id)) {
                Object(backend_utils["b"])(Object(utils["h"])(mostRecentlyInspectedElement, path));
              }
            }
            function inspectElement(requestID, id, path, forceFullData) {
              if (path !== null) {
                mergeInspectedPaths(path);
              }
              if (isMostRecentlyInspectedElement(id) && !forceFullData) {
                if (!hasElementUpdatedSinceLastInspected) {
                  if (path !== null) {
                    var secondaryCategory = null;
                    if (path[0] === "hooks") {
                      secondaryCategory = "hooks";
                    }
                    return {
                      id,
                      responseID: requestID,
                      type: "hydrated-path",
                      path,
                      value: Object(backend_utils["a"])(Object(utils["h"])(mostRecentlyInspectedElement, path), createIsPathAllowed(null, secondaryCategory), path)
                    };
                  } else {
                    return {
                      id,
                      responseID: requestID,
                      type: "no-change"
                    };
                  }
                }
              } else {
                currentlyInspectedPaths = {};
              }
              hasElementUpdatedSinceLastInspected = false;
              try {
                mostRecentlyInspectedElement = inspectElementRaw(id);
              } catch (error) {
                if (error.name === "ReactDebugToolsRenderError") {
                  var message = "Error rendering inspected element.";
                  var stack;
                  console.error(message + "\n\n", error);
                  if (error.cause != null) {
                    var _fiber4 = findCurrentFiberUsingSlowPathById(id);
                    var componentName = _fiber4 != null ? getDisplayNameForFiber(_fiber4) : null;
                    console.error("React DevTools encountered an error while trying to inspect hooks. This is most likely caused by an error in current inspected component" + (componentName != null ? ': "'.concat(componentName, '".') : ".") + "\nThe error thrown in the component is: \n\n", error.cause);
                    if (error.cause instanceof Error) {
                      message = error.cause.message || message;
                      stack = error.cause.stack;
                    }
                  }
                  return {
                    type: "error",
                    errorType: "user",
                    id,
                    responseID: requestID,
                    message,
                    stack
                  };
                }
                if (error.name === "ReactDebugToolsUnsupportedHookError") {
                  return {
                    type: "error",
                    errorType: "unknown-hook",
                    id,
                    responseID: requestID,
                    message: "Unsupported hook in the react-debug-tools package: " + error.message
                  };
                }
                console.error("Error inspecting element.\n\n", error);
                return {
                  type: "error",
                  errorType: "uncaught",
                  id,
                  responseID: requestID,
                  message: error.message,
                  stack: error.stack
                };
              }
              if (mostRecentlyInspectedElement === null) {
                return {
                  id,
                  responseID: requestID,
                  type: "not-found"
                };
              }
              updateSelectedElement(mostRecentlyInspectedElement);
              var cleanedInspectedElement = _objectSpread({}, mostRecentlyInspectedElement);
              cleanedInspectedElement.context = Object(backend_utils["a"])(cleanedInspectedElement.context, createIsPathAllowed("context", null));
              cleanedInspectedElement.hooks = Object(backend_utils["a"])(cleanedInspectedElement.hooks, createIsPathAllowed("hooks", "hooks"));
              cleanedInspectedElement.props = Object(backend_utils["a"])(cleanedInspectedElement.props, createIsPathAllowed("props", null));
              cleanedInspectedElement.state = Object(backend_utils["a"])(cleanedInspectedElement.state, createIsPathAllowed("state", null));
              return {
                id,
                responseID: requestID,
                type: "full-data",
                value: cleanedInspectedElement
              };
            }
            function logElementToConsole(id) {
              var result = isMostRecentlyInspectedElementCurrent(id) ? mostRecentlyInspectedElement : inspectElementRaw(id);
              if (result === null) {
                console.warn('Could not find Fiber with id "'.concat(id, '"'));
                return;
              }
              var supportsGroup = typeof console.groupCollapsed === "function";
              if (supportsGroup) {
                console.groupCollapsed(
                  "[Click to expand] %c<".concat(result.displayName || "Component", " />"),
                  "color: var(--dom-tag-name-color); font-weight: normal;"
                );
              }
              if (result.props !== null) {
                console.log("Props:", result.props);
              }
              if (result.state !== null) {
                console.log("State:", result.state);
              }
              if (result.hooks !== null) {
                console.log("Hooks:", result.hooks);
              }
              var nativeNodes = findNativeNodesForFiberID(id);
              if (nativeNodes !== null) {
                console.log("Nodes:", nativeNodes);
              }
              if (result.source !== null) {
                console.log("Location:", result.source);
              }
              if (window.chrome || /firefox/i.test(navigator.userAgent)) {
                console.log("Right-click any value to save it as a global variable for further inspection.");
              }
              if (supportsGroup) {
                console.groupEnd();
              }
            }
            function deletePath(type2, id, hookID, path) {
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (fiber !== null) {
                var instance = fiber.stateNode;
                switch (type2) {
                  case "context":
                    path = path.slice(1);
                    switch (fiber.tag) {
                      case ClassComponent:
                        if (path.length === 0) {
                        } else {
                          Object(utils["a"])(instance.context, path);
                        }
                        instance.forceUpdate();
                        break;
                      case FunctionComponent:
                        break;
                    }
                    break;
                  case "hooks":
                    if (typeof overrideHookStateDeletePath === "function") {
                      overrideHookStateDeletePath(fiber, hookID, path);
                    }
                    break;
                  case "props":
                    if (instance === null) {
                      if (typeof overridePropsDeletePath === "function") {
                        overridePropsDeletePath(fiber, path);
                      }
                    } else {
                      fiber.pendingProps = Object(backend_utils["c"])(instance.props, path);
                      instance.forceUpdate();
                    }
                    break;
                  case "state":
                    Object(utils["a"])(instance.state, path);
                    instance.forceUpdate();
                    break;
                }
              }
            }
            function renamePath(type2, id, hookID, oldPath, newPath) {
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (fiber !== null) {
                var instance = fiber.stateNode;
                switch (type2) {
                  case "context":
                    oldPath = oldPath.slice(1);
                    newPath = newPath.slice(1);
                    switch (fiber.tag) {
                      case ClassComponent:
                        if (oldPath.length === 0) {
                        } else {
                          Object(utils["k"])(instance.context, oldPath, newPath);
                        }
                        instance.forceUpdate();
                        break;
                      case FunctionComponent:
                        break;
                    }
                    break;
                  case "hooks":
                    if (typeof overrideHookStateRenamePath === "function") {
                      overrideHookStateRenamePath(fiber, hookID, oldPath, newPath);
                    }
                    break;
                  case "props":
                    if (instance === null) {
                      if (typeof overridePropsRenamePath === "function") {
                        overridePropsRenamePath(fiber, oldPath, newPath);
                      }
                    } else {
                      fiber.pendingProps = Object(backend_utils["d"])(instance.props, oldPath, newPath);
                      instance.forceUpdate();
                    }
                    break;
                  case "state":
                    Object(utils["k"])(instance.state, oldPath, newPath);
                    instance.forceUpdate();
                    break;
                }
              }
            }
            function overrideValueAtPath(type2, id, hookID, path, value) {
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (fiber !== null) {
                var instance = fiber.stateNode;
                switch (type2) {
                  case "context":
                    path = path.slice(1);
                    switch (fiber.tag) {
                      case ClassComponent:
                        if (path.length === 0) {
                          instance.context = value;
                        } else {
                          Object(utils["l"])(instance.context, path, value);
                        }
                        instance.forceUpdate();
                        break;
                      case FunctionComponent:
                        break;
                    }
                    break;
                  case "hooks":
                    if (typeof overrideHookState === "function") {
                      overrideHookState(fiber, hookID, path, value);
                    }
                    break;
                  case "props":
                    switch (fiber.tag) {
                      case ClassComponent:
                        fiber.pendingProps = Object(backend_utils["e"])(instance.props, path, value);
                        instance.forceUpdate();
                        break;
                      default:
                        if (typeof overrideProps === "function") {
                          overrideProps(fiber, path, value);
                        }
                        break;
                    }
                    break;
                  case "state":
                    switch (fiber.tag) {
                      case ClassComponent:
                        Object(utils["l"])(instance.state, path, value);
                        instance.forceUpdate();
                        break;
                    }
                    break;
                }
              }
            }
            var currentCommitProfilingMetadata = null;
            var displayNamesByRootID = null;
            var idToContextsMap = null;
            var initialTreeBaseDurationsMap = null;
            var initialIDToRootMap = null;
            var isProfiling = false;
            var profilingStartTime = 0;
            var recordChangeDescriptions = false;
            var rootToCommitProfilingMetadataMap = null;
            function getProfilingData() {
              var dataForRoots = [];
              if (rootToCommitProfilingMetadataMap === null) {
                throw Error("getProfilingData() called before any profiling data was recorded");
              }
              rootToCommitProfilingMetadataMap.forEach(function(commitProfilingMetadata, rootID) {
                var commitData = [];
                var initialTreeBaseDurations = [];
                var displayName = displayNamesByRootID !== null && displayNamesByRootID.get(rootID) || "Unknown";
                if (initialTreeBaseDurationsMap != null) {
                  initialTreeBaseDurationsMap.forEach(function(treeBaseDuration, id) {
                    if (initialIDToRootMap != null && initialIDToRootMap.get(id) === rootID) {
                      initialTreeBaseDurations.push([id, treeBaseDuration]);
                    }
                  });
                }
                commitProfilingMetadata.forEach(function(commitProfilingData, commitIndex) {
                  var changeDescriptions = commitProfilingData.changeDescriptions, durations = commitProfilingData.durations, effectDuration = commitProfilingData.effectDuration, maxActualDuration = commitProfilingData.maxActualDuration, passiveEffectDuration = commitProfilingData.passiveEffectDuration, priorityLevel = commitProfilingData.priorityLevel, commitTime = commitProfilingData.commitTime, updaters = commitProfilingData.updaters;
                  var fiberActualDurations = [];
                  var fiberSelfDurations = [];
                  for (var i3 = 0; i3 < durations.length; i3 += 3) {
                    var fiberID = durations[i3];
                    fiberActualDurations.push([fiberID, durations[i3 + 1]]);
                    fiberSelfDurations.push([fiberID, durations[i3 + 2]]);
                  }
                  commitData.push({
                    changeDescriptions: changeDescriptions !== null ? Array.from(changeDescriptions.entries()) : null,
                    duration: maxActualDuration,
                    effectDuration,
                    fiberActualDurations,
                    fiberSelfDurations,
                    passiveEffectDuration,
                    priorityLevel,
                    timestamp: commitTime,
                    updaters
                  });
                });
                dataForRoots.push({
                  commitData,
                  displayName,
                  initialTreeBaseDurations,
                  rootID
                });
              });
              var timelineData = null;
              if (typeof getTimelineData === "function") {
                var currentTimelineData = getTimelineData();
                if (currentTimelineData) {
                  var batchUIDToMeasuresMap = currentTimelineData.batchUIDToMeasuresMap, internalModuleSourceToRanges = currentTimelineData.internalModuleSourceToRanges, laneToLabelMap = currentTimelineData.laneToLabelMap, laneToReactMeasureMap = currentTimelineData.laneToReactMeasureMap, rest = _objectWithoutProperties(currentTimelineData, ["batchUIDToMeasuresMap", "internalModuleSourceToRanges", "laneToLabelMap", "laneToReactMeasureMap"]);
                  timelineData = _objectSpread(_objectSpread({}, rest), {}, {
                    batchUIDToMeasuresKeyValueArray: Array.from(batchUIDToMeasuresMap.entries()),
                    internalModuleSourceToRanges: Array.from(internalModuleSourceToRanges.entries()),
                    laneToLabelKeyValueArray: Array.from(laneToLabelMap.entries()),
                    laneToReactMeasureKeyValueArray: Array.from(laneToReactMeasureMap.entries())
                  });
                }
              }
              return {
                dataForRoots,
                rendererID,
                timelineData
              };
            }
            function startProfiling(shouldRecordChangeDescriptions) {
              if (isProfiling) {
                return;
              }
              recordChangeDescriptions = shouldRecordChangeDescriptions;
              displayNamesByRootID = /* @__PURE__ */ new Map();
              initialTreeBaseDurationsMap = new Map(idToTreeBaseDurationMap);
              initialIDToRootMap = new Map(idToRootMap);
              idToContextsMap = /* @__PURE__ */ new Map();
              hook.getFiberRoots(rendererID).forEach(function(root) {
                var rootID = getFiberIDThrows(root.current);
                displayNamesByRootID.set(rootID, getDisplayNameForRoot(root.current));
                if (shouldRecordChangeDescriptions) {
                  crawlToInitializeContextsMap(root.current);
                }
              });
              isProfiling = true;
              profilingStartTime = renderer_getCurrentTime();
              rootToCommitProfilingMetadataMap = /* @__PURE__ */ new Map();
              if (toggleProfilingStatus !== null) {
                toggleProfilingStatus(true);
              }
            }
            function stopProfiling() {
              isProfiling = false;
              recordChangeDescriptions = false;
              if (toggleProfilingStatus !== null) {
                toggleProfilingStatus(false);
              }
            }
            if (Object(storage["c"])(constants["k"]) === "true") {
              startProfiling(Object(storage["c"])(constants["j"]) === "true");
            }
            function shouldErrorFiberAlwaysNull() {
              return null;
            }
            var forceErrorForFiberIDs = /* @__PURE__ */ new Map();
            function shouldErrorFiberAccordingToMap(fiber) {
              if (typeof setErrorHandler !== "function") {
                throw new Error("Expected overrideError() to not get called for earlier React versions.");
              }
              var id = getFiberIDUnsafe(fiber);
              if (id === null) {
                return null;
              }
              var status = null;
              if (forceErrorForFiberIDs.has(id)) {
                status = forceErrorForFiberIDs.get(id);
                if (status === false) {
                  forceErrorForFiberIDs.delete(id);
                  if (forceErrorForFiberIDs.size === 0) {
                    setErrorHandler(shouldErrorFiberAlwaysNull);
                  }
                }
              }
              return status;
            }
            function overrideError(id, forceError) {
              if (typeof setErrorHandler !== "function" || typeof scheduleUpdate !== "function") {
                throw new Error("Expected overrideError() to not get called for earlier React versions.");
              }
              forceErrorForFiberIDs.set(id, forceError);
              if (forceErrorForFiberIDs.size === 1) {
                setErrorHandler(shouldErrorFiberAccordingToMap);
              }
              var fiber = idToArbitraryFiberMap.get(id);
              if (fiber != null) {
                scheduleUpdate(fiber);
              }
            }
            function shouldSuspendFiberAlwaysFalse() {
              return false;
            }
            var forceFallbackForSuspenseIDs = /* @__PURE__ */ new Set();
            function shouldSuspendFiberAccordingToSet(fiber) {
              var maybeID = getFiberIDUnsafe(fiber);
              return maybeID !== null && forceFallbackForSuspenseIDs.has(maybeID);
            }
            function overrideSuspense(id, forceFallback) {
              if (typeof setSuspenseHandler !== "function" || typeof scheduleUpdate !== "function") {
                throw new Error("Expected overrideSuspense() to not get called for earlier React versions.");
              }
              if (forceFallback) {
                forceFallbackForSuspenseIDs.add(id);
                if (forceFallbackForSuspenseIDs.size === 1) {
                  setSuspenseHandler(shouldSuspendFiberAccordingToSet);
                }
              } else {
                forceFallbackForSuspenseIDs.delete(id);
                if (forceFallbackForSuspenseIDs.size === 0) {
                  setSuspenseHandler(shouldSuspendFiberAlwaysFalse);
                }
              }
              var fiber = idToArbitraryFiberMap.get(id);
              if (fiber != null) {
                scheduleUpdate(fiber);
              }
            }
            var trackedPath = null;
            var trackedPathMatchFiber = null;
            var trackedPathMatchDepth = -1;
            var mightBeOnTrackedPath = false;
            function setTrackedPath(path) {
              if (path === null) {
                trackedPathMatchFiber = null;
                trackedPathMatchDepth = -1;
                mightBeOnTrackedPath = false;
              }
              trackedPath = path;
            }
            function updateTrackedPathStateBeforeMount(fiber) {
              if (trackedPath === null || !mightBeOnTrackedPath) {
                return false;
              }
              var returnFiber = fiber.return;
              var returnAlternate = returnFiber !== null ? returnFiber.alternate : null;
              if (trackedPathMatchFiber === returnFiber || trackedPathMatchFiber === returnAlternate && returnAlternate !== null) {
                var actualFrame = getPathFrame(fiber);
                var expectedFrame = trackedPath[trackedPathMatchDepth + 1];
                if (expectedFrame === void 0) {
                  throw new Error("Expected to see a frame at the next depth.");
                }
                if (actualFrame.index === expectedFrame.index && actualFrame.key === expectedFrame.key && actualFrame.displayName === expectedFrame.displayName) {
                  trackedPathMatchFiber = fiber;
                  trackedPathMatchDepth++;
                  if (trackedPathMatchDepth === trackedPath.length - 1) {
                    mightBeOnTrackedPath = false;
                  } else {
                    mightBeOnTrackedPath = true;
                  }
                  return false;
                }
              }
              mightBeOnTrackedPath = false;
              return true;
            }
            function updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath) {
              mightBeOnTrackedPath = mightSiblingsBeOnTrackedPath;
            }
            var rootPseudoKeys = /* @__PURE__ */ new Map();
            var rootDisplayNameCounter = /* @__PURE__ */ new Map();
            function setRootPseudoKey(id, fiber) {
              var name = getDisplayNameForRoot(fiber);
              var counter = rootDisplayNameCounter.get(name) || 0;
              rootDisplayNameCounter.set(name, counter + 1);
              var pseudoKey = "".concat(name, ":").concat(counter);
              rootPseudoKeys.set(id, pseudoKey);
            }
            function removeRootPseudoKey(id) {
              var pseudoKey = rootPseudoKeys.get(id);
              if (pseudoKey === void 0) {
                throw new Error("Expected root pseudo key to be known.");
              }
              var name = pseudoKey.substring(0, pseudoKey.lastIndexOf(":"));
              var counter = rootDisplayNameCounter.get(name);
              if (counter === void 0) {
                throw new Error("Expected counter to be known.");
              }
              if (counter > 1) {
                rootDisplayNameCounter.set(name, counter - 1);
              } else {
                rootDisplayNameCounter.delete(name);
              }
              rootPseudoKeys.delete(id);
            }
            function getDisplayNameForRoot(fiber) {
              var preferredDisplayName = null;
              var fallbackDisplayName = null;
              var child = fiber.child;
              for (var i3 = 0; i3 < 3; i3++) {
                if (child === null) {
                  break;
                }
                var displayName = getDisplayNameForFiber(child);
                if (displayName !== null) {
                  if (typeof child.type === "function") {
                    preferredDisplayName = displayName;
                  } else if (fallbackDisplayName === null) {
                    fallbackDisplayName = displayName;
                  }
                }
                if (preferredDisplayName !== null) {
                  break;
                }
                child = child.child;
              }
              return preferredDisplayName || fallbackDisplayName || "Anonymous";
            }
            function getPathFrame(fiber) {
              var key2 = fiber.key;
              var displayName = getDisplayNameForFiber(fiber);
              var index = fiber.index;
              switch (fiber.tag) {
                case HostRoot:
                  var id = getFiberIDThrows(fiber);
                  var pseudoKey = rootPseudoKeys.get(id);
                  if (pseudoKey === void 0) {
                    throw new Error("Expected mounted root to have known pseudo key.");
                  }
                  displayName = pseudoKey;
                  break;
                case HostComponent:
                  displayName = fiber.type;
                  break;
                default:
                  break;
              }
              return {
                displayName,
                key: key2,
                index
              };
            }
            function getPathForElement(id) {
              var fiber = idToArbitraryFiberMap.get(id);
              if (fiber == null) {
                return null;
              }
              var keyPath = [];
              while (fiber !== null) {
                keyPath.push(getPathFrame(fiber));
                fiber = fiber.return;
              }
              keyPath.reverse();
              return keyPath;
            }
            function getBestMatchForTrackedPath() {
              if (trackedPath === null) {
                return null;
              }
              if (trackedPathMatchFiber === null) {
                return null;
              }
              var fiber = trackedPathMatchFiber;
              while (fiber !== null && shouldFilterFiber(fiber)) {
                fiber = fiber.return;
              }
              if (fiber === null) {
                return null;
              }
              return {
                id: getFiberIDThrows(fiber),
                isFullMatch: trackedPathMatchDepth === trackedPath.length - 1
              };
            }
            var formatPriorityLevel = function formatPriorityLevel2(priorityLevel) {
              if (priorityLevel == null) {
                return "Unknown";
              }
              switch (priorityLevel) {
                case ImmediatePriority:
                  return "Immediate";
                case UserBlockingPriority:
                  return "User-Blocking";
                case NormalPriority:
                  return "Normal";
                case LowPriority:
                  return "Low";
                case IdlePriority:
                  return "Idle";
                case NoPriority:
                default:
                  return "Unknown";
              }
            };
            function setTraceUpdatesEnabled(isEnabled) {
              traceUpdatesEnabled = isEnabled;
            }
            return {
              cleanup,
              clearErrorsAndWarnings,
              clearErrorsForFiberID,
              clearWarningsForFiberID,
              copyElementPath,
              deletePath,
              findNativeNodesForFiberID,
              flushInitialOperations,
              getBestMatchForTrackedPath,
              getDisplayNameForFiberID,
              getFiberForNative,
              getFiberIDForNative,
              getInstanceAndStyle,
              getOwnersList,
              getPathForElement,
              getProfilingData,
              handleCommitFiberRoot,
              handleCommitFiberUnmount,
              handlePostCommitFiberRoot,
              inspectElement,
              logElementToConsole,
              patchConsoleForStrictMode: backend_console["b"],
              prepareViewAttributeSource,
              prepareViewElementSource,
              overrideError,
              overrideSuspense,
              overrideValueAtPath,
              renamePath,
              renderer,
              setTraceUpdatesEnabled,
              setTrackedPath,
              startProfiling,
              stopProfiling,
              storeAsGlobal,
              unpatchConsoleForStrictMode: backend_console["d"],
              updateComponentFilters
            };
          }
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return describeFiber;
          });
          __webpack_require__.d(__webpack_exports__, "b", function() {
            return getStackByFiberInDevAndProd;
          });
          var ReactSymbols = __webpack_require__(3);
          function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys.push.apply(keys, symbols);
            }
            return keys;
          }
          function _objectSpread(target) {
            for (var i3 = 1; i3 < arguments.length; i3++) {
              var source = arguments[i3] != null ? arguments[i3] : {};
              if (i3 % 2) {
                ownKeys(Object(source), true).forEach(function(key2) {
                  _defineProperty(target, key2, source[key2]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                ownKeys(Object(source)).forEach(function(key2) {
                  Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
                });
              }
            }
            return target;
          }
          function _defineProperty(obj, key2, value) {
            if (key2 in obj) {
              Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key2] = value;
            }
            return obj;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
          function reenableLogs() {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _objectSpread(_objectSpread({}, props), {}, {
                  value: prevLog
                }),
                info: _objectSpread(_objectSpread({}, props), {}, {
                  value: prevInfo
                }),
                warn: _objectSpread(_objectSpread({}, props), {}, {
                  value: prevWarn
                }),
                error: _objectSpread(_objectSpread({}, props), {}, {
                  value: prevError
                }),
                group: _objectSpread(_objectSpread({}, props), {}, {
                  value: prevGroup
                }),
                groupCollapsed: _objectSpread(_objectSpread({}, props), {}, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _objectSpread(_objectSpread({}, props), {}, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var prefix2;
          function describeBuiltInComponentFrame(name, ownerFn) {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
          var reentry = false;
          var componentFrameCache;
          if (false) {
            var PossiblyWeakMap;
          }
          function describeNativeComponentFrame(fn2, construct, currentDispatcherRef) {
            if (!fn2 || reentry) {
              return "";
            }
            if (false) {
              var frame;
            }
            var control;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            reentry = true;
            var previousDispatcher = currentDispatcherRef.current;
            currentDispatcherRef.current = null;
            disableLogs();
            try {
              if (construct) {
                var Fake = function Fake2() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function set() {
                    throw Error();
                  }
                });
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (false) {
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              Error.prepareStackTrace = previousPrepareStackTrace;
              currentDispatcherRef.current = previousDispatcher;
              reenableLogs();
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            if (false) {
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, ownerFn, currentDispatcherRef) {
            return describeNativeComponentFrame(ctor, true, currentDispatcherRef);
          }
          function describeFunctionComponentFrame(fn2, ownerFn, currentDispatcherRef) {
            return describeNativeComponentFrame(fn2, false, currentDispatcherRef);
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type2, ownerFn, currentDispatcherRef) {
            if (true) {
              return "";
            }
            if (type2 == null) {
              return "";
            }
            if (typeof type2 === "function") {
              return describeNativeComponentFrame(type2, shouldConstruct(type2), currentDispatcherRef);
            }
            if (typeof type2 === "string") {
              return describeBuiltInComponentFrame(type2, ownerFn);
            }
            switch (type2) {
              case ReactSymbols["w"]:
              case ReactSymbols["x"]:
                return describeBuiltInComponentFrame("Suspense", ownerFn);
              case ReactSymbols["u"]:
              case ReactSymbols["v"]:
                return describeBuiltInComponentFrame("SuspenseList", ownerFn);
            }
            if (_typeof(type2) === "object") {
              switch (type2.$$typeof) {
                case ReactSymbols["f"]:
                case ReactSymbols["g"]:
                  return describeFunctionComponentFrame(type2.render, ownerFn, currentDispatcherRef);
                case ReactSymbols["j"]:
                case ReactSymbols["k"]:
                  return describeUnknownElementTypeFrameInDEV(type2.type, ownerFn, currentDispatcherRef);
                case ReactSymbols["h"]:
                case ReactSymbols["i"]: {
                  var lazyComponent = type2;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn, currentDispatcherRef);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(workTagMap, workInProgress, currentDispatcherRef) {
            var HostComponent = workTagMap.HostComponent, LazyComponent = workTagMap.LazyComponent, SuspenseComponent = workTagMap.SuspenseComponent, SuspenseListComponent = workTagMap.SuspenseListComponent, FunctionComponent = workTagMap.FunctionComponent, IndeterminateComponent = workTagMap.IndeterminateComponent, SimpleMemoComponent = workTagMap.SimpleMemoComponent, ForwardRef = workTagMap.ForwardRef, ClassComponent = workTagMap.ClassComponent;
            var owner = false ? void 0 : null;
            switch (workInProgress.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(workInProgress.type, owner);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy", owner);
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense", owner);
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList", owner);
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(workInProgress.type, owner, currentDispatcherRef);
              case ForwardRef:
                return describeFunctionComponentFrame(workInProgress.type.render, owner, currentDispatcherRef);
              case ClassComponent:
                return describeClassComponentFrame(workInProgress.type, owner, currentDispatcherRef);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workTagMap, workInProgress, currentDispatcherRef) {
            try {
              var info = "";
              var node = workInProgress;
              do {
                info += describeFiber(workTagMap, node, currentDispatcherRef);
                node = node.return;
              } while (node);
              return info;
            } catch (x2) {
              return "\nError generating stack: " + x2.message + "\n" + x2.stack;
            }
          }
        },
        function(module3, exports3) {
          var process2 = module3.exports = {};
          var cachedSetTimeout;
          var cachedClearTimeout;
          function defaultSetTimout() {
            throw new Error("setTimeout has not been defined");
          }
          function defaultClearTimeout() {
            throw new Error("clearTimeout has not been defined");
          }
          (function() {
            try {
              if (typeof setTimeout === "function") {
                cachedSetTimeout = setTimeout;
              } else {
                cachedSetTimeout = defaultSetTimout;
              }
            } catch (e) {
              cachedSetTimeout = defaultSetTimout;
            }
            try {
              if (typeof clearTimeout === "function") {
                cachedClearTimeout = clearTimeout;
              } else {
                cachedClearTimeout = defaultClearTimeout;
              }
            } catch (e) {
              cachedClearTimeout = defaultClearTimeout;
            }
          })();
          function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
              return setTimeout(fun, 0);
            }
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
              cachedSetTimeout = setTimeout;
              return setTimeout(fun, 0);
            }
            try {
              return cachedSetTimeout(fun, 0);
            } catch (e) {
              try {
                return cachedSetTimeout.call(null, fun, 0);
              } catch (e2) {
                return cachedSetTimeout.call(this, fun, 0);
              }
            }
          }
          function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
              return clearTimeout(marker);
            }
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
              cachedClearTimeout = clearTimeout;
              return clearTimeout(marker);
            }
            try {
              return cachedClearTimeout(marker);
            } catch (e) {
              try {
                return cachedClearTimeout.call(null, marker);
              } catch (e2) {
                return cachedClearTimeout.call(this, marker);
              }
            }
          }
          var queue = [];
          var draining = false;
          var currentQueue;
          var queueIndex = -1;
          function cleanUpNextTick() {
            if (!draining || !currentQueue) {
              return;
            }
            draining = false;
            if (currentQueue.length) {
              queue = currentQueue.concat(queue);
            } else {
              queueIndex = -1;
            }
            if (queue.length) {
              drainQueue();
            }
          }
          function drainQueue() {
            if (draining) {
              return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;
            var len = queue.length;
            while (len) {
              currentQueue = queue;
              queue = [];
              while (++queueIndex < len) {
                if (currentQueue) {
                  currentQueue[queueIndex].run();
                }
              }
              queueIndex = -1;
              len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
          }
          process2.nextTick = function(fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
              for (var i3 = 1; i3 < arguments.length; i3++) {
                args[i3 - 1] = arguments[i3];
              }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
              runTimeout(drainQueue);
            }
          };
          function Item(fun, array) {
            this.fun = fun;
            this.array = array;
          }
          Item.prototype.run = function() {
            this.fun.apply(null, this.array);
          };
          process2.title = "browser";
          process2.browser = true;
          process2.env = {};
          process2.argv = [];
          process2.version = "";
          process2.versions = {};
          function noop() {
          }
          process2.on = noop;
          process2.addListener = noop;
          process2.once = noop;
          process2.off = noop;
          process2.removeListener = noop;
          process2.removeAllListeners = noop;
          process2.emit = noop;
          process2.prependListener = noop;
          process2.prependOnceListener = noop;
          process2.listeners = function(name) {
            return [];
          };
          process2.binding = function(name) {
            throw new Error("process.binding is not supported");
          };
          process2.cwd = function() {
            return "/";
          };
          process2.chdir = function(dir) {
            throw new Error("process.chdir is not supported");
          };
          process2.umask = function() {
            return 0;
          };
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return REACT_SUSPENSE_LIST_TYPE;
          });
          __webpack_require__.d(__webpack_exports__, "b", function() {
            return REACT_TRACING_MARKER_TYPE;
          });
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || _typeof(maybeIterable) !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
        },
        function(module3, exports3, __webpack_require__) {
          (function(setImmediate) {
            function _typeof(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof2(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof = function _typeof2(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof(obj);
            }
            (function(name, definition) {
              if (true) {
                module3.exports = definition();
              } else {
              }
            })("clipboard", function() {
              if (typeof document === "undefined" || !document.addEventListener) {
                return null;
              }
              var clipboard = {};
              clipboard.copy = function() {
                var _intercept = false;
                var _data = null;
                var _bogusSelection = false;
                function cleanup() {
                  _intercept = false;
                  _data = null;
                  if (_bogusSelection) {
                    window.getSelection().removeAllRanges();
                  }
                  _bogusSelection = false;
                }
                document.addEventListener("copy", function(e) {
                  if (_intercept) {
                    for (var key2 in _data) {
                      e.clipboardData.setData(key2, _data[key2]);
                    }
                    e.preventDefault();
                  }
                });
                function bogusSelect() {
                  var sel = document.getSelection();
                  if (!document.queryCommandEnabled("copy") && sel.isCollapsed) {
                    var range = document.createRange();
                    range.selectNodeContents(document.body);
                    sel.removeAllRanges();
                    sel.addRange(range);
                    _bogusSelection = true;
                  }
                }
                ;
                return function(data) {
                  return new Promise(function(resolve, reject) {
                    _intercept = true;
                    if (typeof data === "string") {
                      _data = {
                        "text/plain": data
                      };
                    } else if (data instanceof Node) {
                      _data = {
                        "text/html": new XMLSerializer().serializeToString(data)
                      };
                    } else if (data instanceof Object) {
                      _data = data;
                    } else {
                      reject("Invalid data type. Must be string, DOM node, or an object mapping MIME types to strings.");
                    }
                    function triggerCopy(tryBogusSelect) {
                      try {
                        if (document.execCommand("copy")) {
                          cleanup();
                          resolve();
                        } else {
                          if (!tryBogusSelect) {
                            bogusSelect();
                            triggerCopy(true);
                          } else {
                            cleanup();
                            throw new Error("Unable to copy. Perhaps it's not available in your browser?");
                          }
                        }
                      } catch (e) {
                        cleanup();
                        reject(e);
                      }
                    }
                    triggerCopy(false);
                  });
                };
              }();
              clipboard.paste = function() {
                var _intercept = false;
                var _resolve;
                var _dataType;
                document.addEventListener("paste", function(e) {
                  if (_intercept) {
                    _intercept = false;
                    e.preventDefault();
                    var resolve = _resolve;
                    _resolve = null;
                    resolve(e.clipboardData.getData(_dataType));
                  }
                });
                return function(dataType) {
                  return new Promise(function(resolve, reject) {
                    _intercept = true;
                    _resolve = resolve;
                    _dataType = dataType || "text/plain";
                    try {
                      if (!document.execCommand("paste")) {
                        _intercept = false;
                        reject(new Error("Unable to paste. Pasting only works in Internet Explorer at the moment."));
                      }
                    } catch (e) {
                      _intercept = false;
                      reject(new Error(e));
                    }
                  });
                };
              }();
              if (typeof ClipboardEvent === "undefined" && typeof window.clipboardData !== "undefined" && typeof window.clipboardData.setData !== "undefined") {
                (function(a2) {
                  function b2(a3, b3) {
                    return function() {
                      a3.apply(b3, arguments);
                    };
                  }
                  function c2(a3) {
                    if ("object" != _typeof(this))
                      throw new TypeError("Promises must be constructed via new");
                    if ("function" != typeof a3)
                      throw new TypeError("not a function");
                    this._state = null, this._value = null, this._deferreds = [], i3(a3, b2(e, this), b2(f2, this));
                  }
                  function d2(a3) {
                    var b3 = this;
                    return null === this._state ? void this._deferreds.push(a3) : void j2(function() {
                      var c3 = b3._state ? a3.onFulfilled : a3.onRejected;
                      if (null === c3)
                        return void (b3._state ? a3.resolve : a3.reject)(b3._value);
                      var d3;
                      try {
                        d3 = c3(b3._value);
                      } catch (e2) {
                        return void a3.reject(e2);
                      }
                      a3.resolve(d3);
                    });
                  }
                  function e(a3) {
                    try {
                      if (a3 === this)
                        throw new TypeError("A promise cannot be resolved with itself.");
                      if (a3 && ("object" == _typeof(a3) || "function" == typeof a3)) {
                        var c3 = a3.then;
                        if ("function" == typeof c3)
                          return void i3(b2(c3, a3), b2(e, this), b2(f2, this));
                      }
                      this._state = true, this._value = a3, g2.call(this);
                    } catch (d3) {
                      f2.call(this, d3);
                    }
                  }
                  function f2(a3) {
                    this._state = false, this._value = a3, g2.call(this);
                  }
                  function g2() {
                    for (var a3 = 0, b3 = this._deferreds.length; b3 > a3; a3++) {
                      d2.call(this, this._deferreds[a3]);
                    }
                    this._deferreds = null;
                  }
                  function h2(a3, b3, c3, d3) {
                    this.onFulfilled = "function" == typeof a3 ? a3 : null, this.onRejected = "function" == typeof b3 ? b3 : null, this.resolve = c3, this.reject = d3;
                  }
                  function i3(a3, b3, c3) {
                    var d3 = false;
                    try {
                      a3(function(a4) {
                        d3 || (d3 = true, b3(a4));
                      }, function(a4) {
                        d3 || (d3 = true, c3(a4));
                      });
                    } catch (e2) {
                      if (d3)
                        return;
                      d3 = true, c3(e2);
                    }
                  }
                  var j2 = c2.immediateFn || "function" == typeof setImmediate && setImmediate || function(a3) {
                    setTimeout(a3, 1);
                  }, k2 = Array.isArray || function(a3) {
                    return "[object Array]" === Object.prototype.toString.call(a3);
                  };
                  c2.prototype["catch"] = function(a3) {
                    return this.then(null, a3);
                  }, c2.prototype.then = function(a3, b3) {
                    var e2 = this;
                    return new c2(function(c3, f3) {
                      d2.call(e2, new h2(a3, b3, c3, f3));
                    });
                  }, c2.all = function() {
                    var a3 = Array.prototype.slice.call(1 === arguments.length && k2(arguments[0]) ? arguments[0] : arguments);
                    return new c2(function(b3, c3) {
                      function d3(f4, g3) {
                        try {
                          if (g3 && ("object" == _typeof(g3) || "function" == typeof g3)) {
                            var h3 = g3.then;
                            if ("function" == typeof h3)
                              return void h3.call(g3, function(a4) {
                                d3(f4, a4);
                              }, c3);
                          }
                          a3[f4] = g3, 0 === --e2 && b3(a3);
                        } catch (i4) {
                          c3(i4);
                        }
                      }
                      if (0 === a3.length)
                        return b3([]);
                      for (var e2 = a3.length, f3 = 0; f3 < a3.length; f3++) {
                        d3(f3, a3[f3]);
                      }
                    });
                  }, c2.resolve = function(a3) {
                    return a3 && "object" == _typeof(a3) && a3.constructor === c2 ? a3 : new c2(function(b3) {
                      b3(a3);
                    });
                  }, c2.reject = function(a3) {
                    return new c2(function(b3, c3) {
                      c3(a3);
                    });
                  }, c2.race = function(a3) {
                    return new c2(function(b3, c3) {
                      for (var d3 = 0, e2 = a3.length; e2 > d3; d3++) {
                        a3[d3].then(b3, c3);
                      }
                    });
                  }, module3.exports ? module3.exports = c2 : a2.Promise || (a2.Promise = c2);
                })(this);
                clipboard.copy = function(data) {
                  return new Promise(function(resolve, reject) {
                    if (typeof data !== "string" && !("text/plain" in data)) {
                      throw new Error("You must provide a text/plain type.");
                    }
                    var strData = typeof data === "string" ? data : data["text/plain"];
                    var copySucceeded = window.clipboardData.setData("Text", strData);
                    if (copySucceeded) {
                      resolve();
                    } else {
                      reject(new Error("Copying was rejected."));
                    }
                  });
                };
                clipboard.paste = function() {
                  return new Promise(function(resolve, reject) {
                    var strData = window.clipboardData.getData("Text");
                    if (strData) {
                      resolve(strData);
                    } else {
                      reject(new Error("Pasting was rejected."));
                    }
                  });
                };
              }
              return clipboard;
            });
          }).call(this, __webpack_require__(22).setImmediate);
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _defineProperties(target, props) {
            for (var i3 = 0; i3 < props.length; i3++) {
              var descriptor = props[i3];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              _defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              _defineProperties(Constructor, staticProps);
            return Constructor;
          }
          var Yallist = __webpack_require__(24);
          var MAX = Symbol("max");
          var LENGTH = Symbol("length");
          var LENGTH_CALCULATOR = Symbol("lengthCalculator");
          var ALLOW_STALE = Symbol("allowStale");
          var MAX_AGE = Symbol("maxAge");
          var DISPOSE = Symbol("dispose");
          var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
          var LRU_LIST = Symbol("lruList");
          var CACHE = Symbol("cache");
          var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
          var naiveLength = function naiveLength2() {
            return 1;
          };
          var LRUCache = /* @__PURE__ */ function() {
            function LRUCache2(options) {
              _classCallCheck(this, LRUCache2);
              if (typeof options === "number")
                options = {
                  max: options
                };
              if (!options)
                options = {};
              if (options.max && (typeof options.max !== "number" || options.max < 0))
                throw new TypeError("max must be a non-negative number");
              var max = this[MAX] = options.max || Infinity;
              var lc = options.length || naiveLength;
              this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
              this[ALLOW_STALE] = options.stale || false;
              if (options.maxAge && typeof options.maxAge !== "number")
                throw new TypeError("maxAge must be a number");
              this[MAX_AGE] = options.maxAge || 0;
              this[DISPOSE] = options.dispose;
              this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
              this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
              this.reset();
            }
            _createClass(LRUCache2, [{
              key: "rforEach",
              value: function rforEach(fn2, thisp) {
                thisp = thisp || this;
                for (var walker = this[LRU_LIST].tail; walker !== null; ) {
                  var prev = walker.prev;
                  forEachStep(this, fn2, walker, thisp);
                  walker = prev;
                }
              }
            }, {
              key: "forEach",
              value: function forEach(fn2, thisp) {
                thisp = thisp || this;
                for (var walker = this[LRU_LIST].head; walker !== null; ) {
                  var next = walker.next;
                  forEachStep(this, fn2, walker, thisp);
                  walker = next;
                }
              }
            }, {
              key: "keys",
              value: function keys() {
                return this[LRU_LIST].toArray().map(function(k2) {
                  return k2.key;
                });
              }
            }, {
              key: "values",
              value: function values() {
                return this[LRU_LIST].toArray().map(function(k2) {
                  return k2.value;
                });
              }
            }, {
              key: "reset",
              value: function reset() {
                var _this = this;
                if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
                  this[LRU_LIST].forEach(function(hit) {
                    return _this[DISPOSE](hit.key, hit.value);
                  });
                }
                this[CACHE] = /* @__PURE__ */ new Map();
                this[LRU_LIST] = new Yallist();
                this[LENGTH] = 0;
              }
            }, {
              key: "dump",
              value: function dump2() {
                var _this2 = this;
                return this[LRU_LIST].map(function(hit) {
                  return isStale(_this2, hit) ? false : {
                    k: hit.key,
                    v: hit.value,
                    e: hit.now + (hit.maxAge || 0)
                  };
                }).toArray().filter(function(h2) {
                  return h2;
                });
              }
            }, {
              key: "dumpLru",
              value: function dumpLru() {
                return this[LRU_LIST];
              }
            }, {
              key: "set",
              value: function set(key2, value, maxAge) {
                maxAge = maxAge || this[MAX_AGE];
                if (maxAge && typeof maxAge !== "number")
                  throw new TypeError("maxAge must be a number");
                var now = maxAge ? Date.now() : 0;
                var len = this[LENGTH_CALCULATOR](value, key2);
                if (this[CACHE].has(key2)) {
                  if (len > this[MAX]) {
                    _del(this, this[CACHE].get(key2));
                    return false;
                  }
                  var node = this[CACHE].get(key2);
                  var item = node.value;
                  if (this[DISPOSE]) {
                    if (!this[NO_DISPOSE_ON_SET])
                      this[DISPOSE](key2, item.value);
                  }
                  item.now = now;
                  item.maxAge = maxAge;
                  item.value = value;
                  this[LENGTH] += len - item.length;
                  item.length = len;
                  this.get(key2);
                  trim(this);
                  return true;
                }
                var hit = new Entry(key2, value, len, now, maxAge);
                if (hit.length > this[MAX]) {
                  if (this[DISPOSE])
                    this[DISPOSE](key2, value);
                  return false;
                }
                this[LENGTH] += hit.length;
                this[LRU_LIST].unshift(hit);
                this[CACHE].set(key2, this[LRU_LIST].head);
                trim(this);
                return true;
              }
            }, {
              key: "has",
              value: function has(key2) {
                if (!this[CACHE].has(key2))
                  return false;
                var hit = this[CACHE].get(key2).value;
                return !isStale(this, hit);
              }
            }, {
              key: "get",
              value: function get(key2) {
                return _get(this, key2, true);
              }
            }, {
              key: "peek",
              value: function peek(key2) {
                return _get(this, key2, false);
              }
            }, {
              key: "pop",
              value: function pop() {
                var node = this[LRU_LIST].tail;
                if (!node)
                  return null;
                _del(this, node);
                return node.value;
              }
            }, {
              key: "del",
              value: function del(key2) {
                _del(this, this[CACHE].get(key2));
              }
            }, {
              key: "load",
              value: function load(arr) {
                this.reset();
                var now = Date.now();
                for (var l2 = arr.length - 1; l2 >= 0; l2--) {
                  var hit = arr[l2];
                  var expiresAt = hit.e || 0;
                  if (expiresAt === 0)
                    this.set(hit.k, hit.v);
                  else {
                    var maxAge = expiresAt - now;
                    if (maxAge > 0) {
                      this.set(hit.k, hit.v, maxAge);
                    }
                  }
                }
              }
            }, {
              key: "prune",
              value: function prune() {
                var _this3 = this;
                this[CACHE].forEach(function(value, key2) {
                  return _get(_this3, key2, false);
                });
              }
            }, {
              key: "max",
              set: function set(mL) {
                if (typeof mL !== "number" || mL < 0)
                  throw new TypeError("max must be a non-negative number");
                this[MAX] = mL || Infinity;
                trim(this);
              },
              get: function get() {
                return this[MAX];
              }
            }, {
              key: "allowStale",
              set: function set(allowStale) {
                this[ALLOW_STALE] = !!allowStale;
              },
              get: function get() {
                return this[ALLOW_STALE];
              }
            }, {
              key: "maxAge",
              set: function set(mA) {
                if (typeof mA !== "number")
                  throw new TypeError("maxAge must be a non-negative number");
                this[MAX_AGE] = mA;
                trim(this);
              },
              get: function get() {
                return this[MAX_AGE];
              }
            }, {
              key: "lengthCalculator",
              set: function set(lC) {
                var _this4 = this;
                if (typeof lC !== "function")
                  lC = naiveLength;
                if (lC !== this[LENGTH_CALCULATOR]) {
                  this[LENGTH_CALCULATOR] = lC;
                  this[LENGTH] = 0;
                  this[LRU_LIST].forEach(function(hit) {
                    hit.length = _this4[LENGTH_CALCULATOR](hit.value, hit.key);
                    _this4[LENGTH] += hit.length;
                  });
                }
                trim(this);
              },
              get: function get() {
                return this[LENGTH_CALCULATOR];
              }
            }, {
              key: "length",
              get: function get() {
                return this[LENGTH];
              }
            }, {
              key: "itemCount",
              get: function get() {
                return this[LRU_LIST].length;
              }
            }]);
            return LRUCache2;
          }();
          var _get = function _get2(self2, key2, doUse) {
            var node = self2[CACHE].get(key2);
            if (node) {
              var hit = node.value;
              if (isStale(self2, hit)) {
                _del(self2, node);
                if (!self2[ALLOW_STALE])
                  return void 0;
              } else {
                if (doUse) {
                  if (self2[UPDATE_AGE_ON_GET])
                    node.value.now = Date.now();
                  self2[LRU_LIST].unshiftNode(node);
                }
              }
              return hit.value;
            }
          };
          var isStale = function isStale2(self2, hit) {
            if (!hit || !hit.maxAge && !self2[MAX_AGE])
              return false;
            var diff = Date.now() - hit.now;
            return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
          };
          var trim = function trim2(self2) {
            if (self2[LENGTH] > self2[MAX]) {
              for (var walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
                var prev = walker.prev;
                _del(self2, walker);
                walker = prev;
              }
            }
          };
          var _del = function _del2(self2, node) {
            if (node) {
              var hit = node.value;
              if (self2[DISPOSE])
                self2[DISPOSE](hit.key, hit.value);
              self2[LENGTH] -= hit.length;
              self2[CACHE].delete(hit.key);
              self2[LRU_LIST].removeNode(node);
            }
          };
          var Entry = function Entry2(key2, value, length, now, maxAge) {
            _classCallCheck(this, Entry2);
            this.key = key2;
            this.value = value;
            this.length = length;
            this.now = now;
            this.maxAge = maxAge || 0;
          };
          var forEachStep = function forEachStep2(self2, fn2, node, thisp) {
            var hit = node.value;
            if (isStale(self2, hit)) {
              _del(self2, node);
              if (!self2[ALLOW_STALE])
                hit = void 0;
            }
            if (hit)
              fn2.call(thisp, hit.value, hit.key, self2);
          };
          module3.exports = LRUCache;
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          if (true) {
            module3.exports = __webpack_require__(27);
          } else {
          }
        },
        function(module3, exports3, __webpack_require__) {
          (function(global2) {
            var scope = typeof global2 !== "undefined" && global2 || typeof self !== "undefined" && self || window;
            var apply = Function.prototype.apply;
            exports3.setTimeout = function() {
              return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
            };
            exports3.setInterval = function() {
              return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
            };
            exports3.clearTimeout = exports3.clearInterval = function(timeout) {
              if (timeout) {
                timeout.close();
              }
            };
            function Timeout(id, clearFn) {
              this._id = id;
              this._clearFn = clearFn;
            }
            Timeout.prototype.unref = Timeout.prototype.ref = function() {
            };
            Timeout.prototype.close = function() {
              this._clearFn.call(scope, this._id);
            };
            exports3.enroll = function(item, msecs) {
              clearTimeout(item._idleTimeoutId);
              item._idleTimeout = msecs;
            };
            exports3.unenroll = function(item) {
              clearTimeout(item._idleTimeoutId);
              item._idleTimeout = -1;
            };
            exports3._unrefActive = exports3.active = function(item) {
              clearTimeout(item._idleTimeoutId);
              var msecs = item._idleTimeout;
              if (msecs >= 0) {
                item._idleTimeoutId = setTimeout(function onTimeout() {
                  if (item._onTimeout)
                    item._onTimeout();
                }, msecs);
              }
            };
            __webpack_require__(23);
            exports3.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global2 !== "undefined" && global2.setImmediate || this && this.setImmediate;
            exports3.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global2 !== "undefined" && global2.clearImmediate || this && this.clearImmediate;
          }).call(this, __webpack_require__(13));
        },
        function(module3, exports3, __webpack_require__) {
          (function(global2, process2) {
            (function(global3, undefined2) {
              "use strict";
              if (global3.setImmediate) {
                return;
              }
              var nextHandle = 1;
              var tasksByHandle = {};
              var currentlyRunningATask = false;
              var doc = global3.document;
              var registerImmediate;
              function setImmediate(callback) {
                if (typeof callback !== "function") {
                  callback = new Function("" + callback);
                }
                var args = new Array(arguments.length - 1);
                for (var i3 = 0; i3 < args.length; i3++) {
                  args[i3] = arguments[i3 + 1];
                }
                var task2 = {
                  callback,
                  args
                };
                tasksByHandle[nextHandle] = task2;
                registerImmediate(nextHandle);
                return nextHandle++;
              }
              function clearImmediate(handle) {
                delete tasksByHandle[handle];
              }
              function run2(task2) {
                var callback = task2.callback;
                var args = task2.args;
                switch (args.length) {
                  case 0:
                    callback();
                    break;
                  case 1:
                    callback(args[0]);
                    break;
                  case 2:
                    callback(args[0], args[1]);
                    break;
                  case 3:
                    callback(args[0], args[1], args[2]);
                    break;
                  default:
                    callback.apply(undefined2, args);
                    break;
                }
              }
              function runIfPresent(handle) {
                if (currentlyRunningATask) {
                  setTimeout(runIfPresent, 0, handle);
                } else {
                  var task2 = tasksByHandle[handle];
                  if (task2) {
                    currentlyRunningATask = true;
                    try {
                      run2(task2);
                    } finally {
                      clearImmediate(handle);
                      currentlyRunningATask = false;
                    }
                  }
                }
              }
              function installNextTickImplementation() {
                registerImmediate = function registerImmediate2(handle) {
                  process2.nextTick(function() {
                    runIfPresent(handle);
                  });
                };
              }
              function canUsePostMessage() {
                if (global3.postMessage && !global3.importScripts) {
                  var postMessageIsAsynchronous = true;
                  var oldOnMessage = global3.onmessage;
                  global3.onmessage = function() {
                    postMessageIsAsynchronous = false;
                  };
                  global3.postMessage("", "*");
                  global3.onmessage = oldOnMessage;
                  return postMessageIsAsynchronous;
                }
              }
              function installPostMessageImplementation() {
                var messagePrefix = "setImmediate$" + Math.random() + "$";
                var onGlobalMessage = function onGlobalMessage2(event) {
                  if (event.source === global3 && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
                    runIfPresent(+event.data.slice(messagePrefix.length));
                  }
                };
                if (global3.addEventListener) {
                  global3.addEventListener("message", onGlobalMessage, false);
                } else {
                  global3.attachEvent("onmessage", onGlobalMessage);
                }
                registerImmediate = function registerImmediate2(handle) {
                  global3.postMessage(messagePrefix + handle, "*");
                };
              }
              function installMessageChannelImplementation() {
                var channel = new MessageChannel();
                channel.port1.onmessage = function(event) {
                  var handle = event.data;
                  runIfPresent(handle);
                };
                registerImmediate = function registerImmediate2(handle) {
                  channel.port2.postMessage(handle);
                };
              }
              function installReadyStateChangeImplementation() {
                var html = doc.documentElement;
                registerImmediate = function registerImmediate2(handle) {
                  var script = doc.createElement("script");
                  script.onreadystatechange = function() {
                    runIfPresent(handle);
                    script.onreadystatechange = null;
                    html.removeChild(script);
                    script = null;
                  };
                  html.appendChild(script);
                };
              }
              function installSetTimeoutImplementation() {
                registerImmediate = function registerImmediate2(handle) {
                  setTimeout(runIfPresent, 0, handle);
                };
              }
              var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global3);
              attachTo = attachTo && attachTo.setTimeout ? attachTo : global3;
              if ({}.toString.call(global3.process) === "[object process]") {
                installNextTickImplementation();
              } else if (canUsePostMessage()) {
                installPostMessageImplementation();
              } else if (global3.MessageChannel) {
                installMessageChannelImplementation();
              } else if (doc && "onreadystatechange" in doc.createElement("script")) {
                installReadyStateChangeImplementation();
              } else {
                installSetTimeoutImplementation();
              }
              attachTo.setImmediate = setImmediate;
              attachTo.clearImmediate = clearImmediate;
            })(typeof self === "undefined" ? typeof global2 === "undefined" ? this : global2 : self);
          }).call(this, __webpack_require__(13), __webpack_require__(17));
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          module3.exports = Yallist;
          Yallist.Node = Node2;
          Yallist.create = Yallist;
          function Yallist(list) {
            var self2 = this;
            if (!(self2 instanceof Yallist)) {
              self2 = new Yallist();
            }
            self2.tail = null;
            self2.head = null;
            self2.length = 0;
            if (list && typeof list.forEach === "function") {
              list.forEach(function(item) {
                self2.push(item);
              });
            } else if (arguments.length > 0) {
              for (var i3 = 0, l2 = arguments.length; i3 < l2; i3++) {
                self2.push(arguments[i3]);
              }
            }
            return self2;
          }
          Yallist.prototype.removeNode = function(node) {
            if (node.list !== this) {
              throw new Error("removing node which does not belong to this list");
            }
            var next = node.next;
            var prev = node.prev;
            if (next) {
              next.prev = prev;
            }
            if (prev) {
              prev.next = next;
            }
            if (node === this.head) {
              this.head = next;
            }
            if (node === this.tail) {
              this.tail = prev;
            }
            node.list.length--;
            node.next = null;
            node.prev = null;
            node.list = null;
            return next;
          };
          Yallist.prototype.unshiftNode = function(node) {
            if (node === this.head) {
              return;
            }
            if (node.list) {
              node.list.removeNode(node);
            }
            var head = this.head;
            node.list = this;
            node.next = head;
            if (head) {
              head.prev = node;
            }
            this.head = node;
            if (!this.tail) {
              this.tail = node;
            }
            this.length++;
          };
          Yallist.prototype.pushNode = function(node) {
            if (node === this.tail) {
              return;
            }
            if (node.list) {
              node.list.removeNode(node);
            }
            var tail = this.tail;
            node.list = this;
            node.prev = tail;
            if (tail) {
              tail.next = node;
            }
            this.tail = node;
            if (!this.head) {
              this.head = node;
            }
            this.length++;
          };
          Yallist.prototype.push = function() {
            for (var i3 = 0, l2 = arguments.length; i3 < l2; i3++) {
              push(this, arguments[i3]);
            }
            return this.length;
          };
          Yallist.prototype.unshift = function() {
            for (var i3 = 0, l2 = arguments.length; i3 < l2; i3++) {
              unshift(this, arguments[i3]);
            }
            return this.length;
          };
          Yallist.prototype.pop = function() {
            if (!this.tail) {
              return void 0;
            }
            var res = this.tail.value;
            this.tail = this.tail.prev;
            if (this.tail) {
              this.tail.next = null;
            } else {
              this.head = null;
            }
            this.length--;
            return res;
          };
          Yallist.prototype.shift = function() {
            if (!this.head) {
              return void 0;
            }
            var res = this.head.value;
            this.head = this.head.next;
            if (this.head) {
              this.head.prev = null;
            } else {
              this.tail = null;
            }
            this.length--;
            return res;
          };
          Yallist.prototype.forEach = function(fn2, thisp) {
            thisp = thisp || this;
            for (var walker = this.head, i3 = 0; walker !== null; i3++) {
              fn2.call(thisp, walker.value, i3, this);
              walker = walker.next;
            }
          };
          Yallist.prototype.forEachReverse = function(fn2, thisp) {
            thisp = thisp || this;
            for (var walker = this.tail, i3 = this.length - 1; walker !== null; i3--) {
              fn2.call(thisp, walker.value, i3, this);
              walker = walker.prev;
            }
          };
          Yallist.prototype.get = function(n2) {
            for (var i3 = 0, walker = this.head; walker !== null && i3 < n2; i3++) {
              walker = walker.next;
            }
            if (i3 === n2 && walker !== null) {
              return walker.value;
            }
          };
          Yallist.prototype.getReverse = function(n2) {
            for (var i3 = 0, walker = this.tail; walker !== null && i3 < n2; i3++) {
              walker = walker.prev;
            }
            if (i3 === n2 && walker !== null) {
              return walker.value;
            }
          };
          Yallist.prototype.map = function(fn2, thisp) {
            thisp = thisp || this;
            var res = new Yallist();
            for (var walker = this.head; walker !== null; ) {
              res.push(fn2.call(thisp, walker.value, this));
              walker = walker.next;
            }
            return res;
          };
          Yallist.prototype.mapReverse = function(fn2, thisp) {
            thisp = thisp || this;
            var res = new Yallist();
            for (var walker = this.tail; walker !== null; ) {
              res.push(fn2.call(thisp, walker.value, this));
              walker = walker.prev;
            }
            return res;
          };
          Yallist.prototype.reduce = function(fn2, initial) {
            var acc;
            var walker = this.head;
            if (arguments.length > 1) {
              acc = initial;
            } else if (this.head) {
              walker = this.head.next;
              acc = this.head.value;
            } else {
              throw new TypeError("Reduce of empty list with no initial value");
            }
            for (var i3 = 0; walker !== null; i3++) {
              acc = fn2(acc, walker.value, i3);
              walker = walker.next;
            }
            return acc;
          };
          Yallist.prototype.reduceReverse = function(fn2, initial) {
            var acc;
            var walker = this.tail;
            if (arguments.length > 1) {
              acc = initial;
            } else if (this.tail) {
              walker = this.tail.prev;
              acc = this.tail.value;
            } else {
              throw new TypeError("Reduce of empty list with no initial value");
            }
            for (var i3 = this.length - 1; walker !== null; i3--) {
              acc = fn2(acc, walker.value, i3);
              walker = walker.prev;
            }
            return acc;
          };
          Yallist.prototype.toArray = function() {
            var arr = new Array(this.length);
            for (var i3 = 0, walker = this.head; walker !== null; i3++) {
              arr[i3] = walker.value;
              walker = walker.next;
            }
            return arr;
          };
          Yallist.prototype.toArrayReverse = function() {
            var arr = new Array(this.length);
            for (var i3 = 0, walker = this.tail; walker !== null; i3++) {
              arr[i3] = walker.value;
              walker = walker.prev;
            }
            return arr;
          };
          Yallist.prototype.slice = function(from, to) {
            to = to || this.length;
            if (to < 0) {
              to += this.length;
            }
            from = from || 0;
            if (from < 0) {
              from += this.length;
            }
            var ret = new Yallist();
            if (to < from || to < 0) {
              return ret;
            }
            if (from < 0) {
              from = 0;
            }
            if (to > this.length) {
              to = this.length;
            }
            for (var i3 = 0, walker = this.head; walker !== null && i3 < from; i3++) {
              walker = walker.next;
            }
            for (; walker !== null && i3 < to; i3++, walker = walker.next) {
              ret.push(walker.value);
            }
            return ret;
          };
          Yallist.prototype.sliceReverse = function(from, to) {
            to = to || this.length;
            if (to < 0) {
              to += this.length;
            }
            from = from || 0;
            if (from < 0) {
              from += this.length;
            }
            var ret = new Yallist();
            if (to < from || to < 0) {
              return ret;
            }
            if (from < 0) {
              from = 0;
            }
            if (to > this.length) {
              to = this.length;
            }
            for (var i3 = this.length, walker = this.tail; walker !== null && i3 > to; i3--) {
              walker = walker.prev;
            }
            for (; walker !== null && i3 > from; i3--, walker = walker.prev) {
              ret.push(walker.value);
            }
            return ret;
          };
          Yallist.prototype.splice = function(start, deleteCount) {
            if (start > this.length) {
              start = this.length - 1;
            }
            if (start < 0) {
              start = this.length + start;
            }
            for (var i3 = 0, walker = this.head; walker !== null && i3 < start; i3++) {
              walker = walker.next;
            }
            var ret = [];
            for (var i3 = 0; walker && i3 < deleteCount; i3++) {
              ret.push(walker.value);
              walker = this.removeNode(walker);
            }
            if (walker === null) {
              walker = this.tail;
            }
            if (walker !== this.head && walker !== this.tail) {
              walker = walker.prev;
            }
            for (var i3 = 2; i3 < arguments.length; i3++) {
              walker = insert(this, walker, arguments[i3]);
            }
            return ret;
          };
          Yallist.prototype.reverse = function() {
            var head = this.head;
            var tail = this.tail;
            for (var walker = head; walker !== null; walker = walker.prev) {
              var p2 = walker.prev;
              walker.prev = walker.next;
              walker.next = p2;
            }
            this.head = tail;
            this.tail = head;
            return this;
          };
          function insert(self2, node, value) {
            var inserted = node === self2.head ? new Node2(value, null, node, self2) : new Node2(value, node, node.next, self2);
            if (inserted.next === null) {
              self2.tail = inserted;
            }
            if (inserted.prev === null) {
              self2.head = inserted;
            }
            self2.length++;
            return inserted;
          }
          function push(self2, item) {
            self2.tail = new Node2(item, self2.tail, null, self2);
            if (!self2.head) {
              self2.head = self2.tail;
            }
            self2.length++;
          }
          function unshift(self2, item) {
            self2.head = new Node2(item, null, self2.head, self2);
            if (!self2.tail) {
              self2.tail = self2.head;
            }
            self2.length++;
          }
          function Node2(value, prev, next, list) {
            if (!(this instanceof Node2)) {
              return new Node2(value, prev, next, list);
            }
            this.list = list;
            this.value = value;
            if (prev) {
              prev.next = this;
              this.prev = prev;
            } else {
              this.prev = null;
            }
            if (next) {
              next.prev = this;
              this.next = next;
            } else {
              this.next = null;
            }
          }
          try {
            __webpack_require__(25)(Yallist);
          } catch (er) {
          }
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          module3.exports = function(Yallist) {
            Yallist.prototype[Symbol.iterator] = /* @__PURE__ */ regeneratorRuntime.mark(function _callee() {
              var walker;
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      walker = this.head;
                    case 1:
                      if (!walker) {
                        _context.next = 7;
                        break;
                      }
                      _context.next = 4;
                      return walker.value;
                    case 4:
                      walker = walker.next;
                      _context.next = 1;
                      break;
                    case 7:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            });
          };
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var b2 = Symbol.for("react.element"), c2 = Symbol.for("react.portal"), d2 = Symbol.for("react.fragment"), e = Symbol.for("react.strict_mode"), f2 = Symbol.for("react.profiler"), g2 = Symbol.for("react.provider"), h2 = Symbol.for("react.context"), k2 = Symbol.for("react.server_context"), l2 = Symbol.for("react.forward_ref"), m2 = Symbol.for("react.suspense"), n2 = Symbol.for("react.suspense_list"), p2 = Symbol.for("react.memo"), q2 = Symbol.for("react.lazy"), t2 = Symbol.for("react.offscreen"), u2 = Symbol.for("react.cache"), v2;
          v2 = Symbol.for("react.module.reference");
          function w2(a2) {
            if ("object" === _typeof(a2) && null !== a2) {
              var r2 = a2.$$typeof;
              switch (r2) {
                case b2:
                  switch (a2 = a2.type, a2) {
                    case d2:
                    case f2:
                    case e:
                    case m2:
                    case n2:
                      return a2;
                    default:
                      switch (a2 = a2 && a2.$$typeof, a2) {
                        case k2:
                        case h2:
                        case l2:
                        case q2:
                        case p2:
                        case g2:
                          return a2;
                        default:
                          return r2;
                      }
                  }
                case c2:
                  return r2;
              }
            }
          }
          exports3.ContextConsumer = h2;
          exports3.ContextProvider = g2;
          exports3.Element = b2;
          exports3.ForwardRef = l2;
          exports3.Fragment = d2;
          exports3.Lazy = q2;
          exports3.Memo = p2;
          exports3.Portal = c2;
          exports3.Profiler = f2;
          exports3.StrictMode = e;
          exports3.Suspense = m2;
          exports3.SuspenseList = n2;
          exports3.isAsyncMode = function() {
            return false;
          };
          exports3.isConcurrentMode = function() {
            return false;
          };
          exports3.isContextConsumer = function(a2) {
            return w2(a2) === h2;
          };
          exports3.isContextProvider = function(a2) {
            return w2(a2) === g2;
          };
          exports3.isElement = function(a2) {
            return "object" === _typeof(a2) && null !== a2 && a2.$$typeof === b2;
          };
          exports3.isForwardRef = function(a2) {
            return w2(a2) === l2;
          };
          exports3.isFragment = function(a2) {
            return w2(a2) === d2;
          };
          exports3.isLazy = function(a2) {
            return w2(a2) === q2;
          };
          exports3.isMemo = function(a2) {
            return w2(a2) === p2;
          };
          exports3.isPortal = function(a2) {
            return w2(a2) === c2;
          };
          exports3.isProfiler = function(a2) {
            return w2(a2) === f2;
          };
          exports3.isStrictMode = function(a2) {
            return w2(a2) === e;
          };
          exports3.isSuspense = function(a2) {
            return w2(a2) === m2;
          };
          exports3.isSuspenseList = function(a2) {
            return w2(a2) === n2;
          };
          exports3.isValidElementType = function(a2) {
            return "string" === typeof a2 || "function" === typeof a2 || a2 === d2 || a2 === f2 || a2 === e || a2 === m2 || a2 === n2 || a2 === t2 || a2 === u2 || "object" === _typeof(a2) && null !== a2 && (a2.$$typeof === q2 || a2.$$typeof === p2 || a2.$$typeof === g2 || a2.$$typeof === h2 || a2.$$typeof === l2 || a2.$$typeof === v2 || void 0 !== a2.getModuleId) ? true : false;
          };
          exports3.typeOf = w2;
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var h2 = __webpack_require__(28), p2 = __webpack_require__(30), r2 = Object.assign, w2 = p2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, x2 = [], y2 = null;
          function z2() {
            if (null === y2) {
              var a2 = /* @__PURE__ */ new Map();
              try {
                A2.useContext({
                  _currentValue: null
                }), A2.useState(null), A2.useReducer(function(a3) {
                  return a3;
                }, null), A2.useRef(null), "function" === typeof A2.useCacheRefresh && A2.useCacheRefresh(), A2.useLayoutEffect(function() {
                }), A2.useInsertionEffect(function() {
                }), A2.useEffect(function() {
                }), A2.useImperativeHandle(void 0, function() {
                  return null;
                }), A2.useDebugValue(null), A2.useCallback(function() {
                }), A2.useMemo(function() {
                  return null;
                });
              } finally {
                var b2 = x2;
                x2 = [];
              }
              for (var e = 0; e < b2.length; e++) {
                var g2 = b2[e];
                a2.set(g2.primitive, h2.parse(g2.stackError));
              }
              y2 = a2;
            }
            return y2;
          }
          var B2 = null;
          function C2() {
            var a2 = B2;
            null !== a2 && (B2 = a2.next);
            return a2;
          }
          var A2 = {
            getCacheForType: function getCacheForType() {
              throw Error("Not implemented.");
            },
            readContext: function readContext(a2) {
              return a2._currentValue;
            },
            useCacheRefresh: function useCacheRefresh() {
              var a2 = C2();
              x2.push({
                primitive: "CacheRefresh",
                stackError: Error(),
                value: null !== a2 ? a2.memoizedState : function() {
                }
              });
              return function() {
              };
            },
            useCallback: function useCallback(a2) {
              var b2 = C2();
              x2.push({
                primitive: "Callback",
                stackError: Error(),
                value: null !== b2 ? b2.memoizedState[0] : a2
              });
              return a2;
            },
            useContext: function useContext2(a2) {
              x2.push({
                primitive: "Context",
                stackError: Error(),
                value: a2._currentValue
              });
              return a2._currentValue;
            },
            useEffect: function useEffect3(a2) {
              C2();
              x2.push({
                primitive: "Effect",
                stackError: Error(),
                value: a2
              });
            },
            useImperativeHandle: function useImperativeHandle(a2) {
              C2();
              var b2 = void 0;
              null !== a2 && "object" === _typeof(a2) && (b2 = a2.current);
              x2.push({
                primitive: "ImperativeHandle",
                stackError: Error(),
                value: b2
              });
            },
            useDebugValue: function useDebugValue(a2, b2) {
              x2.push({
                primitive: "DebugValue",
                stackError: Error(),
                value: "function" === typeof b2 ? b2(a2) : a2
              });
            },
            useLayoutEffect: function useLayoutEffect(a2) {
              C2();
              x2.push({
                primitive: "LayoutEffect",
                stackError: Error(),
                value: a2
              });
            },
            useInsertionEffect: function useInsertionEffect(a2) {
              C2();
              x2.push({
                primitive: "InsertionEffect",
                stackError: Error(),
                value: a2
              });
            },
            useMemo: function useMemo2(a2) {
              var b2 = C2();
              a2 = null !== b2 ? b2.memoizedState[0] : a2();
              x2.push({
                primitive: "Memo",
                stackError: Error(),
                value: a2
              });
              return a2;
            },
            useReducer: function useReducer(a2, b2, e) {
              a2 = C2();
              b2 = null !== a2 ? a2.memoizedState : void 0 !== e ? e(b2) : b2;
              x2.push({
                primitive: "Reducer",
                stackError: Error(),
                value: b2
              });
              return [b2, function() {
              }];
            },
            useRef: function useRef2(a2) {
              var b2 = C2();
              a2 = null !== b2 ? b2.memoizedState : {
                current: a2
              };
              x2.push({
                primitive: "Ref",
                stackError: Error(),
                value: a2.current
              });
              return a2;
            },
            useState: function useState3(a2) {
              var b2 = C2();
              a2 = null !== b2 ? b2.memoizedState : "function" === typeof a2 ? a2() : a2;
              x2.push({
                primitive: "State",
                stackError: Error(),
                value: a2
              });
              return [a2, function() {
              }];
            },
            useTransition: function useTransition() {
              C2();
              C2();
              x2.push({
                primitive: "Transition",
                stackError: Error(),
                value: void 0
              });
              return [false, function() {
              }];
            },
            useMutableSource: function useMutableSource(a2, b2) {
              C2();
              C2();
              C2();
              C2();
              a2 = b2(a2._source);
              x2.push({
                primitive: "MutableSource",
                stackError: Error(),
                value: a2
              });
              return a2;
            },
            useSyncExternalStore: function useSyncExternalStore(a2, b2) {
              C2();
              C2();
              a2 = b2();
              x2.push({
                primitive: "SyncExternalStore",
                stackError: Error(),
                value: a2
              });
              return a2;
            },
            useDeferredValue: function useDeferredValue(a2) {
              var b2 = C2();
              x2.push({
                primitive: "DeferredValue",
                stackError: Error(),
                value: null !== b2 ? b2.memoizedState : a2
              });
              return a2;
            },
            useId: function useId() {
              var a2 = C2();
              a2 = null !== a2 ? a2.memoizedState : "";
              x2.push({
                primitive: "Id",
                stackError: Error(),
                value: a2
              });
              return a2;
            }
          }, D2 = new Proxy(A2, {
            get: function get(a2, b2) {
              if (a2.hasOwnProperty(b2))
                return a2[b2];
              a2 = Error("Missing method in Dispatcher: " + b2);
              a2.name = "ReactDebugToolsUnsupportedHookError";
              throw a2;
            }
          }), E2 = 0;
          function F2(a2, b2, e) {
            var g2 = b2[e].source, c2 = 0;
            a:
              for (; c2 < a2.length; c2++) {
                if (a2[c2].source === g2) {
                  for (var l2 = e + 1, q2 = c2 + 1; l2 < b2.length && q2 < a2.length; l2++, q2++) {
                    if (a2[q2].source !== b2[l2].source)
                      continue a;
                  }
                  return c2;
                }
              }
            return -1;
          }
          function G2(a2, b2) {
            if (!a2)
              return false;
            b2 = "use" + b2;
            return a2.length < b2.length ? false : a2.lastIndexOf(b2) === a2.length - b2.length;
          }
          function H2(a2, b2, e) {
            for (var g2 = [], c2 = null, l2 = g2, q2 = 0, t2 = [], v2 = 0; v2 < b2.length; v2++) {
              var u2 = b2[v2];
              var d2 = a2;
              var k2 = h2.parse(u2.stackError);
              b: {
                var m2 = k2, n2 = F2(m2, d2, E2);
                if (-1 !== n2)
                  d2 = n2;
                else {
                  for (var f2 = 0; f2 < d2.length && 5 > f2; f2++) {
                    if (n2 = F2(m2, d2, f2), -1 !== n2) {
                      E2 = f2;
                      d2 = n2;
                      break b;
                    }
                  }
                  d2 = -1;
                }
              }
              b: {
                m2 = k2;
                n2 = z2().get(u2.primitive);
                if (void 0 !== n2)
                  for (f2 = 0; f2 < n2.length && f2 < m2.length; f2++) {
                    if (n2[f2].source !== m2[f2].source) {
                      f2 < m2.length - 1 && G2(m2[f2].functionName, u2.primitive) && f2++;
                      f2 < m2.length - 1 && G2(m2[f2].functionName, u2.primitive) && f2++;
                      m2 = f2;
                      break b;
                    }
                  }
                m2 = -1;
              }
              k2 = -1 === d2 || -1 === m2 || 2 > d2 - m2 ? null : k2.slice(m2, d2 - 1);
              if (null !== k2) {
                d2 = 0;
                if (null !== c2) {
                  for (; d2 < k2.length && d2 < c2.length && k2[k2.length - d2 - 1].source === c2[c2.length - d2 - 1].source; ) {
                    d2++;
                  }
                  for (c2 = c2.length - 1; c2 > d2; c2--) {
                    l2 = t2.pop();
                  }
                }
                for (c2 = k2.length - d2 - 1; 1 <= c2; c2--) {
                  d2 = [], m2 = k2[c2], (n2 = k2[c2 - 1].functionName) ? (f2 = n2.lastIndexOf("."), -1 === f2 && (f2 = 0), "use" === n2.substr(f2, 3) && (f2 += 3), n2 = n2.substr(f2)) : n2 = "", n2 = {
                    id: null,
                    isStateEditable: false,
                    name: n2,
                    value: void 0,
                    subHooks: d2
                  }, e && (n2.hookSource = {
                    lineNumber: m2.lineNumber,
                    columnNumber: m2.columnNumber,
                    functionName: m2.functionName,
                    fileName: m2.fileName
                  }), l2.push(n2), t2.push(l2), l2 = d2;
                }
                c2 = k2;
              }
              d2 = u2.primitive;
              u2 = {
                id: "Context" === d2 || "DebugValue" === d2 ? null : q2++,
                isStateEditable: "Reducer" === d2 || "State" === d2,
                name: d2,
                value: u2.value,
                subHooks: []
              };
              e && (d2 = {
                lineNumber: null,
                functionName: null,
                fileName: null,
                columnNumber: null
              }, k2 && 1 <= k2.length && (k2 = k2[0], d2.lineNumber = k2.lineNumber, d2.functionName = k2.functionName, d2.fileName = k2.fileName, d2.columnNumber = k2.columnNumber), u2.hookSource = d2);
              l2.push(u2);
            }
            I2(g2, null);
            return g2;
          }
          function I2(a2, b2) {
            for (var e = [], g2 = 0; g2 < a2.length; g2++) {
              var c2 = a2[g2];
              "DebugValue" === c2.name && 0 === c2.subHooks.length ? (a2.splice(g2, 1), g2--, e.push(c2)) : I2(c2.subHooks, c2);
            }
            null !== b2 && (1 === e.length ? b2.value = e[0].value : 1 < e.length && (b2.value = e.map(function(a3) {
              return a3.value;
            })));
          }
          function J(a2) {
            if (a2 instanceof Error && "ReactDebugToolsUnsupportedHookError" === a2.name)
              throw a2;
            var b2 = Error("Error rendering inspected component", {
              cause: a2
            });
            b2.name = "ReactDebugToolsRenderError";
            b2.cause = a2;
            throw b2;
          }
          function K(a2, b2, e) {
            var g2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : false;
            null == e && (e = w2.ReactCurrentDispatcher);
            var c2 = e.current;
            e.current = D2;
            try {
              var l2 = Error();
              a2(b2);
            } catch (t2) {
              J(t2);
            } finally {
              var q2 = x2;
              x2 = [];
              e.current = c2;
            }
            c2 = h2.parse(l2);
            return H2(c2, q2, g2);
          }
          function L2(a2) {
            a2.forEach(function(a3, e) {
              return e._currentValue = a3;
            });
          }
          exports3.inspectHooks = K;
          exports3.inspectHooksOfFiber = function(a2, b2) {
            var e = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : false;
            null == b2 && (b2 = w2.ReactCurrentDispatcher);
            if (0 !== a2.tag && 15 !== a2.tag && 11 !== a2.tag)
              throw Error("Unknown Fiber. Needs to be a function component to inspect hooks.");
            z2();
            var g2 = a2.type, c2 = a2.memoizedProps;
            if (g2 !== a2.elementType && g2 && g2.defaultProps) {
              c2 = r2({}, c2);
              var l2 = g2.defaultProps;
              for (q2 in l2) {
                void 0 === c2[q2] && (c2[q2] = l2[q2]);
              }
            }
            B2 = a2.memoizedState;
            var q2 = /* @__PURE__ */ new Map();
            try {
              for (l2 = a2; l2; ) {
                if (10 === l2.tag) {
                  var t2 = l2.type._context;
                  q2.has(t2) || (q2.set(t2, t2._currentValue), t2._currentValue = l2.memoizedProps.value);
                }
                l2 = l2.return;
              }
              if (11 === a2.tag) {
                var v2 = g2.render;
                g2 = c2;
                var u2 = a2.ref;
                t2 = b2;
                var d2 = t2.current;
                t2.current = D2;
                try {
                  var k2 = Error();
                  v2(g2, u2);
                } catch (f2) {
                  J(f2);
                } finally {
                  var m2 = x2;
                  x2 = [];
                  t2.current = d2;
                }
                var n2 = h2.parse(k2);
                return H2(n2, m2, e);
              }
              return K(g2, c2, b2, e);
            } finally {
              B2 = null, L2(q2);
            }
          };
        },
        function(module3, exports3, __webpack_require__) {
          var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          (function(root, factory) {
            "use strict";
            if (true) {
              !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(29)], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports3, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module3.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            } else {
            }
          })(this, function ErrorStackParser(StackFrame) {
            "use strict";
            var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
            var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
            var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
            return {
              parse: function ErrorStackParser$$parse(error) {
                if (typeof error.stacktrace !== "undefined" || typeof error["opera#sourceloc"] !== "undefined") {
                  return this.parseOpera(error);
                } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
                  return this.parseV8OrIE(error);
                } else if (error.stack) {
                  return this.parseFFOrSafari(error);
                } else {
                  throw new Error("Cannot parse given Error object");
                }
              },
              extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
                if (urlLike.indexOf(":") === -1) {
                  return [urlLike];
                }
                var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
                var parts = regExp.exec(urlLike.replace(/[()]/g, ""));
                return [parts[1], parts[2] || void 0, parts[3] || void 0];
              },
              parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
                var filtered = error.stack.split("\n").filter(function(line) {
                  return !!line.match(CHROME_IE_STACK_REGEXP);
                }, this);
                return filtered.map(function(line) {
                  if (line.indexOf("(eval ") > -1) {
                    line = line.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(\),.*$)/g, "");
                  }
                  var sanitizedLine = line.replace(/^\s+/, "").replace(/\(eval code/g, "(");
                  var location = sanitizedLine.match(/ (\((.+):(\d+):(\d+)\)$)/);
                  sanitizedLine = location ? sanitizedLine.replace(location[0], "") : sanitizedLine;
                  var tokens = sanitizedLine.split(/\s+/).slice(1);
                  var locationParts = this.extractLocation(location ? location[1] : tokens.pop());
                  var functionName = tokens.join(" ") || void 0;
                  var fileName = ["eval", "<anonymous>"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];
                  return new StackFrame({
                    functionName,
                    fileName,
                    lineNumber: locationParts[1],
                    columnNumber: locationParts[2],
                    source: line
                  });
                }, this);
              },
              parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
                var filtered = error.stack.split("\n").filter(function(line) {
                  return !line.match(SAFARI_NATIVE_CODE_REGEXP);
                }, this);
                return filtered.map(function(line) {
                  if (line.indexOf(" > eval") > -1) {
                    line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1");
                  }
                  if (line.indexOf("@") === -1 && line.indexOf(":") === -1) {
                    return new StackFrame({
                      functionName: line
                    });
                  } else {
                    var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
                    var matches = line.match(functionNameRegex);
                    var functionName = matches && matches[1] ? matches[1] : void 0;
                    var locationParts = this.extractLocation(line.replace(functionNameRegex, ""));
                    return new StackFrame({
                      functionName,
                      fileName: locationParts[0],
                      lineNumber: locationParts[1],
                      columnNumber: locationParts[2],
                      source: line
                    });
                  }
                }, this);
              },
              parseOpera: function ErrorStackParser$$parseOpera(e) {
                if (!e.stacktrace || e.message.indexOf("\n") > -1 && e.message.split("\n").length > e.stacktrace.split("\n").length) {
                  return this.parseOpera9(e);
                } else if (!e.stack) {
                  return this.parseOpera10(e);
                } else {
                  return this.parseOpera11(e);
                }
              },
              parseOpera9: function ErrorStackParser$$parseOpera9(e) {
                var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
                var lines = e.message.split("\n");
                var result = [];
                for (var i3 = 2, len = lines.length; i3 < len; i3 += 2) {
                  var match = lineRE.exec(lines[i3]);
                  if (match) {
                    result.push(new StackFrame({
                      fileName: match[2],
                      lineNumber: match[1],
                      source: lines[i3]
                    }));
                  }
                }
                return result;
              },
              parseOpera10: function ErrorStackParser$$parseOpera10(e) {
                var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
                var lines = e.stacktrace.split("\n");
                var result = [];
                for (var i3 = 0, len = lines.length; i3 < len; i3 += 2) {
                  var match = lineRE.exec(lines[i3]);
                  if (match) {
                    result.push(new StackFrame({
                      functionName: match[3] || void 0,
                      fileName: match[2],
                      lineNumber: match[1],
                      source: lines[i3]
                    }));
                  }
                }
                return result;
              },
              parseOpera11: function ErrorStackParser$$parseOpera11(error) {
                var filtered = error.stack.split("\n").filter(function(line) {
                  return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
                }, this);
                return filtered.map(function(line) {
                  var tokens = line.split("@");
                  var locationParts = this.extractLocation(tokens.pop());
                  var functionCall = tokens.shift() || "";
                  var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
                  var argsRaw;
                  if (functionCall.match(/\(([^)]*)\)/)) {
                    argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, "$1");
                  }
                  var args = argsRaw === void 0 || argsRaw === "[arguments not available]" ? void 0 : argsRaw.split(",");
                  return new StackFrame({
                    functionName,
                    args,
                    fileName: locationParts[0],
                    lineNumber: locationParts[1],
                    columnNumber: locationParts[2],
                    source: line
                  });
                }, this);
              }
            };
          });
        },
        function(module3, exports3, __webpack_require__) {
          var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          (function(root, factory) {
            "use strict";
            if (true) {
              !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports3, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module3.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            } else {
            }
          })(this, function() {
            "use strict";
            function _isNumber(n2) {
              return !isNaN(parseFloat(n2)) && isFinite(n2);
            }
            function _capitalize(str) {
              return str.charAt(0).toUpperCase() + str.substring(1);
            }
            function _getter(p2) {
              return function() {
                return this[p2];
              };
            }
            var booleanProps = ["isConstructor", "isEval", "isNative", "isToplevel"];
            var numericProps = ["columnNumber", "lineNumber"];
            var stringProps = ["fileName", "functionName", "source"];
            var arrayProps = ["args"];
            var props = booleanProps.concat(numericProps, stringProps, arrayProps);
            function StackFrame(obj) {
              if (!obj)
                return;
              for (var i4 = 0; i4 < props.length; i4++) {
                if (obj[props[i4]] !== void 0) {
                  this["set" + _capitalize(props[i4])](obj[props[i4]]);
                }
              }
            }
            StackFrame.prototype = {
              getArgs: function getArgs() {
                return this.args;
              },
              setArgs: function setArgs(v2) {
                if (Object.prototype.toString.call(v2) !== "[object Array]") {
                  throw new TypeError("Args must be an Array");
                }
                this.args = v2;
              },
              getEvalOrigin: function getEvalOrigin() {
                return this.evalOrigin;
              },
              setEvalOrigin: function setEvalOrigin(v2) {
                if (v2 instanceof StackFrame) {
                  this.evalOrigin = v2;
                } else if (v2 instanceof Object) {
                  this.evalOrigin = new StackFrame(v2);
                } else {
                  throw new TypeError("Eval Origin must be an Object or StackFrame");
                }
              },
              toString: function toString() {
                var fileName = this.getFileName() || "";
                var lineNumber = this.getLineNumber() || "";
                var columnNumber = this.getColumnNumber() || "";
                var functionName = this.getFunctionName() || "";
                if (this.getIsEval()) {
                  if (fileName) {
                    return "[eval] (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
                  }
                  return "[eval]:" + lineNumber + ":" + columnNumber;
                }
                if (functionName) {
                  return functionName + " (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
                }
                return fileName + ":" + lineNumber + ":" + columnNumber;
              }
            };
            StackFrame.fromString = function StackFrame$$fromString(str) {
              var argsStartIndex = str.indexOf("(");
              var argsEndIndex = str.lastIndexOf(")");
              var functionName = str.substring(0, argsStartIndex);
              var args = str.substring(argsStartIndex + 1, argsEndIndex).split(",");
              var locationString = str.substring(argsEndIndex + 1);
              if (locationString.indexOf("@") === 0) {
                var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, "");
                var fileName = parts[1];
                var lineNumber = parts[2];
                var columnNumber = parts[3];
              }
              return new StackFrame({
                functionName,
                args: args || void 0,
                fileName,
                lineNumber: lineNumber || void 0,
                columnNumber: columnNumber || void 0
              });
            };
            for (var i3 = 0; i3 < booleanProps.length; i3++) {
              StackFrame.prototype["get" + _capitalize(booleanProps[i3])] = _getter(booleanProps[i3]);
              StackFrame.prototype["set" + _capitalize(booleanProps[i3])] = function(p2) {
                return function(v2) {
                  this[p2] = Boolean(v2);
                };
              }(booleanProps[i3]);
            }
            for (var j2 = 0; j2 < numericProps.length; j2++) {
              StackFrame.prototype["get" + _capitalize(numericProps[j2])] = _getter(numericProps[j2]);
              StackFrame.prototype["set" + _capitalize(numericProps[j2])] = function(p2) {
                return function(v2) {
                  if (!_isNumber(v2)) {
                    throw new TypeError(p2 + " must be a Number");
                  }
                  this[p2] = Number(v2);
                };
              }(numericProps[j2]);
            }
            for (var k2 = 0; k2 < stringProps.length; k2++) {
              StackFrame.prototype["get" + _capitalize(stringProps[k2])] = _getter(stringProps[k2]);
              StackFrame.prototype["set" + _capitalize(stringProps[k2])] = function(p2) {
                return function(v2) {
                  this[p2] = String(v2);
                };
              }(stringProps[k2]);
            }
            return StackFrame;
          });
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          if (true) {
            module3.exports = __webpack_require__(31);
          } else {
          }
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var l2 = Symbol.for("react.element"), n2 = Symbol.for("react.portal"), p2 = Symbol.for("react.fragment"), q2 = Symbol.for("react.strict_mode"), r2 = Symbol.for("react.profiler"), t2 = Symbol.for("react.provider"), u2 = Symbol.for("react.context"), v2 = Symbol.for("react.server_context"), w2 = Symbol.for("react.forward_ref"), x2 = Symbol.for("react.suspense"), y2 = Symbol.for("react.suspense_list"), z2 = Symbol.for("react.memo"), A2 = Symbol.for("react.lazy"), B2 = Symbol.for("react.debug_trace_mode"), C2 = Symbol.for("react.offscreen"), aa = Symbol.for("react.cache"), D2 = Symbol.for("react.default_value"), E2 = Symbol.iterator;
          function ba(a2) {
            if (null === a2 || "object" !== _typeof(a2))
              return null;
            a2 = E2 && a2[E2] || a2["@@iterator"];
            return "function" === typeof a2 ? a2 : null;
          }
          var F2 = {
            isMounted: function isMounted() {
              return false;
            },
            enqueueForceUpdate: function enqueueForceUpdate() {
            },
            enqueueReplaceState: function enqueueReplaceState() {
            },
            enqueueSetState: function enqueueSetState() {
            }
          }, G2 = Object.assign, H2 = {};
          function I2(a2, b2, d2) {
            this.props = a2;
            this.context = b2;
            this.refs = H2;
            this.updater = d2 || F2;
          }
          I2.prototype.isReactComponent = {};
          I2.prototype.setState = function(a2, b2) {
            if ("object" !== _typeof(a2) && "function" !== typeof a2 && null != a2)
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            this.updater.enqueueSetState(this, a2, b2, "setState");
          };
          I2.prototype.forceUpdate = function(a2) {
            this.updater.enqueueForceUpdate(this, a2, "forceUpdate");
          };
          function J() {
          }
          J.prototype = I2.prototype;
          function K(a2, b2, d2) {
            this.props = a2;
            this.context = b2;
            this.refs = H2;
            this.updater = d2 || F2;
          }
          var L2 = K.prototype = new J();
          L2.constructor = K;
          G2(L2, I2.prototype);
          L2.isPureReactComponent = true;
          var M2 = Array.isArray, N = Object.prototype.hasOwnProperty, O2 = {
            current: null
          }, P2 = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          function Q2(a2, b2, d2) {
            var c2, e = {}, k2 = null, h2 = null;
            if (null != b2)
              for (c2 in void 0 !== b2.ref && (h2 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2) {
                N.call(b2, c2) && !P2.hasOwnProperty(c2) && (e[c2] = b2[c2]);
              }
            var g2 = arguments.length - 2;
            if (1 === g2)
              e.children = d2;
            else if (1 < g2) {
              for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++) {
                f2[m2] = arguments[m2 + 2];
              }
              e.children = f2;
            }
            if (a2 && a2.defaultProps)
              for (c2 in g2 = a2.defaultProps, g2) {
                void 0 === e[c2] && (e[c2] = g2[c2]);
              }
            return {
              $$typeof: l2,
              type: a2,
              key: k2,
              ref: h2,
              props: e,
              _owner: O2.current
            };
          }
          function ca(a2, b2) {
            return {
              $$typeof: l2,
              type: a2.type,
              key: b2,
              ref: a2.ref,
              props: a2.props,
              _owner: a2._owner
            };
          }
          function R2(a2) {
            return "object" === _typeof(a2) && null !== a2 && a2.$$typeof === l2;
          }
          function escape(a2) {
            var b2 = {
              "=": "=0",
              ":": "=2"
            };
            return "$" + a2.replace(/[=:]/g, function(a3) {
              return b2[a3];
            });
          }
          var S2 = /\/+/g;
          function T2(a2, b2) {
            return "object" === _typeof(a2) && null !== a2 && null != a2.key ? escape("" + a2.key) : b2.toString(36);
          }
          function U2(a2, b2, d2, c2, e) {
            var k2 = _typeof(a2);
            if ("undefined" === k2 || "boolean" === k2)
              a2 = null;
            var h2 = false;
            if (null === a2)
              h2 = true;
            else
              switch (k2) {
                case "string":
                case "number":
                  h2 = true;
                  break;
                case "object":
                  switch (a2.$$typeof) {
                    case l2:
                    case n2:
                      h2 = true;
                  }
              }
            if (h2)
              return h2 = a2, e = e(h2), a2 = "" === c2 ? "." + T2(h2, 0) : c2, M2(e) ? (d2 = "", null != a2 && (d2 = a2.replace(S2, "$&/") + "/"), U2(e, b2, d2, "", function(a3) {
                return a3;
              })) : null != e && (R2(e) && (e = ca(e, d2 + (!e.key || h2 && h2.key === e.key ? "" : ("" + e.key).replace(S2, "$&/") + "/") + a2)), b2.push(e)), 1;
            h2 = 0;
            c2 = "" === c2 ? "." : c2 + ":";
            if (M2(a2))
              for (var g2 = 0; g2 < a2.length; g2++) {
                k2 = a2[g2];
                var f2 = c2 + T2(k2, g2);
                h2 += U2(k2, b2, d2, f2, e);
              }
            else if (f2 = ba(a2), "function" === typeof f2)
              for (a2 = f2.call(a2), g2 = 0; !(k2 = a2.next()).done; ) {
                k2 = k2.value, f2 = c2 + T2(k2, g2++), h2 += U2(k2, b2, d2, f2, e);
              }
            else if ("object" === k2)
              throw b2 = String(a2), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b2 ? "object with keys {" + Object.keys(a2).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
            return h2;
          }
          function V2(a2, b2, d2) {
            if (null == a2)
              return a2;
            var c2 = [], e = 0;
            U2(a2, c2, "", "", function(a3) {
              return b2.call(d2, a3, e++);
            });
            return c2;
          }
          function da(a2) {
            if (-1 === a2._status) {
              var b2 = a2._result;
              b2 = b2();
              b2.then(function(b3) {
                if (0 === a2._status || -1 === a2._status)
                  a2._status = 1, a2._result = b3;
              }, function(b3) {
                if (0 === a2._status || -1 === a2._status)
                  a2._status = 2, a2._result = b3;
              });
              -1 === a2._status && (a2._status = 0, a2._result = b2);
            }
            if (1 === a2._status)
              return a2._result.default;
            throw a2._result;
          }
          var W2 = {
            current: null
          }, X2 = {
            transition: null
          }, Y2 = {
            ReactCurrentDispatcher: W2,
            ReactCurrentBatchConfig: X2,
            ReactCurrentOwner: O2,
            ContextRegistry: {}
          }, Z2 = Y2.ContextRegistry;
          exports3.Children = {
            map: V2,
            forEach: function forEach(a2, b2, d2) {
              V2(a2, function() {
                b2.apply(this, arguments);
              }, d2);
            },
            count: function count(a2) {
              var b2 = 0;
              V2(a2, function() {
                b2++;
              });
              return b2;
            },
            toArray: function toArray(a2) {
              return V2(a2, function(a3) {
                return a3;
              }) || [];
            },
            only: function only(a2) {
              if (!R2(a2))
                throw Error("React.Children.only expected to receive a single React element child.");
              return a2;
            }
          };
          exports3.Component = I2;
          exports3.Fragment = p2;
          exports3.Profiler = r2;
          exports3.PureComponent = K;
          exports3.StrictMode = q2;
          exports3.Suspense = x2;
          exports3.SuspenseList = y2;
          exports3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Y2;
          exports3.cloneElement = function(a2, b2, d2) {
            if (null === a2 || void 0 === a2)
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a2 + ".");
            var c2 = G2({}, a2.props), e = a2.key, k2 = a2.ref, h2 = a2._owner;
            if (null != b2) {
              void 0 !== b2.ref && (k2 = b2.ref, h2 = O2.current);
              void 0 !== b2.key && (e = "" + b2.key);
              if (a2.type && a2.type.defaultProps)
                var g2 = a2.type.defaultProps;
              for (f2 in b2) {
                N.call(b2, f2) && !P2.hasOwnProperty(f2) && (c2[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
              }
            }
            var f2 = arguments.length - 2;
            if (1 === f2)
              c2.children = d2;
            else if (1 < f2) {
              g2 = Array(f2);
              for (var m2 = 0; m2 < f2; m2++) {
                g2[m2] = arguments[m2 + 2];
              }
              c2.children = g2;
            }
            return {
              $$typeof: l2,
              type: a2.type,
              key: e,
              ref: k2,
              props: c2,
              _owner: h2
            };
          };
          exports3.createContext = function(a2) {
            a2 = {
              $$typeof: u2,
              _currentValue: a2,
              _currentValue2: a2,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            a2.Provider = {
              $$typeof: t2,
              _context: a2
            };
            return a2.Consumer = a2;
          };
          exports3.createElement = Q2;
          exports3.createFactory = function(a2) {
            var b2 = Q2.bind(null, a2);
            b2.type = a2;
            return b2;
          };
          exports3.createRef = function() {
            return {
              current: null
            };
          };
          exports3.createServerContext = function(a2, b2) {
            var d2 = true;
            if (!Z2[a2]) {
              d2 = false;
              var c2 = {
                $$typeof: v2,
                _currentValue: b2,
                _currentValue2: b2,
                _defaultValue: b2,
                _threadCount: 0,
                Provider: null,
                Consumer: null,
                _globalName: a2
              };
              c2.Provider = {
                $$typeof: t2,
                _context: c2
              };
              Z2[a2] = c2;
            }
            c2 = Z2[a2];
            if (c2._defaultValue === D2)
              c2._defaultValue = b2, c2._currentValue === D2 && (c2._currentValue = b2), c2._currentValue2 === D2 && (c2._currentValue2 = b2);
            else if (d2)
              throw Error("ServerContext: " + a2 + " already defined");
            return c2;
          };
          exports3.forwardRef = function(a2) {
            return {
              $$typeof: w2,
              render: a2
            };
          };
          exports3.isValidElement = R2;
          exports3.lazy = function(a2) {
            return {
              $$typeof: A2,
              _payload: {
                _status: -1,
                _result: a2
              },
              _init: da
            };
          };
          exports3.memo = function(a2, b2) {
            return {
              $$typeof: z2,
              type: a2,
              compare: void 0 === b2 ? null : b2
            };
          };
          exports3.startTransition = function(a2) {
            var b2 = X2.transition;
            X2.transition = {};
            try {
              a2();
            } finally {
              X2.transition = b2;
            }
          };
          exports3.unstable_Cache = aa;
          exports3.unstable_DebugTracingMode = B2;
          exports3.unstable_Offscreen = C2;
          exports3.unstable_act = function() {
            throw Error("act(...) is not supported in production builds of React.");
          };
          exports3.unstable_getCacheForType = function(a2) {
            return W2.current.getCacheForType(a2);
          };
          exports3.unstable_getCacheSignal = function() {
            return W2.current.getCacheSignal();
          };
          exports3.unstable_useCacheRefresh = function() {
            return W2.current.useCacheRefresh();
          };
          exports3.useCallback = function(a2, b2) {
            return W2.current.useCallback(a2, b2);
          };
          exports3.useContext = function(a2) {
            return W2.current.useContext(a2);
          };
          exports3.useDebugValue = function() {
          };
          exports3.useDeferredValue = function(a2) {
            return W2.current.useDeferredValue(a2);
          };
          exports3.useEffect = function(a2, b2) {
            return W2.current.useEffect(a2, b2);
          };
          exports3.useId = function() {
            return W2.current.useId();
          };
          exports3.useImperativeHandle = function(a2, b2, d2) {
            return W2.current.useImperativeHandle(a2, b2, d2);
          };
          exports3.useInsertionEffect = function(a2, b2) {
            return W2.current.useInsertionEffect(a2, b2);
          };
          exports3.useLayoutEffect = function(a2, b2) {
            return W2.current.useLayoutEffect(a2, b2);
          };
          exports3.useMemo = function(a2, b2) {
            return W2.current.useMemo(a2, b2);
          };
          exports3.useReducer = function(a2, b2, d2) {
            return W2.current.useReducer(a2, b2, d2);
          };
          exports3.useRef = function(a2) {
            return W2.current.useRef(a2);
          };
          exports3.useState = function(a2) {
            return W2.current.useState(a2);
          };
          exports3.useSyncExternalStore = function(a2, b2, d2) {
            return W2.current.useSyncExternalStore(a2, b2, d2);
          };
          exports3.useTransition = function() {
            return W2.current.useTransition();
          };
          exports3.version = "18.3.0-experimental-d54880d42-20220713";
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.r(__webpack_exports__);
          __webpack_require__.d(__webpack_exports__, "connectToDevTools", function() {
            return connectToDevTools;
          });
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _defineProperties(target, props) {
            for (var i3 = 0; i3 < props.length; i3++) {
              var descriptor = props[i3];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              _defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              _defineProperties(Constructor, staticProps);
            return Constructor;
          }
          function _defineProperty(obj, key2, value) {
            if (key2 in obj) {
              Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key2] = value;
            }
            return obj;
          }
          var EventEmitter = /* @__PURE__ */ function() {
            function EventEmitter2() {
              _classCallCheck(this, EventEmitter2);
              _defineProperty(this, "listenersMap", /* @__PURE__ */ new Map());
            }
            _createClass(EventEmitter2, [{
              key: "addListener",
              value: function addListener(event, listener) {
                var listeners = this.listenersMap.get(event);
                if (listeners === void 0) {
                  this.listenersMap.set(event, [listener]);
                } else {
                  var index = listeners.indexOf(listener);
                  if (index < 0) {
                    listeners.push(listener);
                  }
                }
              }
            }, {
              key: "emit",
              value: function emit(event) {
                var listeners = this.listenersMap.get(event);
                if (listeners !== void 0) {
                  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                  }
                  if (listeners.length === 1) {
                    var listener = listeners[0];
                    listener.apply(null, args);
                  } else {
                    var didThrow = false;
                    var caughtError = null;
                    var clonedListeners = Array.from(listeners);
                    for (var i3 = 0; i3 < clonedListeners.length; i3++) {
                      var _listener = clonedListeners[i3];
                      try {
                        _listener.apply(null, args);
                      } catch (error) {
                        if (caughtError === null) {
                          didThrow = true;
                          caughtError = error;
                        }
                      }
                    }
                    if (didThrow) {
                      throw caughtError;
                    }
                  }
                }
              }
            }, {
              key: "removeAllListeners",
              value: function removeAllListeners() {
                this.listenersMap.clear();
              }
            }, {
              key: "removeListener",
              value: function removeListener(event, listener) {
                var listeners = this.listenersMap.get(event);
                if (listeners !== void 0) {
                  var index = listeners.indexOf(listener);
                  if (index >= 0) {
                    listeners.splice(index, 1);
                  }
                }
              }
            }]);
            return EventEmitter2;
          }();
          var lodash_throttle = __webpack_require__(14);
          var lodash_throttle_default = /* @__PURE__ */ __webpack_require__.n(lodash_throttle);
          var constants = __webpack_require__(0);
          var storage = __webpack_require__(5);
          var simpleIsEqual = function simpleIsEqual2(a2, b2) {
            return a2 === b2;
          };
          var esm = function(resultFn) {
            var isEqual = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : simpleIsEqual;
            var lastThis = void 0;
            var lastArgs = [];
            var lastResult = void 0;
            var calledOnce = false;
            var isNewArgEqualToLast = function isNewArgEqualToLast2(newArg, index) {
              return isEqual(newArg, lastArgs[index]);
            };
            var result = function result2() {
              for (var _len = arguments.length, newArgs = Array(_len), _key = 0; _key < _len; _key++) {
                newArgs[_key] = arguments[_key];
              }
              if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {
                return lastResult;
              }
              calledOnce = true;
              lastThis = this;
              lastArgs = newArgs;
              lastResult = resultFn.apply(this, newArgs);
              return lastResult;
            };
            return result;
          };
          function getOwnerWindow(node) {
            if (!node.ownerDocument) {
              return null;
            }
            return node.ownerDocument.defaultView;
          }
          function getOwnerIframe(node) {
            var nodeWindow = getOwnerWindow(node);
            if (nodeWindow) {
              return nodeWindow.frameElement;
            }
            return null;
          }
          function getBoundingClientRectWithBorderOffset(node) {
            var dimensions = getElementDimensions(node);
            return mergeRectOffsets([node.getBoundingClientRect(), {
              top: dimensions.borderTop,
              left: dimensions.borderLeft,
              bottom: dimensions.borderBottom,
              right: dimensions.borderRight,
              width: 0,
              height: 0
            }]);
          }
          function mergeRectOffsets(rects) {
            return rects.reduce(function(previousRect, rect) {
              if (previousRect == null) {
                return rect;
              }
              return {
                top: previousRect.top + rect.top,
                left: previousRect.left + rect.left,
                width: previousRect.width,
                height: previousRect.height,
                bottom: previousRect.bottom + rect.bottom,
                right: previousRect.right + rect.right
              };
            });
          }
          function getNestedBoundingClientRect(node, boundaryWindow) {
            var ownerIframe = getOwnerIframe(node);
            if (ownerIframe && ownerIframe !== boundaryWindow) {
              var rects = [node.getBoundingClientRect()];
              var currentIframe = ownerIframe;
              var onlyOneMore = false;
              while (currentIframe) {
                var rect = getBoundingClientRectWithBorderOffset(currentIframe);
                rects.push(rect);
                currentIframe = getOwnerIframe(currentIframe);
                if (onlyOneMore) {
                  break;
                }
                if (currentIframe && getOwnerWindow(currentIframe) === boundaryWindow) {
                  onlyOneMore = true;
                }
              }
              return mergeRectOffsets(rects);
            } else {
              return node.getBoundingClientRect();
            }
          }
          function getElementDimensions(domElement) {
            var calculatedStyle = window.getComputedStyle(domElement);
            return {
              borderLeft: parseInt(calculatedStyle.borderLeftWidth, 10),
              borderRight: parseInt(calculatedStyle.borderRightWidth, 10),
              borderTop: parseInt(calculatedStyle.borderTopWidth, 10),
              borderBottom: parseInt(calculatedStyle.borderBottomWidth, 10),
              marginLeft: parseInt(calculatedStyle.marginLeft, 10),
              marginRight: parseInt(calculatedStyle.marginRight, 10),
              marginTop: parseInt(calculatedStyle.marginTop, 10),
              marginBottom: parseInt(calculatedStyle.marginBottom, 10),
              paddingLeft: parseInt(calculatedStyle.paddingLeft, 10),
              paddingRight: parseInt(calculatedStyle.paddingRight, 10),
              paddingTop: parseInt(calculatedStyle.paddingTop, 10),
              paddingBottom: parseInt(calculatedStyle.paddingBottom, 10)
            };
          }
          function Overlay_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function Overlay_defineProperties(target, props) {
            for (var i3 = 0; i3 < props.length; i3++) {
              var descriptor = props[i3];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          function Overlay_createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              Overlay_defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              Overlay_defineProperties(Constructor, staticProps);
            return Constructor;
          }
          var Overlay_assign = Object.assign;
          var OverlayRect = /* @__PURE__ */ function() {
            function OverlayRect2(doc, container) {
              Overlay_classCallCheck(this, OverlayRect2);
              this.node = doc.createElement("div");
              this.border = doc.createElement("div");
              this.padding = doc.createElement("div");
              this.content = doc.createElement("div");
              this.border.style.borderColor = overlayStyles.border;
              this.padding.style.borderColor = overlayStyles.padding;
              this.content.style.backgroundColor = overlayStyles.background;
              Overlay_assign(this.node.style, {
                borderColor: overlayStyles.margin,
                pointerEvents: "none",
                position: "fixed"
              });
              this.node.style.zIndex = "10000000";
              this.node.appendChild(this.border);
              this.border.appendChild(this.padding);
              this.padding.appendChild(this.content);
              container.appendChild(this.node);
            }
            Overlay_createClass(OverlayRect2, [{
              key: "remove",
              value: function remove() {
                if (this.node.parentNode) {
                  this.node.parentNode.removeChild(this.node);
                }
              }
            }, {
              key: "update",
              value: function update(box, dims) {
                boxWrap(dims, "margin", this.node);
                boxWrap(dims, "border", this.border);
                boxWrap(dims, "padding", this.padding);
                Overlay_assign(this.content.style, {
                  height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + "px",
                  width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + "px"
                });
                Overlay_assign(this.node.style, {
                  top: box.top - dims.marginTop + "px",
                  left: box.left - dims.marginLeft + "px"
                });
              }
            }]);
            return OverlayRect2;
          }();
          var OverlayTip = /* @__PURE__ */ function() {
            function OverlayTip2(doc, container) {
              Overlay_classCallCheck(this, OverlayTip2);
              this.tip = doc.createElement("div");
              Overlay_assign(this.tip.style, {
                display: "flex",
                flexFlow: "row nowrap",
                backgroundColor: "#333740",
                borderRadius: "2px",
                fontFamily: '"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',
                fontWeight: "bold",
                padding: "3px 5px",
                pointerEvents: "none",
                position: "fixed",
                fontSize: "12px",
                whiteSpace: "nowrap"
              });
              this.nameSpan = doc.createElement("span");
              this.tip.appendChild(this.nameSpan);
              Overlay_assign(this.nameSpan.style, {
                color: "#ee78e6",
                borderRight: "1px solid #aaaaaa",
                paddingRight: "0.5rem",
                marginRight: "0.5rem"
              });
              this.dimSpan = doc.createElement("span");
              this.tip.appendChild(this.dimSpan);
              Overlay_assign(this.dimSpan.style, {
                color: "#d7d7d7"
              });
              this.tip.style.zIndex = "10000000";
              container.appendChild(this.tip);
            }
            Overlay_createClass(OverlayTip2, [{
              key: "remove",
              value: function remove() {
                if (this.tip.parentNode) {
                  this.tip.parentNode.removeChild(this.tip);
                }
              }
            }, {
              key: "updateText",
              value: function updateText(name, width, height) {
                this.nameSpan.textContent = name;
                this.dimSpan.textContent = Math.round(width) + "px \xD7 " + Math.round(height) + "px";
              }
            }, {
              key: "updatePosition",
              value: function updatePosition(dims, bounds) {
                var tipRect = this.tip.getBoundingClientRect();
                var tipPos = findTipPos(dims, bounds, {
                  width: tipRect.width,
                  height: tipRect.height
                });
                Overlay_assign(this.tip.style, tipPos.style);
              }
            }]);
            return OverlayTip2;
          }();
          var Overlay_Overlay = /* @__PURE__ */ function() {
            function Overlay(agent) {
              Overlay_classCallCheck(this, Overlay);
              var currentWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
              this.window = currentWindow;
              var tipBoundsWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
              this.tipBoundsWindow = tipBoundsWindow;
              var doc = currentWindow.document;
              this.container = doc.createElement("div");
              this.container.style.zIndex = "10000000";
              this.tip = new OverlayTip(doc, this.container);
              this.rects = [];
              this.agent = agent;
              doc.body.appendChild(this.container);
            }
            Overlay_createClass(Overlay, [{
              key: "remove",
              value: function remove() {
                this.tip.remove();
                this.rects.forEach(function(rect) {
                  rect.remove();
                });
                this.rects.length = 0;
                if (this.container.parentNode) {
                  this.container.parentNode.removeChild(this.container);
                }
              }
            }, {
              key: "inspect",
              value: function inspect(nodes, name) {
                var _this = this;
                var elements = nodes.filter(function(node2) {
                  return node2.nodeType === Node.ELEMENT_NODE;
                });
                while (this.rects.length > elements.length) {
                  var rect = this.rects.pop();
                  rect.remove();
                }
                if (elements.length === 0) {
                  return;
                }
                while (this.rects.length < elements.length) {
                  this.rects.push(new OverlayRect(this.window.document, this.container));
                }
                var outerBox = {
                  top: Number.POSITIVE_INFINITY,
                  right: Number.NEGATIVE_INFINITY,
                  bottom: Number.NEGATIVE_INFINITY,
                  left: Number.POSITIVE_INFINITY
                };
                elements.forEach(function(element, index) {
                  var box = getNestedBoundingClientRect(element, _this.window);
                  var dims = getElementDimensions(element);
                  outerBox.top = Math.min(outerBox.top, box.top - dims.marginTop);
                  outerBox.right = Math.max(outerBox.right, box.left + box.width + dims.marginRight);
                  outerBox.bottom = Math.max(outerBox.bottom, box.top + box.height + dims.marginBottom);
                  outerBox.left = Math.min(outerBox.left, box.left - dims.marginLeft);
                  var rect2 = _this.rects[index];
                  rect2.update(box, dims);
                });
                if (!name) {
                  name = elements[0].nodeName.toLowerCase();
                  var node = elements[0];
                  var rendererInterface = this.agent.getBestMatchingRendererInterface(node);
                  if (rendererInterface) {
                    var id = rendererInterface.getFiberIDForNative(node, true);
                    if (id) {
                      var ownerName = rendererInterface.getDisplayNameForFiberID(id, true);
                      if (ownerName) {
                        name += " (in " + ownerName + ")";
                      }
                    }
                  }
                }
                this.tip.updateText(name, outerBox.right - outerBox.left, outerBox.bottom - outerBox.top);
                var tipBounds = getNestedBoundingClientRect(this.tipBoundsWindow.document.documentElement, this.window);
                this.tip.updatePosition({
                  top: outerBox.top,
                  left: outerBox.left,
                  height: outerBox.bottom - outerBox.top,
                  width: outerBox.right - outerBox.left
                }, {
                  top: tipBounds.top + this.tipBoundsWindow.scrollY,
                  left: tipBounds.left + this.tipBoundsWindow.scrollX,
                  height: this.tipBoundsWindow.innerHeight,
                  width: this.tipBoundsWindow.innerWidth
                });
              }
            }]);
            return Overlay;
          }();
          function findTipPos(dims, bounds, tipSize) {
            var tipHeight = Math.max(tipSize.height, 20);
            var tipWidth = Math.max(tipSize.width, 60);
            var margin = 5;
            var top;
            if (dims.top + dims.height + tipHeight <= bounds.top + bounds.height) {
              if (dims.top + dims.height < bounds.top + 0) {
                top = bounds.top + margin;
              } else {
                top = dims.top + dims.height + margin;
              }
            } else if (dims.top - tipHeight <= bounds.top + bounds.height) {
              if (dims.top - tipHeight - margin < bounds.top + margin) {
                top = bounds.top + margin;
              } else {
                top = dims.top - tipHeight - margin;
              }
            } else {
              top = bounds.top + bounds.height - tipHeight - margin;
            }
            var left = dims.left + margin;
            if (dims.left < bounds.left) {
              left = bounds.left + margin;
            }
            if (dims.left + tipWidth > bounds.left + bounds.width) {
              left = bounds.left + bounds.width - tipWidth - margin;
            }
            top += "px";
            left += "px";
            return {
              style: {
                top,
                left
              }
            };
          }
          function boxWrap(dims, what, node) {
            Overlay_assign(node.style, {
              borderTopWidth: dims[what + "Top"] + "px",
              borderLeftWidth: dims[what + "Left"] + "px",
              borderRightWidth: dims[what + "Right"] + "px",
              borderBottomWidth: dims[what + "Bottom"] + "px",
              borderStyle: "solid"
            });
          }
          var overlayStyles = {
            background: "rgba(120, 170, 210, 0.7)",
            padding: "rgba(77, 200, 0, 0.3)",
            margin: "rgba(255, 155, 0, 0.3)",
            border: "rgba(255, 200, 50, 0.3)"
          };
          var SHOW_DURATION = 2e3;
          var timeoutID = null;
          var overlay = null;
          function hideOverlay() {
            timeoutID = null;
            if (overlay !== null) {
              overlay.remove();
              overlay = null;
            }
          }
          function showOverlay(elements, componentName, agent, hideAfterTimeout) {
            if (window.document == null) {
              return;
            }
            if (timeoutID !== null) {
              clearTimeout(timeoutID);
            }
            if (elements == null) {
              return;
            }
            if (overlay === null) {
              overlay = new Overlay_Overlay(agent);
            }
            overlay.inspect(elements, componentName);
            if (hideAfterTimeout) {
              timeoutID = setTimeout(hideOverlay, SHOW_DURATION);
            }
          }
          var iframesListeningTo = /* @__PURE__ */ new Set();
          function setupHighlighter(bridge, agent) {
            bridge.addListener("clearNativeElementHighlight", clearNativeElementHighlight);
            bridge.addListener("highlightNativeElement", highlightNativeElement);
            bridge.addListener("shutdown", stopInspectingNative);
            bridge.addListener("startInspectingNative", startInspectingNative);
            bridge.addListener("stopInspectingNative", stopInspectingNative);
            function startInspectingNative() {
              registerListenersOnWindow(window);
            }
            function registerListenersOnWindow(window2) {
              if (window2 && typeof window2.addEventListener === "function") {
                window2.addEventListener("click", onClick, true);
                window2.addEventListener("mousedown", onMouseEvent, true);
                window2.addEventListener("mouseover", onMouseEvent, true);
                window2.addEventListener("mouseup", onMouseEvent, true);
                window2.addEventListener("pointerdown", onPointerDown, true);
                window2.addEventListener("pointerover", onPointerOver, true);
                window2.addEventListener("pointerup", onPointerUp, true);
              }
            }
            function stopInspectingNative() {
              hideOverlay();
              removeListenersOnWindow(window);
              iframesListeningTo.forEach(function(frame) {
                try {
                  removeListenersOnWindow(frame.contentWindow);
                } catch (error) {
                }
              });
              iframesListeningTo = /* @__PURE__ */ new Set();
            }
            function removeListenersOnWindow(window2) {
              if (window2 && typeof window2.removeEventListener === "function") {
                window2.removeEventListener("click", onClick, true);
                window2.removeEventListener("mousedown", onMouseEvent, true);
                window2.removeEventListener("mouseover", onMouseEvent, true);
                window2.removeEventListener("mouseup", onMouseEvent, true);
                window2.removeEventListener("pointerdown", onPointerDown, true);
                window2.removeEventListener("pointerover", onPointerOver, true);
                window2.removeEventListener("pointerup", onPointerUp, true);
              }
            }
            function clearNativeElementHighlight() {
              hideOverlay();
            }
            function highlightNativeElement(_ref) {
              var displayName = _ref.displayName, hideAfterTimeout = _ref.hideAfterTimeout, id = _ref.id, openNativeElementsPanel = _ref.openNativeElementsPanel, rendererID = _ref.rendererID, scrollIntoView = _ref.scrollIntoView;
              var renderer = agent.rendererInterfaces[rendererID];
              if (renderer == null) {
                console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
              }
              var nodes = null;
              if (renderer != null) {
                nodes = renderer.findNativeNodesForFiberID(id);
              }
              if (nodes != null && nodes[0] != null) {
                var node = nodes[0];
                if (scrollIntoView && typeof node.scrollIntoView === "function") {
                  node.scrollIntoView({
                    block: "nearest",
                    inline: "nearest"
                  });
                }
                showOverlay(nodes, displayName, agent, hideAfterTimeout);
                if (openNativeElementsPanel) {
                  window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0 = node;
                  bridge.send("syncSelectionToNativeElementsPanel");
                }
              } else {
                hideOverlay();
              }
            }
            function onClick(event) {
              event.preventDefault();
              event.stopPropagation();
              stopInspectingNative();
              bridge.send("stopInspectingNative", true);
            }
            function onMouseEvent(event) {
              event.preventDefault();
              event.stopPropagation();
            }
            function onPointerDown(event) {
              event.preventDefault();
              event.stopPropagation();
              selectFiberForNode(event.target);
            }
            function onPointerOver(event) {
              event.preventDefault();
              event.stopPropagation();
              var target = event.target;
              if (target.tagName === "IFRAME") {
                var iframe = target;
                try {
                  if (!iframesListeningTo.has(iframe)) {
                    var _window = iframe.contentWindow;
                    registerListenersOnWindow(_window);
                    iframesListeningTo.add(iframe);
                  }
                } catch (error) {
                }
              }
              showOverlay([target], null, agent, false);
              selectFiberForNode(target);
            }
            function onPointerUp(event) {
              event.preventDefault();
              event.stopPropagation();
            }
            var selectFiberForNode = lodash_throttle_default()(
              esm(function(node) {
                var id = agent.getIDForNode(node);
                if (id !== null) {
                  bridge.send("selectFiber", id);
                }
              }),
              200,
              {
                leading: false
              }
            );
          }
          var OUTLINE_COLOR = "#f0f0f0";
          var COLORS = ["#37afa9", "#63b19e", "#80b393", "#97b488", "#abb67d", "#beb771", "#cfb965", "#dfba57", "#efbb49", "#febc38"];
          var canvas = null;
          function draw(nodeToData2) {
            if (canvas === null) {
              initialize();
            }
            var canvasFlow = canvas;
            canvasFlow.width = window.innerWidth;
            canvasFlow.height = window.innerHeight;
            var context = canvasFlow.getContext("2d");
            context.clearRect(0, 0, canvasFlow.width, canvasFlow.height);
            nodeToData2.forEach(function(_ref) {
              var count = _ref.count, rect = _ref.rect;
              if (rect !== null) {
                var colorIndex = Math.min(COLORS.length - 1, count - 1);
                var color = COLORS[colorIndex];
                drawBorder(context, rect, color);
              }
            });
          }
          function drawBorder(context, rect, color) {
            var height = rect.height, left = rect.left, top = rect.top, width = rect.width;
            context.lineWidth = 1;
            context.strokeStyle = OUTLINE_COLOR;
            context.strokeRect(left - 1, top - 1, width + 2, height + 2);
            context.lineWidth = 1;
            context.strokeStyle = OUTLINE_COLOR;
            context.strokeRect(left + 1, top + 1, width - 1, height - 1);
            context.strokeStyle = color;
            context.setLineDash([0]);
            context.lineWidth = 1;
            context.strokeRect(left, top, width - 1, height - 1);
            context.setLineDash([0]);
          }
          function destroy() {
            if (canvas !== null) {
              if (canvas.parentNode != null) {
                canvas.parentNode.removeChild(canvas);
              }
              canvas = null;
            }
          }
          function initialize() {
            canvas = window.document.createElement("canvas");
            canvas.style.cssText = "\n    xx-background-color: red;\n    xx-opacity: 0.5;\n    bottom: 0;\n    left: 0;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 1000000000;\n  ";
            var root = window.document.documentElement;
            root.insertBefore(canvas, root.firstChild);
          }
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var DISPLAY_DURATION = 250;
          var MAX_DISPLAY_DURATION = 3e3;
          var REMEASUREMENT_AFTER_DURATION = 250;
          var getCurrentTime = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && typeof performance.now === "function" ? function() {
            return performance.now();
          } : function() {
            return Date.now();
          };
          var nodeToData = /* @__PURE__ */ new Map();
          var TraceUpdates_agent = null;
          var drawAnimationFrameID = null;
          var isEnabled = false;
          var redrawTimeoutID = null;
          function TraceUpdates_initialize(injectedAgent) {
            TraceUpdates_agent = injectedAgent;
            TraceUpdates_agent.addListener("traceUpdates", traceUpdates);
          }
          function toggleEnabled(value) {
            isEnabled = value;
            if (!isEnabled) {
              nodeToData.clear();
              if (drawAnimationFrameID !== null) {
                cancelAnimationFrame(drawAnimationFrameID);
                drawAnimationFrameID = null;
              }
              if (redrawTimeoutID !== null) {
                clearTimeout(redrawTimeoutID);
                redrawTimeoutID = null;
              }
              destroy();
            }
          }
          function traceUpdates(nodes) {
            if (!isEnabled) {
              return;
            }
            nodes.forEach(function(node) {
              var data = nodeToData.get(node);
              var now = getCurrentTime();
              var lastMeasuredAt = data != null ? data.lastMeasuredAt : 0;
              var rect = data != null ? data.rect : null;
              if (rect === null || lastMeasuredAt + REMEASUREMENT_AFTER_DURATION < now) {
                lastMeasuredAt = now;
                rect = measureNode(node);
              }
              nodeToData.set(node, {
                count: data != null ? data.count + 1 : 1,
                expirationTime: data != null ? Math.min(now + MAX_DISPLAY_DURATION, data.expirationTime + DISPLAY_DURATION) : now + DISPLAY_DURATION,
                lastMeasuredAt,
                rect
              });
            });
            if (redrawTimeoutID !== null) {
              clearTimeout(redrawTimeoutID);
              redrawTimeoutID = null;
            }
            if (drawAnimationFrameID === null) {
              drawAnimationFrameID = requestAnimationFrame(prepareToDraw);
            }
          }
          function prepareToDraw() {
            drawAnimationFrameID = null;
            redrawTimeoutID = null;
            var now = getCurrentTime();
            var earliestExpiration = Number.MAX_VALUE;
            nodeToData.forEach(function(data, node) {
              if (data.expirationTime < now) {
                nodeToData.delete(node);
              } else {
                earliestExpiration = Math.min(earliestExpiration, data.expirationTime);
              }
            });
            draw(nodeToData);
            if (earliestExpiration !== Number.MAX_VALUE) {
              redrawTimeoutID = setTimeout(prepareToDraw, earliestExpiration - now);
            }
          }
          function measureNode(node) {
            if (!node || typeof node.getBoundingClientRect !== "function") {
              return null;
            }
            var currentWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
            return getNestedBoundingClientRect(node, currentWindow);
          }
          var backend_console = __webpack_require__(8);
          function bridge_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              bridge_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              bridge_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return bridge_typeof(obj);
          }
          function _toConsumableArray(arr) {
            return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
          }
          function _nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function _unsupportedIterableToArray(o2, minLen) {
            if (!o2)
              return;
            if (typeof o2 === "string")
              return _arrayLikeToArray(o2, minLen);
            var n2 = Object.prototype.toString.call(o2).slice(8, -1);
            if (n2 === "Object" && o2.constructor)
              n2 = o2.constructor.name;
            if (n2 === "Map" || n2 === "Set")
              return Array.from(o2);
            if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
              return _arrayLikeToArray(o2, minLen);
          }
          function _iterableToArray(iter) {
            if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
              return Array.from(iter);
          }
          function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr))
              return _arrayLikeToArray(arr);
          }
          function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
              arr2[i3] = arr[i3];
            }
            return arr2;
          }
          function bridge_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function bridge_defineProperties(target, props) {
            for (var i3 = 0; i3 < props.length; i3++) {
              var descriptor = props[i3];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          function bridge_createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              bridge_defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              bridge_defineProperties(Constructor, staticProps);
            return Constructor;
          }
          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function");
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
            if (superClass)
              _setPrototypeOf(subClass, superClass);
          }
          function _setPrototypeOf(o2, p2) {
            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
              o3.__proto__ = p3;
              return o3;
            };
            return _setPrototypeOf(o2, p2);
          }
          function _createSuper(Derived) {
            var hasNativeReflectConstruct = _isNativeReflectConstruct();
            return function _createSuperInternal() {
              var Super = _getPrototypeOf(Derived), result;
              if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
              } else {
                result = Super.apply(this, arguments);
              }
              return _possibleConstructorReturn(this, result);
            };
          }
          function _possibleConstructorReturn(self2, call) {
            if (call && (bridge_typeof(call) === "object" || typeof call === "function")) {
              return call;
            }
            return _assertThisInitialized(self2);
          }
          function _assertThisInitialized(self2) {
            if (self2 === void 0) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self2;
          }
          function _isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if (typeof Proxy === "function")
              return true;
            try {
              Date.prototype.toString.call(Reflect.construct(Date, [], function() {
              }));
              return true;
            } catch (e) {
              return false;
            }
          }
          function _getPrototypeOf(o2) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
              return o3.__proto__ || Object.getPrototypeOf(o3);
            };
            return _getPrototypeOf(o2);
          }
          function bridge_defineProperty(obj, key2, value) {
            if (key2 in obj) {
              Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key2] = value;
            }
            return obj;
          }
          var BATCH_DURATION = 100;
          var BRIDGE_PROTOCOL = [
            {
              version: 0,
              minNpmVersion: '"<4.11.0"',
              maxNpmVersion: '"<4.11.0"'
            },
            {
              version: 1,
              minNpmVersion: "4.13.0",
              maxNpmVersion: "4.21.0"
            },
            {
              version: 2,
              minNpmVersion: "4.22.0",
              maxNpmVersion: null
            }
          ];
          var currentBridgeProtocol = BRIDGE_PROTOCOL[BRIDGE_PROTOCOL.length - 1];
          var Bridge = /* @__PURE__ */ function(_EventEmitter) {
            _inherits(Bridge2, _EventEmitter);
            var _super = _createSuper(Bridge2);
            function Bridge2(wall) {
              var _this;
              bridge_classCallCheck(this, Bridge2);
              _this = _super.call(this);
              bridge_defineProperty(_assertThisInitialized(_this), "_isShutdown", false);
              bridge_defineProperty(_assertThisInitialized(_this), "_messageQueue", []);
              bridge_defineProperty(_assertThisInitialized(_this), "_timeoutID", null);
              bridge_defineProperty(_assertThisInitialized(_this), "_wallUnlisten", null);
              bridge_defineProperty(_assertThisInitialized(_this), "_flush", function() {
                if (_this._timeoutID !== null) {
                  clearTimeout(_this._timeoutID);
                  _this._timeoutID = null;
                }
                if (_this._messageQueue.length) {
                  for (var i3 = 0; i3 < _this._messageQueue.length; i3 += 2) {
                    var _this$_wall;
                    (_this$_wall = _this._wall).send.apply(_this$_wall, [_this._messageQueue[i3]].concat(_toConsumableArray(_this._messageQueue[i3 + 1])));
                  }
                  _this._messageQueue.length = 0;
                  _this._timeoutID = setTimeout(_this._flush, BATCH_DURATION);
                }
              });
              bridge_defineProperty(_assertThisInitialized(_this), "overrideValueAtPath", function(_ref) {
                var id = _ref.id, path = _ref.path, rendererID = _ref.rendererID, type2 = _ref.type, value = _ref.value;
                switch (type2) {
                  case "context":
                    _this.send("overrideContext", {
                      id,
                      path,
                      rendererID,
                      wasForwarded: true,
                      value
                    });
                    break;
                  case "hooks":
                    _this.send("overrideHookState", {
                      id,
                      path,
                      rendererID,
                      wasForwarded: true,
                      value
                    });
                    break;
                  case "props":
                    _this.send("overrideProps", {
                      id,
                      path,
                      rendererID,
                      wasForwarded: true,
                      value
                    });
                    break;
                  case "state":
                    _this.send("overrideState", {
                      id,
                      path,
                      rendererID,
                      wasForwarded: true,
                      value
                    });
                    break;
                }
              });
              _this._wall = wall;
              _this._wallUnlisten = wall.listen(function(message) {
                if (message && message.event) {
                  _assertThisInitialized(_this).emit(message.event, message.payload);
                }
              }) || null;
              _this.addListener("overrideValueAtPath", _this.overrideValueAtPath);
              return _this;
            }
            bridge_createClass(Bridge2, [{
              key: "send",
              value: function send(event) {
                if (this._isShutdown) {
                  console.warn('Cannot send message "'.concat(event, '" through a Bridge that has been shutdown.'));
                  return;
                }
                for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  payload[_key - 1] = arguments[_key];
                }
                this._messageQueue.push(event, payload);
                if (!this._timeoutID) {
                  this._timeoutID = setTimeout(this._flush, 0);
                }
              }
            }, {
              key: "shutdown",
              value: function shutdown() {
                if (this._isShutdown) {
                  console.warn("Bridge was already shutdown.");
                  return;
                }
                this.send("shutdown");
                this._isShutdown = true;
                this.addListener = function() {
                };
                this.emit = function() {
                };
                this.removeAllListeners();
                var wallUnlisten = this._wallUnlisten;
                if (wallUnlisten) {
                  wallUnlisten();
                }
                do {
                  this._flush();
                } while (this._messageQueue.length);
                if (this._timeoutID !== null) {
                  clearTimeout(this._timeoutID);
                  this._timeoutID = null;
                }
              }
            }, {
              key: "wall",
              get: function get() {
                return this._wall;
              }
            }]);
            return Bridge2;
          }(EventEmitter);
          var src_bridge = Bridge;
          var utils = __webpack_require__(4);
          function agent_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              agent_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              agent_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return agent_typeof(obj);
          }
          function agent_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function agent_defineProperties(target, props) {
            for (var i3 = 0; i3 < props.length; i3++) {
              var descriptor = props[i3];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          function agent_createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              agent_defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              agent_defineProperties(Constructor, staticProps);
            return Constructor;
          }
          function agent_inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function");
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
            if (superClass)
              agent_setPrototypeOf(subClass, superClass);
          }
          function agent_setPrototypeOf(o2, p2) {
            agent_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
              o3.__proto__ = p3;
              return o3;
            };
            return agent_setPrototypeOf(o2, p2);
          }
          function agent_createSuper(Derived) {
            var hasNativeReflectConstruct = agent_isNativeReflectConstruct();
            return function _createSuperInternal() {
              var Super = agent_getPrototypeOf(Derived), result;
              if (hasNativeReflectConstruct) {
                var NewTarget = agent_getPrototypeOf(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
              } else {
                result = Super.apply(this, arguments);
              }
              return agent_possibleConstructorReturn(this, result);
            };
          }
          function agent_possibleConstructorReturn(self2, call) {
            if (call && (agent_typeof(call) === "object" || typeof call === "function")) {
              return call;
            }
            return agent_assertThisInitialized(self2);
          }
          function agent_assertThisInitialized(self2) {
            if (self2 === void 0) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self2;
          }
          function agent_isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if (typeof Proxy === "function")
              return true;
            try {
              Date.prototype.toString.call(Reflect.construct(Date, [], function() {
              }));
              return true;
            } catch (e) {
              return false;
            }
          }
          function agent_getPrototypeOf(o2) {
            agent_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
              return o3.__proto__ || Object.getPrototypeOf(o3);
            };
            return agent_getPrototypeOf(o2);
          }
          function agent_defineProperty(obj, key2, value) {
            if (key2 in obj) {
              Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key2] = value;
            }
            return obj;
          }
          var agent_debug = function debug(methodName) {
            if (constants["s"]) {
              var _console;
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              (_console = console).log.apply(_console, ["%cAgent %c".concat(methodName), "color: purple; font-weight: bold;", "font-weight: bold;"].concat(args));
            }
          };
          var agent_Agent = /* @__PURE__ */ function(_EventEmitter) {
            agent_inherits(Agent, _EventEmitter);
            var _super = agent_createSuper(Agent);
            function Agent(bridge) {
              var _this;
              agent_classCallCheck(this, Agent);
              _this = _super.call(this);
              agent_defineProperty(agent_assertThisInitialized(_this), "_isProfiling", false);
              agent_defineProperty(agent_assertThisInitialized(_this), "_recordChangeDescriptions", false);
              agent_defineProperty(agent_assertThisInitialized(_this), "_rendererInterfaces", {});
              agent_defineProperty(agent_assertThisInitialized(_this), "_persistedSelection", null);
              agent_defineProperty(agent_assertThisInitialized(_this), "_persistedSelectionMatch", null);
              agent_defineProperty(agent_assertThisInitialized(_this), "_traceUpdatesEnabled", false);
              agent_defineProperty(agent_assertThisInitialized(_this), "clearErrorsAndWarnings", function(_ref) {
                var rendererID = _ref.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '"'));
                } else {
                  renderer.clearErrorsAndWarnings();
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "clearErrorsForFiberID", function(_ref2) {
                var id = _ref2.id, rendererID = _ref2.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '"'));
                } else {
                  renderer.clearErrorsForFiberID(id);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "clearWarningsForFiberID", function(_ref3) {
                var id = _ref3.id, rendererID = _ref3.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '"'));
                } else {
                  renderer.clearWarningsForFiberID(id);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "copyElementPath", function(_ref4) {
                var id = _ref4.id, path = _ref4.path, rendererID = _ref4.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.copyElementPath(id, path);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "deletePath", function(_ref5) {
                var hookID = _ref5.hookID, id = _ref5.id, path = _ref5.path, rendererID = _ref5.rendererID, type2 = _ref5.type;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.deletePath(type2, id, hookID, path);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "getBackendVersion", function() {
                var version = "4.25.0-336ac8ceb";
                if (version) {
                  _this._bridge.send("backendVersion", version);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "getBridgeProtocol", function() {
                _this._bridge.send("bridgeProtocol", currentBridgeProtocol);
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "getProfilingData", function(_ref6) {
                var rendererID = _ref6.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '"'));
                }
                _this._bridge.send("profilingData", renderer.getProfilingData());
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "getProfilingStatus", function() {
                _this._bridge.send("profilingStatus", _this._isProfiling);
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "getOwnersList", function(_ref7) {
                var id = _ref7.id, rendererID = _ref7.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  var owners = renderer.getOwnersList(id);
                  _this._bridge.send("ownersList", {
                    id,
                    owners
                  });
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "inspectElement", function(_ref8) {
                var forceFullData = _ref8.forceFullData, id = _ref8.id, path = _ref8.path, rendererID = _ref8.rendererID, requestID = _ref8.requestID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  _this._bridge.send("inspectedElement", renderer.inspectElement(requestID, id, path, forceFullData));
                  if (_this._persistedSelectionMatch === null || _this._persistedSelectionMatch.id !== id) {
                    _this._persistedSelection = null;
                    _this._persistedSelectionMatch = null;
                    renderer.setTrackedPath(null);
                    _this._throttledPersistSelection(rendererID, id);
                  }
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "logElementToConsole", function(_ref9) {
                var id = _ref9.id, rendererID = _ref9.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.logElementToConsole(id);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideError", function(_ref10) {
                var id = _ref10.id, rendererID = _ref10.rendererID, forceError = _ref10.forceError;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.overrideError(id, forceError);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideSuspense", function(_ref11) {
                var id = _ref11.id, rendererID = _ref11.rendererID, forceFallback = _ref11.forceFallback;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.overrideSuspense(id, forceFallback);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideValueAtPath", function(_ref12) {
                var hookID = _ref12.hookID, id = _ref12.id, path = _ref12.path, rendererID = _ref12.rendererID, type2 = _ref12.type, value = _ref12.value;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.overrideValueAtPath(type2, id, hookID, path, value);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideContext", function(_ref13) {
                var id = _ref13.id, path = _ref13.path, rendererID = _ref13.rendererID, wasForwarded = _ref13.wasForwarded, value = _ref13.value;
                if (!wasForwarded) {
                  _this.overrideValueAtPath({
                    id,
                    path,
                    rendererID,
                    type: "context",
                    value
                  });
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideHookState", function(_ref14) {
                var id = _ref14.id, hookID = _ref14.hookID, path = _ref14.path, rendererID = _ref14.rendererID, wasForwarded = _ref14.wasForwarded, value = _ref14.value;
                if (!wasForwarded) {
                  _this.overrideValueAtPath({
                    id,
                    path,
                    rendererID,
                    type: "hooks",
                    value
                  });
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideProps", function(_ref15) {
                var id = _ref15.id, path = _ref15.path, rendererID = _ref15.rendererID, wasForwarded = _ref15.wasForwarded, value = _ref15.value;
                if (!wasForwarded) {
                  _this.overrideValueAtPath({
                    id,
                    path,
                    rendererID,
                    type: "props",
                    value
                  });
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideState", function(_ref16) {
                var id = _ref16.id, path = _ref16.path, rendererID = _ref16.rendererID, wasForwarded = _ref16.wasForwarded, value = _ref16.value;
                if (!wasForwarded) {
                  _this.overrideValueAtPath({
                    id,
                    path,
                    rendererID,
                    type: "state",
                    value
                  });
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "reloadAndProfile", function(recordChangeDescriptions) {
                Object(storage["e"])(constants["k"], "true");
                Object(storage["e"])(constants["j"], recordChangeDescriptions ? "true" : "false");
                _this._bridge.send("reloadAppForProfiling");
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "renamePath", function(_ref17) {
                var hookID = _ref17.hookID, id = _ref17.id, newPath = _ref17.newPath, oldPath = _ref17.oldPath, rendererID = _ref17.rendererID, type2 = _ref17.type;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.renamePath(type2, id, hookID, oldPath, newPath);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "setTraceUpdatesEnabled", function(traceUpdatesEnabled) {
                _this._traceUpdatesEnabled = traceUpdatesEnabled;
                toggleEnabled(traceUpdatesEnabled);
                for (var rendererID in _this._rendererInterfaces) {
                  var renderer = _this._rendererInterfaces[rendererID];
                  renderer.setTraceUpdatesEnabled(traceUpdatesEnabled);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "syncSelectionFromNativeElementsPanel", function() {
                var target = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;
                if (target == null) {
                  return;
                }
                _this.selectNode(target);
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "shutdown", function() {
                _this.emit("shutdown");
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "startProfiling", function(recordChangeDescriptions) {
                _this._recordChangeDescriptions = recordChangeDescriptions;
                _this._isProfiling = true;
                for (var rendererID in _this._rendererInterfaces) {
                  var renderer = _this._rendererInterfaces[rendererID];
                  renderer.startProfiling(recordChangeDescriptions);
                }
                _this._bridge.send("profilingStatus", _this._isProfiling);
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "stopProfiling", function() {
                _this._isProfiling = false;
                _this._recordChangeDescriptions = false;
                for (var rendererID in _this._rendererInterfaces) {
                  var renderer = _this._rendererInterfaces[rendererID];
                  renderer.stopProfiling();
                }
                _this._bridge.send("profilingStatus", _this._isProfiling);
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "storeAsGlobal", function(_ref18) {
                var count = _ref18.count, id = _ref18.id, path = _ref18.path, rendererID = _ref18.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.storeAsGlobal(id, path, count);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "updateConsolePatchSettings", function(_ref19) {
                var appendComponentStack = _ref19.appendComponentStack, breakOnConsoleErrors = _ref19.breakOnConsoleErrors, showInlineWarningsAndErrors = _ref19.showInlineWarningsAndErrors, hideConsoleLogsInStrictMode = _ref19.hideConsoleLogsInStrictMode, browserTheme = _ref19.browserTheme;
                Object(backend_console["a"])({
                  appendComponentStack,
                  breakOnConsoleErrors,
                  showInlineWarningsAndErrors,
                  hideConsoleLogsInStrictMode,
                  browserTheme
                });
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "updateComponentFilters", function(componentFilters) {
                for (var rendererID in _this._rendererInterfaces) {
                  var renderer = _this._rendererInterfaces[rendererID];
                  renderer.updateComponentFilters(componentFilters);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "viewAttributeSource", function(_ref20) {
                var id = _ref20.id, path = _ref20.path, rendererID = _ref20.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.prepareViewAttributeSource(id, path);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "viewElementSource", function(_ref21) {
                var id = _ref21.id, rendererID = _ref21.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.prepareViewElementSource(id);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "onTraceUpdates", function(nodes) {
                _this.emit("traceUpdates", nodes);
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "onFastRefreshScheduled", function() {
                if (constants["s"]) {
                  agent_debug("onFastRefreshScheduled");
                }
                _this._bridge.send("fastRefreshScheduled");
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "onHookOperations", function(operations) {
                if (constants["s"]) {
                  agent_debug("onHookOperations", "(".concat(operations.length, ") [").concat(operations.join(", "), "]"));
                }
                _this._bridge.send("operations", operations);
                if (_this._persistedSelection !== null) {
                  var rendererID = operations[0];
                  if (_this._persistedSelection.rendererID === rendererID) {
                    var renderer = _this._rendererInterfaces[rendererID];
                    if (renderer == null) {
                      console.warn('Invalid renderer id "'.concat(rendererID, '"'));
                    } else {
                      var prevMatch = _this._persistedSelectionMatch;
                      var nextMatch = renderer.getBestMatchForTrackedPath();
                      _this._persistedSelectionMatch = nextMatch;
                      var prevMatchID = prevMatch !== null ? prevMatch.id : null;
                      var nextMatchID = nextMatch !== null ? nextMatch.id : null;
                      if (prevMatchID !== nextMatchID) {
                        if (nextMatchID !== null) {
                          _this._bridge.send("selectFiber", nextMatchID);
                        }
                      }
                      if (nextMatch !== null && nextMatch.isFullMatch) {
                        _this._persistedSelection = null;
                        _this._persistedSelectionMatch = null;
                        renderer.setTrackedPath(null);
                      }
                    }
                  }
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "_throttledPersistSelection", lodash_throttle_default()(function(rendererID, id) {
                var renderer = _this._rendererInterfaces[rendererID];
                var path = renderer != null ? renderer.getPathForElement(id) : null;
                if (path !== null) {
                  Object(storage["e"])(constants["i"], JSON.stringify({
                    rendererID,
                    path
                  }));
                } else {
                  Object(storage["d"])(constants["i"]);
                }
              }, 1e3));
              if (Object(storage["c"])(constants["k"]) === "true") {
                _this._recordChangeDescriptions = Object(storage["c"])(constants["j"]) === "true";
                _this._isProfiling = true;
                Object(storage["d"])(constants["j"]);
                Object(storage["d"])(constants["k"]);
              }
              var persistedSelectionString = Object(storage["c"])(constants["i"]);
              if (persistedSelectionString != null) {
                _this._persistedSelection = JSON.parse(persistedSelectionString);
              }
              _this._bridge = bridge;
              bridge.addListener("clearErrorsAndWarnings", _this.clearErrorsAndWarnings);
              bridge.addListener("clearErrorsForFiberID", _this.clearErrorsForFiberID);
              bridge.addListener("clearWarningsForFiberID", _this.clearWarningsForFiberID);
              bridge.addListener("copyElementPath", _this.copyElementPath);
              bridge.addListener("deletePath", _this.deletePath);
              bridge.addListener("getBackendVersion", _this.getBackendVersion);
              bridge.addListener("getBridgeProtocol", _this.getBridgeProtocol);
              bridge.addListener("getProfilingData", _this.getProfilingData);
              bridge.addListener("getProfilingStatus", _this.getProfilingStatus);
              bridge.addListener("getOwnersList", _this.getOwnersList);
              bridge.addListener("inspectElement", _this.inspectElement);
              bridge.addListener("logElementToConsole", _this.logElementToConsole);
              bridge.addListener("overrideError", _this.overrideError);
              bridge.addListener("overrideSuspense", _this.overrideSuspense);
              bridge.addListener("overrideValueAtPath", _this.overrideValueAtPath);
              bridge.addListener("reloadAndProfile", _this.reloadAndProfile);
              bridge.addListener("renamePath", _this.renamePath);
              bridge.addListener("setTraceUpdatesEnabled", _this.setTraceUpdatesEnabled);
              bridge.addListener("startProfiling", _this.startProfiling);
              bridge.addListener("stopProfiling", _this.stopProfiling);
              bridge.addListener("storeAsGlobal", _this.storeAsGlobal);
              bridge.addListener("syncSelectionFromNativeElementsPanel", _this.syncSelectionFromNativeElementsPanel);
              bridge.addListener("shutdown", _this.shutdown);
              bridge.addListener("updateConsolePatchSettings", _this.updateConsolePatchSettings);
              bridge.addListener("updateComponentFilters", _this.updateComponentFilters);
              bridge.addListener("viewAttributeSource", _this.viewAttributeSource);
              bridge.addListener("viewElementSource", _this.viewElementSource);
              bridge.addListener("overrideContext", _this.overrideContext);
              bridge.addListener("overrideHookState", _this.overrideHookState);
              bridge.addListener("overrideProps", _this.overrideProps);
              bridge.addListener("overrideState", _this.overrideState);
              if (_this._isProfiling) {
                bridge.send("profilingStatus", true);
              }
              var _version = "4.25.0-336ac8ceb";
              if (_version) {
                _this._bridge.send("backendVersion", _version);
              }
              _this._bridge.send("bridgeProtocol", currentBridgeProtocol);
              var isBackendStorageAPISupported = false;
              try {
                localStorage.getItem("test");
                isBackendStorageAPISupported = true;
              } catch (error) {
              }
              bridge.send("isBackendStorageAPISupported", isBackendStorageAPISupported);
              bridge.send("isSynchronousXHRSupported", Object(utils["i"])());
              setupHighlighter(bridge, agent_assertThisInitialized(_this));
              TraceUpdates_initialize(agent_assertThisInitialized(_this));
              return _this;
            }
            agent_createClass(Agent, [{
              key: "getInstanceAndStyle",
              value: function getInstanceAndStyle(_ref22) {
                var id = _ref22.id, rendererID = _ref22.rendererID;
                var renderer = this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '"'));
                  return null;
                }
                return renderer.getInstanceAndStyle(id);
              }
            }, {
              key: "getBestMatchingRendererInterface",
              value: function getBestMatchingRendererInterface(node) {
                var bestMatch = null;
                for (var rendererID in this._rendererInterfaces) {
                  var renderer = this._rendererInterfaces[rendererID];
                  var fiber = renderer.getFiberForNative(node);
                  if (fiber !== null) {
                    if (fiber.stateNode === node) {
                      return renderer;
                    } else if (bestMatch === null) {
                      bestMatch = renderer;
                    }
                  }
                }
                return bestMatch;
              }
            }, {
              key: "getIDForNode",
              value: function getIDForNode(node) {
                var rendererInterface = this.getBestMatchingRendererInterface(node);
                if (rendererInterface != null) {
                  try {
                    return rendererInterface.getFiberIDForNative(node, true);
                  } catch (error) {
                  }
                }
                return null;
              }
            }, {
              key: "selectNode",
              value: function selectNode(target) {
                var id = this.getIDForNode(target);
                if (id !== null) {
                  this._bridge.send("selectFiber", id);
                }
              }
            }, {
              key: "setRendererInterface",
              value: function setRendererInterface(rendererID, rendererInterface) {
                this._rendererInterfaces[rendererID] = rendererInterface;
                if (this._isProfiling) {
                  rendererInterface.startProfiling(this._recordChangeDescriptions);
                }
                rendererInterface.setTraceUpdatesEnabled(this._traceUpdatesEnabled);
                var selection = this._persistedSelection;
                if (selection !== null && selection.rendererID === rendererID) {
                  rendererInterface.setTrackedPath(selection.path);
                }
              }
            }, {
              key: "onUnsupportedRenderer",
              value: function onUnsupportedRenderer(rendererID) {
                this._bridge.send("unsupportedRendererVersion", rendererID);
              }
            }, {
              key: "rendererInterfaces",
              get: function get() {
                return this._rendererInterfaces;
              }
            }]);
            return Agent;
          }(EventEmitter);
          function hook_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              hook_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              hook_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return hook_typeof(obj);
          }
          function hook_toConsumableArray(arr) {
            return hook_arrayWithoutHoles(arr) || hook_iterableToArray(arr) || hook_unsupportedIterableToArray(arr) || hook_nonIterableSpread();
          }
          function hook_nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function hook_unsupportedIterableToArray(o2, minLen) {
            if (!o2)
              return;
            if (typeof o2 === "string")
              return hook_arrayLikeToArray(o2, minLen);
            var n2 = Object.prototype.toString.call(o2).slice(8, -1);
            if (n2 === "Object" && o2.constructor)
              n2 = o2.constructor.name;
            if (n2 === "Map" || n2 === "Set")
              return Array.from(o2);
            if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
              return hook_arrayLikeToArray(o2, minLen);
          }
          function hook_iterableToArray(iter) {
            if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
              return Array.from(iter);
          }
          function hook_arrayWithoutHoles(arr) {
            if (Array.isArray(arr))
              return hook_arrayLikeToArray(arr);
          }
          function hook_arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
              arr2[i3] = arr[i3];
            }
            return arr2;
          }
          function installHook(target) {
            if (target.hasOwnProperty("__REACT_DEVTOOLS_GLOBAL_HOOK__")) {
              return null;
            }
            var targetConsole = console;
            var targetConsoleMethods = {};
            for (var method in console) {
              targetConsoleMethods[method] = console[method];
            }
            function dangerous_setTargetConsoleForTesting(targetConsoleForTesting) {
              targetConsole = targetConsoleForTesting;
              targetConsoleMethods = {};
              for (var _method in targetConsole) {
                targetConsoleMethods[_method] = console[_method];
              }
            }
            function detectReactBuildType(renderer) {
              try {
                if (typeof renderer.version === "string") {
                  if (renderer.bundleType > 0) {
                    return "development";
                  }
                  return "production";
                }
                var _toString = Function.prototype.toString;
                if (renderer.Mount && renderer.Mount._renderNewRootComponent) {
                  var renderRootCode = _toString.call(renderer.Mount._renderNewRootComponent);
                  if (renderRootCode.indexOf("function") !== 0) {
                    return "production";
                  }
                  if (renderRootCode.indexOf("storedMeasure") !== -1) {
                    return "development";
                  }
                  if (renderRootCode.indexOf("should be a pure function") !== -1) {
                    if (renderRootCode.indexOf("NODE_ENV") !== -1) {
                      return "development";
                    }
                    if (renderRootCode.indexOf("development") !== -1) {
                      return "development";
                    }
                    if (renderRootCode.indexOf("true") !== -1) {
                      return "development";
                    }
                    if (renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1) {
                      return "unminified";
                    } else {
                      return "development";
                    }
                  }
                  if (renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1) {
                    return "unminified";
                  }
                  return "outdated";
                }
              } catch (err2) {
              }
              return "production";
            }
            function checkDCE(fn2) {
              try {
                var _toString2 = Function.prototype.toString;
                var code = _toString2.call(fn2);
                if (code.indexOf("^_^") > -1) {
                  hasDetectedBadDCE = true;
                  setTimeout(function() {
                    throw new Error("React is running in production mode, but dead code elimination has not been applied. Read how to correctly configure React for production: https://reactjs.org/link/perf-use-production-build");
                  });
                }
              } catch (err2) {
              }
            }
            function formatWithStyles(inputArgs, style) {
              if (inputArgs === void 0 || inputArgs === null || inputArgs.length === 0 || typeof inputArgs[0] === "string" && inputArgs[0].match(/([^%]|^)(%c)/g) || style === void 0) {
                return inputArgs;
              }
              var REGEXP = /([^%]|^)((%%)*)(%([oOdisf]))/g;
              if (typeof inputArgs[0] === "string" && inputArgs[0].match(REGEXP)) {
                return ["%c".concat(inputArgs[0]), style].concat(hook_toConsumableArray(inputArgs.slice(1)));
              } else {
                var firstArg = inputArgs.reduce(function(formatStr, elem, i3) {
                  if (i3 > 0) {
                    formatStr += " ";
                  }
                  switch (hook_typeof(elem)) {
                    case "string":
                    case "boolean":
                    case "symbol":
                      return formatStr += "%s";
                    case "number":
                      var formatting = Number.isInteger(elem) ? "%i" : "%f";
                      return formatStr += formatting;
                    default:
                      return formatStr += "%o";
                  }
                }, "%c");
                return [firstArg, style].concat(hook_toConsumableArray(inputArgs));
              }
            }
            var unpatchFn = null;
            function patchConsoleForInitialRenderInStrictMode(_ref) {
              var hideConsoleLogsInStrictMode = _ref.hideConsoleLogsInStrictMode, browserTheme = _ref.browserTheme;
              var overrideConsoleMethods = ["error", "trace", "warn", "log"];
              if (unpatchFn !== null) {
                return;
              }
              var originalConsoleMethods = {};
              unpatchFn = function unpatchFn2() {
                for (var _method2 in originalConsoleMethods) {
                  try {
                    targetConsole[_method2] = originalConsoleMethods[_method2];
                  } catch (error) {
                  }
                }
              };
              overrideConsoleMethods.forEach(function(method2) {
                try {
                  var originalMethod = originalConsoleMethods[method2] = targetConsole[method2].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ ? targetConsole[method2].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ : targetConsole[method2];
                  var overrideMethod = function overrideMethod2() {
                    if (!hideConsoleLogsInStrictMode) {
                      var color;
                      switch (method2) {
                        case "warn":
                          color = browserTheme === "light" ? "rgba(250, 180, 50, 0.75)" : "rgba(250, 180, 50, 0.5)";
                          break;
                        case "error":
                          color = browserTheme === "light" ? "rgba(250, 123, 130, 0.75)" : "rgba(250, 123, 130, 0.5)";
                          break;
                        case "log":
                        default:
                          color = browserTheme === "light" ? "rgba(125, 125, 125, 0.75)" : "rgba(125, 125, 125, 0.5)";
                          break;
                      }
                      if (color) {
                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                        originalMethod.apply(void 0, hook_toConsumableArray(formatWithStyles(args, "color: ".concat(color))));
                      } else {
                        throw Error("Console color is not defined");
                      }
                    }
                  };
                  overrideMethod.__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ = originalMethod;
                  originalMethod.__REACT_DEVTOOLS_STRICT_MODE_OVERRIDE_METHOD__ = overrideMethod;
                  targetConsole[method2] = overrideMethod;
                } catch (error) {
                }
              });
            }
            function unpatchConsoleForInitialRenderInStrictMode() {
              if (unpatchFn !== null) {
                unpatchFn();
                unpatchFn = null;
              }
            }
            var uidCounter = 0;
            function inject(renderer) {
              var id = ++uidCounter;
              renderers.set(id, renderer);
              var reactBuildType = hasDetectedBadDCE ? "deadcode" : detectReactBuildType(renderer);
              if (true) {
                try {
                  var appendComponentStack = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false;
                  var breakOnConsoleErrors = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;
                  var showInlineWarningsAndErrors = window.__REACT_DEVTOOLS_SHOW_INLINE_WARNINGS_AND_ERRORS__ !== false;
                  var hideConsoleLogsInStrictMode = window.__REACT_DEVTOOLS_HIDE_CONSOLE_LOGS_IN_STRICT_MODE__ === true;
                  var browserTheme = window.__REACT_DEVTOOLS_BROWSER_THEME__;
                  Object(backend_console["c"])(renderer);
                  Object(backend_console["a"])({
                    appendComponentStack,
                    breakOnConsoleErrors,
                    showInlineWarningsAndErrors,
                    hideConsoleLogsInStrictMode,
                    browserTheme
                  });
                } catch (error) {
                }
              }
              var attach = target.__REACT_DEVTOOLS_ATTACH__;
              if (typeof attach === "function") {
                var rendererInterface = attach(hook, id, renderer, target);
                hook.rendererInterfaces.set(id, rendererInterface);
              }
              hook.emit("renderer", {
                id,
                renderer,
                reactBuildType
              });
              return id;
            }
            var hasDetectedBadDCE = false;
            function sub(event, fn2) {
              hook.on(event, fn2);
              return function() {
                return hook.off(event, fn2);
              };
            }
            function on2(event, fn2) {
              if (!listeners[event]) {
                listeners[event] = [];
              }
              listeners[event].push(fn2);
            }
            function off(event, fn2) {
              if (!listeners[event]) {
                return;
              }
              var index = listeners[event].indexOf(fn2);
              if (index !== -1) {
                listeners[event].splice(index, 1);
              }
              if (!listeners[event].length) {
                delete listeners[event];
              }
            }
            function emit(event, data) {
              if (listeners[event]) {
                listeners[event].map(function(fn2) {
                  return fn2(data);
                });
              }
            }
            function getFiberRoots(rendererID) {
              var roots = fiberRoots;
              if (!roots[rendererID]) {
                roots[rendererID] = /* @__PURE__ */ new Set();
              }
              return roots[rendererID];
            }
            function onCommitFiberUnmount(rendererID, fiber) {
              var rendererInterface = rendererInterfaces.get(rendererID);
              if (rendererInterface != null) {
                rendererInterface.handleCommitFiberUnmount(fiber);
              }
            }
            function onCommitFiberRoot(rendererID, root, priorityLevel) {
              var mountedRoots = hook.getFiberRoots(rendererID);
              var current = root.current;
              var isKnownRoot = mountedRoots.has(root);
              var isUnmounting = current.memoizedState == null || current.memoizedState.element == null;
              if (!isKnownRoot && !isUnmounting) {
                mountedRoots.add(root);
              } else if (isKnownRoot && isUnmounting) {
                mountedRoots.delete(root);
              }
              var rendererInterface = rendererInterfaces.get(rendererID);
              if (rendererInterface != null) {
                rendererInterface.handleCommitFiberRoot(root, priorityLevel);
              }
            }
            function onPostCommitFiberRoot(rendererID, root) {
              var rendererInterface = rendererInterfaces.get(rendererID);
              if (rendererInterface != null) {
                rendererInterface.handlePostCommitFiberRoot(root);
              }
            }
            function setStrictMode(rendererID, isStrictMode) {
              var rendererInterface = rendererInterfaces.get(rendererID);
              if (rendererInterface != null) {
                if (isStrictMode) {
                  rendererInterface.patchConsoleForStrictMode();
                } else {
                  rendererInterface.unpatchConsoleForStrictMode();
                }
              } else {
                if (isStrictMode) {
                  var hideConsoleLogsInStrictMode = window.__REACT_DEVTOOLS_HIDE_CONSOLE_LOGS_IN_STRICT_MODE__ === true;
                  var browserTheme = window.__REACT_DEVTOOLS_BROWSER_THEME__;
                  patchConsoleForInitialRenderInStrictMode({
                    hideConsoleLogsInStrictMode,
                    browserTheme
                  });
                } else {
                  unpatchConsoleForInitialRenderInStrictMode();
                }
              }
            }
            var openModuleRangesStack = [];
            var moduleRanges = [];
            function getTopStackFrameString(error) {
              var frames2 = error.stack.split("\n");
              var frame = frames2.length > 1 ? frames2[1] : null;
              return frame;
            }
            function getInternalModuleRanges() {
              return moduleRanges;
            }
            function registerInternalModuleStart(error) {
              var startStackFrame = getTopStackFrameString(error);
              if (startStackFrame !== null) {
                openModuleRangesStack.push(startStackFrame);
              }
            }
            function registerInternalModuleStop(error) {
              if (openModuleRangesStack.length > 0) {
                var startStackFrame = openModuleRangesStack.pop();
                var stopStackFrame = getTopStackFrameString(error);
                if (stopStackFrame !== null) {
                  moduleRanges.push([startStackFrame, stopStackFrame]);
                }
              }
            }
            var fiberRoots = {};
            var rendererInterfaces = /* @__PURE__ */ new Map();
            var listeners = {};
            var renderers = /* @__PURE__ */ new Map();
            var hook = {
              rendererInterfaces,
              listeners,
              renderers,
              emit,
              getFiberRoots,
              inject,
              on: on2,
              off,
              sub,
              supportsFiber: true,
              checkDCE,
              onCommitFiberUnmount,
              onCommitFiberRoot,
              onPostCommitFiberRoot,
              setStrictMode,
              getInternalModuleRanges,
              registerInternalModuleStart,
              registerInternalModuleStop
            };
            if (false) {
            }
            Object.defineProperty(target, "__REACT_DEVTOOLS_GLOBAL_HOOK__", {
              configurable: false,
              enumerable: false,
              get: function get() {
                return hook;
              }
            });
            return hook;
          }
          var backend_renderer = __webpack_require__(15);
          var types = __webpack_require__(1);
          var src_utils = __webpack_require__(2);
          function decorate(object, attr, fn2) {
            var old = object[attr];
            object[attr] = function(instance) {
              return fn2.call(this, old, arguments);
            };
            return old;
          }
          function decorateMany(source, fns) {
            var olds = {};
            for (var name in fns) {
              olds[name] = decorate(source, name, fns[name]);
            }
            return olds;
          }
          function restoreMany(source, olds) {
            for (var name in olds) {
              source[name] = olds[name];
            }
          }
          function forceUpdate(instance) {
            if (typeof instance.forceUpdate === "function") {
              instance.forceUpdate();
            } else if (instance.updater != null && typeof instance.updater.enqueueForceUpdate === "function") {
              instance.updater.enqueueForceUpdate(this, function() {
              }, "forceUpdate");
            }
          }
          function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys.push.apply(keys, symbols);
            }
            return keys;
          }
          function _objectSpread(target) {
            for (var i3 = 1; i3 < arguments.length; i3++) {
              var source = arguments[i3] != null ? arguments[i3] : {};
              if (i3 % 2) {
                ownKeys(Object(source), true).forEach(function(key2) {
                  renderer_defineProperty(target, key2, source[key2]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                ownKeys(Object(source)).forEach(function(key2) {
                  Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
                });
              }
            }
            return target;
          }
          function renderer_defineProperty(obj, key2, value) {
            if (key2 in obj) {
              Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key2] = value;
            }
            return obj;
          }
          function renderer_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              renderer_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              renderer_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return renderer_typeof(obj);
          }
          function getData(internalInstance) {
            var displayName = null;
            var key2 = null;
            if (internalInstance._currentElement != null) {
              if (internalInstance._currentElement.key) {
                key2 = String(internalInstance._currentElement.key);
              }
              var elementType = internalInstance._currentElement.type;
              if (typeof elementType === "string") {
                displayName = elementType;
              } else if (typeof elementType === "function") {
                displayName = Object(src_utils["f"])(elementType);
              }
            }
            return {
              displayName,
              key: key2
            };
          }
          function getElementType(internalInstance) {
            if (internalInstance._currentElement != null) {
              var elementType = internalInstance._currentElement.type;
              if (typeof elementType === "function") {
                var publicInstance = internalInstance.getPublicInstance();
                if (publicInstance !== null) {
                  return types["e"];
                } else {
                  return types["h"];
                }
              } else if (typeof elementType === "string") {
                return types["i"];
              }
            }
            return types["k"];
          }
          function getChildren(internalInstance) {
            var children = [];
            if (renderer_typeof(internalInstance) !== "object") {
            } else if (internalInstance._currentElement === null || internalInstance._currentElement === false) {
            } else if (internalInstance._renderedComponent) {
              var child = internalInstance._renderedComponent;
              if (getElementType(child) !== types["k"]) {
                children.push(child);
              }
            } else if (internalInstance._renderedChildren) {
              var renderedChildren = internalInstance._renderedChildren;
              for (var name in renderedChildren) {
                var _child = renderedChildren[name];
                if (getElementType(_child) !== types["k"]) {
                  children.push(_child);
                }
              }
            }
            return children;
          }
          function renderer_attach(hook, rendererID, renderer, global2) {
            var idToInternalInstanceMap = /* @__PURE__ */ new Map();
            var internalInstanceToIDMap = /* @__PURE__ */ new WeakMap();
            var internalInstanceToRootIDMap = /* @__PURE__ */ new WeakMap();
            var getInternalIDForNative = null;
            var findNativeNodeForInternalID;
            var getFiberForNative = function getFiberForNative2(node) {
              return null;
            };
            if (renderer.ComponentTree) {
              getInternalIDForNative = function getInternalIDForNative2(node, findNearestUnfilteredAncestor) {
                var internalInstance = renderer.ComponentTree.getClosestInstanceFromNode(node);
                return internalInstanceToIDMap.get(internalInstance) || null;
              };
              findNativeNodeForInternalID = function findNativeNodeForInternalID2(id) {
                var internalInstance = idToInternalInstanceMap.get(id);
                return renderer.ComponentTree.getNodeFromInstance(internalInstance);
              };
              getFiberForNative = function getFiberForNative2(node) {
                return renderer.ComponentTree.getClosestInstanceFromNode(node);
              };
            } else if (renderer.Mount.getID && renderer.Mount.getNode) {
              getInternalIDForNative = function getInternalIDForNative2(node, findNearestUnfilteredAncestor) {
                return null;
              };
              findNativeNodeForInternalID = function findNativeNodeForInternalID2(id) {
                return null;
              };
            }
            function getDisplayNameForFiberID(id) {
              var internalInstance = idToInternalInstanceMap.get(id);
              return internalInstance ? getData(internalInstance).displayName : null;
            }
            function getID(internalInstance) {
              if (renderer_typeof(internalInstance) !== "object" || internalInstance === null) {
                throw new Error("Invalid internal instance: " + internalInstance);
              }
              if (!internalInstanceToIDMap.has(internalInstance)) {
                var _id = Object(src_utils["i"])();
                internalInstanceToIDMap.set(internalInstance, _id);
                idToInternalInstanceMap.set(_id, internalInstance);
              }
              return internalInstanceToIDMap.get(internalInstance);
            }
            function areEqualArrays(a2, b2) {
              if (a2.length !== b2.length) {
                return false;
              }
              for (var i3 = 0; i3 < a2.length; i3++) {
                if (a2[i3] !== b2[i3]) {
                  return false;
                }
              }
              return true;
            }
            var parentIDStack = [];
            var oldReconcilerMethods = null;
            if (renderer.Reconciler) {
              oldReconcilerMethods = decorateMany(renderer.Reconciler, {
                mountComponent: function mountComponent(fn2, args) {
                  var internalInstance = args[0];
                  var hostContainerInfo = args[3];
                  if (getElementType(internalInstance) === types["k"]) {
                    return fn2.apply(this, args);
                  }
                  if (hostContainerInfo._topLevelWrapper === void 0) {
                    return fn2.apply(this, args);
                  }
                  var id = getID(internalInstance);
                  var parentID = parentIDStack.length > 0 ? parentIDStack[parentIDStack.length - 1] : 0;
                  recordMount(internalInstance, id, parentID);
                  parentIDStack.push(id);
                  internalInstanceToRootIDMap.set(internalInstance, getID(hostContainerInfo._topLevelWrapper));
                  try {
                    var result = fn2.apply(this, args);
                    parentIDStack.pop();
                    return result;
                  } catch (err2) {
                    parentIDStack = [];
                    throw err2;
                  } finally {
                    if (parentIDStack.length === 0) {
                      var rootID = internalInstanceToRootIDMap.get(internalInstance);
                      if (rootID === void 0) {
                        throw new Error("Expected to find root ID.");
                      }
                      flushPendingEvents(rootID);
                    }
                  }
                },
                performUpdateIfNecessary: function performUpdateIfNecessary(fn2, args) {
                  var internalInstance = args[0];
                  if (getElementType(internalInstance) === types["k"]) {
                    return fn2.apply(this, args);
                  }
                  var id = getID(internalInstance);
                  parentIDStack.push(id);
                  var prevChildren = getChildren(internalInstance);
                  try {
                    var result = fn2.apply(this, args);
                    var nextChildren = getChildren(internalInstance);
                    if (!areEqualArrays(prevChildren, nextChildren)) {
                      recordReorder(internalInstance, id, nextChildren);
                    }
                    parentIDStack.pop();
                    return result;
                  } catch (err2) {
                    parentIDStack = [];
                    throw err2;
                  } finally {
                    if (parentIDStack.length === 0) {
                      var rootID = internalInstanceToRootIDMap.get(internalInstance);
                      if (rootID === void 0) {
                        throw new Error("Expected to find root ID.");
                      }
                      flushPendingEvents(rootID);
                    }
                  }
                },
                receiveComponent: function receiveComponent(fn2, args) {
                  var internalInstance = args[0];
                  if (getElementType(internalInstance) === types["k"]) {
                    return fn2.apply(this, args);
                  }
                  var id = getID(internalInstance);
                  parentIDStack.push(id);
                  var prevChildren = getChildren(internalInstance);
                  try {
                    var result = fn2.apply(this, args);
                    var nextChildren = getChildren(internalInstance);
                    if (!areEqualArrays(prevChildren, nextChildren)) {
                      recordReorder(internalInstance, id, nextChildren);
                    }
                    parentIDStack.pop();
                    return result;
                  } catch (err2) {
                    parentIDStack = [];
                    throw err2;
                  } finally {
                    if (parentIDStack.length === 0) {
                      var rootID = internalInstanceToRootIDMap.get(internalInstance);
                      if (rootID === void 0) {
                        throw new Error("Expected to find root ID.");
                      }
                      flushPendingEvents(rootID);
                    }
                  }
                },
                unmountComponent: function unmountComponent(fn2, args) {
                  var internalInstance = args[0];
                  if (getElementType(internalInstance) === types["k"]) {
                    return fn2.apply(this, args);
                  }
                  var id = getID(internalInstance);
                  parentIDStack.push(id);
                  try {
                    var result = fn2.apply(this, args);
                    parentIDStack.pop();
                    recordUnmount(internalInstance, id);
                    return result;
                  } catch (err2) {
                    parentIDStack = [];
                    throw err2;
                  } finally {
                    if (parentIDStack.length === 0) {
                      var rootID = internalInstanceToRootIDMap.get(internalInstance);
                      if (rootID === void 0) {
                        throw new Error("Expected to find root ID.");
                      }
                      flushPendingEvents(rootID);
                    }
                  }
                }
              });
            }
            function cleanup() {
              if (oldReconcilerMethods !== null) {
                if (renderer.Component) {
                  restoreMany(renderer.Component.Mixin, oldReconcilerMethods);
                } else {
                  restoreMany(renderer.Reconciler, oldReconcilerMethods);
                }
              }
              oldReconcilerMethods = null;
            }
            function recordMount(internalInstance, id, parentID) {
              var isRoot = parentID === 0;
              if (constants["s"]) {
                console.log("%crecordMount()", "color: green; font-weight: bold;", id, getData(internalInstance).displayName);
              }
              if (isRoot) {
                var hasOwnerMetadata = internalInstance._currentElement != null && internalInstance._currentElement._owner != null;
                pushOperation(constants["l"]);
                pushOperation(id);
                pushOperation(types["m"]);
                pushOperation(0);
                pushOperation(0);
                pushOperation(0);
                pushOperation(hasOwnerMetadata ? 1 : 0);
              } else {
                var type2 = getElementType(internalInstance);
                var _getData = getData(internalInstance), displayName = _getData.displayName, key2 = _getData.key;
                var ownerID = internalInstance._currentElement != null && internalInstance._currentElement._owner != null ? getID(internalInstance._currentElement._owner) : 0;
                var displayNameStringID = getStringID(displayName);
                var keyStringID = getStringID(key2);
                pushOperation(constants["l"]);
                pushOperation(id);
                pushOperation(type2);
                pushOperation(parentID);
                pushOperation(ownerID);
                pushOperation(displayNameStringID);
                pushOperation(keyStringID);
              }
            }
            function recordReorder(internalInstance, id, nextChildren) {
              pushOperation(constants["o"]);
              pushOperation(id);
              var nextChildIDs = nextChildren.map(getID);
              pushOperation(nextChildIDs.length);
              for (var i3 = 0; i3 < nextChildIDs.length; i3++) {
                pushOperation(nextChildIDs[i3]);
              }
            }
            function recordUnmount(internalInstance, id) {
              pendingUnmountedIDs.push(id);
              idToInternalInstanceMap.delete(id);
            }
            function crawlAndRecordInitialMounts(id, parentID, rootID) {
              if (constants["s"]) {
                console.group("crawlAndRecordInitialMounts() id:", id);
              }
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance != null) {
                internalInstanceToRootIDMap.set(internalInstance, rootID);
                recordMount(internalInstance, id, parentID);
                getChildren(internalInstance).forEach(function(child) {
                  return crawlAndRecordInitialMounts(getID(child), id, rootID);
                });
              }
              if (constants["s"]) {
                console.groupEnd();
              }
            }
            function flushInitialOperations() {
              var roots = renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID;
              for (var key2 in roots) {
                var internalInstance = roots[key2];
                var _id2 = getID(internalInstance);
                crawlAndRecordInitialMounts(_id2, 0, _id2);
                flushPendingEvents(_id2);
              }
            }
            var pendingOperations = [];
            var pendingStringTable = /* @__PURE__ */ new Map();
            var pendingUnmountedIDs = [];
            var pendingStringTableLength = 0;
            var pendingUnmountedRootID = null;
            function flushPendingEvents(rootID) {
              if (pendingOperations.length === 0 && pendingUnmountedIDs.length === 0 && pendingUnmountedRootID === null) {
                return;
              }
              var numUnmountIDs = pendingUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);
              var operations = new Array(
                2 + 1 + pendingStringTableLength + (numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + pendingOperations.length
              );
              var i3 = 0;
              operations[i3++] = rendererID;
              operations[i3++] = rootID;
              operations[i3++] = pendingStringTableLength;
              pendingStringTable.forEach(function(value, key2) {
                operations[i3++] = key2.length;
                var encodedKey = Object(src_utils["m"])(key2);
                for (var j3 = 0; j3 < encodedKey.length; j3++) {
                  operations[i3 + j3] = encodedKey[j3];
                }
                i3 += key2.length;
              });
              if (numUnmountIDs > 0) {
                operations[i3++] = constants["m"];
                operations[i3++] = numUnmountIDs;
                for (var j2 = 0; j2 < pendingUnmountedIDs.length; j2++) {
                  operations[i3++] = pendingUnmountedIDs[j2];
                }
                if (pendingUnmountedRootID !== null) {
                  operations[i3] = pendingUnmountedRootID;
                  i3++;
                }
              }
              for (var _j = 0; _j < pendingOperations.length; _j++) {
                operations[i3 + _j] = pendingOperations[_j];
              }
              i3 += pendingOperations.length;
              if (constants["s"]) {
                Object(src_utils["j"])(operations);
              }
              hook.emit("operations", operations);
              pendingOperations.length = 0;
              pendingUnmountedIDs = [];
              pendingUnmountedRootID = null;
              pendingStringTable.clear();
              pendingStringTableLength = 0;
            }
            function pushOperation(op) {
              if (false) {
              }
              pendingOperations.push(op);
            }
            function getStringID(str) {
              if (str === null) {
                return 0;
              }
              var existingID = pendingStringTable.get(str);
              if (existingID !== void 0) {
                return existingID;
              }
              var stringID = pendingStringTable.size + 1;
              pendingStringTable.set(str, stringID);
              pendingStringTableLength += str.length + 1;
              return stringID;
            }
            var currentlyInspectedElementID = null;
            var currentlyInspectedPaths = {};
            function mergeInspectedPaths(path) {
              var current = currentlyInspectedPaths;
              path.forEach(function(key2) {
                if (!current[key2]) {
                  current[key2] = {};
                }
                current = current[key2];
              });
            }
            function createIsPathAllowed(key2) {
              return function isPathAllowed(path) {
                var current = currentlyInspectedPaths[key2];
                if (!current) {
                  return false;
                }
                for (var i3 = 0; i3 < path.length; i3++) {
                  current = current[path[i3]];
                  if (!current) {
                    return false;
                  }
                }
                return true;
              };
            }
            function getInstanceAndStyle(id) {
              var instance = null;
              var style = null;
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance != null) {
                instance = internalInstance._instance || null;
                var element = internalInstance._currentElement;
                if (element != null && element.props != null) {
                  style = element.props.style || null;
                }
              }
              return {
                instance,
                style
              };
            }
            function updateSelectedElement(id) {
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance == null) {
                console.warn('Could not find instance with id "'.concat(id, '"'));
                return;
              }
              switch (getElementType(internalInstance)) {
                case types["e"]:
                  global2.$r = internalInstance._instance;
                  break;
                case types["h"]:
                  var element = internalInstance._currentElement;
                  if (element == null) {
                    console.warn('Could not find element with id "'.concat(id, '"'));
                    return;
                  }
                  global2.$r = {
                    props: element.props,
                    type: element.type
                  };
                  break;
                default:
                  global2.$r = null;
                  break;
              }
            }
            function storeAsGlobal(id, path, count) {
              var inspectedElement = inspectElementRaw(id);
              if (inspectedElement !== null) {
                var value = Object(src_utils["h"])(inspectedElement, path);
                var key2 = "$reactTemp".concat(count);
                window[key2] = value;
                console.log(key2);
                console.log(value);
              }
            }
            function copyElementPath(id, path) {
              var inspectedElement = inspectElementRaw(id);
              if (inspectedElement !== null) {
                Object(utils["b"])(Object(src_utils["h"])(inspectedElement, path));
              }
            }
            function inspectElement(requestID, id, path, forceFullData) {
              if (forceFullData || currentlyInspectedElementID !== id) {
                currentlyInspectedElementID = id;
                currentlyInspectedPaths = {};
              }
              var inspectedElement = inspectElementRaw(id);
              if (inspectedElement === null) {
                return {
                  id,
                  responseID: requestID,
                  type: "not-found"
                };
              }
              if (path !== null) {
                mergeInspectedPaths(path);
              }
              updateSelectedElement(id);
              inspectedElement.context = Object(utils["a"])(inspectedElement.context, createIsPathAllowed("context"));
              inspectedElement.props = Object(utils["a"])(inspectedElement.props, createIsPathAllowed("props"));
              inspectedElement.state = Object(utils["a"])(inspectedElement.state, createIsPathAllowed("state"));
              return {
                id,
                responseID: requestID,
                type: "full-data",
                value: inspectedElement
              };
            }
            function inspectElementRaw(id) {
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance == null) {
                return null;
              }
              var _getData2 = getData(internalInstance), displayName = _getData2.displayName, key2 = _getData2.key;
              var type2 = getElementType(internalInstance);
              var context = null;
              var owners = null;
              var props = null;
              var state = null;
              var source = null;
              var element = internalInstance._currentElement;
              if (element !== null) {
                props = element.props;
                source = element._source != null ? element._source : null;
                var owner = element._owner;
                if (owner) {
                  owners = [];
                  while (owner != null) {
                    owners.push({
                      displayName: getData(owner).displayName || "Unknown",
                      id: getID(owner),
                      key: element.key,
                      type: getElementType(owner)
                    });
                    if (owner._currentElement) {
                      owner = owner._currentElement._owner;
                    }
                  }
                }
              }
              var publicInstance = internalInstance._instance;
              if (publicInstance != null) {
                context = publicInstance.context || null;
                state = publicInstance.state || null;
              }
              var errors = [];
              var warnings = [];
              return {
                id,
                canEditHooks: false,
                canEditFunctionProps: false,
                canEditHooksAndDeletePaths: false,
                canEditHooksAndRenamePaths: false,
                canEditFunctionPropsDeletePaths: false,
                canEditFunctionPropsRenamePaths: false,
                canToggleError: false,
                isErrored: false,
                targetErrorBoundaryID: null,
                canToggleSuspense: false,
                canViewSource: type2 === types["e"] || type2 === types["h"],
                hasLegacyContext: true,
                displayName,
                type: type2,
                key: key2 != null ? key2 : null,
                context,
                hooks: null,
                props,
                state,
                errors,
                warnings,
                owners,
                source,
                rootType: null,
                rendererPackageName: null,
                rendererVersion: null,
                plugins: {
                  stylex: null
                }
              };
            }
            function logElementToConsole(id) {
              var result = inspectElementRaw(id);
              if (result === null) {
                console.warn('Could not find element with id "'.concat(id, '"'));
                return;
              }
              var supportsGroup = typeof console.groupCollapsed === "function";
              if (supportsGroup) {
                console.groupCollapsed(
                  "[Click to expand] %c<".concat(result.displayName || "Component", " />"),
                  "color: var(--dom-tag-name-color); font-weight: normal;"
                );
              }
              if (result.props !== null) {
                console.log("Props:", result.props);
              }
              if (result.state !== null) {
                console.log("State:", result.state);
              }
              if (result.context !== null) {
                console.log("Context:", result.context);
              }
              var nativeNode = findNativeNodeForInternalID(id);
              if (nativeNode !== null) {
                console.log("Node:", nativeNode);
              }
              if (window.chrome || /firefox/i.test(navigator.userAgent)) {
                console.log("Right-click any value to save it as a global variable for further inspection.");
              }
              if (supportsGroup) {
                console.groupEnd();
              }
            }
            function prepareViewAttributeSource(id, path) {
              var inspectedElement = inspectElementRaw(id);
              if (inspectedElement !== null) {
                window.$attribute = Object(src_utils["h"])(inspectedElement, path);
              }
            }
            function prepareViewElementSource(id) {
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance == null) {
                console.warn('Could not find instance with id "'.concat(id, '"'));
                return;
              }
              var element = internalInstance._currentElement;
              if (element == null) {
                console.warn('Could not find element with id "'.concat(id, '"'));
                return;
              }
              global2.$type = element.type;
            }
            function deletePath(type2, id, hookID, path) {
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance != null) {
                var publicInstance = internalInstance._instance;
                if (publicInstance != null) {
                  switch (type2) {
                    case "context":
                      Object(src_utils["a"])(publicInstance.context, path);
                      forceUpdate(publicInstance);
                      break;
                    case "hooks":
                      throw new Error("Hooks not supported by this renderer");
                    case "props":
                      var element = internalInstance._currentElement;
                      internalInstance._currentElement = _objectSpread(_objectSpread({}, element), {}, {
                        props: Object(utils["c"])(element.props, path)
                      });
                      forceUpdate(publicInstance);
                      break;
                    case "state":
                      Object(src_utils["a"])(publicInstance.state, path);
                      forceUpdate(publicInstance);
                      break;
                  }
                }
              }
            }
            function renamePath(type2, id, hookID, oldPath, newPath) {
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance != null) {
                var publicInstance = internalInstance._instance;
                if (publicInstance != null) {
                  switch (type2) {
                    case "context":
                      Object(src_utils["k"])(publicInstance.context, oldPath, newPath);
                      forceUpdate(publicInstance);
                      break;
                    case "hooks":
                      throw new Error("Hooks not supported by this renderer");
                    case "props":
                      var element = internalInstance._currentElement;
                      internalInstance._currentElement = _objectSpread(_objectSpread({}, element), {}, {
                        props: Object(utils["d"])(element.props, oldPath, newPath)
                      });
                      forceUpdate(publicInstance);
                      break;
                    case "state":
                      Object(src_utils["k"])(publicInstance.state, oldPath, newPath);
                      forceUpdate(publicInstance);
                      break;
                  }
                }
              }
            }
            function overrideValueAtPath(type2, id, hookID, path, value) {
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance != null) {
                var publicInstance = internalInstance._instance;
                if (publicInstance != null) {
                  switch (type2) {
                    case "context":
                      Object(src_utils["l"])(publicInstance.context, path, value);
                      forceUpdate(publicInstance);
                      break;
                    case "hooks":
                      throw new Error("Hooks not supported by this renderer");
                    case "props":
                      var element = internalInstance._currentElement;
                      internalInstance._currentElement = _objectSpread(_objectSpread({}, element), {}, {
                        props: Object(utils["e"])(element.props, path, value)
                      });
                      forceUpdate(publicInstance);
                      break;
                    case "state":
                      Object(src_utils["l"])(publicInstance.state, path, value);
                      forceUpdate(publicInstance);
                      break;
                  }
                }
              }
            }
            var getProfilingData = function getProfilingData2() {
              throw new Error("getProfilingData not supported by this renderer");
            };
            var handleCommitFiberRoot = function handleCommitFiberRoot2() {
              throw new Error("handleCommitFiberRoot not supported by this renderer");
            };
            var handleCommitFiberUnmount = function handleCommitFiberUnmount2() {
              throw new Error("handleCommitFiberUnmount not supported by this renderer");
            };
            var handlePostCommitFiberRoot = function handlePostCommitFiberRoot2() {
              throw new Error("handlePostCommitFiberRoot not supported by this renderer");
            };
            var overrideError = function overrideError2() {
              throw new Error("overrideError not supported by this renderer");
            };
            var overrideSuspense = function overrideSuspense2() {
              throw new Error("overrideSuspense not supported by this renderer");
            };
            var startProfiling = function startProfiling2() {
            };
            var stopProfiling = function stopProfiling2() {
            };
            function getBestMatchForTrackedPath() {
              return null;
            }
            function getPathForElement(id) {
              return null;
            }
            function updateComponentFilters(componentFilters) {
            }
            function setTraceUpdatesEnabled(enabled) {
            }
            function setTrackedPath(path) {
            }
            function getOwnersList(id) {
              return null;
            }
            function clearErrorsAndWarnings() {
            }
            function clearErrorsForFiberID(id) {
            }
            function clearWarningsForFiberID(id) {
            }
            function patchConsoleForStrictMode() {
            }
            function unpatchConsoleForStrictMode() {
            }
            return {
              clearErrorsAndWarnings,
              clearErrorsForFiberID,
              clearWarningsForFiberID,
              cleanup,
              copyElementPath,
              deletePath,
              flushInitialOperations,
              getBestMatchForTrackedPath,
              getDisplayNameForFiberID,
              getFiberForNative,
              getFiberIDForNative: getInternalIDForNative,
              getInstanceAndStyle,
              findNativeNodesForFiberID: function findNativeNodesForFiberID(id) {
                var nativeNode = findNativeNodeForInternalID(id);
                return nativeNode == null ? null : [nativeNode];
              },
              getOwnersList,
              getPathForElement,
              getProfilingData,
              handleCommitFiberRoot,
              handleCommitFiberUnmount,
              handlePostCommitFiberRoot,
              inspectElement,
              logElementToConsole,
              overrideError,
              overrideSuspense,
              overrideValueAtPath,
              renamePath,
              patchConsoleForStrictMode,
              prepareViewAttributeSource,
              prepareViewElementSource,
              renderer,
              setTraceUpdatesEnabled,
              setTrackedPath,
              startProfiling,
              stopProfiling,
              storeAsGlobal,
              unpatchConsoleForStrictMode,
              updateComponentFilters
            };
          }
          function initBackend(hook, agent, global2) {
            if (hook == null) {
              return function() {
              };
            }
            var subs = [
              hook.sub("renderer-attached", function(_ref) {
                var id = _ref.id, renderer = _ref.renderer, rendererInterface = _ref.rendererInterface;
                agent.setRendererInterface(id, rendererInterface);
                rendererInterface.flushInitialOperations();
              }),
              hook.sub("unsupported-renderer-version", function(id) {
                agent.onUnsupportedRenderer(id);
              }),
              hook.sub("fastRefreshScheduled", agent.onFastRefreshScheduled),
              hook.sub("operations", agent.onHookOperations),
              hook.sub("traceUpdates", agent.onTraceUpdates)
            ];
            var attachRenderer = function attachRenderer2(id, renderer) {
              var rendererInterface = hook.rendererInterfaces.get(id);
              if (rendererInterface == null) {
                if (typeof renderer.findFiberByHostInstance === "function") {
                  rendererInterface = Object(backend_renderer["a"])(hook, id, renderer, global2);
                } else if (renderer.ComponentTree) {
                  rendererInterface = renderer_attach(hook, id, renderer, global2);
                } else {
                }
                if (rendererInterface != null) {
                  hook.rendererInterfaces.set(id, rendererInterface);
                }
              }
              if (rendererInterface != null) {
                hook.emit("renderer-attached", {
                  id,
                  renderer,
                  rendererInterface
                });
              } else {
                hook.emit("unsupported-renderer-version", id);
              }
            };
            hook.renderers.forEach(function(renderer, id) {
              attachRenderer(id, renderer);
            });
            subs.push(hook.sub("renderer", function(_ref2) {
              var id = _ref2.id, renderer = _ref2.renderer;
              attachRenderer(id, renderer);
            }));
            hook.emit("react-devtools", agent);
            hook.reactDevtoolsAgent = agent;
            var onAgentShutdown = function onAgentShutdown2() {
              subs.forEach(function(fn2) {
                return fn2();
              });
              hook.rendererInterfaces.forEach(function(rendererInterface) {
                rendererInterface.cleanup();
              });
              hook.reactDevtoolsAgent = null;
            };
            agent.addListener("shutdown", onAgentShutdown);
            subs.push(function() {
              agent.removeListener("shutdown", onAgentShutdown);
            });
            return function() {
              subs.forEach(function(fn2) {
                return fn2();
              });
            };
          }
          function resolveBoxStyle(prefix2, style) {
            var hasParts = false;
            var result = {
              bottom: 0,
              left: 0,
              right: 0,
              top: 0
            };
            var styleForAll = style[prefix2];
            if (styleForAll != null) {
              for (var _i = 0, _Object$keys = Object.keys(result); _i < _Object$keys.length; _i++) {
                var key2 = _Object$keys[_i];
                result[key2] = styleForAll;
              }
              hasParts = true;
            }
            var styleForHorizontal = style[prefix2 + "Horizontal"];
            if (styleForHorizontal != null) {
              result.left = styleForHorizontal;
              result.right = styleForHorizontal;
              hasParts = true;
            } else {
              var styleForLeft = style[prefix2 + "Left"];
              if (styleForLeft != null) {
                result.left = styleForLeft;
                hasParts = true;
              }
              var styleForRight = style[prefix2 + "Right"];
              if (styleForRight != null) {
                result.right = styleForRight;
                hasParts = true;
              }
              var styleForEnd = style[prefix2 + "End"];
              if (styleForEnd != null) {
                result.right = styleForEnd;
                hasParts = true;
              }
              var styleForStart = style[prefix2 + "Start"];
              if (styleForStart != null) {
                result.left = styleForStart;
                hasParts = true;
              }
            }
            var styleForVertical = style[prefix2 + "Vertical"];
            if (styleForVertical != null) {
              result.bottom = styleForVertical;
              result.top = styleForVertical;
              hasParts = true;
            } else {
              var styleForBottom = style[prefix2 + "Bottom"];
              if (styleForBottom != null) {
                result.bottom = styleForBottom;
                hasParts = true;
              }
              var styleForTop = style[prefix2 + "Top"];
              if (styleForTop != null) {
                result.top = styleForTop;
                hasParts = true;
              }
            }
            return hasParts ? result : null;
          }
          var isArray = __webpack_require__(6);
          function setupNativeStyleEditor_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              setupNativeStyleEditor_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              setupNativeStyleEditor_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return setupNativeStyleEditor_typeof(obj);
          }
          function setupNativeStyleEditor_defineProperty(obj, key2, value) {
            if (key2 in obj) {
              Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key2] = value;
            }
            return obj;
          }
          function setupNativeStyleEditor(bridge, agent, resolveNativeStyle, validAttributes) {
            bridge.addListener("NativeStyleEditor_measure", function(_ref) {
              var id = _ref.id, rendererID = _ref.rendererID;
              measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
            });
            bridge.addListener("NativeStyleEditor_renameAttribute", function(_ref2) {
              var id = _ref2.id, rendererID = _ref2.rendererID, oldName = _ref2.oldName, newName = _ref2.newName, value = _ref2.value;
              renameStyle(agent, id, rendererID, oldName, newName, value);
              setTimeout(function() {
                return measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
              });
            });
            bridge.addListener("NativeStyleEditor_setValue", function(_ref3) {
              var id = _ref3.id, rendererID = _ref3.rendererID, name = _ref3.name, value = _ref3.value;
              setStyle(agent, id, rendererID, name, value);
              setTimeout(function() {
                return measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
              });
            });
            bridge.send("isNativeStyleEditorSupported", {
              isSupported: true,
              validAttributes
            });
          }
          var EMPTY_BOX_STYLE = {
            top: 0,
            left: 0,
            right: 0,
            bottom: 0
          };
          var componentIDToStyleOverrides = /* @__PURE__ */ new Map();
          function measureStyle(agent, bridge, resolveNativeStyle, id, rendererID) {
            var data = agent.getInstanceAndStyle({
              id,
              rendererID
            });
            if (!data || !data.style) {
              bridge.send("NativeStyleEditor_styleAndLayout", {
                id,
                layout: null,
                style: null
              });
              return;
            }
            var instance = data.instance, style = data.style;
            var resolvedStyle = resolveNativeStyle(style);
            var styleOverrides = componentIDToStyleOverrides.get(id);
            if (styleOverrides != null) {
              resolvedStyle = Object.assign({}, resolvedStyle, styleOverrides);
            }
            if (!instance || typeof instance.measure !== "function") {
              bridge.send("NativeStyleEditor_styleAndLayout", {
                id,
                layout: null,
                style: resolvedStyle || null
              });
              return;
            }
            instance.measure(function(x2, y2, width, height, left, top) {
              if (typeof x2 !== "number") {
                bridge.send("NativeStyleEditor_styleAndLayout", {
                  id,
                  layout: null,
                  style: resolvedStyle || null
                });
                return;
              }
              var margin = resolvedStyle != null && resolveBoxStyle("margin", resolvedStyle) || EMPTY_BOX_STYLE;
              var padding = resolvedStyle != null && resolveBoxStyle("padding", resolvedStyle) || EMPTY_BOX_STYLE;
              bridge.send("NativeStyleEditor_styleAndLayout", {
                id,
                layout: {
                  x: x2,
                  y: y2,
                  width,
                  height,
                  left,
                  top,
                  margin,
                  padding
                },
                style: resolvedStyle || null
              });
            });
          }
          function shallowClone(object) {
            var cloned = {};
            for (var n2 in object) {
              cloned[n2] = object[n2];
            }
            return cloned;
          }
          function renameStyle(agent, id, rendererID, oldName, newName, value) {
            var _ref4;
            var data = agent.getInstanceAndStyle({
              id,
              rendererID
            });
            if (!data || !data.style) {
              return;
            }
            var instance = data.instance, style = data.style;
            var newStyle = newName ? (_ref4 = {}, setupNativeStyleEditor_defineProperty(_ref4, oldName, void 0), setupNativeStyleEditor_defineProperty(_ref4, newName, value), _ref4) : setupNativeStyleEditor_defineProperty({}, oldName, void 0);
            var customStyle;
            if (instance !== null && typeof instance.setNativeProps === "function") {
              var styleOverrides = componentIDToStyleOverrides.get(id);
              if (!styleOverrides) {
                componentIDToStyleOverrides.set(id, newStyle);
              } else {
                Object.assign(styleOverrides, newStyle);
              }
              instance.setNativeProps({
                style: newStyle
              });
            } else if (Object(isArray["a"])(style)) {
              var lastIndex = style.length - 1;
              if (setupNativeStyleEditor_typeof(style[lastIndex]) === "object" && !Object(isArray["a"])(style[lastIndex])) {
                customStyle = shallowClone(style[lastIndex]);
                delete customStyle[oldName];
                if (newName) {
                  customStyle[newName] = value;
                } else {
                  customStyle[oldName] = void 0;
                }
                agent.overrideValueAtPath({
                  type: "props",
                  id,
                  rendererID,
                  path: ["style", lastIndex],
                  value: customStyle
                });
              } else {
                agent.overrideValueAtPath({
                  type: "props",
                  id,
                  rendererID,
                  path: ["style"],
                  value: style.concat([newStyle])
                });
              }
            } else if (setupNativeStyleEditor_typeof(style) === "object") {
              customStyle = shallowClone(style);
              delete customStyle[oldName];
              if (newName) {
                customStyle[newName] = value;
              } else {
                customStyle[oldName] = void 0;
              }
              agent.overrideValueAtPath({
                type: "props",
                id,
                rendererID,
                path: ["style"],
                value: customStyle
              });
            } else {
              agent.overrideValueAtPath({
                type: "props",
                id,
                rendererID,
                path: ["style"],
                value: [style, newStyle]
              });
            }
            agent.emit("hideNativeHighlight");
          }
          function setStyle(agent, id, rendererID, name, value) {
            var data = agent.getInstanceAndStyle({
              id,
              rendererID
            });
            if (!data || !data.style) {
              return;
            }
            var instance = data.instance, style = data.style;
            var newStyle = setupNativeStyleEditor_defineProperty({}, name, value);
            if (instance !== null && typeof instance.setNativeProps === "function") {
              var styleOverrides = componentIDToStyleOverrides.get(id);
              if (!styleOverrides) {
                componentIDToStyleOverrides.set(id, newStyle);
              } else {
                Object.assign(styleOverrides, newStyle);
              }
              instance.setNativeProps({
                style: newStyle
              });
            } else if (Object(isArray["a"])(style)) {
              var lastLength = style.length - 1;
              if (setupNativeStyleEditor_typeof(style[lastLength]) === "object" && !Object(isArray["a"])(style[lastLength])) {
                agent.overrideValueAtPath({
                  type: "props",
                  id,
                  rendererID,
                  path: ["style", lastLength, name],
                  value
                });
              } else {
                agent.overrideValueAtPath({
                  type: "props",
                  id,
                  rendererID,
                  path: ["style"],
                  value: style.concat([newStyle])
                });
              }
            } else {
              agent.overrideValueAtPath({
                type: "props",
                id,
                rendererID,
                path: ["style"],
                value: [style, newStyle]
              });
            }
            agent.emit("hideNativeHighlight");
          }
          installHook(window);
          var backend_hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
          var savedComponentFilters = Object(src_utils["e"])();
          function backend_debug(methodName) {
            if (constants["s"]) {
              var _console;
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              (_console = console).log.apply(_console, ["%c[core/backend] %c".concat(methodName), "color: teal; font-weight: bold;", "font-weight: bold;"].concat(args));
            }
          }
          function connectToDevTools(options) {
            if (backend_hook == null) {
              return;
            }
            var _ref = options || {}, _ref$host = _ref.host, host = _ref$host === void 0 ? "localhost" : _ref$host, nativeStyleEditorValidAttributes = _ref.nativeStyleEditorValidAttributes, _ref$useHttps = _ref.useHttps, useHttps = _ref$useHttps === void 0 ? false : _ref$useHttps, _ref$port = _ref.port, port = _ref$port === void 0 ? 8097 : _ref$port, websocket = _ref.websocket, _ref$resolveRNStyle = _ref.resolveRNStyle, resolveRNStyle = _ref$resolveRNStyle === void 0 ? null : _ref$resolveRNStyle, _ref$retryConnectionD = _ref.retryConnectionDelay, retryConnectionDelay = _ref$retryConnectionD === void 0 ? 2e3 : _ref$retryConnectionD, _ref$isAppActive = _ref.isAppActive, isAppActive = _ref$isAppActive === void 0 ? function() {
              return true;
            } : _ref$isAppActive;
            var protocol = useHttps ? "wss" : "ws";
            var retryTimeoutID = null;
            function scheduleRetry() {
              if (retryTimeoutID === null) {
                retryTimeoutID = setTimeout(function() {
                  return connectToDevTools(options);
                }, retryConnectionDelay);
              }
            }
            if (!isAppActive()) {
              scheduleRetry();
              return;
            }
            var bridge = null;
            var messageListeners = [];
            var uri = protocol + "://" + host + ":" + port;
            var ws = websocket ? websocket : new window.WebSocket(uri);
            ws.onclose = handleClose;
            ws.onerror = handleFailed;
            ws.onmessage = handleMessage;
            ws.onopen = function() {
              bridge = new src_bridge({
                listen: function listen(fn2) {
                  messageListeners.push(fn2);
                  return function() {
                    var index = messageListeners.indexOf(fn2);
                    if (index >= 0) {
                      messageListeners.splice(index, 1);
                    }
                  };
                },
                send: function send(event, payload, transferable) {
                  if (ws.readyState === ws.OPEN) {
                    if (constants["s"]) {
                      backend_debug("wall.send()", event, payload);
                    }
                    ws.send(JSON.stringify({
                      event,
                      payload
                    }));
                  } else {
                    if (constants["s"]) {
                      backend_debug("wall.send()", "Shutting down bridge because of closed WebSocket connection");
                    }
                    if (bridge !== null) {
                      bridge.shutdown();
                    }
                    scheduleRetry();
                  }
                }
              });
              bridge.addListener("inspectElement", function(_ref2) {
                var id = _ref2.id, rendererID = _ref2.rendererID;
                var renderer = agent.rendererInterfaces[rendererID];
                if (renderer != null) {
                  var nodes = renderer.findNativeNodesForFiberID(id);
                  if (nodes != null && nodes[0] != null) {
                    agent.emit("showNativeHighlight", nodes[0]);
                  }
                }
              });
              bridge.addListener("updateComponentFilters", function(componentFilters) {
                savedComponentFilters = componentFilters;
              });
              if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ == null) {
                bridge.send("overrideComponentFilters", savedComponentFilters);
              }
              var agent = new agent_Agent(bridge);
              agent.addListener("shutdown", function() {
                backend_hook.emit("shutdown");
              });
              initBackend(backend_hook, agent, window);
              if (resolveRNStyle != null || backend_hook.resolveRNStyle != null) {
                setupNativeStyleEditor(bridge, agent, resolveRNStyle || backend_hook.resolveRNStyle, nativeStyleEditorValidAttributes || backend_hook.nativeStyleEditorValidAttributes || null);
              } else {
                var lazyResolveRNStyle;
                var lazyNativeStyleEditorValidAttributes;
                var initAfterTick = function initAfterTick2() {
                  if (bridge !== null) {
                    setupNativeStyleEditor(bridge, agent, lazyResolveRNStyle, lazyNativeStyleEditorValidAttributes);
                  }
                };
                if (!backend_hook.hasOwnProperty("resolveRNStyle")) {
                  Object.defineProperty(backend_hook, "resolveRNStyle", {
                    enumerable: false,
                    get: function get() {
                      return lazyResolveRNStyle;
                    },
                    set: function set(value) {
                      lazyResolveRNStyle = value;
                      initAfterTick();
                    }
                  });
                }
                if (!backend_hook.hasOwnProperty("nativeStyleEditorValidAttributes")) {
                  Object.defineProperty(backend_hook, "nativeStyleEditorValidAttributes", {
                    enumerable: false,
                    get: function get() {
                      return lazyNativeStyleEditorValidAttributes;
                    },
                    set: function set(value) {
                      lazyNativeStyleEditorValidAttributes = value;
                      initAfterTick();
                    }
                  });
                }
              }
            };
            function handleClose() {
              if (constants["s"]) {
                backend_debug("WebSocket.onclose");
              }
              if (bridge !== null) {
                bridge.emit("shutdown");
              }
              scheduleRetry();
            }
            function handleFailed() {
              if (constants["s"]) {
                backend_debug("WebSocket.onerror");
              }
              scheduleRetry();
            }
            function handleMessage(event) {
              var data;
              try {
                if (typeof event.data === "string") {
                  data = JSON.parse(event.data);
                  if (constants["s"]) {
                    backend_debug("WebSocket.onmessage", data);
                  }
                } else {
                  throw Error();
                }
              } catch (e) {
                console.error("[React DevTools] Failed to parse JSON: " + event.data);
                return;
              }
              messageListeners.forEach(function(fn2) {
                try {
                  fn2(data);
                } catch (error) {
                  console.log("[React DevTools] Error calling listener", data);
                  console.log("error:", error);
                  throw error;
                }
              });
            }
          }
        }
      ]);
    });
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/devtools.js
var require_devtools = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/devtools.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    require_devtools_window_polyfill();
    var react_devtools_core_1 = require_backend();
    react_devtools_core_1.connectToDevTools();
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/reconciler.js
var require_reconciler = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/reconciler.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var scheduler_1 = require_scheduler();
    var react_reconciler_1 = __importDefault(require_react_reconciler());
    var yoga_layout_prebuilt_1 = __importDefault(require_entry_browser());
    var dom_1 = require_dom();
    if (process.env.DEV === "true") {
      require_devtools();
    }
    var cleanupYogaNode = (node) => {
      node === null || node === void 0 ? void 0 : node.unsetMeasureFunc();
      node === null || node === void 0 ? void 0 : node.freeRecursive();
    };
    exports2.default = react_reconciler_1.default({
      schedulePassiveEffects: scheduler_1.unstable_scheduleCallback,
      cancelPassiveEffects: scheduler_1.unstable_cancelCallback,
      now: Date.now,
      getRootHostContext: () => ({
        isInsideText: false
      }),
      prepareForCommit: () => null,
      preparePortalMount: () => null,
      clearContainer: () => false,
      shouldDeprioritizeSubtree: () => false,
      resetAfterCommit: (rootNode) => {
        if (rootNode.isStaticDirty) {
          rootNode.isStaticDirty = false;
          if (typeof rootNode.onImmediateRender === "function") {
            rootNode.onImmediateRender();
          }
          return;
        }
        if (typeof rootNode.onRender === "function") {
          rootNode.onRender();
        }
      },
      getChildHostContext: (parentHostContext, type2) => {
        const previousIsInsideText = parentHostContext.isInsideText;
        const isInsideText = type2 === "ink-text" || type2 === "ink-virtual-text";
        if (previousIsInsideText === isInsideText) {
          return parentHostContext;
        }
        return { isInsideText };
      },
      shouldSetTextContent: () => false,
      createInstance: (originalType, newProps, _root, hostContext) => {
        if (hostContext.isInsideText && originalType === "ink-box") {
          throw new Error(`<Box> can\u2019t be nested inside <Text> component`);
        }
        const type2 = originalType === "ink-text" && hostContext.isInsideText ? "ink-virtual-text" : originalType;
        const node = dom_1.createNode(type2);
        for (const [key2, value] of Object.entries(newProps)) {
          if (key2 === "children") {
            continue;
          } else if (key2 === "style") {
            dom_1.setStyle(node, value);
          } else if (key2 === "internal_transform") {
            node.internal_transform = value;
          } else if (key2 === "internal_static") {
            node.internal_static = true;
          } else {
            dom_1.setAttribute(node, key2, value);
          }
        }
        return node;
      },
      createTextInstance: (text, _root, hostContext) => {
        if (!hostContext.isInsideText) {
          throw new Error(`Text string "${text}" must be rendered inside <Text> component`);
        }
        return dom_1.createTextNode(text);
      },
      resetTextContent: () => {
      },
      hideTextInstance: (node) => {
        dom_1.setTextNodeValue(node, "");
      },
      unhideTextInstance: (node, text) => {
        dom_1.setTextNodeValue(node, text);
      },
      getPublicInstance: (instance) => instance,
      hideInstance: (node) => {
        var _a2;
        (_a2 = node.yogaNode) === null || _a2 === void 0 ? void 0 : _a2.setDisplay(yoga_layout_prebuilt_1.default.DISPLAY_NONE);
      },
      unhideInstance: (node) => {
        var _a2;
        (_a2 = node.yogaNode) === null || _a2 === void 0 ? void 0 : _a2.setDisplay(yoga_layout_prebuilt_1.default.DISPLAY_FLEX);
      },
      appendInitialChild: dom_1.appendChildNode,
      appendChild: dom_1.appendChildNode,
      insertBefore: dom_1.insertBeforeNode,
      finalizeInitialChildren: (node, _type, _props, rootNode) => {
        if (node.internal_static) {
          rootNode.isStaticDirty = true;
          rootNode.staticNode = node;
        }
        return false;
      },
      supportsMutation: true,
      appendChildToContainer: dom_1.appendChildNode,
      insertInContainerBefore: dom_1.insertBeforeNode,
      removeChildFromContainer: (node, removeNode) => {
        dom_1.removeChildNode(node, removeNode);
        cleanupYogaNode(removeNode.yogaNode);
      },
      prepareUpdate: (node, _type, oldProps, newProps, rootNode) => {
        if (node.internal_static) {
          rootNode.isStaticDirty = true;
        }
        const updatePayload = {};
        const keys = Object.keys(newProps);
        for (const key2 of keys) {
          if (newProps[key2] !== oldProps[key2]) {
            const isStyle = key2 === "style" && typeof newProps.style === "object" && typeof oldProps.style === "object";
            if (isStyle) {
              const newStyle = newProps.style;
              const oldStyle = oldProps.style;
              const styleKeys = Object.keys(newStyle);
              for (const styleKey of styleKeys) {
                if (styleKey === "borderStyle" || styleKey === "borderColor") {
                  if (typeof updatePayload.style !== "object") {
                    const style = {};
                    updatePayload.style = style;
                  }
                  updatePayload.style.borderStyle = newStyle.borderStyle;
                  updatePayload.style.borderColor = newStyle.borderColor;
                }
                if (newStyle[styleKey] !== oldStyle[styleKey]) {
                  if (typeof updatePayload.style !== "object") {
                    const style = {};
                    updatePayload.style = style;
                  }
                  updatePayload.style[styleKey] = newStyle[styleKey];
                }
              }
              continue;
            }
            updatePayload[key2] = newProps[key2];
          }
        }
        return updatePayload;
      },
      commitUpdate: (node, updatePayload) => {
        for (const [key2, value] of Object.entries(updatePayload)) {
          if (key2 === "children") {
            continue;
          } else if (key2 === "style") {
            dom_1.setStyle(node, value);
          } else if (key2 === "internal_transform") {
            node.internal_transform = value;
          } else if (key2 === "internal_static") {
            node.internal_static = true;
          } else {
            dom_1.setAttribute(node, key2, value);
          }
        }
      },
      commitTextUpdate: (node, _oldText, newText) => {
        dom_1.setTextNodeValue(node, newText);
      },
      removeChild: (node, removeNode) => {
        dom_1.removeChildNode(node, removeNode);
        cleanupYogaNode(removeNode.yogaNode);
      }
    });
  }
});

// node_modules/.pnpm/indent-string@4.0.0/node_modules/indent-string/index.js
var require_indent_string = __commonJS({
  "node_modules/.pnpm/indent-string@4.0.0/node_modules/indent-string/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (string, count = 1, options) => {
      options = {
        indent: " ",
        includeEmptyLines: false,
        ...options
      };
      if (typeof string !== "string") {
        throw new TypeError(
          `Expected \`input\` to be a \`string\`, got \`${typeof string}\``
        );
      }
      if (typeof count !== "number") {
        throw new TypeError(
          `Expected \`count\` to be a \`number\`, got \`${typeof count}\``
        );
      }
      if (typeof options.indent !== "string") {
        throw new TypeError(
          `Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``
        );
      }
      if (count === 0) {
        return string;
      }
      const regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
      return string.replace(regex, options.indent.repeat(count));
    };
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/get-max-width.js
var require_get_max_width = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/get-max-width.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var yoga_layout_prebuilt_1 = __importDefault(require_entry_browser());
    exports2.default = (yogaNode) => {
      return yogaNode.getComputedWidth() - yogaNode.getComputedPadding(yoga_layout_prebuilt_1.default.EDGE_LEFT) - yogaNode.getComputedPadding(yoga_layout_prebuilt_1.default.EDGE_RIGHT) - yogaNode.getComputedBorder(yoga_layout_prebuilt_1.default.EDGE_LEFT) - yogaNode.getComputedBorder(yoga_layout_prebuilt_1.default.EDGE_RIGHT);
    };
  }
});

// node_modules/.pnpm/cli-boxes@2.2.1/node_modules/cli-boxes/boxes.json
var require_boxes = __commonJS({
  "node_modules/.pnpm/cli-boxes@2.2.1/node_modules/cli-boxes/boxes.json"(exports2, module2) {
    module2.exports = {
      single: {
        topLeft: "\u250C",
        topRight: "\u2510",
        bottomRight: "\u2518",
        bottomLeft: "\u2514",
        vertical: "\u2502",
        horizontal: "\u2500"
      },
      double: {
        topLeft: "\u2554",
        topRight: "\u2557",
        bottomRight: "\u255D",
        bottomLeft: "\u255A",
        vertical: "\u2551",
        horizontal: "\u2550"
      },
      round: {
        topLeft: "\u256D",
        topRight: "\u256E",
        bottomRight: "\u256F",
        bottomLeft: "\u2570",
        vertical: "\u2502",
        horizontal: "\u2500"
      },
      bold: {
        topLeft: "\u250F",
        topRight: "\u2513",
        bottomRight: "\u251B",
        bottomLeft: "\u2517",
        vertical: "\u2503",
        horizontal: "\u2501"
      },
      singleDouble: {
        topLeft: "\u2553",
        topRight: "\u2556",
        bottomRight: "\u255C",
        bottomLeft: "\u2559",
        vertical: "\u2551",
        horizontal: "\u2500"
      },
      doubleSingle: {
        topLeft: "\u2552",
        topRight: "\u2555",
        bottomRight: "\u255B",
        bottomLeft: "\u2558",
        vertical: "\u2502",
        horizontal: "\u2550"
      },
      classic: {
        topLeft: "+",
        topRight: "+",
        bottomRight: "+",
        bottomLeft: "+",
        vertical: "|",
        horizontal: "-"
      }
    };
  }
});

// node_modules/.pnpm/cli-boxes@2.2.1/node_modules/cli-boxes/index.js
var require_cli_boxes = __commonJS({
  "node_modules/.pnpm/cli-boxes@2.2.1/node_modules/cli-boxes/index.js"(exports2, module2) {
    "use strict";
    var cliBoxes = require_boxes();
    module2.exports = cliBoxes;
    module2.exports.default = cliBoxes;
  }
});

// node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (flag, argv = process.argv) => {
      const prefix2 = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix2 + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

// node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js"(exports2, module2) {
    "use strict";
    var os = __require("os");
    var tty = __require("tty");
    var hasFlag = require_has_flag();
    var { env } = process;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      forceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = 1;
    }
    if ("FORCE_COLOR" in env) {
      if (env.FORCE_COLOR === "true") {
        forceColor = 1;
      } else if (env.FORCE_COLOR === "false") {
        forceColor = 0;
      } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});

// node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js
var require_util = __commonJS({
  "node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js"(exports2, module2) {
    "use strict";
    var stringReplaceAll = (string, substring, replacer) => {
      let index = string.indexOf(substring);
      if (index === -1) {
        return string;
      }
      const substringLength = substring.length;
      let endIndex = 0;
      let returnValue = "";
      do {
        returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
        endIndex = index + substringLength;
        index = string.indexOf(substring, endIndex);
      } while (index !== -1);
      returnValue += string.substr(endIndex);
      return returnValue;
    };
    var stringEncaseCRLFWithFirstIndex = (string, prefix2, postfix, index) => {
      let endIndex = 0;
      let returnValue = "";
      do {
        const gotCR = string[index - 1] === "\r";
        returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix2 + (gotCR ? "\r\n" : "\n") + postfix;
        endIndex = index + 1;
        index = string.indexOf("\n", endIndex);
      } while (index !== -1);
      returnValue += string.substr(endIndex);
      return returnValue;
    };
    module2.exports = {
      stringReplaceAll,
      stringEncaseCRLFWithFirstIndex
    };
  }
});

// node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js
var require_templates = __commonJS({
  "node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js"(exports2, module2) {
    "use strict";
    var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
    var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
    var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
    var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
    var ESCAPES = /* @__PURE__ */ new Map([
      ["n", "\n"],
      ["r", "\r"],
      ["t", "	"],
      ["b", "\b"],
      ["f", "\f"],
      ["v", "\v"],
      ["0", "\0"],
      ["\\", "\\"],
      ["e", "\x1B"],
      ["a", "\x07"]
    ]);
    function unescape(c2) {
      const u2 = c2[0] === "u";
      const bracket = c2[1] === "{";
      if (u2 && !bracket && c2.length === 5 || c2[0] === "x" && c2.length === 3) {
        return String.fromCharCode(parseInt(c2.slice(1), 16));
      }
      if (u2 && bracket) {
        return String.fromCodePoint(parseInt(c2.slice(2, -1), 16));
      }
      return ESCAPES.get(c2) || c2;
    }
    function parseArguments(name, arguments_) {
      const results = [];
      const chunks = arguments_.trim().split(/\s*,\s*/g);
      let matches;
      for (const chunk of chunks) {
        const number = Number(chunk);
        if (!Number.isNaN(number)) {
          results.push(number);
        } else if (matches = chunk.match(STRING_REGEX)) {
          results.push(matches[2].replace(ESCAPE_REGEX, (m2, escape, character) => escape ? unescape(escape) : character));
        } else {
          throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
        }
      }
      return results;
    }
    function parseStyle(style) {
      STYLE_REGEX.lastIndex = 0;
      const results = [];
      let matches;
      while ((matches = STYLE_REGEX.exec(style)) !== null) {
        const name = matches[1];
        if (matches[2]) {
          const args = parseArguments(name, matches[2]);
          results.push([name].concat(args));
        } else {
          results.push([name]);
        }
      }
      return results;
    }
    function buildStyle(chalk, styles) {
      const enabled = {};
      for (const layer of styles) {
        for (const style of layer.styles) {
          enabled[style[0]] = layer.inverse ? null : style.slice(1);
        }
      }
      let current = chalk;
      for (const [styleName, styles2] of Object.entries(enabled)) {
        if (!Array.isArray(styles2)) {
          continue;
        }
        if (!(styleName in current)) {
          throw new Error(`Unknown Chalk style: ${styleName}`);
        }
        current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
      }
      return current;
    }
    module2.exports = (chalk, temporary) => {
      const styles = [];
      const chunks = [];
      let chunk = [];
      temporary.replace(TEMPLATE_REGEX, (m2, escapeCharacter, inverse, style, close, character) => {
        if (escapeCharacter) {
          chunk.push(unescape(escapeCharacter));
        } else if (style) {
          const string = chunk.join("");
          chunk = [];
          chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
          styles.push({ inverse, styles: parseStyle(style) });
        } else if (close) {
          if (styles.length === 0) {
            throw new Error("Found extraneous } in Chalk template literal");
          }
          chunks.push(buildStyle(chalk, styles)(chunk.join("")));
          chunk = [];
          styles.pop();
        } else {
          chunk.push(character);
        }
      });
      chunks.push(chunk.join(""));
      if (styles.length > 0) {
        const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
        throw new Error(errMessage);
      }
      return chunks.join("");
    };
  }
});

// node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/index.js
var require_source = __commonJS({
  "node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/index.js"(exports2, module2) {
    "use strict";
    var ansiStyles = require_ansi_styles();
    var { stdout: stdoutColor, stderr: stderrColor } = require_supports_color();
    var {
      stringReplaceAll,
      stringEncaseCRLFWithFirstIndex
    } = require_util();
    var { isArray } = Array;
    var levelMapping = [
      "ansi",
      "ansi",
      "ansi256",
      "ansi16m"
    ];
    var styles = /* @__PURE__ */ Object.create(null);
    var applyOptions = (object, options = {}) => {
      if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
        throw new Error("The `level` option should be an integer from 0 to 3");
      }
      const colorLevel = stdoutColor ? stdoutColor.level : 0;
      object.level = options.level === void 0 ? colorLevel : options.level;
    };
    var ChalkClass = class {
      constructor(options) {
        return chalkFactory(options);
      }
    };
    var chalkFactory = (options) => {
      const chalk2 = {};
      applyOptions(chalk2, options);
      chalk2.template = (...arguments_) => chalkTag(chalk2.template, ...arguments_);
      Object.setPrototypeOf(chalk2, Chalk.prototype);
      Object.setPrototypeOf(chalk2.template, chalk2);
      chalk2.template.constructor = () => {
        throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
      };
      chalk2.template.Instance = ChalkClass;
      return chalk2.template;
    };
    function Chalk(options) {
      return chalkFactory(options);
    }
    for (const [styleName, style] of Object.entries(ansiStyles)) {
      styles[styleName] = {
        get() {
          const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
          Object.defineProperty(this, styleName, { value: builder });
          return builder;
        }
      };
    }
    styles.visible = {
      get() {
        const builder = createBuilder(this, this._styler, true);
        Object.defineProperty(this, "visible", { value: builder });
        return builder;
      }
    };
    var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
    for (const model of usedModels) {
      styles[model] = {
        get() {
          const { level } = this;
          return function(...arguments_) {
            const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
            return createBuilder(this, styler, this._isEmpty);
          };
        }
      };
    }
    for (const model of usedModels) {
      const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
      styles[bgModel] = {
        get() {
          const { level } = this;
          return function(...arguments_) {
            const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
            return createBuilder(this, styler, this._isEmpty);
          };
        }
      };
    }
    var proto = Object.defineProperties(() => {
    }, {
      ...styles,
      level: {
        enumerable: true,
        get() {
          return this._generator.level;
        },
        set(level) {
          this._generator.level = level;
        }
      }
    });
    var createStyler = (open, close, parent) => {
      let openAll;
      let closeAll;
      if (parent === void 0) {
        openAll = open;
        closeAll = close;
      } else {
        openAll = parent.openAll + open;
        closeAll = close + parent.closeAll;
      }
      return {
        open,
        close,
        openAll,
        closeAll,
        parent
      };
    };
    var createBuilder = (self2, _styler, _isEmpty) => {
      const builder = (...arguments_) => {
        if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
          return applyStyle(builder, chalkTag(builder, ...arguments_));
        }
        return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
      };
      Object.setPrototypeOf(builder, proto);
      builder._generator = self2;
      builder._styler = _styler;
      builder._isEmpty = _isEmpty;
      return builder;
    };
    var applyStyle = (self2, string) => {
      if (self2.level <= 0 || !string) {
        return self2._isEmpty ? "" : string;
      }
      let styler = self2._styler;
      if (styler === void 0) {
        return string;
      }
      const { openAll, closeAll } = styler;
      if (string.indexOf("\x1B") !== -1) {
        while (styler !== void 0) {
          string = stringReplaceAll(string, styler.close, styler.open);
          styler = styler.parent;
        }
      }
      const lfIndex = string.indexOf("\n");
      if (lfIndex !== -1) {
        string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
      }
      return openAll + string + closeAll;
    };
    var template;
    var chalkTag = (chalk2, ...strings) => {
      const [firstString] = strings;
      if (!isArray(firstString) || !isArray(firstString.raw)) {
        return strings.join(" ");
      }
      const arguments_ = strings.slice(1);
      const parts = [firstString.raw[0]];
      for (let i3 = 1; i3 < firstString.length; i3++) {
        parts.push(
          String(arguments_[i3 - 1]).replace(/[{}\\]/g, "\\$&"),
          String(firstString.raw[i3])
        );
      }
      if (template === void 0) {
        template = require_templates();
      }
      return template(chalk2, parts.join(""));
    };
    Object.defineProperties(Chalk.prototype, styles);
    var chalk = Chalk();
    chalk.supportsColor = stdoutColor;
    chalk.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
    chalk.stderr.supportsColor = stderrColor;
    module2.exports = chalk;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/colorize.js
var require_colorize = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/colorize.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var chalk_1 = __importDefault(require_source());
    var RGB_LIKE_REGEX = /^(rgb|hsl|hsv|hwb)\(\s?(\d+),\s?(\d+),\s?(\d+)\s?\)$/;
    var ANSI_REGEX = /^(ansi|ansi256)\(\s?(\d+)\s?\)$/;
    var getMethod = (name, type2) => {
      if (type2 === "foreground") {
        return name;
      }
      return "bg" + name[0].toUpperCase() + name.slice(1);
    };
    exports2.default = (str, color, type2) => {
      if (!color) {
        return str;
      }
      if (color in chalk_1.default) {
        const method = getMethod(color, type2);
        return chalk_1.default[method](str);
      }
      if (color.startsWith("#")) {
        const method = getMethod("hex", type2);
        return chalk_1.default[method](color)(str);
      }
      if (color.startsWith("ansi")) {
        const matches = ANSI_REGEX.exec(color);
        if (!matches) {
          return str;
        }
        const method = getMethod(matches[1], type2);
        const value = Number(matches[2]);
        return chalk_1.default[method](value)(str);
      }
      const isRgbLike = color.startsWith("rgb") || color.startsWith("hsl") || color.startsWith("hsv") || color.startsWith("hwb");
      if (isRgbLike) {
        const matches = RGB_LIKE_REGEX.exec(color);
        if (!matches) {
          return str;
        }
        const method = getMethod(matches[1], type2);
        const firstValue = Number(matches[2]);
        const secondValue = Number(matches[3]);
        const thirdValue = Number(matches[4]);
        return chalk_1.default[method](firstValue, secondValue, thirdValue)(str);
      }
      return str;
    };
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/render-border.js
var require_render_border = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/render-border.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var cli_boxes_1 = __importDefault(require_cli_boxes());
    var colorize_1 = __importDefault(require_colorize());
    exports2.default = (x2, y2, node, output) => {
      if (typeof node.style.borderStyle === "string") {
        const width = node.yogaNode.getComputedWidth();
        const height = node.yogaNode.getComputedHeight();
        const color = node.style.borderColor;
        const box = cli_boxes_1.default[node.style.borderStyle];
        const topBorder = colorize_1.default(box.topLeft + box.horizontal.repeat(width - 2) + box.topRight, color, "foreground");
        const verticalBorder = (colorize_1.default(box.vertical, color, "foreground") + "\n").repeat(height - 2);
        const bottomBorder = colorize_1.default(box.bottomLeft + box.horizontal.repeat(width - 2) + box.bottomRight, color, "foreground");
        output.write(x2, y2, topBorder, { transformers: [] });
        output.write(x2, y2 + 1, verticalBorder, { transformers: [] });
        output.write(x2 + width - 1, y2 + 1, verticalBorder, { transformers: [] });
        output.write(x2, y2 + height - 1, bottomBorder, { transformers: [] });
      }
    };
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/render-node-to-output.js
var require_render_node_to_output = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/render-node-to-output.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var yoga_layout_prebuilt_1 = __importDefault(require_entry_browser());
    var widest_line_1 = __importDefault(require_widest_line());
    var indent_string_1 = __importDefault(require_indent_string());
    var wrap_text_1 = __importDefault(require_wrap_text());
    var get_max_width_1 = __importDefault(require_get_max_width());
    var squash_text_nodes_1 = __importDefault(require_squash_text_nodes());
    var render_border_1 = __importDefault(require_render_border());
    var applyPaddingToText = (node, text) => {
      var _a2;
      const yogaNode = (_a2 = node.childNodes[0]) === null || _a2 === void 0 ? void 0 : _a2.yogaNode;
      if (yogaNode) {
        const offsetX = yogaNode.getComputedLeft();
        const offsetY = yogaNode.getComputedTop();
        text = "\n".repeat(offsetY) + indent_string_1.default(text, offsetX);
      }
      return text;
    };
    var renderNodeToOutput = (node, output, options) => {
      var _a2;
      const { offsetX = 0, offsetY = 0, transformers = [], skipStaticElements } = options;
      if (skipStaticElements && node.internal_static) {
        return;
      }
      const { yogaNode } = node;
      if (yogaNode) {
        if (yogaNode.getDisplay() === yoga_layout_prebuilt_1.default.DISPLAY_NONE) {
          return;
        }
        const x2 = offsetX + yogaNode.getComputedLeft();
        const y2 = offsetY + yogaNode.getComputedTop();
        let newTransformers = transformers;
        if (typeof node.internal_transform === "function") {
          newTransformers = [node.internal_transform, ...transformers];
        }
        if (node.nodeName === "ink-text") {
          let text = squash_text_nodes_1.default(node);
          if (text.length > 0) {
            const currentWidth = widest_line_1.default(text);
            const maxWidth = get_max_width_1.default(yogaNode);
            if (currentWidth > maxWidth) {
              const textWrap = (_a2 = node.style.textWrap) !== null && _a2 !== void 0 ? _a2 : "wrap";
              text = wrap_text_1.default(text, maxWidth, textWrap);
            }
            text = applyPaddingToText(node, text);
            output.write(x2, y2, text, { transformers: newTransformers });
          }
          return;
        }
        if (node.nodeName === "ink-box") {
          render_border_1.default(x2, y2, node, output);
        }
        if (node.nodeName === "ink-root" || node.nodeName === "ink-box") {
          for (const childNode of node.childNodes) {
            renderNodeToOutput(childNode, output, {
              offsetX: x2,
              offsetY: y2,
              transformers: newTransformers,
              skipStaticElements
            });
          }
        }
      }
    };
    exports2.default = renderNodeToOutput;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/output.js
var require_output = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/output.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var slice_ansi_1 = __importDefault(require_slice_ansi());
    var string_width_1 = __importDefault(require_string_width());
    var Output = class {
      constructor(options) {
        this.writes = [];
        const { width, height } = options;
        this.width = width;
        this.height = height;
      }
      write(x2, y2, text, options) {
        const { transformers } = options;
        if (!text) {
          return;
        }
        this.writes.push({ x: x2, y: y2, text, transformers });
      }
      get() {
        const output = [];
        for (let y2 = 0; y2 < this.height; y2++) {
          output.push(" ".repeat(this.width));
        }
        for (const write of this.writes) {
          const { x: x2, y: y2, text, transformers } = write;
          const lines = text.split("\n");
          let offsetY = 0;
          for (let line of lines) {
            const currentLine = output[y2 + offsetY];
            if (!currentLine) {
              continue;
            }
            const width = string_width_1.default(line);
            for (const transformer of transformers) {
              line = transformer(line);
            }
            output[y2 + offsetY] = slice_ansi_1.default(currentLine, 0, x2) + line + slice_ansi_1.default(currentLine, x2 + width);
            offsetY++;
          }
        }
        const generatedOutput = output.map((line) => line.trimRight()).join("\n");
        return {
          output: generatedOutput,
          height: output.length
        };
      }
    };
    exports2.default = Output;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/renderer.js
var require_renderer = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/renderer.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var yoga_layout_prebuilt_1 = __importDefault(require_entry_browser());
    var render_node_to_output_1 = __importDefault(require_render_node_to_output());
    var output_1 = __importDefault(require_output());
    exports2.default = (node, terminalWidth) => {
      var _a2;
      node.yogaNode.setWidth(terminalWidth);
      if (node.yogaNode) {
        node.yogaNode.calculateLayout(void 0, void 0, yoga_layout_prebuilt_1.default.DIRECTION_LTR);
        const output = new output_1.default({
          width: node.yogaNode.getComputedWidth(),
          height: node.yogaNode.getComputedHeight()
        });
        render_node_to_output_1.default(node, output, { skipStaticElements: true });
        let staticOutput;
        if ((_a2 = node.staticNode) === null || _a2 === void 0 ? void 0 : _a2.yogaNode) {
          staticOutput = new output_1.default({
            width: node.staticNode.yogaNode.getComputedWidth(),
            height: node.staticNode.yogaNode.getComputedHeight()
          });
          render_node_to_output_1.default(node.staticNode, staticOutput, {
            skipStaticElements: false
          });
        }
        const { output: generatedOutput, height: outputHeight } = output.get();
        return {
          output: generatedOutput,
          outputHeight,
          staticOutput: staticOutput ? `${staticOutput.get().output}
` : ""
        };
      }
      return {
        output: "",
        outputHeight: 0,
        staticOutput: ""
      };
    };
  }
});

// node_modules/.pnpm/patch-console@1.0.0/node_modules/patch-console/build/index.js
var require_build = __commonJS({
  "node_modules/.pnpm/patch-console@1.0.0/node_modules/patch-console/build/index.js"(exports2, module2) {
    "use strict";
    var stream_1 = __require("stream");
    var CONSOLE_METHODS = [
      "assert",
      "count",
      "countReset",
      "debug",
      "dir",
      "dirxml",
      "error",
      "group",
      "groupCollapsed",
      "groupEnd",
      "info",
      "log",
      "table",
      "time",
      "timeEnd",
      "timeLog",
      "trace",
      "warn"
    ];
    var originalMethods = {};
    var patchConsole = (callback) => {
      const stdout = new stream_1.PassThrough();
      const stderr = new stream_1.PassThrough();
      stdout.write = (data) => callback("stdout", data);
      stderr.write = (data) => callback("stderr", data);
      const internalConsole = new console.Console(stdout, stderr);
      for (const method of CONSOLE_METHODS) {
        originalMethods[method] = console[method];
        console[method] = internalConsole[method];
      }
      return () => {
        for (const method of CONSOLE_METHODS) {
          console[method] = originalMethods[method];
        }
        originalMethods = {};
      };
    };
    module2.exports = patchConsole;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/instances.js
var require_instances = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/instances.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/AppContext.js
var require_AppContext = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/AppContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var AppContext = react_1.createContext({
      exit: () => {
      }
    });
    AppContext.displayName = "InternalAppContext";
    exports2.default = AppContext;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/StdinContext.js
var require_StdinContext = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/StdinContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var StdinContext = react_1.createContext({
      stdin: void 0,
      setRawMode: () => {
      },
      isRawModeSupported: false,
      internal_exitOnCtrlC: true
    });
    StdinContext.displayName = "InternalStdinContext";
    exports2.default = StdinContext;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/StdoutContext.js
var require_StdoutContext = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/StdoutContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var StdoutContext = react_1.createContext({
      stdout: void 0,
      write: () => {
      }
    });
    StdoutContext.displayName = "InternalStdoutContext";
    exports2.default = StdoutContext;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/StderrContext.js
var require_StderrContext = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/StderrContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var StderrContext = react_1.createContext({
      stderr: void 0,
      write: () => {
      }
    });
    StderrContext.displayName = "InternalStderrContext";
    exports2.default = StderrContext;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/FocusContext.js
var require_FocusContext = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/FocusContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var FocusContext = react_1.createContext({
      activeId: void 0,
      add: () => {
      },
      remove: () => {
      },
      activate: () => {
      },
      deactivate: () => {
      },
      enableFocus: () => {
      },
      disableFocus: () => {
      },
      focusNext: () => {
      },
      focusPrevious: () => {
      },
      focus: () => {
      }
    });
    FocusContext.displayName = "InternalFocusContext";
    exports2.default = FocusContext;
  }
});

// node_modules/.pnpm/escape-string-regexp@2.0.0/node_modules/escape-string-regexp/index.js
var require_escape_string_regexp = __commonJS({
  "node_modules/.pnpm/escape-string-regexp@2.0.0/node_modules/escape-string-regexp/index.js"(exports2, module2) {
    "use strict";
    var matchOperatorsRegex = /[|\\{}()[\]^$+*?.-]/g;
    module2.exports = (string) => {
      if (typeof string !== "string") {
        throw new TypeError("Expected a string");
      }
      return string.replace(matchOperatorsRegex, "\\$&");
    };
  }
});

// node_modules/.pnpm/stack-utils@2.0.5/node_modules/stack-utils/index.js
var require_stack_utils = __commonJS({
  "node_modules/.pnpm/stack-utils@2.0.5/node_modules/stack-utils/index.js"(exports2, module2) {
    "use strict";
    var escapeStringRegexp = require_escape_string_regexp();
    var cwd = typeof process === "object" && process && typeof process.cwd === "function" ? process.cwd() : ".";
    var natives = [].concat(
      __require("module").builtinModules,
      "bootstrap_node",
      "node"
    ).map((n2) => new RegExp(`(?:\\((?:node:)?${n2}(?:\\.js)?:\\d+:\\d+\\)$|^\\s*at (?:node:)?${n2}(?:\\.js)?:\\d+:\\d+$)`));
    natives.push(
      /\((?:node:)?internal\/[^:]+:\d+:\d+\)$/,
      /\s*at (?:node:)?internal\/[^:]+:\d+:\d+$/,
      /\/\.node-spawn-wrap-\w+-\w+\/node:\d+:\d+\)?$/
    );
    var StackUtils = class {
      constructor(opts) {
        opts = {
          ignoredPackages: [],
          ...opts
        };
        if ("internals" in opts === false) {
          opts.internals = StackUtils.nodeInternals();
        }
        if ("cwd" in opts === false) {
          opts.cwd = cwd;
        }
        this._cwd = opts.cwd.replace(/\\/g, "/");
        this._internals = [].concat(
          opts.internals,
          ignoredPackagesRegExp(opts.ignoredPackages)
        );
        this._wrapCallSite = opts.wrapCallSite || false;
      }
      static nodeInternals() {
        return [...natives];
      }
      clean(stack, indent2 = 0) {
        indent2 = " ".repeat(indent2);
        if (!Array.isArray(stack)) {
          stack = stack.split("\n");
        }
        if (!/^\s*at /.test(stack[0]) && /^\s*at /.test(stack[1])) {
          stack = stack.slice(1);
        }
        let outdent = false;
        let lastNonAtLine = null;
        const result = [];
        stack.forEach((st) => {
          st = st.replace(/\\/g, "/");
          if (this._internals.some((internal) => internal.test(st))) {
            return;
          }
          const isAtLine = /^\s*at /.test(st);
          if (outdent) {
            st = st.trimEnd().replace(/^(\s+)at /, "$1");
          } else {
            st = st.trim();
            if (isAtLine) {
              st = st.slice(3);
            }
          }
          st = st.replace(`${this._cwd}/`, "");
          if (st) {
            if (isAtLine) {
              if (lastNonAtLine) {
                result.push(lastNonAtLine);
                lastNonAtLine = null;
              }
              result.push(st);
            } else {
              outdent = true;
              lastNonAtLine = st;
            }
          }
        });
        return result.map((line) => `${indent2}${line}
`).join("");
      }
      captureString(limit, fn2 = this.captureString) {
        if (typeof limit === "function") {
          fn2 = limit;
          limit = Infinity;
        }
        const { stackTraceLimit } = Error;
        if (limit) {
          Error.stackTraceLimit = limit;
        }
        const obj = {};
        Error.captureStackTrace(obj, fn2);
        const { stack } = obj;
        Error.stackTraceLimit = stackTraceLimit;
        return this.clean(stack);
      }
      capture(limit, fn2 = this.capture) {
        if (typeof limit === "function") {
          fn2 = limit;
          limit = Infinity;
        }
        const { prepareStackTrace, stackTraceLimit } = Error;
        Error.prepareStackTrace = (obj2, site) => {
          if (this._wrapCallSite) {
            return site.map(this._wrapCallSite);
          }
          return site;
        };
        if (limit) {
          Error.stackTraceLimit = limit;
        }
        const obj = {};
        Error.captureStackTrace(obj, fn2);
        const { stack } = obj;
        Object.assign(Error, { prepareStackTrace, stackTraceLimit });
        return stack;
      }
      at(fn2 = this.at) {
        const [site] = this.capture(1, fn2);
        if (!site) {
          return {};
        }
        const res = {
          line: site.getLineNumber(),
          column: site.getColumnNumber()
        };
        setFile(res, site.getFileName(), this._cwd);
        if (site.isConstructor()) {
          res.constructor = true;
        }
        if (site.isEval()) {
          res.evalOrigin = site.getEvalOrigin();
        }
        if (site.isNative()) {
          res.native = true;
        }
        let typename;
        try {
          typename = site.getTypeName();
        } catch (_2) {
        }
        if (typename && typename !== "Object" && typename !== "[object Object]") {
          res.type = typename;
        }
        const fname = site.getFunctionName();
        if (fname) {
          res.function = fname;
        }
        const meth = site.getMethodName();
        if (meth && fname !== meth) {
          res.method = meth;
        }
        return res;
      }
      parseLine(line) {
        const match = line && line.match(re);
        if (!match) {
          return null;
        }
        const ctor = match[1] === "new";
        let fname = match[2];
        const evalOrigin = match[3];
        const evalFile = match[4];
        const evalLine = Number(match[5]);
        const evalCol = Number(match[6]);
        let file = match[7];
        const lnum = match[8];
        const col = match[9];
        const native = match[10] === "native";
        const closeParen = match[11] === ")";
        let method;
        const res = {};
        if (lnum) {
          res.line = Number(lnum);
        }
        if (col) {
          res.column = Number(col);
        }
        if (closeParen && file) {
          let closes = 0;
          for (let i3 = file.length - 1; i3 > 0; i3--) {
            if (file.charAt(i3) === ")") {
              closes++;
            } else if (file.charAt(i3) === "(" && file.charAt(i3 - 1) === " ") {
              closes--;
              if (closes === -1 && file.charAt(i3 - 1) === " ") {
                const before = file.slice(0, i3 - 1);
                const after = file.slice(i3 + 1);
                file = after;
                fname += ` (${before}`;
                break;
              }
            }
          }
        }
        if (fname) {
          const methodMatch = fname.match(methodRe);
          if (methodMatch) {
            fname = methodMatch[1];
            method = methodMatch[2];
          }
        }
        setFile(res, file, this._cwd);
        if (ctor) {
          res.constructor = true;
        }
        if (evalOrigin) {
          res.evalOrigin = evalOrigin;
          res.evalLine = evalLine;
          res.evalColumn = evalCol;
          res.evalFile = evalFile && evalFile.replace(/\\/g, "/");
        }
        if (native) {
          res.native = true;
        }
        if (fname) {
          res.function = fname;
        }
        if (method && fname !== method) {
          res.method = method;
        }
        return res;
      }
    };
    function setFile(result, filename, cwd2) {
      if (filename) {
        filename = filename.replace(/\\/g, "/");
        if (filename.startsWith(`${cwd2}/`)) {
          filename = filename.slice(cwd2.length + 1);
        }
        result.file = filename;
      }
    }
    function ignoredPackagesRegExp(ignoredPackages) {
      if (ignoredPackages.length === 0) {
        return [];
      }
      const packages = ignoredPackages.map((mod) => escapeStringRegexp(mod));
      return new RegExp(`[/\\\\]node_modules[/\\\\](?:${packages.join("|")})[/\\\\][^:]+:\\d+:\\d+`);
    }
    var re = new RegExp(
      "^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$"
    );
    var methodRe = /^(.*?) \[as (.*?)\]$/;
    module2.exports = StackUtils;
  }
});

// node_modules/.pnpm/convert-to-spaces@1.0.2/node_modules/convert-to-spaces/index.js
var require_convert_to_spaces = __commonJS({
  "node_modules/.pnpm/convert-to-spaces@1.0.2/node_modules/convert-to-spaces/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (str, spaces) => {
      return str.replace(/^\t+/gm, ($1) => " ".repeat($1.length * (spaces || 2)));
    };
  }
});

// node_modules/.pnpm/code-excerpt@3.0.0/node_modules/code-excerpt/index.js
var require_code_excerpt = __commonJS({
  "node_modules/.pnpm/code-excerpt@3.0.0/node_modules/code-excerpt/index.js"(exports2, module2) {
    "use strict";
    var tabsToSpaces = require_convert_to_spaces();
    var generateLineNumbers = (line, around) => {
      const lineNumbers = [];
      const min = line - around;
      const max = line + around;
      for (let lineNumber = min; lineNumber <= max; lineNumber++) {
        lineNumbers.push(lineNumber);
      }
      return lineNumbers;
    };
    module2.exports = (source, line, options) => {
      if (typeof source !== "string") {
        throw new TypeError("Source code is missing.");
      }
      if (!line || line < 1) {
        throw new TypeError("Line number must start from `1`.");
      }
      source = tabsToSpaces(source).split(/\r?\n/);
      if (line > source.length) {
        return;
      }
      options = {
        around: 3,
        ...options
      };
      return generateLineNumbers(line, options.around).filter((line2) => source[line2 - 1] !== void 0).map((line2) => ({ line: line2, value: source[line2 - 1] }));
    };
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/Box.js
var require_Box = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/Box.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      Object.defineProperty(o2, k22, { enumerable: true, get: function() {
        return m2[k2];
      } });
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __rest = exports2 && exports2.__rest || function(s2, e) {
      var t2 = {};
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
          t2[p2] = s2[p2];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
          if (e.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
            t2[p2[i3]] = s2[p2[i3]];
        }
      return t2;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var Box3 = react_1.forwardRef((_a2, ref) => {
      var { children } = _a2, style = __rest(_a2, ["children"]);
      const transformedStyle = Object.assign(Object.assign({}, style), { marginLeft: style.marginLeft || style.marginX || style.margin || 0, marginRight: style.marginRight || style.marginX || style.margin || 0, marginTop: style.marginTop || style.marginY || style.margin || 0, marginBottom: style.marginBottom || style.marginY || style.margin || 0, paddingLeft: style.paddingLeft || style.paddingX || style.padding || 0, paddingRight: style.paddingRight || style.paddingX || style.padding || 0, paddingTop: style.paddingTop || style.paddingY || style.padding || 0, paddingBottom: style.paddingBottom || style.paddingY || style.padding || 0 });
      return react_1.default.createElement("ink-box", { ref, style: transformedStyle }, children);
    });
    Box3.displayName = "Box";
    Box3.defaultProps = {
      flexDirection: "row",
      flexGrow: 0,
      flexShrink: 1
    };
    exports2.default = Box3;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/Text.js
var require_Text = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/Text.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    var chalk_1 = __importDefault(require_source());
    var colorize_1 = __importDefault(require_colorize());
    var Text3 = ({ color, backgroundColor, dimColor, bold, italic, underline, strikethrough, inverse, wrap, children }) => {
      if (children === void 0 || children === null) {
        return null;
      }
      const transform = (children2) => {
        if (dimColor) {
          children2 = chalk_1.default.dim(children2);
        }
        if (color) {
          children2 = colorize_1.default(children2, color, "foreground");
        }
        if (backgroundColor) {
          children2 = colorize_1.default(children2, backgroundColor, "background");
        }
        if (bold) {
          children2 = chalk_1.default.bold(children2);
        }
        if (italic) {
          children2 = chalk_1.default.italic(children2);
        }
        if (underline) {
          children2 = chalk_1.default.underline(children2);
        }
        if (strikethrough) {
          children2 = chalk_1.default.strikethrough(children2);
        }
        if (inverse) {
          children2 = chalk_1.default.inverse(children2);
        }
        return children2;
      };
      return react_1.default.createElement("ink-text", { style: { flexGrow: 0, flexShrink: 1, flexDirection: "row", textWrap: wrap }, internal_transform: transform }, children);
    };
    Text3.displayName = "Text";
    Text3.defaultProps = {
      dimColor: false,
      bold: false,
      italic: false,
      underline: false,
      strikethrough: false,
      wrap: "wrap"
    };
    exports2.default = Text3;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/ErrorOverview.js
var require_ErrorOverview = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/ErrorOverview.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      Object.defineProperty(o2, k22, { enumerable: true, get: function() {
        return m2[k2];
      } });
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fs = __importStar(__require("fs"));
    var react_1 = __importDefault(require_react());
    var stack_utils_1 = __importDefault(require_stack_utils());
    var code_excerpt_1 = __importDefault(require_code_excerpt());
    var Box_1 = __importDefault(require_Box());
    var Text_1 = __importDefault(require_Text());
    var stackUtils = new stack_utils_1.default({
      cwd: process.cwd(),
      internals: stack_utils_1.default.nodeInternals()
    });
    var ErrorOverview = ({ error }) => {
      const stack = error.stack ? error.stack.split("\n").slice(1) : void 0;
      const origin = stack ? stackUtils.parseLine(stack[0]) : void 0;
      let excerpt;
      let lineWidth = 0;
      if ((origin === null || origin === void 0 ? void 0 : origin.file) && (origin === null || origin === void 0 ? void 0 : origin.line) && fs.existsSync(origin.file)) {
        const sourceCode2 = fs.readFileSync(origin.file, "utf8");
        excerpt = code_excerpt_1.default(sourceCode2, origin.line);
        if (excerpt) {
          for (const { line } of excerpt) {
            lineWidth = Math.max(lineWidth, String(line).length);
          }
        }
      }
      return react_1.default.createElement(
        Box_1.default,
        { flexDirection: "column", padding: 1 },
        react_1.default.createElement(
          Box_1.default,
          null,
          react_1.default.createElement(
            Text_1.default,
            { backgroundColor: "red", color: "white" },
            " ",
            "ERROR",
            " "
          ),
          react_1.default.createElement(
            Text_1.default,
            null,
            " ",
            error.message
          )
        ),
        origin && react_1.default.createElement(
          Box_1.default,
          { marginTop: 1 },
          react_1.default.createElement(
            Text_1.default,
            { dimColor: true },
            origin.file,
            ":",
            origin.line,
            ":",
            origin.column
          )
        ),
        origin && excerpt && react_1.default.createElement(Box_1.default, { marginTop: 1, flexDirection: "column" }, excerpt.map(({ line, value }) => react_1.default.createElement(
          Box_1.default,
          { key: line },
          react_1.default.createElement(
            Box_1.default,
            { width: lineWidth + 1 },
            react_1.default.createElement(
              Text_1.default,
              { dimColor: line !== origin.line, backgroundColor: line === origin.line ? "red" : void 0, color: line === origin.line ? "white" : void 0 },
              String(line).padStart(lineWidth, " "),
              ":"
            )
          ),
          react_1.default.createElement(Text_1.default, { key: line, backgroundColor: line === origin.line ? "red" : void 0, color: line === origin.line ? "white" : void 0 }, " " + value)
        ))),
        error.stack && react_1.default.createElement(Box_1.default, { marginTop: 1, flexDirection: "column" }, error.stack.split("\n").slice(1).map((line) => {
          const parsedLine = stackUtils.parseLine(line);
          if (!parsedLine) {
            return react_1.default.createElement(
              Box_1.default,
              { key: line },
              react_1.default.createElement(Text_1.default, { dimColor: true }, "- "),
              react_1.default.createElement(Text_1.default, { dimColor: true, bold: true }, line)
            );
          }
          return react_1.default.createElement(
            Box_1.default,
            { key: line },
            react_1.default.createElement(Text_1.default, { dimColor: true }, "- "),
            react_1.default.createElement(Text_1.default, { dimColor: true, bold: true }, parsedLine.function),
            react_1.default.createElement(
              Text_1.default,
              { dimColor: true, color: "gray" },
              " ",
              "(",
              parsedLine.file,
              ":",
              parsedLine.line,
              ":",
              parsedLine.column,
              ")"
            )
          );
        }))
      );
    };
    exports2.default = ErrorOverview;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/App.js
var require_App = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/App.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      Object.defineProperty(o2, k22, { enumerable: true, get: function() {
        return m2[k2];
      } });
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var cli_cursor_1 = __importDefault(require_cli_cursor());
    var AppContext_1 = __importDefault(require_AppContext());
    var StdinContext_1 = __importDefault(require_StdinContext());
    var StdoutContext_1 = __importDefault(require_StdoutContext());
    var StderrContext_1 = __importDefault(require_StderrContext());
    var FocusContext_1 = __importDefault(require_FocusContext());
    var ErrorOverview_1 = __importDefault(require_ErrorOverview());
    var TAB = "	";
    var SHIFT_TAB = "\x1B[Z";
    var ESC = "\x1B";
    var App = class extends react_1.PureComponent {
      constructor() {
        super(...arguments);
        this.state = {
          isFocusEnabled: true,
          activeFocusId: void 0,
          focusables: [],
          error: void 0
        };
        this.rawModeEnabledCount = 0;
        this.handleSetRawMode = (isEnabled) => {
          const { stdin } = this.props;
          if (!this.isRawModeSupported()) {
            if (stdin === process.stdin) {
              throw new Error("Raw mode is not supported on the current process.stdin, which Ink uses as input stream by default.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported");
            } else {
              throw new Error("Raw mode is not supported on the stdin provided to Ink.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported");
            }
          }
          stdin.setEncoding("utf8");
          if (isEnabled) {
            if (this.rawModeEnabledCount === 0) {
              stdin.addListener("data", this.handleInput);
              stdin.resume();
              stdin.setRawMode(true);
            }
            this.rawModeEnabledCount++;
            return;
          }
          if (--this.rawModeEnabledCount === 0) {
            stdin.setRawMode(false);
            stdin.removeListener("data", this.handleInput);
            stdin.pause();
          }
        };
        this.handleInput = (input) => {
          if (input === "" && this.props.exitOnCtrlC) {
            this.handleExit();
          }
          if (input === ESC && this.state.activeFocusId) {
            this.setState({
              activeFocusId: void 0
            });
          }
          if (this.state.isFocusEnabled && this.state.focusables.length > 0) {
            if (input === TAB) {
              this.focusNext();
            }
            if (input === SHIFT_TAB) {
              this.focusPrevious();
            }
          }
        };
        this.handleExit = (error) => {
          if (this.isRawModeSupported()) {
            this.handleSetRawMode(false);
          }
          this.props.onExit(error);
        };
        this.enableFocus = () => {
          this.setState({
            isFocusEnabled: true
          });
        };
        this.disableFocus = () => {
          this.setState({
            isFocusEnabled: false
          });
        };
        this.focus = (id) => {
          this.setState((previousState) => {
            const hasFocusableId = previousState.focusables.some((focusable) => (focusable === null || focusable === void 0 ? void 0 : focusable.id) === id);
            if (!hasFocusableId) {
              return previousState;
            }
            return { activeFocusId: id };
          });
        };
        this.focusNext = () => {
          this.setState((previousState) => {
            var _a2;
            const firstFocusableId = (_a2 = previousState.focusables[0]) === null || _a2 === void 0 ? void 0 : _a2.id;
            const nextFocusableId = this.findNextFocusable(previousState);
            return {
              activeFocusId: nextFocusableId || firstFocusableId
            };
          });
        };
        this.focusPrevious = () => {
          this.setState((previousState) => {
            var _a2;
            const lastFocusableId = (_a2 = previousState.focusables[previousState.focusables.length - 1]) === null || _a2 === void 0 ? void 0 : _a2.id;
            const previousFocusableId = this.findPreviousFocusable(previousState);
            return {
              activeFocusId: previousFocusableId || lastFocusableId
            };
          });
        };
        this.addFocusable = (id, { autoFocus }) => {
          this.setState((previousState) => {
            let nextFocusId = previousState.activeFocusId;
            if (!nextFocusId && autoFocus) {
              nextFocusId = id;
            }
            return {
              activeFocusId: nextFocusId,
              focusables: [
                ...previousState.focusables,
                {
                  id,
                  isActive: true
                }
              ]
            };
          });
        };
        this.removeFocusable = (id) => {
          this.setState((previousState) => ({
            activeFocusId: previousState.activeFocusId === id ? void 0 : previousState.activeFocusId,
            focusables: previousState.focusables.filter((focusable) => {
              return focusable.id !== id;
            })
          }));
        };
        this.activateFocusable = (id) => {
          this.setState((previousState) => ({
            focusables: previousState.focusables.map((focusable) => {
              if (focusable.id !== id) {
                return focusable;
              }
              return {
                id,
                isActive: true
              };
            })
          }));
        };
        this.deactivateFocusable = (id) => {
          this.setState((previousState) => ({
            activeFocusId: previousState.activeFocusId === id ? void 0 : previousState.activeFocusId,
            focusables: previousState.focusables.map((focusable) => {
              if (focusable.id !== id) {
                return focusable;
              }
              return {
                id,
                isActive: false
              };
            })
          }));
        };
        this.findNextFocusable = (state) => {
          var _a2;
          const activeIndex = state.focusables.findIndex((focusable) => {
            return focusable.id === state.activeFocusId;
          });
          for (let index = activeIndex + 1; index < state.focusables.length; index++) {
            if ((_a2 = state.focusables[index]) === null || _a2 === void 0 ? void 0 : _a2.isActive) {
              return state.focusables[index].id;
            }
          }
          return void 0;
        };
        this.findPreviousFocusable = (state) => {
          var _a2;
          const activeIndex = state.focusables.findIndex((focusable) => {
            return focusable.id === state.activeFocusId;
          });
          for (let index = activeIndex - 1; index >= 0; index--) {
            if ((_a2 = state.focusables[index]) === null || _a2 === void 0 ? void 0 : _a2.isActive) {
              return state.focusables[index].id;
            }
          }
          return void 0;
        };
      }
      static getDerivedStateFromError(error) {
        return { error };
      }
      isRawModeSupported() {
        return this.props.stdin.isTTY;
      }
      render() {
        return react_1.default.createElement(
          AppContext_1.default.Provider,
          { value: {
            exit: this.handleExit
          } },
          react_1.default.createElement(
            StdinContext_1.default.Provider,
            { value: {
              stdin: this.props.stdin,
              setRawMode: this.handleSetRawMode,
              isRawModeSupported: this.isRawModeSupported(),
              internal_exitOnCtrlC: this.props.exitOnCtrlC
            } },
            react_1.default.createElement(
              StdoutContext_1.default.Provider,
              { value: {
                stdout: this.props.stdout,
                write: this.props.writeToStdout
              } },
              react_1.default.createElement(
                StderrContext_1.default.Provider,
                { value: {
                  stderr: this.props.stderr,
                  write: this.props.writeToStderr
                } },
                react_1.default.createElement(FocusContext_1.default.Provider, { value: {
                  activeId: this.state.activeFocusId,
                  add: this.addFocusable,
                  remove: this.removeFocusable,
                  activate: this.activateFocusable,
                  deactivate: this.deactivateFocusable,
                  enableFocus: this.enableFocus,
                  disableFocus: this.disableFocus,
                  focusNext: this.focusNext,
                  focusPrevious: this.focusPrevious,
                  focus: this.focus
                } }, this.state.error ? react_1.default.createElement(ErrorOverview_1.default, { error: this.state.error }) : this.props.children)
              )
            )
          )
        );
      }
      componentDidMount() {
        cli_cursor_1.default.hide(this.props.stdout);
      }
      componentWillUnmount() {
        cli_cursor_1.default.show(this.props.stdout);
        if (this.isRawModeSupported()) {
          this.handleSetRawMode(false);
        }
      }
      componentDidCatch(error) {
        this.handleExit(error);
      }
    };
    exports2.default = App;
    App.displayName = "InternalApp";
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/ink.js
var require_ink = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/ink.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      Object.defineProperty(o2, k22, { enumerable: true, get: function() {
        return m2[k2];
      } });
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    var lodash_1 = require_lodash();
    var log_update_1 = __importDefault(require_log_update());
    var ansi_escapes_1 = __importDefault(require_ansi_escapes());
    var is_ci_1 = __importDefault(require_is_ci());
    var auto_bind_1 = __importDefault(require_auto_bind());
    var reconciler_1 = __importDefault(require_reconciler());
    var renderer_1 = __importDefault(require_renderer());
    var signal_exit_1 = __importDefault(require_signal_exit());
    var patch_console_1 = __importDefault(require_build());
    var dom = __importStar(require_dom());
    var instances_1 = __importDefault(require_instances());
    var App_1 = __importDefault(require_App());
    var isCI = process.env.CI === "false" ? false : is_ci_1.default;
    var noop = () => {
    };
    var Ink = class {
      constructor(options) {
        this.resolveExitPromise = () => {
        };
        this.rejectExitPromise = () => {
        };
        this.unsubscribeExit = () => {
        };
        this.onRender = () => {
          if (this.isUnmounted) {
            return;
          }
          const { output, outputHeight, staticOutput } = renderer_1.default(
            this.rootNode,
            this.options.stdout.columns || 80
          );
          const hasStaticOutput = staticOutput && staticOutput !== "\n";
          if (this.options.debug) {
            if (hasStaticOutput) {
              this.fullStaticOutput += staticOutput;
            }
            this.options.stdout.write(this.fullStaticOutput + output);
            return;
          }
          if (isCI) {
            if (hasStaticOutput) {
              this.options.stdout.write(staticOutput);
            }
            this.lastOutput = output;
            return;
          }
          if (hasStaticOutput) {
            this.fullStaticOutput += staticOutput;
          }
          if (outputHeight >= this.options.stdout.rows) {
            this.options.stdout.write(ansi_escapes_1.default.clearTerminal + this.fullStaticOutput + output);
            this.lastOutput = output;
            return;
          }
          if (hasStaticOutput) {
            this.log.clear();
            this.options.stdout.write(staticOutput);
            this.log(output);
          }
          if (!hasStaticOutput && output !== this.lastOutput) {
            this.throttledLog(output);
          }
          this.lastOutput = output;
        };
        auto_bind_1.default(this);
        this.options = options;
        this.rootNode = dom.createNode("ink-root");
        this.rootNode.onRender = options.debug ? this.onRender : lodash_1.throttle(this.onRender, 32, {
          leading: true,
          trailing: true
        });
        this.rootNode.onImmediateRender = this.onRender;
        this.log = log_update_1.default.create(options.stdout);
        this.throttledLog = options.debug ? this.log : lodash_1.throttle(this.log, void 0, {
          leading: true,
          trailing: true
        });
        this.isUnmounted = false;
        this.lastOutput = "";
        this.fullStaticOutput = "";
        this.container = reconciler_1.default.createContainer(
          this.rootNode,
          0,
          false,
          null
        );
        this.unsubscribeExit = signal_exit_1.default(this.unmount, { alwaysLast: false });
        if (process.env.DEV === "true") {
          reconciler_1.default.injectIntoDevTools({
            bundleType: 0,
            version: "16.13.1",
            rendererPackageName: "ink"
          });
        }
        if (options.patchConsole) {
          this.patchConsole();
        }
        if (!isCI) {
          options.stdout.on("resize", this.onRender);
          this.unsubscribeResize = () => {
            options.stdout.off("resize", this.onRender);
          };
        }
      }
      render(node) {
        const tree = react_1.default.createElement(App_1.default, { stdin: this.options.stdin, stdout: this.options.stdout, stderr: this.options.stderr, writeToStdout: this.writeToStdout, writeToStderr: this.writeToStderr, exitOnCtrlC: this.options.exitOnCtrlC, onExit: this.unmount }, node);
        reconciler_1.default.updateContainer(tree, this.container, null, noop);
      }
      writeToStdout(data) {
        if (this.isUnmounted) {
          return;
        }
        if (this.options.debug) {
          this.options.stdout.write(data + this.fullStaticOutput + this.lastOutput);
          return;
        }
        if (isCI) {
          this.options.stdout.write(data);
          return;
        }
        this.log.clear();
        this.options.stdout.write(data);
        this.log(this.lastOutput);
      }
      writeToStderr(data) {
        if (this.isUnmounted) {
          return;
        }
        if (this.options.debug) {
          this.options.stderr.write(data);
          this.options.stdout.write(this.fullStaticOutput + this.lastOutput);
          return;
        }
        if (isCI) {
          this.options.stderr.write(data);
          return;
        }
        this.log.clear();
        this.options.stderr.write(data);
        this.log(this.lastOutput);
      }
      unmount(error) {
        if (this.isUnmounted) {
          return;
        }
        this.onRender();
        this.unsubscribeExit();
        if (typeof this.restoreConsole === "function") {
          this.restoreConsole();
        }
        if (typeof this.unsubscribeResize === "function") {
          this.unsubscribeResize();
        }
        if (isCI) {
          this.options.stdout.write(this.lastOutput + "\n");
        } else if (!this.options.debug) {
          this.log.done();
        }
        this.isUnmounted = true;
        reconciler_1.default.updateContainer(null, this.container, null, noop);
        instances_1.default.delete(this.options.stdout);
        if (error instanceof Error) {
          this.rejectExitPromise(error);
        } else {
          this.resolveExitPromise();
        }
      }
      waitUntilExit() {
        if (!this.exitPromise) {
          this.exitPromise = new Promise((resolve, reject) => {
            this.resolveExitPromise = resolve;
            this.rejectExitPromise = reject;
          });
        }
        return this.exitPromise;
      }
      clear() {
        if (!isCI && !this.options.debug) {
          this.log.clear();
        }
      }
      patchConsole() {
        if (this.options.debug) {
          return;
        }
        this.restoreConsole = patch_console_1.default((stream, data) => {
          if (stream === "stdout") {
            this.writeToStdout(data);
          }
          if (stream === "stderr") {
            const isReactMessage = data.startsWith("The above error occurred");
            if (!isReactMessage) {
              this.writeToStderr(data);
            }
          }
        });
      }
    };
    exports2.default = Ink;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/render.js
var require_render = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/render.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ink_1 = __importDefault(require_ink());
    var instances_1 = __importDefault(require_instances());
    var stream_1 = __require("stream");
    var render2 = (node, options) => {
      const inkOptions = Object.assign({ stdout: process.stdout, stdin: process.stdin, stderr: process.stderr, debug: false, exitOnCtrlC: true, patchConsole: true }, getOptions(options));
      const instance = getInstance(inkOptions.stdout, () => new ink_1.default(inkOptions));
      instance.render(node);
      return {
        rerender: instance.render,
        unmount: () => instance.unmount(),
        waitUntilExit: instance.waitUntilExit,
        cleanup: () => instances_1.default.delete(inkOptions.stdout),
        clear: instance.clear
      };
    };
    exports2.default = render2;
    var getOptions = (stdout = {}) => {
      if (stdout instanceof stream_1.Stream) {
        return {
          stdout,
          stdin: process.stdin
        };
      }
      return stdout;
    };
    var getInstance = (stdout, createInstance) => {
      let instance;
      if (instances_1.default.has(stdout)) {
        instance = instances_1.default.get(stdout);
      } else {
        instance = createInstance();
        instances_1.default.set(stdout, instance);
      }
      return instance;
    };
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/Static.js
var require_Static = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/Static.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      Object.defineProperty(o2, k22, { enumerable: true, get: function() {
        return m2[k2];
      } });
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var Static = (props) => {
      const { items, children: render2, style: customStyle } = props;
      const [index, setIndex] = react_1.useState(0);
      const itemsToRender = react_1.useMemo(() => {
        return items.slice(index);
      }, [items, index]);
      react_1.useLayoutEffect(() => {
        setIndex(items.length);
      }, [items.length]);
      const children = itemsToRender.map((item, itemIndex) => {
        return render2(item, index + itemIndex);
      });
      const style = react_1.useMemo(() => Object.assign({ position: "absolute", flexDirection: "column" }, customStyle), [customStyle]);
      return react_1.default.createElement("ink-box", {
        internal_static: true,
        style
      }, children);
    };
    Static.displayName = "Static";
    exports2.default = Static;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/Transform.js
var require_Transform = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/Transform.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    var Transform = ({ children, transform }) => {
      if (children === void 0 || children === null) {
        return null;
      }
      return react_1.default.createElement("ink-text", { style: { flexGrow: 0, flexShrink: 1, flexDirection: "row" }, internal_transform: transform }, children);
    };
    Transform.displayName = "Transform";
    exports2.default = Transform;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/Newline.js
var require_Newline = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/Newline.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    var Newline = ({ count = 1 }) => react_1.default.createElement("ink-text", null, "\n".repeat(count));
    Newline.displayName = "Newline";
    exports2.default = Newline;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/Spacer.js
var require_Spacer = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/components/Spacer.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    var Box_1 = __importDefault(require_Box());
    var Spacer = () => react_1.default.createElement(Box_1.default, { flexGrow: 1 });
    Spacer.displayName = "Spacer";
    exports2.default = Spacer;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-stdin.js
var require_use_stdin = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-stdin.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var StdinContext_1 = __importDefault(require_StdinContext());
    var useStdin = () => react_1.useContext(StdinContext_1.default);
    exports2.default = useStdin;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-input.js
var require_use_input = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-input.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var use_stdin_1 = __importDefault(require_use_stdin());
    var useInput = (inputHandler, options = {}) => {
      const { stdin, setRawMode, internal_exitOnCtrlC } = use_stdin_1.default();
      react_1.useEffect(() => {
        if (options.isActive === false) {
          return;
        }
        setRawMode(true);
        return () => {
          setRawMode(false);
        };
      }, [options.isActive, setRawMode]);
      react_1.useEffect(() => {
        if (options.isActive === false) {
          return;
        }
        const handleData = (data) => {
          let input = String(data);
          const key2 = {
            upArrow: input === "\x1B[A",
            downArrow: input === "\x1B[B",
            leftArrow: input === "\x1B[D",
            rightArrow: input === "\x1B[C",
            pageDown: input === "\x1B[6~",
            pageUp: input === "\x1B[5~",
            return: input === "\r",
            escape: input === "\x1B",
            ctrl: false,
            shift: false,
            tab: input === "	" || input === "\x1B[Z",
            backspace: input === "\b",
            delete: input === "\x7F" || input === "\x1B[3~",
            meta: false
          };
          if (input <= "" && !key2.return) {
            input = String.fromCharCode(input.charCodeAt(0) + "a".charCodeAt(0) - 1);
            key2.ctrl = true;
          }
          if (input.startsWith("\x1B")) {
            input = input.slice(1);
            key2.meta = true;
          }
          const isLatinUppercase = input >= "A" && input <= "Z";
          const isCyrillicUppercase = input >= "\u0410" && input <= "\u042F";
          if (input.length === 1 && (isLatinUppercase || isCyrillicUppercase)) {
            key2.shift = true;
          }
          if (key2.tab && input === "[Z") {
            key2.shift = true;
          }
          if (key2.tab || key2.backspace || key2.delete) {
            input = "";
          }
          if (!(input === "c" && key2.ctrl) || !internal_exitOnCtrlC) {
            inputHandler(input, key2);
          }
        };
        stdin === null || stdin === void 0 ? void 0 : stdin.on("data", handleData);
        return () => {
          stdin === null || stdin === void 0 ? void 0 : stdin.off("data", handleData);
        };
      }, [options.isActive, stdin, internal_exitOnCtrlC, inputHandler]);
    };
    exports2.default = useInput;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-app.js
var require_use_app = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-app.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var AppContext_1 = __importDefault(require_AppContext());
    var useApp = () => react_1.useContext(AppContext_1.default);
    exports2.default = useApp;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-stdout.js
var require_use_stdout = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-stdout.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var StdoutContext_1 = __importDefault(require_StdoutContext());
    var useStdout = () => react_1.useContext(StdoutContext_1.default);
    exports2.default = useStdout;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-stderr.js
var require_use_stderr = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-stderr.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var StderrContext_1 = __importDefault(require_StderrContext());
    var useStderr = () => react_1.useContext(StderrContext_1.default);
    exports2.default = useStderr;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-focus.js
var require_use_focus = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-focus.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var FocusContext_1 = __importDefault(require_FocusContext());
    var use_stdin_1 = __importDefault(require_use_stdin());
    var useFocus = ({ isActive = true, autoFocus = false, id: customId } = {}) => {
      const { isRawModeSupported, setRawMode } = use_stdin_1.default();
      const { activeId, add, remove, activate, deactivate, focus } = react_1.useContext(FocusContext_1.default);
      const id = react_1.useMemo(() => {
        return customId !== null && customId !== void 0 ? customId : Math.random().toString().slice(2, 7);
      }, [customId]);
      react_1.useEffect(() => {
        add(id, { autoFocus });
        return () => {
          remove(id);
        };
      }, [id, autoFocus]);
      react_1.useEffect(() => {
        if (isActive) {
          activate(id);
        } else {
          deactivate(id);
        }
      }, [isActive, id]);
      react_1.useEffect(() => {
        if (!isRawModeSupported || !isActive) {
          return;
        }
        setRawMode(true);
        return () => {
          setRawMode(false);
        };
      }, [isActive]);
      return {
        isFocused: Boolean(id) && activeId === id,
        focus
      };
    };
    exports2.default = useFocus;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-focus-manager.js
var require_use_focus_manager = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/hooks/use-focus-manager.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var FocusContext_1 = __importDefault(require_FocusContext());
    var useFocusManager = () => {
      const focusContext = react_1.useContext(FocusContext_1.default);
      return {
        enableFocus: focusContext.enableFocus,
        disableFocus: focusContext.disableFocus,
        focusNext: focusContext.focusNext,
        focusPrevious: focusContext.focusPrevious,
        focus: focusContext.focus
      };
    };
    exports2.default = useFocusManager;
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/measure-element.js
var require_measure_element = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/measure-element.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = (node) => {
      var _a2, _b, _c, _d;
      return {
        width: (_b = (_a2 = node.yogaNode) === null || _a2 === void 0 ? void 0 : _a2.getComputedWidth()) !== null && _b !== void 0 ? _b : 0,
        height: (_d = (_c = node.yogaNode) === null || _c === void 0 ? void 0 : _c.getComputedHeight()) !== null && _d !== void 0 ? _d : 0
      };
    };
  }
});

// node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/index.js
var require_build2 = __commonJS({
  "node_modules/.pnpm/ink@3.2.0_k33vb7fucsny7mu5lic4ab3hri/node_modules/ink/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var render_1 = require_render();
    Object.defineProperty(exports2, "render", { enumerable: true, get: function() {
      return render_1.default;
    } });
    var Box_1 = require_Box();
    Object.defineProperty(exports2, "Box", { enumerable: true, get: function() {
      return Box_1.default;
    } });
    var Text_1 = require_Text();
    Object.defineProperty(exports2, "Text", { enumerable: true, get: function() {
      return Text_1.default;
    } });
    var Static_1 = require_Static();
    Object.defineProperty(exports2, "Static", { enumerable: true, get: function() {
      return Static_1.default;
    } });
    var Transform_1 = require_Transform();
    Object.defineProperty(exports2, "Transform", { enumerable: true, get: function() {
      return Transform_1.default;
    } });
    var Newline_1 = require_Newline();
    Object.defineProperty(exports2, "Newline", { enumerable: true, get: function() {
      return Newline_1.default;
    } });
    var Spacer_1 = require_Spacer();
    Object.defineProperty(exports2, "Spacer", { enumerable: true, get: function() {
      return Spacer_1.default;
    } });
    var use_input_1 = require_use_input();
    Object.defineProperty(exports2, "useInput", { enumerable: true, get: function() {
      return use_input_1.default;
    } });
    var use_app_1 = require_use_app();
    Object.defineProperty(exports2, "useApp", { enumerable: true, get: function() {
      return use_app_1.default;
    } });
    var use_stdin_1 = require_use_stdin();
    Object.defineProperty(exports2, "useStdin", { enumerable: true, get: function() {
      return use_stdin_1.default;
    } });
    var use_stdout_1 = require_use_stdout();
    Object.defineProperty(exports2, "useStdout", { enumerable: true, get: function() {
      return use_stdout_1.default;
    } });
    var use_stderr_1 = require_use_stderr();
    Object.defineProperty(exports2, "useStderr", { enumerable: true, get: function() {
      return use_stderr_1.default;
    } });
    var use_focus_1 = require_use_focus();
    Object.defineProperty(exports2, "useFocus", { enumerable: true, get: function() {
      return use_focus_1.default;
    } });
    var use_focus_manager_1 = require_use_focus_manager();
    Object.defineProperty(exports2, "useFocusManager", { enumerable: true, get: function() {
      return use_focus_manager_1.default;
    } });
    var measure_element_1 = require_measure_element();
    Object.defineProperty(exports2, "measureElement", { enumerable: true, get: function() {
      return measure_element_1.default;
    } });
  }
});

// node_modules/.pnpm/fast-equals@4.0.1/node_modules/fast-equals/dist/fast-equals.cjs.js
var require_fast_equals_cjs = __commonJS({
  "node_modules/.pnpm/fast-equals@4.0.1/node_modules/fast-equals/dist/fast-equals.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function createDefaultIsNestedEqual(comparator) {
      return function isEqual(a2, b2, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, meta) {
        return comparator(a2, b2, meta);
      };
    }
    function createIsCircular(areItemsEqual) {
      return function isCircular(a2, b2, isEqual, cache) {
        if (!a2 || !b2 || typeof a2 !== "object" || typeof b2 !== "object") {
          return areItemsEqual(a2, b2, isEqual, cache);
        }
        var cachedA = cache.get(a2);
        var cachedB = cache.get(b2);
        if (cachedA && cachedB) {
          return cachedA === b2 && cachedB === a2;
        }
        cache.set(a2, b2);
        cache.set(b2, a2);
        var result = areItemsEqual(a2, b2, isEqual, cache);
        cache.delete(a2);
        cache.delete(b2);
        return result;
      };
    }
    function merge(a2, b2) {
      var merged = {};
      for (var key2 in a2) {
        merged[key2] = a2[key2];
      }
      for (var key2 in b2) {
        merged[key2] = b2[key2];
      }
      return merged;
    }
    function isPlainObject(value) {
      return value.constructor === Object || value.constructor == null;
    }
    function isPromiseLike(value) {
      return typeof value.then === "function";
    }
    function sameValueZeroEqual(a2, b2) {
      return a2 === b2 || a2 !== a2 && b2 !== b2;
    }
    var ARGUMENTS_TAG = "[object Arguments]";
    var BOOLEAN_TAG = "[object Boolean]";
    var DATE_TAG = "[object Date]";
    var REG_EXP_TAG = "[object RegExp]";
    var MAP_TAG = "[object Map]";
    var NUMBER_TAG = "[object Number]";
    var OBJECT_TAG = "[object Object]";
    var SET_TAG = "[object Set]";
    var STRING_TAG = "[object String]";
    var toString = Object.prototype.toString;
    function createComparator(_a2) {
      var areArraysEqual2 = _a2.areArraysEqual, areDatesEqual2 = _a2.areDatesEqual, areMapsEqual2 = _a2.areMapsEqual, areObjectsEqual2 = _a2.areObjectsEqual, areRegExpsEqual2 = _a2.areRegExpsEqual, areSetsEqual2 = _a2.areSetsEqual, createIsNestedEqual = _a2.createIsNestedEqual;
      var isEqual = createIsNestedEqual(comparator);
      function comparator(a2, b2, meta) {
        if (a2 === b2) {
          return true;
        }
        if (!a2 || !b2 || typeof a2 !== "object" || typeof b2 !== "object") {
          return a2 !== a2 && b2 !== b2;
        }
        if (isPlainObject(a2) && isPlainObject(b2)) {
          return areObjectsEqual2(a2, b2, isEqual, meta);
        }
        var aArray = Array.isArray(a2);
        var bArray = Array.isArray(b2);
        if (aArray || bArray) {
          return aArray === bArray && areArraysEqual2(a2, b2, isEqual, meta);
        }
        var aTag = toString.call(a2);
        if (aTag !== toString.call(b2)) {
          return false;
        }
        if (aTag === DATE_TAG) {
          return areDatesEqual2(a2, b2, isEqual, meta);
        }
        if (aTag === REG_EXP_TAG) {
          return areRegExpsEqual2(a2, b2, isEqual, meta);
        }
        if (aTag === MAP_TAG) {
          return areMapsEqual2(a2, b2, isEqual, meta);
        }
        if (aTag === SET_TAG) {
          return areSetsEqual2(a2, b2, isEqual, meta);
        }
        if (aTag === OBJECT_TAG || aTag === ARGUMENTS_TAG) {
          return isPromiseLike(a2) || isPromiseLike(b2) ? a2 === b2 : areObjectsEqual2(a2, b2, isEqual, meta);
        }
        if (aTag === BOOLEAN_TAG || aTag === NUMBER_TAG || aTag === STRING_TAG) {
          return sameValueZeroEqual(a2.valueOf(), b2.valueOf());
        }
        return a2 === b2;
      }
      return comparator;
    }
    function areArraysEqual(a2, b2, isEqual, meta) {
      var index = a2.length;
      if (b2.length !== index) {
        return false;
      }
      while (index-- > 0) {
        if (!isEqual(a2[index], b2[index], index, index, a2, b2, meta)) {
          return false;
        }
      }
      return true;
    }
    var areArraysEqualCircular = createIsCircular(areArraysEqual);
    function areDatesEqual(a2, b2) {
      return sameValueZeroEqual(a2.valueOf(), b2.valueOf());
    }
    function areMapsEqual(a2, b2, isEqual, meta) {
      var isValueEqual = a2.size === b2.size;
      if (!isValueEqual) {
        return false;
      }
      if (!a2.size) {
        return true;
      }
      var matchedIndices = {};
      var indexA = 0;
      a2.forEach(function(aValue, aKey) {
        if (!isValueEqual) {
          return;
        }
        var hasMatch = false;
        var matchIndexB = 0;
        b2.forEach(function(bValue, bKey) {
          if (!hasMatch && !matchedIndices[matchIndexB] && (hasMatch = isEqual(aKey, bKey, indexA, matchIndexB, a2, b2, meta) && isEqual(aValue, bValue, aKey, bKey, a2, b2, meta))) {
            matchedIndices[matchIndexB] = true;
          }
          matchIndexB++;
        });
        indexA++;
        isValueEqual = hasMatch;
      });
      return isValueEqual;
    }
    var areMapsEqualCircular = createIsCircular(areMapsEqual);
    var OWNER = "_owner";
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    function areObjectsEqual(a2, b2, isEqual, meta) {
      var keysA = Object.keys(a2);
      var index = keysA.length;
      if (Object.keys(b2).length !== index) {
        return false;
      }
      var key2;
      while (index-- > 0) {
        key2 = keysA[index];
        if (key2 === OWNER) {
          var reactElementA = !!a2.$$typeof;
          var reactElementB = !!b2.$$typeof;
          if ((reactElementA || reactElementB) && reactElementA !== reactElementB) {
            return false;
          }
        }
        if (!hasOwnProperty2.call(b2, key2) || !isEqual(a2[key2], b2[key2], key2, key2, a2, b2, meta)) {
          return false;
        }
      }
      return true;
    }
    var areObjectsEqualCircular = createIsCircular(areObjectsEqual);
    function areRegExpsEqual(a2, b2) {
      return a2.source === b2.source && a2.flags === b2.flags;
    }
    function areSetsEqual(a2, b2, isEqual, meta) {
      var isValueEqual = a2.size === b2.size;
      if (!isValueEqual) {
        return false;
      }
      if (!a2.size) {
        return true;
      }
      var matchedIndices = {};
      a2.forEach(function(aValue, aKey) {
        if (!isValueEqual) {
          return;
        }
        var hasMatch = false;
        var matchIndex = 0;
        b2.forEach(function(bValue, bKey) {
          if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = isEqual(aValue, bValue, aKey, bKey, a2, b2, meta))) {
            matchedIndices[matchIndex] = true;
          }
          matchIndex++;
        });
        isValueEqual = hasMatch;
      });
      return isValueEqual;
    }
    var areSetsEqualCircular = createIsCircular(areSetsEqual);
    var DEFAULT_CONFIG = Object.freeze({
      areArraysEqual,
      areDatesEqual,
      areMapsEqual,
      areObjectsEqual,
      areRegExpsEqual,
      areSetsEqual,
      createIsNestedEqual: createDefaultIsNestedEqual
    });
    var DEFAULT_CIRCULAR_CONFIG = Object.freeze({
      areArraysEqual: areArraysEqualCircular,
      areDatesEqual,
      areMapsEqual: areMapsEqualCircular,
      areObjectsEqual: areObjectsEqualCircular,
      areRegExpsEqual,
      areSetsEqual: areSetsEqualCircular,
      createIsNestedEqual: createDefaultIsNestedEqual
    });
    var isDeepEqual = createComparator(DEFAULT_CONFIG);
    function deepEqual(a2, b2) {
      return isDeepEqual(a2, b2, void 0);
    }
    var isShallowEqual = createComparator(merge(DEFAULT_CONFIG, { createIsNestedEqual: function() {
      return sameValueZeroEqual;
    } }));
    function shallowEqual(a2, b2) {
      return isShallowEqual(a2, b2, void 0);
    }
    var isCircularDeepEqual = createComparator(DEFAULT_CIRCULAR_CONFIG);
    function circularDeepEqual2(a2, b2) {
      return isCircularDeepEqual(a2, b2, /* @__PURE__ */ new WeakMap());
    }
    var isCircularShallowEqual = createComparator(merge(DEFAULT_CIRCULAR_CONFIG, {
      createIsNestedEqual: function() {
        return sameValueZeroEqual;
      }
    }));
    function circularShallowEqual(a2, b2) {
      return isCircularShallowEqual(a2, b2, /* @__PURE__ */ new WeakMap());
    }
    function createCustomEqual(getComparatorOptions) {
      return createComparator(merge(DEFAULT_CONFIG, getComparatorOptions(DEFAULT_CONFIG)));
    }
    function createCustomCircularEqual(getComparatorOptions) {
      var comparator = createComparator(merge(DEFAULT_CIRCULAR_CONFIG, getComparatorOptions(DEFAULT_CIRCULAR_CONFIG)));
      return function(a2, b2, meta) {
        if (meta === void 0) {
          meta = /* @__PURE__ */ new WeakMap();
        }
        return comparator(a2, b2, meta);
      };
    }
    exports2.circularDeepEqual = circularDeepEqual2;
    exports2.circularShallowEqual = circularShallowEqual;
    exports2.createCustomCircularEqual = createCustomCircularEqual;
    exports2.createCustomEqual = createCustomEqual;
    exports2.deepEqual = deepEqual;
    exports2.sameValueZeroEqual = sameValueZeroEqual;
    exports2.shallowEqual = shallowEqual;
  }
});

// node_modules/.pnpm/react@17.0.2/node_modules/react/cjs/react-jsx-runtime.production.min.js
var require_react_jsx_runtime_production_min = __commonJS({
  "node_modules/.pnpm/react@17.0.2/node_modules/react/cjs/react-jsx-runtime.production.min.js"(exports2) {
    "use strict";
    require_object_assign();
    var f2 = require_react();
    var g2 = 60103;
    exports2.Fragment = 60107;
    if ("function" === typeof Symbol && Symbol.for) {
      h2 = Symbol.for;
      g2 = h2("react.element");
      exports2.Fragment = h2("react.fragment");
    }
    var h2;
    var m2 = f2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;
    var n2 = Object.prototype.hasOwnProperty;
    var p2 = { key: true, ref: true, __self: true, __source: true };
    function q2(c2, a2, k2) {
      var b2, d2 = {}, e = null, l2 = null;
      void 0 !== k2 && (e = "" + k2);
      void 0 !== a2.key && (e = "" + a2.key);
      void 0 !== a2.ref && (l2 = a2.ref);
      for (b2 in a2)
        n2.call(a2, b2) && !p2.hasOwnProperty(b2) && (d2[b2] = a2[b2]);
      if (c2 && c2.defaultProps)
        for (b2 in a2 = c2.defaultProps, a2)
          void 0 === d2[b2] && (d2[b2] = a2[b2]);
      return { $$typeof: g2, type: c2, key: e, ref: l2, props: d2, _owner: m2.current };
    }
    exports2.jsx = q2;
    exports2.jsxs = q2;
  }
});

// node_modules/.pnpm/react@17.0.2/node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/.pnpm/react@17.0.2/node_modules/react/cjs/react-jsx-runtime.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React2 = require_react();
        var _assign = require_object_assign();
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        exports2.Fragment = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          exports2.Fragment = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        function isValidElementType(type2) {
          if (typeof type2 === "string" || typeof type2 === "function") {
            return true;
          }
          if (type2 === exports2.Fragment || type2 === REACT_PROFILER_TYPE || type2 === REACT_DEBUG_TRACING_MODE_TYPE || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || type2 === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type2 === "object" && type2 !== null) {
            if (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_FUNDAMENTAL_TYPE || type2.$$typeof === REACT_BLOCK_TYPE || type2[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type2) {
          return type2.displayName || "Context";
        }
        function getComponentName(type2) {
          if (type2 == null) {
            return null;
          }
          {
            if (typeof type2.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type2 === "function") {
            return type2.displayName || type2.name || null;
          }
          if (typeof type2 === "string") {
            return type2;
          }
          switch (type2) {
            case exports2.Fragment:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type2;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type2;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type2, type2.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type2.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type2._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentName(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn2, construct) {
          if (!fn2 || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn2);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn2, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn2.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn2();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        {
                          if (typeof fn2 === "function") {
                            componentFrameCache.set(fn2, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn2 ? fn2.displayName || fn2.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn2 === "function") {
              componentFrameCache.set(fn2, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn2, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn2, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
          if (type2 == null) {
            return "";
          }
          if (typeof type2 === "function") {
            {
              return describeNativeComponentFrame(type2, shouldConstruct(type2));
            }
          }
          if (typeof type2 === "string") {
            return describeBuiltInComponentFrame(type2);
          }
          switch (type2) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type2.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type2._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err2 = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err2.name = "Invariant Violation";
                    throw err2;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty2.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty2.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config, self2) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type2, key2, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type2,
            key: key2,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type2, config, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key2 = null;
            var ref = null;
            if (maybeKey !== void 0) {
              key2 = "" + maybeKey;
            }
            if (hasValidKey(config)) {
              key2 = "" + config.key;
            }
            if (hasValidRef(config)) {
              ref = config.ref;
              warnIfStringRefCannotBeAutoConverted(config, self2);
            }
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
            if (type2 && type2.defaultProps) {
              var defaultProps = type2.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            if (key2 || ref) {
              var displayName = typeof type2 === "function" ? type2.displayName || type2.name || "Unknown" : type2;
              if (key2) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type2, key2, ref, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name = getComponentName(ReactCurrentOwner$1.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i3 = 0; i3 < node.length; i3++) {
                var child = node[i3];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type2 = element.type;
            if (type2 === null || type2 === void 0 || typeof type2 === "string") {
              return;
            }
            var propTypes;
            if (typeof type2 === "function") {
              propTypes = type2.propTypes;
            } else if (typeof type2 === "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type2.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentName(type2);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentName(type2);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type2.getDefaultProps === "function" && !type2.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i3 = 0; i3 < keys.length; i3++) {
              var key2 = keys[i3];
              if (key2 !== "children" && key2 !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key2);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function jsxWithValidation(type2, props, key2, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type2);
            if (!validType) {
              var info = "";
              if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type2 === null) {
                typeString = "null";
              } else if (Array.isArray(type2)) {
                typeString = "array";
              } else if (type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type2.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type2;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type2, props, key2, source, self2);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (Array.isArray(children)) {
                    for (var i3 = 0; i3 < children.length; i3++) {
                      validateChildKeys(children[i3], type2);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type2);
                }
              }
            }
            if (type2 === exports2.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type2, props, key2) {
          {
            return jsxWithValidation(type2, props, key2, true);
          }
        }
        function jsxWithValidationDynamic(type2, props, key2) {
          {
            return jsxWithValidation(type2, props, key2, false);
          }
        }
        var jsx4 = jsxWithValidationDynamic;
        var jsxs2 = jsxWithValidationStatic;
        exports2.jsx = jsx4;
        exports2.jsxs = jsxs2;
      })();
    }
  }
});

// node_modules/.pnpm/react@17.0.2/node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/.pnpm/react@17.0.2/node_modules/react/jsx-runtime.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_jsx_runtime_production_min();
    } else {
      module2.exports = require_react_jsx_runtime_development();
    }
  }
});

// node_modules/.pnpm/multimatch@6.0.0/node_modules/multimatch/index.js
var import_minimatch = __toESM(require_minimatch(), 1);

// node_modules/.pnpm/array-union@3.0.1/node_modules/array-union/index.js
var arrayUnion = (...arguments_) => [...new Set(arguments_.flat())];
var array_union_default = arrayUnion;

// node_modules/.pnpm/array-differ@4.0.0/node_modules/array-differ/index.js
function arrayDiffer(array, ...values) {
  const rest = new Set([...values].flat());
  return array.filter((element) => !rest.has(element));
}

// node_modules/.pnpm/multimatch@6.0.0/node_modules/multimatch/index.js
function multimatch(list, patterns, options = {}) {
  list = [list].flat();
  patterns = [patterns].flat();
  if (list.length === 0 || patterns.length === 0) {
    return [];
  }
  let result = [];
  for (const item of list) {
    for (let pattern of patterns) {
      let process2 = array_union_default;
      if (pattern[0] === "!") {
        pattern = pattern.slice(1);
        process2 = arrayDiffer;
      }
      result = process2(result, import_minimatch.default.match([item], pattern, options));
    }
  }
  return result;
}

// node_modules/.pnpm/quoted-string-space-split@1.1.1/node_modules/quoted-string-space-split/dist/index.esm.js
function splitSpacesExcludeQuotesDetailed(string) {
  const groupsRegex = /[^\s"']+|(?:"|'){2,}|"(?!")([^"]*)"|'(?!')([^']*)'|"|'/g;
  const matches = [];
  let match;
  while (match = groupsRegex.exec(string)) {
    if (match[2]) {
      matches.push({ type: "single", value: match[2] });
    } else if (match[1]) {
      matches.push({ type: "double", value: match[1] });
    } else {
      matches.push({ type: "plain", value: match[0] });
    }
  }
  return matches;
}
function splitSpacesExcludeQuotes(string) {
  return splitSpacesExcludeQuotesDetailed(string).map((details) => details.value);
}

// src/components/taskList.tsx
var import_ink3 = __toESM(require_build2());

// src/components/taskListEntry.tsx
var import_ink2 = __toESM(require_build2());

// node_modules/.pnpm/immer@9.0.15/node_modules/immer/dist/immer.esm.mjs
function n(n2) {
  for (var r2 = arguments.length, t2 = Array(r2 > 1 ? r2 - 1 : 0), e = 1; e < r2; e++)
    t2[e - 1] = arguments[e];
  if ("production" !== process.env.NODE_ENV) {
    var i3 = Y[n2], o2 = i3 ? "function" == typeof i3 ? i3.apply(null, t2) : i3 : "unknown error nr: " + n2;
    throw Error("[Immer] " + o2);
  }
  throw Error("[Immer] minified error nr: " + n2 + (t2.length ? " " + t2.map(function(n3) {
    return "'" + n3 + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function r(n2) {
  return !!n2 && !!n2[Q];
}
function t(n2) {
  return !!n2 && (function(n3) {
    if (!n3 || "object" != typeof n3)
      return false;
    var r2 = Object.getPrototypeOf(n3);
    if (null === r2)
      return true;
    var t2 = Object.hasOwnProperty.call(r2, "constructor") && r2.constructor;
    return t2 === Object || "function" == typeof t2 && Function.toString.call(t2) === Z;
  }(n2) || Array.isArray(n2) || !!n2[L] || !!n2.constructor[L] || s(n2) || v(n2));
}
function i2(n2, r2, t2) {
  void 0 === t2 && (t2 = false), 0 === o(n2) ? (t2 ? Object.keys : nn)(n2).forEach(function(e) {
    t2 && "symbol" == typeof e || r2(e, n2[e], n2);
  }) : n2.forEach(function(t3, e) {
    return r2(e, t3, n2);
  });
}
function o(n2) {
  var r2 = n2[Q];
  return r2 ? r2.i > 3 ? r2.i - 4 : r2.i : Array.isArray(n2) ? 1 : s(n2) ? 2 : v(n2) ? 3 : 0;
}
function u(n2, r2) {
  return 2 === o(n2) ? n2.has(r2) : Object.prototype.hasOwnProperty.call(n2, r2);
}
function a(n2, r2) {
  return 2 === o(n2) ? n2.get(r2) : n2[r2];
}
function f(n2, r2, t2) {
  var e = o(n2);
  2 === e ? n2.set(r2, t2) : 3 === e ? (n2.delete(r2), n2.add(t2)) : n2[r2] = t2;
}
function c(n2, r2) {
  return n2 === r2 ? 0 !== n2 || 1 / n2 == 1 / r2 : n2 != n2 && r2 != r2;
}
function s(n2) {
  return X && n2 instanceof Map;
}
function v(n2) {
  return q && n2 instanceof Set;
}
function p(n2) {
  return n2.o || n2.t;
}
function l(n2) {
  if (Array.isArray(n2))
    return Array.prototype.slice.call(n2);
  var r2 = rn(n2);
  delete r2[Q];
  for (var t2 = nn(r2), e = 0; e < t2.length; e++) {
    var i3 = t2[e], o2 = r2[i3];
    false === o2.writable && (o2.writable = true, o2.configurable = true), (o2.get || o2.set) && (r2[i3] = { configurable: true, writable: true, enumerable: o2.enumerable, value: n2[i3] });
  }
  return Object.create(Object.getPrototypeOf(n2), r2);
}
function d(n2, e) {
  return void 0 === e && (e = false), y(n2) || r(n2) || !t(n2) ? n2 : (o(n2) > 1 && (n2.set = n2.add = n2.clear = n2.delete = h), Object.freeze(n2), e && i2(n2, function(n3, r2) {
    return d(r2, true);
  }, true), n2);
}
function h() {
  n(2);
}
function y(n2) {
  return null == n2 || "object" != typeof n2 || Object.isFrozen(n2);
}
function b(r2) {
  var t2 = tn[r2];
  return t2 || n(18, r2), t2;
}
function m(n2, r2) {
  tn[n2] || (tn[n2] = r2);
}
function _() {
  return "production" === process.env.NODE_ENV || U || n(0), U;
}
function j(n2, r2) {
  r2 && (b("Patches"), n2.u = [], n2.s = [], n2.v = r2);
}
function O(n2) {
  g(n2), n2.p.forEach(S), n2.p = null;
}
function g(n2) {
  n2 === U && (U = n2.l);
}
function w(n2) {
  return U = { p: [], l: U, h: n2, m: true, _: 0 };
}
function S(n2) {
  var r2 = n2[Q];
  0 === r2.i || 1 === r2.i ? r2.j() : r2.O = true;
}
function P(r2, e) {
  e._ = e.p.length;
  var i3 = e.p[0], o2 = void 0 !== r2 && r2 !== i3;
  return e.h.g || b("ES5").S(e, r2, o2), o2 ? (i3[Q].P && (O(e), n(4)), t(r2) && (r2 = M(e, r2), e.l || x(e, r2)), e.u && b("Patches").M(i3[Q].t, r2, e.u, e.s)) : r2 = M(e, i3, []), O(e), e.u && e.v(e.u, e.s), r2 !== H ? r2 : void 0;
}
function M(n2, r2, t2) {
  if (y(r2))
    return r2;
  var e = r2[Q];
  if (!e)
    return i2(r2, function(i3, o3) {
      return A(n2, e, r2, i3, o3, t2);
    }, true), r2;
  if (e.A !== n2)
    return r2;
  if (!e.P)
    return x(n2, e.t, true), e.t;
  if (!e.I) {
    e.I = true, e.A._--;
    var o2 = 4 === e.i || 5 === e.i ? e.o = l(e.k) : e.o;
    i2(3 === e.i ? new Set(o2) : o2, function(r3, i3) {
      return A(n2, e, o2, r3, i3, t2);
    }), x(n2, o2, false), t2 && n2.u && b("Patches").R(e, t2, n2.u, n2.s);
  }
  return e.o;
}
function A(e, i3, o2, a2, c2, s2) {
  if ("production" !== process.env.NODE_ENV && c2 === o2 && n(5), r(c2)) {
    var v2 = M(e, c2, s2 && i3 && 3 !== i3.i && !u(i3.D, a2) ? s2.concat(a2) : void 0);
    if (f(o2, a2, v2), !r(v2))
      return;
    e.m = false;
  }
  if (t(c2) && !y(c2)) {
    if (!e.h.F && e._ < 1)
      return;
    M(e, c2), i3 && i3.A.l || x(e, c2);
  }
}
function x(n2, r2, t2) {
  void 0 === t2 && (t2 = false), n2.h.F && n2.m && d(r2, t2);
}
function z(n2, r2) {
  var t2 = n2[Q];
  return (t2 ? p(t2) : n2)[r2];
}
function I(n2, r2) {
  if (r2 in n2)
    for (var t2 = Object.getPrototypeOf(n2); t2; ) {
      var e = Object.getOwnPropertyDescriptor(t2, r2);
      if (e)
        return e;
      t2 = Object.getPrototypeOf(t2);
    }
}
function k(n2) {
  n2.P || (n2.P = true, n2.l && k(n2.l));
}
function E(n2) {
  n2.o || (n2.o = l(n2.t));
}
function R(n2, r2, t2) {
  var e = s(r2) ? b("MapSet").N(r2, t2) : v(r2) ? b("MapSet").T(r2, t2) : n2.g ? function(n3, r3) {
    var t3 = Array.isArray(n3), e2 = { i: t3 ? 1 : 0, A: r3 ? r3.A : _(), P: false, I: false, D: {}, l: r3, t: n3, k: null, o: null, j: null, C: false }, i3 = e2, o2 = en;
    t3 && (i3 = [e2], o2 = on);
    var u2 = Proxy.revocable(i3, o2), a2 = u2.revoke, f2 = u2.proxy;
    return e2.k = f2, e2.j = a2, f2;
  }(r2, t2) : b("ES5").J(r2, t2);
  return (t2 ? t2.A : _()).p.push(e), e;
}
function D(e) {
  return r(e) || n(22, e), function n2(r2) {
    if (!t(r2))
      return r2;
    var e2, u2 = r2[Q], c2 = o(r2);
    if (u2) {
      if (!u2.P && (u2.i < 4 || !b("ES5").K(u2)))
        return u2.t;
      u2.I = true, e2 = F(r2, c2), u2.I = false;
    } else
      e2 = F(r2, c2);
    return i2(e2, function(r3, t2) {
      u2 && a(u2.t, r3) === t2 || f(e2, r3, n2(t2));
    }), 3 === c2 ? new Set(e2) : e2;
  }(e);
}
function F(n2, r2) {
  switch (r2) {
    case 2:
      return new Map(n2);
    case 3:
      return Array.from(n2);
  }
  return l(n2);
}
function T() {
  function e(n2) {
    if (!t(n2))
      return n2;
    if (Array.isArray(n2))
      return n2.map(e);
    if (s(n2))
      return new Map(Array.from(n2.entries()).map(function(n3) {
        return [n3[0], e(n3[1])];
      }));
    if (v(n2))
      return new Set(Array.from(n2).map(e));
    var r2 = Object.create(Object.getPrototypeOf(n2));
    for (var i3 in n2)
      r2[i3] = e(n2[i3]);
    return u(n2, L) && (r2[L] = n2[L]), r2;
  }
  function f2(n2) {
    return r(n2) ? e(n2) : n2;
  }
  var c2 = "add";
  m("Patches", { $: function(r2, t2) {
    return t2.forEach(function(t3) {
      for (var i3 = t3.path, u2 = t3.op, f3 = r2, s2 = 0; s2 < i3.length - 1; s2++) {
        var v2 = o(f3), p2 = "" + i3[s2];
        0 !== v2 && 1 !== v2 || "__proto__" !== p2 && "constructor" !== p2 || n(24), "function" == typeof f3 && "prototype" === p2 && n(24), "object" != typeof (f3 = a(f3, p2)) && n(15, i3.join("/"));
      }
      var l2 = o(f3), d2 = e(t3.value), h2 = i3[i3.length - 1];
      switch (u2) {
        case "replace":
          switch (l2) {
            case 2:
              return f3.set(h2, d2);
            case 3:
              n(16);
            default:
              return f3[h2] = d2;
          }
        case c2:
          switch (l2) {
            case 1:
              return "-" === h2 ? f3.push(d2) : f3.splice(h2, 0, d2);
            case 2:
              return f3.set(h2, d2);
            case 3:
              return f3.add(d2);
            default:
              return f3[h2] = d2;
          }
        case "remove":
          switch (l2) {
            case 1:
              return f3.splice(h2, 1);
            case 2:
              return f3.delete(h2);
            case 3:
              return f3.delete(t3.value);
            default:
              return delete f3[h2];
          }
        default:
          n(17, u2);
      }
    }), r2;
  }, R: function(n2, r2, t2, e2) {
    switch (n2.i) {
      case 0:
      case 4:
      case 2:
        return function(n3, r3, t3, e3) {
          var o2 = n3.t, s2 = n3.o;
          i2(n3.D, function(n4, i3) {
            var v2 = a(o2, n4), p2 = a(s2, n4), l2 = i3 ? u(o2, n4) ? "replace" : c2 : "remove";
            if (v2 !== p2 || "replace" !== l2) {
              var d2 = r3.concat(n4);
              t3.push("remove" === l2 ? { op: l2, path: d2 } : { op: l2, path: d2, value: p2 }), e3.push(l2 === c2 ? { op: "remove", path: d2 } : "remove" === l2 ? { op: c2, path: d2, value: f2(v2) } : { op: "replace", path: d2, value: f2(v2) });
            }
          });
        }(n2, r2, t2, e2);
      case 5:
      case 1:
        return function(n3, r3, t3, e3) {
          var i3 = n3.t, o2 = n3.D, u2 = n3.o;
          if (u2.length < i3.length) {
            var a2 = [u2, i3];
            i3 = a2[0], u2 = a2[1];
            var s2 = [e3, t3];
            t3 = s2[0], e3 = s2[1];
          }
          for (var v2 = 0; v2 < i3.length; v2++)
            if (o2[v2] && u2[v2] !== i3[v2]) {
              var p2 = r3.concat([v2]);
              t3.push({ op: "replace", path: p2, value: f2(u2[v2]) }), e3.push({ op: "replace", path: p2, value: f2(i3[v2]) });
            }
          for (var l2 = i3.length; l2 < u2.length; l2++) {
            var d2 = r3.concat([l2]);
            t3.push({ op: c2, path: d2, value: f2(u2[l2]) });
          }
          i3.length < u2.length && e3.push({ op: "replace", path: r3.concat(["length"]), value: i3.length });
        }(n2, r2, t2, e2);
      case 3:
        return function(n3, r3, t3, e3) {
          var i3 = n3.t, o2 = n3.o, u2 = 0;
          i3.forEach(function(n4) {
            if (!o2.has(n4)) {
              var i4 = r3.concat([u2]);
              t3.push({ op: "remove", path: i4, value: n4 }), e3.unshift({ op: c2, path: i4, value: n4 });
            }
            u2++;
          }), u2 = 0, o2.forEach(function(n4) {
            if (!i3.has(n4)) {
              var o3 = r3.concat([u2]);
              t3.push({ op: c2, path: o3, value: n4 }), e3.unshift({ op: "remove", path: o3, value: n4 });
            }
            u2++;
          });
        }(n2, r2, t2, e2);
    }
  }, M: function(n2, r2, t2, e2) {
    t2.push({ op: "replace", path: [], value: r2 === H ? void 0 : r2 }), e2.push({ op: "replace", path: [], value: n2 });
  } });
}
function C() {
  function r2(n2, r3) {
    function t2() {
      this.constructor = n2;
    }
    a2(n2, r3), n2.prototype = (t2.prototype = r3.prototype, new t2());
  }
  function e(n2) {
    n2.o || (n2.D = /* @__PURE__ */ new Map(), n2.o = new Map(n2.t));
  }
  function o2(n2) {
    n2.o || (n2.o = /* @__PURE__ */ new Set(), n2.t.forEach(function(r3) {
      if (t(r3)) {
        var e2 = R(n2.A.h, r3, n2);
        n2.p.set(r3, e2), n2.o.add(e2);
      } else
        n2.o.add(r3);
    }));
  }
  function u2(r3) {
    r3.O && n(3, JSON.stringify(p(r3)));
  }
  var a2 = function(n2, r3) {
    return (a2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(n3, r4) {
      n3.__proto__ = r4;
    } || function(n3, r4) {
      for (var t2 in r4)
        r4.hasOwnProperty(t2) && (n3[t2] = r4[t2]);
    })(n2, r3);
  }, f2 = function() {
    function n2(n3, r3) {
      return this[Q] = { i: 2, l: r3, A: r3 ? r3.A : _(), P: false, I: false, o: void 0, D: void 0, t: n3, k: this, C: false, O: false }, this;
    }
    r2(n2, Map);
    var o3 = n2.prototype;
    return Object.defineProperty(o3, "size", { get: function() {
      return p(this[Q]).size;
    } }), o3.has = function(n3) {
      return p(this[Q]).has(n3);
    }, o3.set = function(n3, r3) {
      var t2 = this[Q];
      return u2(t2), p(t2).has(n3) && p(t2).get(n3) === r3 || (e(t2), k(t2), t2.D.set(n3, true), t2.o.set(n3, r3), t2.D.set(n3, true)), this;
    }, o3.delete = function(n3) {
      if (!this.has(n3))
        return false;
      var r3 = this[Q];
      return u2(r3), e(r3), k(r3), r3.t.has(n3) ? r3.D.set(n3, false) : r3.D.delete(n3), r3.o.delete(n3), true;
    }, o3.clear = function() {
      var n3 = this[Q];
      u2(n3), p(n3).size && (e(n3), k(n3), n3.D = /* @__PURE__ */ new Map(), i2(n3.t, function(r3) {
        n3.D.set(r3, false);
      }), n3.o.clear());
    }, o3.forEach = function(n3, r3) {
      var t2 = this;
      p(this[Q]).forEach(function(e2, i3) {
        n3.call(r3, t2.get(i3), i3, t2);
      });
    }, o3.get = function(n3) {
      var r3 = this[Q];
      u2(r3);
      var i3 = p(r3).get(n3);
      if (r3.I || !t(i3))
        return i3;
      if (i3 !== r3.t.get(n3))
        return i3;
      var o4 = R(r3.A.h, i3, r3);
      return e(r3), r3.o.set(n3, o4), o4;
    }, o3.keys = function() {
      return p(this[Q]).keys();
    }, o3.values = function() {
      var n3, r3 = this, t2 = this.keys();
      return (n3 = {})[V] = function() {
        return r3.values();
      }, n3.next = function() {
        var n4 = t2.next();
        return n4.done ? n4 : { done: false, value: r3.get(n4.value) };
      }, n3;
    }, o3.entries = function() {
      var n3, r3 = this, t2 = this.keys();
      return (n3 = {})[V] = function() {
        return r3.entries();
      }, n3.next = function() {
        var n4 = t2.next();
        if (n4.done)
          return n4;
        var e2 = r3.get(n4.value);
        return { done: false, value: [n4.value, e2] };
      }, n3;
    }, o3[V] = function() {
      return this.entries();
    }, n2;
  }(), c2 = function() {
    function n2(n3, r3) {
      return this[Q] = { i: 3, l: r3, A: r3 ? r3.A : _(), P: false, I: false, o: void 0, t: n3, k: this, p: /* @__PURE__ */ new Map(), O: false, C: false }, this;
    }
    r2(n2, Set);
    var t2 = n2.prototype;
    return Object.defineProperty(t2, "size", { get: function() {
      return p(this[Q]).size;
    } }), t2.has = function(n3) {
      var r3 = this[Q];
      return u2(r3), r3.o ? !!r3.o.has(n3) || !(!r3.p.has(n3) || !r3.o.has(r3.p.get(n3))) : r3.t.has(n3);
    }, t2.add = function(n3) {
      var r3 = this[Q];
      return u2(r3), this.has(n3) || (o2(r3), k(r3), r3.o.add(n3)), this;
    }, t2.delete = function(n3) {
      if (!this.has(n3))
        return false;
      var r3 = this[Q];
      return u2(r3), o2(r3), k(r3), r3.o.delete(n3) || !!r3.p.has(n3) && r3.o.delete(r3.p.get(n3));
    }, t2.clear = function() {
      var n3 = this[Q];
      u2(n3), p(n3).size && (o2(n3), k(n3), n3.o.clear());
    }, t2.values = function() {
      var n3 = this[Q];
      return u2(n3), o2(n3), n3.o.values();
    }, t2.entries = function() {
      var n3 = this[Q];
      return u2(n3), o2(n3), n3.o.entries();
    }, t2.keys = function() {
      return this.values();
    }, t2[V] = function() {
      return this.values();
    }, t2.forEach = function(n3, r3) {
      for (var t3 = this.values(), e2 = t3.next(); !e2.done; )
        n3.call(r3, e2.value, e2.value, this), e2 = t3.next();
    }, n2;
  }();
  m("MapSet", { N: function(n2, r3) {
    return new f2(n2, r3);
  }, T: function(n2, r3) {
    return new c2(n2, r3);
  } });
}
var G;
var U;
var W = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x");
var X = "undefined" != typeof Map;
var q = "undefined" != typeof Set;
var B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect;
var H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G);
var L = W ? Symbol.for("immer-draftable") : "__$immer_draftable";
var Q = W ? Symbol.for("immer-state") : "__$immer_state";
var V = "undefined" != typeof Symbol && Symbol.iterator || "@@iterator";
var Y = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n2) {
  return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n2;
}, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n2) {
  return "Cannot apply patch, path doesn't resolve: " + n2;
}, 16: 'Sets cannot have "replace" patches.', 17: function(n2) {
  return "Unsupported patch operation: " + n2;
}, 18: function(n2) {
  return "The plugin for '" + n2 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n2 + "()` when initializing your application.";
}, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n2) {
  return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n2 + "'";
}, 22: function(n2) {
  return "'current' expects a draft, got: " + n2;
}, 23: function(n2) {
  return "'original' expects a draft, got: " + n2;
}, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
var Z = "" + Object.prototype.constructor;
var nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function(n2) {
  return Object.getOwnPropertyNames(n2).concat(Object.getOwnPropertySymbols(n2));
} : Object.getOwnPropertyNames;
var rn = Object.getOwnPropertyDescriptors || function(n2) {
  var r2 = {};
  return nn(n2).forEach(function(t2) {
    r2[t2] = Object.getOwnPropertyDescriptor(n2, t2);
  }), r2;
};
var tn = {};
var en = { get: function(n2, r2) {
  if (r2 === Q)
    return n2;
  var e = p(n2);
  if (!u(e, r2))
    return function(n3, r3, t2) {
      var e2, i4 = I(r3, t2);
      return i4 ? "value" in i4 ? i4.value : null === (e2 = i4.get) || void 0 === e2 ? void 0 : e2.call(n3.k) : void 0;
    }(n2, e, r2);
  var i3 = e[r2];
  return n2.I || !t(i3) ? i3 : i3 === z(n2.t, r2) ? (E(n2), n2.o[r2] = R(n2.A.h, i3, n2)) : i3;
}, has: function(n2, r2) {
  return r2 in p(n2);
}, ownKeys: function(n2) {
  return Reflect.ownKeys(p(n2));
}, set: function(n2, r2, t2) {
  var e = I(p(n2), r2);
  if (null == e ? void 0 : e.set)
    return e.set.call(n2.k, t2), true;
  if (!n2.P) {
    var i3 = z(p(n2), r2), o2 = null == i3 ? void 0 : i3[Q];
    if (o2 && o2.t === t2)
      return n2.o[r2] = t2, n2.D[r2] = false, true;
    if (c(t2, i3) && (void 0 !== t2 || u(n2.t, r2)))
      return true;
    E(n2), k(n2);
  }
  return n2.o[r2] === t2 && "number" != typeof t2 && (void 0 !== t2 || r2 in n2.o) || (n2.o[r2] = t2, n2.D[r2] = true, true);
}, deleteProperty: function(n2, r2) {
  return void 0 !== z(n2.t, r2) || r2 in n2.t ? (n2.D[r2] = false, E(n2), k(n2)) : delete n2.D[r2], n2.o && delete n2.o[r2], true;
}, getOwnPropertyDescriptor: function(n2, r2) {
  var t2 = p(n2), e = Reflect.getOwnPropertyDescriptor(t2, r2);
  return e ? { writable: true, configurable: 1 !== n2.i || "length" !== r2, enumerable: e.enumerable, value: t2[r2] } : e;
}, defineProperty: function() {
  n(11);
}, getPrototypeOf: function(n2) {
  return Object.getPrototypeOf(n2.t);
}, setPrototypeOf: function() {
  n(12);
} };
var on = {};
i2(en, function(n2, r2) {
  on[n2] = function() {
    return arguments[0] = arguments[0][0], r2.apply(this, arguments);
  };
}), on.deleteProperty = function(r2, t2) {
  return "production" !== process.env.NODE_ENV && isNaN(parseInt(t2)) && n(13), on.set.call(this, r2, t2, void 0);
}, on.set = function(r2, t2, e) {
  return "production" !== process.env.NODE_ENV && "length" !== t2 && isNaN(parseInt(t2)) && n(14), en.set.call(this, r2[0], t2, e, r2[0]);
};
var un = function() {
  function e(r2) {
    var e2 = this;
    this.g = B, this.F = true, this.produce = function(r3, i4, o2) {
      if ("function" == typeof r3 && "function" != typeof i4) {
        var u2 = i4;
        i4 = r3;
        var a2 = e2;
        return function(n2) {
          var r4 = this;
          void 0 === n2 && (n2 = u2);
          for (var t2 = arguments.length, e3 = Array(t2 > 1 ? t2 - 1 : 0), o3 = 1; o3 < t2; o3++)
            e3[o3 - 1] = arguments[o3];
          return a2.produce(n2, function(n3) {
            var t3;
            return (t3 = i4).call.apply(t3, [r4, n3].concat(e3));
          });
        };
      }
      var f2;
      if ("function" != typeof i4 && n(6), void 0 !== o2 && "function" != typeof o2 && n(7), t(r3)) {
        var c2 = w(e2), s2 = R(e2, r3, void 0), v2 = true;
        try {
          f2 = i4(s2), v2 = false;
        } finally {
          v2 ? O(c2) : g(c2);
        }
        return "undefined" != typeof Promise && f2 instanceof Promise ? f2.then(function(n2) {
          return j(c2, o2), P(n2, c2);
        }, function(n2) {
          throw O(c2), n2;
        }) : (j(c2, o2), P(f2, c2));
      }
      if (!r3 || "object" != typeof r3) {
        if (void 0 === (f2 = i4(r3)) && (f2 = r3), f2 === H && (f2 = void 0), e2.F && d(f2, true), o2) {
          var p2 = [], l2 = [];
          b("Patches").M(r3, f2, p2, l2), o2(p2, l2);
        }
        return f2;
      }
      n(21, r3);
    }, this.produceWithPatches = function(n2, r3) {
      if ("function" == typeof n2)
        return function(r4) {
          for (var t3 = arguments.length, i5 = Array(t3 > 1 ? t3 - 1 : 0), o3 = 1; o3 < t3; o3++)
            i5[o3 - 1] = arguments[o3];
          return e2.produceWithPatches(r4, function(r5) {
            return n2.apply(void 0, [r5].concat(i5));
          });
        };
      var t2, i4, o2 = e2.produce(n2, r3, function(n3, r4) {
        t2 = n3, i4 = r4;
      });
      return "undefined" != typeof Promise && o2 instanceof Promise ? o2.then(function(n3) {
        return [n3, t2, i4];
      }) : [o2, t2, i4];
    }, "boolean" == typeof (null == r2 ? void 0 : r2.useProxies) && this.setUseProxies(r2.useProxies), "boolean" == typeof (null == r2 ? void 0 : r2.autoFreeze) && this.setAutoFreeze(r2.autoFreeze);
  }
  var i3 = e.prototype;
  return i3.createDraft = function(e2) {
    t(e2) || n(8), r(e2) && (e2 = D(e2));
    var i4 = w(this), o2 = R(this, e2, void 0);
    return o2[Q].C = true, g(i4), o2;
  }, i3.finishDraft = function(r2, t2) {
    var e2 = r2 && r2[Q];
    "production" !== process.env.NODE_ENV && (e2 && e2.C || n(9), e2.I && n(10));
    var i4 = e2.A;
    return j(i4, t2), P(void 0, i4);
  }, i3.setAutoFreeze = function(n2) {
    this.F = n2;
  }, i3.setUseProxies = function(r2) {
    r2 && !B && n(20), this.g = r2;
  }, i3.applyPatches = function(n2, t2) {
    var e2;
    for (e2 = t2.length - 1; e2 >= 0; e2--) {
      var i4 = t2[e2];
      if (0 === i4.path.length && "replace" === i4.op) {
        n2 = i4.value;
        break;
      }
    }
    e2 > -1 && (t2 = t2.slice(e2 + 1));
    var o2 = b("Patches").$;
    return r(n2) ? o2(n2, t2) : this.produce(n2, function(n3) {
      return o2(n3, t2);
    });
  }, e;
}();
var an = new un();
var fn = an.produce;
var cn = an.produceWithPatches.bind(an);
var sn = an.setAutoFreeze.bind(an);
var vn = an.setUseProxies.bind(an);
var pn = an.applyPatches.bind(an);
var ln = an.createDraft.bind(an);
var dn = an.finishDraft.bind(an);

// node_modules/.pnpm/schummar-state@0.4.3_n2wpmztpzz52huwour7s2m5zam/node_modules/schummar-state/dist/es/storePersist.js
var import_fast_equals = __toESM(require_fast_equals_cjs(), 1);
function hash(arg2) {
  return JSON.stringify({ arg: arg2 }, (_key, value) => {
    if (value instanceof Object && !(value instanceof Array)) {
      const obj = {};
      for (const key2 of Object.keys(value).sort()) {
        obj[key2] = value[key2];
      }
      return obj;
    }
    return value;
  });
}
var sleep = (ms) => new Promise((r2) => setTimeout(r2, ms));
async function retry(action, retries, delay = 100) {
  try {
    return await action();
  } catch (e) {
    if (retries <= 0)
      throw e;
    await sleep(delay);
    return retry(action, retries - 1, delay * 10);
  }
}
function throttle(fn2, ms) {
  let last = 0;
  let lastArgs;
  let timeout;
  function run2() {
    const args = lastArgs;
    last = Date.now();
    lastArgs = void 0;
    timeout = void 0;
    fn2(...args);
  }
  return function(...args) {
    const now = Date.now();
    lastArgs = args;
    if (timeout)
      ;
    else if (now < last + ms) {
      timeout = setTimeout(run2, last + ms - now);
    } else {
      run2();
    }
  };
}
var RESTART_UPDATE = Symbol("RESTART_UPDATE");
var Store = class {
  constructor(state, options = { log: (...data) => console.error(...data) }) {
    this.state = state;
    this.options = options;
    this.subscriptions = /* @__PURE__ */ new Set();
    this.reactions = /* @__PURE__ */ new Set();
    this.patches = new Array();
    this.inversePatches = new Array();
    this.notifyScheduled = false;
    d(state, true);
    C();
    T();
  }
  getState() {
    return this.state;
  }
  update(update) {
    this.checkLock();
    this.state = fn(this.state, (draft) => update(draft, this.state), (patches, inversePatches) => {
      this.patches.push(...patches);
      this.inversePatches.push(...inversePatches);
    });
    this.notify();
  }
  set(state) {
    this.checkLock();
    this.state = fn(this.state, () => state, (patches, inversePatches) => {
      this.patches.push(...patches);
      this.inversePatches.push(...inversePatches);
    });
    this.notify();
  }
  applyPatches(patches) {
    this.checkLock();
    this.state = pn(this.state, patches);
    this.patches.push(...patches);
    this.notify();
  }
  subscribe(selector, listener, { runNow = true, throttle: throttle$1 = 0 } = {}) {
    const throttledListener = throttle$1 ? throttle(listener, throttle$1) : listener;
    let value = selector(this.state);
    const internalListener = (state, _patches, _inversePatches, init) => {
      try {
        const oldValue = value;
        value = selector(state);
        if (!init && (0, import_fast_equals.circularDeepEqual)(value, oldValue))
          return;
        (init ? listener : throttledListener)(value, oldValue, this.state);
      } catch (e) {
        this.options.log("Failed to execute listener:", e);
      }
    };
    this.subscriptions.add(internalListener);
    if (runNow)
      internalListener(this.state, [], [], true);
    return () => {
      this.subscriptions.delete(internalListener);
    };
  }
  addReaction(selector, reaction, { runNow = true } = {}) {
    let value = selector(this.state);
    const internalListener = (init) => {
      let hasChanged = false;
      try {
        this.lock = "reaction";
        const oldValue = value;
        value = selector(this.state);
        if (!init && (0, import_fast_equals.circularDeepEqual)(value, oldValue))
          return;
        this.state = fn(this.state, (draft) => reaction(value, draft, this.state, oldValue), (patches, inversePatches) => {
          hasChanged = true;
          this.patches.push(...patches);
          this.inversePatches.push(...inversePatches);
        });
      } catch (e) {
        this.options.log("Failed to execute reaction:", e);
      } finally {
        delete this.lock;
      }
      if (hasChanged && !init)
        throw RESTART_UPDATE;
      if (hasChanged && init)
        this.notify();
    };
    this.reactions.add(internalListener);
    if (runNow)
      internalListener(true);
    return () => {
      this.reactions.delete(internalListener);
    };
  }
  subscribePatches(listener) {
    const internalListener = (_state, patches, inversePatches) => {
      try {
        listener(patches, inversePatches);
      } catch (e) {
        this.options.log("Failed to execute patch listener:", e);
      }
    };
    this.subscriptions.add(internalListener);
    return () => {
      this.subscriptions.delete(internalListener);
    };
  }
  checkLock() {
    if (this.lock === "reaction") {
      throw Error("You cannot call update from within a reaction. Use the passed draft instead.");
    }
  }
  notify() {
    try {
      for (const reaction of this.reactions) {
        reaction();
      }
    } catch (e) {
      return this.notify();
    }
    if (this.notifyScheduled)
      return;
    this.notifyScheduled = true;
    (async () => {
      await Promise.resolve();
      this.notifyScheduled = false;
      const patches = this.patches;
      const inversePatches = this.inversePatches;
      this.patches = [];
      this.inversePatches = [];
      for (const subscription of this.subscriptions) {
        subscription(this.state, patches, inversePatches);
      }
    })();
  }
};
var _Action = class {
  constructor(action, options = {}) {
    this.action = action;
    this.options = options;
    this.cache = new Store(/* @__PURE__ */ new Map());
    _Action.allActions.push(this);
    C();
  }
  static clearCacheAll() {
    for (const action of _Action.allActions) {
      action.clearCacheAll();
    }
  }
  getCache(arg2) {
    const key2 = hash(arg2);
    return this.cache.getState().get(key2);
  }
  getCacheValue(arg2) {
    var _a2;
    const instance = this.getCache(arg2);
    return ((_a2 = instance == null ? void 0 : instance.current) == null ? void 0 : _a2.kind) === "value" ? instance.current.value : void 0;
  }
  getCacheError(arg2) {
    var _a2;
    const instance = this.getCache(arg2);
    return ((_a2 = instance == null ? void 0 : instance.current) == null ? void 0 : _a2.kind) === "error" ? instance.current.error : void 0;
  }
  setCache(arg2, value) {
    this.updateInstance(arg2, (instance) => {
      instance.current = { kind: "value", value, t: new Date() };
      delete instance.inProgress;
      instance.invalid = false;
    });
    this.setTimers(arg2);
  }
  updateCache(arg2, update) {
    let found = false;
    this.updateInstance(arg2, (instance) => {
      var _a2;
      if (((_a2 = instance.current) == null ? void 0 : _a2.kind) === "value") {
        update(instance.current.value);
        instance.invalid = false;
        found = true;
      }
    });
    if (found) {
      this.setTimers(arg2);
    }
    return found;
  }
  updateCacheAll(update) {
    var _a2;
    this.cache.update((state) => {
      var _a22;
      for (const instance of state.values()) {
        if (((_a22 = instance.current) == null ? void 0 : _a22.kind) === "value") {
          update(instance.current.value, instance.arg);
          instance.invalid = false;
        }
      }
    });
    for (const instance of this.cache.getState().values()) {
      if (((_a2 = instance.current) == null ? void 0 : _a2.kind) === "value") {
        this.setTimers(instance.arg);
      }
    }
  }
  clearCache(arg2) {
    const key2 = hash(arg2);
    this.cache.update((state) => {
      const instance = state.get(key2);
      if (instance == null ? void 0 : instance.invalidateTimer) {
        clearTimeout(instance.invalidateTimer);
      }
      if (instance == null ? void 0 : instance.clearTimer) {
        clearTimeout(instance.clearTimer);
      }
      state.delete(key2);
    });
  }
  clearCacheAll() {
    for (const { arg: arg2 } of this.cache.getState().values()) {
      this.clearCache(arg2);
    }
  }
  invalidateCache(arg2) {
    const key2 = hash(arg2);
    this.cache.update((state) => {
      const instance = state.get(key2);
      if (instance) {
        delete instance.inProgress;
        instance.invalid = true;
      }
      if (instance == null ? void 0 : instance.invalidateTimer) {
        clearTimeout(instance.invalidateTimer);
        delete instance.invalidateTimer;
      }
    });
  }
  invalidateCacheAll() {
    for (const { arg: arg2 } of this.cache.getState().values()) {
      this.invalidateCache(arg2);
    }
  }
  async get(arg2, { clearBeforeUpdate = false, retries = 0 } = {}) {
    const key2 = hash(arg2);
    const fromCache = this.cache.getState().get(key2);
    if ((fromCache == null ? void 0 : fromCache.current) && !fromCache.invalid) {
      if (fromCache.current.kind === "value")
        return fromCache.current.value;
      else
        throw fromCache.current.error;
    }
    if (fromCache == null ? void 0 : fromCache.inProgress) {
      return fromCache.inProgress;
    }
    return this.execute(arg2, { clearBeforeUpdate, retries });
  }
  async execute(arg2, { clearBeforeUpdate = false, retries = 0 } = {}) {
    var _a2, _b;
    const key2 = hash(arg2);
    const task2 = retry(() => this.action(arg2), retries);
    this.updateInstance(arg2, (instance) => {
      if (clearBeforeUpdate)
        delete instance.current;
      instance.inProgress = task2;
    });
    try {
      const value = await task2;
      if (task2 === ((_a2 = this.cache.getState().get(key2)) == null ? void 0 : _a2.inProgress)) {
        this.setCache(arg2, value);
      }
      return value;
    } catch (e) {
      if (task2 === ((_b = this.cache.getState().get(key2)) == null ? void 0 : _b.inProgress)) {
        this.updateInstance(arg2, (instance) => {
          instance.current = { kind: "error", error: e, t: new Date() };
          delete instance.inProgress;
          instance.invalid = false;
        });
        this.setTimers(arg2);
      }
      throw e;
    }
  }
  setTimers(arg2) {
    var _a2, _b, _c, _d;
    const instance = this.updateInstance(arg2, (instance2) => {
      if (instance2.invalidateTimer) {
        clearTimeout(instance2.invalidateTimer);
        delete instance2.invalidateTimer;
      }
      if (instance2.clearTimer) {
        clearTimeout(instance2.clearTimer);
        delete instance2.clearTimer;
      }
    });
    let { invalidateAfter = _Action.options.invalidateAfter, clearAfter = _Action.options.clearAfter } = this.options;
    if (invalidateAfter instanceof Function) {
      invalidateAfter = invalidateAfter(((_a2 = instance.current) == null ? void 0 : _a2.kind) === "value" ? instance.current.value : void 0, ((_b = instance.current) == null ? void 0 : _b.kind) === "error" ? instance.current.error : void 0);
    }
    if (clearAfter instanceof Function) {
      clearAfter = clearAfter(((_c = instance.current) == null ? void 0 : _c.kind) === "value" ? instance.current.value : void 0, ((_d = instance.current) == null ? void 0 : _d.kind) === "error" ? instance.current.error : void 0);
    }
    let invalidateTimer, clearTimer;
    if (invalidateAfter !== void 0 && invalidateAfter !== Infinity) {
      invalidateTimer = setTimeout(() => {
        this.invalidateCache(arg2);
      }, invalidateAfter);
    }
    if (clearAfter !== void 0 && clearAfter !== Infinity) {
      clearTimer = setTimeout(() => {
        this.clearCache(arg2);
      }, clearAfter);
    }
    this.updateInstance(arg2, (instance2) => {
      instance2.invalidateTimer = invalidateTimer;
      instance2.clearTimer = clearTimer;
    });
  }
  subscribe(arg2, listener, { runNow, throttle: throttle2 } = {}) {
    const key2 = hash(arg2);
    return this.cache.subscribe((state) => {
      var _a2;
      return (_a2 = state.get(key2)) != null ? _a2 : { arg: arg2 };
    }, (instance) => {
      var _a2, _b;
      return listener(((_a2 = instance.current) == null ? void 0 : _a2.kind) === "value" ? instance.current.value : void 0, {
        error: ((_b = instance.current) == null ? void 0 : _b.kind) === "error" ? instance.current.error : void 0,
        isLoading: !!instance.inProgress
      }, instance);
    }, { runNow, throttle: throttle2 });
  }
  updateInstance(arg2, update) {
    const key2 = hash(arg2);
    this.cache.update((state) => {
      let instance = state.get(key2);
      if (!instance) {
        instance = { arg: arg2 };
        state.set(key2, instance);
      }
      update(instance);
    });
    return this.cache.getState().get(key2);
  }
};
var Action = _Action;
Action.allActions = new Array();
Action.options = {};

// node_modules/.pnpm/schummar-state@0.4.3_n2wpmztpzz52huwour7s2m5zam/node_modules/schummar-state/dist/es/react.js
var import_react = __toESM(require_react(), 1);
function createSelector(stringSelector) {
  const parts = stringSelector.split(".");
  return (state) => parts.reduce((v2, p2) => v2 instanceof Object && p2 in v2 ? v2[p2] : void 0, state);
}
function setWithSelector(state, stringSelector, value) {
  const parts = stringSelector.split(".");
  const prefix2 = parts.slice(0, -1);
  const last = parts[parts.length - 1];
  for (const part of prefix2) {
    if (state instanceof Object && part in state) {
      state = state[part];
    } else {
      throw Error(`Could not set ${stringSelector} because path ${stringSelector} doesn't exist`);
    }
  }
  if (state instanceof Object) {
    state[last] = value;
  } else {
    throw Error(`Could not set ${stringSelector} because path ${stringSelector} doesn't exist`);
  }
}
function useStoreState(store, ...args) {
  var _a2, _b, _c, _d;
  let selector, deps, options;
  if (args[0] instanceof Function) {
    selector = args[0];
    deps = (_a2 = args[1]) != null ? _a2 : [];
    options = (_b = args[2]) != null ? _b : {};
  } else if (typeof args[0] === "string") {
    selector = createSelector(args[0]);
    deps = [args[0]];
    options = (_c = args[1]) != null ? _c : {};
  } else {
    selector = (x2) => x2;
    deps = [];
    options = (_d = args[0]) != null ? _d : {};
  }
  const [counter, setCounter] = (0, import_react.useState)(0);
  const value = (0, import_react.useMemo)(() => selector(store.getState()), [store, counter, ...deps]);
  (0, import_react.useEffect)(() => store.subscribe(selector, () => setCounter((c2) => c2 + 1), { runNow: true, throttle: options.throttle }), [store, ...deps]);
  return value;
}
function useStoreProp(store, selector) {
  const value = useStoreState(store, selector);
  const update = (value2) => store.update((state) => setWithSelector(state, selector, value2));
  return [value, update];
}
var Store2 = class extends Store {
  useState(...args) {
    return useStoreState(this, ...args);
  }
  useProp(selector) {
    return useStoreProp(this, selector);
  }
};

// src/components/spinner.tsx
var import_ink = __toESM(require_build2());
var import_react2 = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var frames = ["\u280B", "\u2819", "\u2839", "\u2838", "\u283C", "\u2834", "\u2826", "\u2827", "\u2807", "\u280F"];
function Spinner(props) {
  const [index, setIndex] = (0, import_react2.useState)(0);
  (0, import_react2.useEffect)(() => {
    const interval = setInterval(() => {
      setIndex((index2) => (index2 + 1) % frames.length);
    }, 80);
    return () => clearInterval(interval);
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink.Text, {
    ...props,
    children: frames[index]
  });
}

// src/components/taskListEntry.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
function TaskListEntry({ command: { keepOutput, forever }, name, state }) {
  const status = useStoreState(state, (x2) => x2.status);
  const time = useStoreState(state, (x2) => x2.time);
  const shortOutput = useStoreState(state, (x2) => x2.shortOutput);
  const subTasks = useStoreState(state, (x2) => x2.subTasks);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_ink2.Box, {
    flexDirection: "column",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_ink2.Box, {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink2.Box, {
            children: status === "pending" ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink2.Text, {
              children: "\u21B3"
            }) : status === "inProgress" && forever ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink2.Text, {
              color: "green",
              children: "\u25B6"
            }) : status === "inProgress" ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Spinner, {
              color: "yellow"
            }) : status === "done" ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink2.Text, {
              color: "green",
              children: "\u2714"
            }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink2.Text, {
              color: "red",
              children: "\u2716"
            })
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink2.Box, {
            marginLeft: 1,
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink2.Text, {
              children: name
            })
          }),
          time !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink2.Box, {
            marginLeft: 1,
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_ink2.Text, {
              color: "gray",
              children: [
                "[",
                (time / 1e3).toFixed(3),
                "s]"
              ]
            })
          })
        ]
      }),
      (status === "error" || status === "inProgress" || keepOutput) && shortOutput.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink2.Box, {
        marginLeft: 2,
        paddingX: 2,
        paddingY: 1,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink2.Text, {
          children: shortOutput
        })
      }),
      subTasks?.map((task2, index) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink2.Box, {
        marginLeft: 2,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TaskListEntry, {
          ...task2
        })
      }, index))
    ]
  });
}

// src/components/taskList.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
function TaskList({ tasks }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ink3.Box, {
    flexDirection: "column",
    children: tasks.map((task2, index) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TaskListEntry, {
      ...task2
    }, index))
  });
}
function renderTaskList(tasks) {
  (0, import_ink3.render)(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(TaskList, {
    tasks
  }));
}

// src/task.ts
import { spawn } from "child_process";

// src/util.ts
import { readFile, stat } from "fs/promises";
function renderOutput(cmd, lines, outputLength = Infinity) {
  const cols = process.stdout.columns - 8;
  const last = lines.split("\n").slice(-outputLength).flatMap((line) => {
    const chunks = [];
    while (line.length > cols) {
      chunks.push(line.slice(0, cols));
      line = `  ${line.slice(cols)}`;
    }
    chunks.push(line);
    return chunks;
  });
  return `> ${cmd}

${last.slice(-outputLength).join("\n")}`.trim();
}
function abbrev(s2) {
  const cols = process.stdout.columns - 20;
  if (s2.length > cols) {
    return s2.slice(0, cols - 3).concat("...");
  }
  return s2;
}
function formatTime(ms) {
  return `${(ms / 1e3).toFixed(3)}s`;
}
async function loadScripts() {
  let json;
  try {
    json = await readFile("package.json", "utf-8");
  } catch {
    return [];
  }
  try {
    const pkg = JSON.parse(json);
    return Object.keys(pkg.scripts ?? {});
  } catch (e) {
    console.error("Failed to read package.json:", e);
    return [];
  }
}
async function whichNpmRunner() {
  try {
    await stat("yarn.lock");
    return "yarn";
  } catch {
  }
  try {
    await stat("pnpm-lock.yaml");
    return "pnpm";
  } catch {
  }
  return "npm";
}
function indent(s2) {
  return s2.replace(/\n([^\n])/g, "\n    $1");
}

// src/task.ts
function task(command, allTasks) {
  const { name, cmd, args = [], cwd, outputLength, dependsOn } = command;
  const fullCmd = [cmd, ...args].join(" ");
  const state = new Store2({
    status: "pending",
    output: "",
    shortOutput: ""
  });
  const result = new Promise((resolve, reject) => {
    const cancel = state.subscribe(
      (x2) => x2.status,
      (status) => {
        if (status === "done") {
          resolve();
          setTimeout(() => cancel());
        } else if (status === "error") {
          reject(state.getState().shortOutput);
          setTimeout(() => cancel());
        }
      }
    );
  });
  result.catch(() => void 0);
  (async () => {
    await Promise.resolve();
    const dependencies = allTasks().filter(
      (j2) => dependsOn !== void 0 && j2.command.id !== void 0 && (Array.isArray(dependsOn) ? dependsOn.includes(j2.command.id) : dependsOn === j2.command.id)
    );
    try {
      await Promise.all(dependencies.map((j2) => j2.result));
    } catch {
      return;
    }
    const start = performance.now();
    state.update((state2) => {
      state2.status = "inProgress";
    });
    const isTTY = process.stdout.isTTY || process.env.RUNP_TTY;
    const subProcess = spawn(cmd, args, {
      stdio: "pipe",
      cwd,
      env: {
        ...process.env,
        FORCE_COLOR: isTTY ? "1" : void 0,
        RUNP_TTY: isTTY ? RUNP_TASK_V : void 0
      }
    });
    const append = (data) => {
      const asString = data.toString();
      state.update((state2) => {
        if (asString.startsWith(RUNP_TASK_DELEGATE)) {
          const commands = JSON.parse(asString.slice(RUNP_TASK_DELEGATE.length));
          const tasks = commands.map((command2) => task(command2, () => tasks));
          state2.subTasks = tasks;
        } else {
          state2.output += data.toString();
        }
      });
      updateShortOutput();
    };
    subProcess.stdout.on("data", append);
    subProcess.stderr.on("data", append);
    const updateShortOutput = () => state.update((state2) => {
      state2.shortOutput = renderOutput(fullCmd, state2.output, outputLength);
    });
    process.stdout.on("resize", updateShortOutput);
    subProcess.on("close", async (code) => {
      const { subTasks } = state.getState();
      let hasErrors = !!code;
      if (subTasks) {
        const errors = await Promise.all(subTasks.map((task2) => task2.result.catch(() => true)));
        hasErrors = errors.some(Boolean);
      }
      state.update((state2) => {
        state2.status = hasErrors ? "error" : "done";
        state2.time = performance.now() - start;
        if (hasErrors) {
          state2.shortOutput = renderOutput(fullCmd, state2.output);
        }
      });
    });
    subProcess.on(
      "error",
      (e) => state.update((state2) => {
        state2.output = String(e);
      })
    );
  })();
  return {
    command,
    name: (name ?? abbrev(fullCmd)) + (cwd ? ` (${cwd})` : ""),
    state,
    result
  };
}

// src/index.ts
var DEFAULT_OUTPUT_LENGTH = 10;
var RUNP_TASK_V = "v1";
var RUNP_TASK_DELEGATE = `__runp_task__${RUNP_TASK_V}`;
async function runp(options) {
  const npmScripts = await loadScripts();
  const npmRunner = await whichNpmRunner();
  let serial = false, forever = false, index = 0, deps = new Array();
  const resolvedCommands = options.commands.flatMap((command) => {
    if (!command) {
      return [];
    }
    if (typeof command === "string" && command.match(/^:[spf]+$/)) {
      if (command.includes("s")) {
        serial = true;
        deps = Array.from(Array(index).keys());
      }
      if (command.includes("p")) {
        serial = false;
        deps = Array.from(Array(index).keys());
      }
      if (command.includes("f")) {
        forever = true;
      }
      return [];
    }
    if (typeof command === "string") {
      const [cmd = "", ...args] = splitSpacesExcludeQuotes(command);
      command = { cmd, args };
    }
    if (Array.isArray(command)) {
      command = { cmd: command[0], args: command.slice(1) };
    }
    const cleanCommand = {
      ...command,
      args: command.args?.filter((x2) => typeof x2 === "string"),
      id: command.id ?? index,
      dependsOn: command.dependsOn ?? [...deps],
      outputLength: command.outputLength ?? options.outputLength ?? DEFAULT_OUTPUT_LENGTH,
      keepOutput: command.keepOutput ?? options.keepOutput,
      forever: command.forever ?? forever ?? options.forever,
      flattenNpmScripts: command.flattenNpmScripts ?? options.flattenNpmScripts ?? true
    };
    index++;
    if (serial) {
      deps.push(cleanCommand.id);
    }
    const matchingNpmScripts = multimatch(npmScripts, command.cmd);
    if (matchingNpmScripts.length > 0) {
      return matchingNpmScripts.map((script) => ({
        ...cleanCommand,
        cmd: npmRunner,
        args: ["run", script].concat(cleanCommand.args?.length ? ["--", ...cleanCommand.args] : [])
      }));
    }
    return cleanCommand;
  });
  if (process.env.RUNP_TTY === RUNP_TASK_V) {
    console.log(`${RUNP_TASK_DELEGATE}${JSON.stringify(resolvedCommands)}`);
    process.exit();
  }
  const tasks = resolvedCommands.map((cmd) => task(cmd, () => tasks));
  if (process.stdout.isTTY) {
    renderTTY(tasks);
  } else {
    await renderNonTTY(tasks);
  }
  const errors = await Promise.all(tasks.map((task2) => task2.result.catch(() => true)));
  const hasErrors = errors.some(Boolean);
  setTimeout(() => {
    process.exit(hasErrors ? 1 : 0);
  });
}
function renderTTY(tasks) {
  renderTaskList(tasks);
}
async function renderNonTTY(tasks) {
  for (const {
    command: { keepOutput },
    name,
    result,
    state
  } of tasks) {
    try {
      await result;
      console.log(`\u2714 ${name} [${formatTime(state.getState().time ?? 0)}]
`);
      if (keepOutput) {
        console.log(indent(state.getState().output));
      }
    } catch (e) {
      console.log(`\u2716 ${name} [${formatTime(state.getState().time ?? 0)}]`);
      console.log(indent(e.toString()));
    }
  }
}

export {
  DEFAULT_OUTPUT_LENGTH,
  RUNP_TASK_V,
  RUNP_TASK_DELEGATE,
  runp
};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! promise-polyfill 2.0.1 */
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
/**
 * @license React
 * react-debug-tools.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.26.2
 * react-reconciler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.26.2
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
